ARM GAS  /tmp/ccbXllTZ.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"bsp_driver_sd.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.BSP_SD_ITConfig,"ax",%progbits
  17              		.align	1
  18              		.weak	BSP_SD_ITConfig
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	BSP_SD_ITConfig:
  25              	.LFB142:
  26              		.file 1 "FATFS/Target/bsp_driver_sd.c"
   1:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN Header */
   2:FATFS/Target/bsp_driver_sd.c **** /**
   3:FATFS/Target/bsp_driver_sd.c ****  ******************************************************************************
   4:FATFS/Target/bsp_driver_sd.c ****  * @file    bsp_driver_sd.c for H7 (based on stm32h743i_eval_sd.c)
   5:FATFS/Target/bsp_driver_sd.c ****  * @brief   This file includes a generic uSD card driver.
   6:FATFS/Target/bsp_driver_sd.c ****  *          To be completed by the user according to the board used for the project.
   7:FATFS/Target/bsp_driver_sd.c ****  * @note    Some functions generated as weak: they can be overridden by
   8:FATFS/Target/bsp_driver_sd.c ****  *          - code in user files
   9:FATFS/Target/bsp_driver_sd.c ****  *          - or BSP code from the FW pack files
  10:FATFS/Target/bsp_driver_sd.c ****  *          if such files are added to the generated project (by the user).
  11:FATFS/Target/bsp_driver_sd.c ****  ******************************************************************************
  12:FATFS/Target/bsp_driver_sd.c ****   * @attention
  13:FATFS/Target/bsp_driver_sd.c ****   *
  14:FATFS/Target/bsp_driver_sd.c ****   * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  15:FATFS/Target/bsp_driver_sd.c ****   * All rights reserved.</center></h2>
  16:FATFS/Target/bsp_driver_sd.c ****   *
  17:FATFS/Target/bsp_driver_sd.c ****   * This software component is licensed by ST under Ultimate Liberty license
  18:FATFS/Target/bsp_driver_sd.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  19:FATFS/Target/bsp_driver_sd.c ****   * the License. You may obtain a copy of the License at:
  20:FATFS/Target/bsp_driver_sd.c ****   *                             www.st.com/SLA0044
  21:FATFS/Target/bsp_driver_sd.c ****   *
  22:FATFS/Target/bsp_driver_sd.c ****  ******************************************************************************
  23:FATFS/Target/bsp_driver_sd.c ****  */
  24:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END Header */
  25:FATFS/Target/bsp_driver_sd.c **** 
  26:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN FirstSection */
  27:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify / undefine following code or add new definitions */
  28:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END FirstSection */
  29:FATFS/Target/bsp_driver_sd.c **** /* Includes ------------------------------------------------------------------*/
  30:FATFS/Target/bsp_driver_sd.c **** #include "bsp_driver_sd.h"
  31:FATFS/Target/bsp_driver_sd.c **** 
  32:FATFS/Target/bsp_driver_sd.c **** /* Extern variables ---------------------------------------------------------*/
ARM GAS  /tmp/ccbXllTZ.s 			page 2


  33:FATFS/Target/bsp_driver_sd.c **** 
  34:FATFS/Target/bsp_driver_sd.c **** extern SD_HandleTypeDef hsd1;
  35:FATFS/Target/bsp_driver_sd.c **** 
  36:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeInitSection */
  37:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify / undefine following code or add code */
  38:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeInitSection */
  39:FATFS/Target/bsp_driver_sd.c **** /**
  40:FATFS/Target/bsp_driver_sd.c ****   * @brief  Initializes the SD card device.
  41:FATFS/Target/bsp_driver_sd.c ****   * @retval SD status
  42:FATFS/Target/bsp_driver_sd.c ****   */
  43:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_Init(void)
  44:FATFS/Target/bsp_driver_sd.c **** {
  45:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  46:FATFS/Target/bsp_driver_sd.c ****   /* Check if the SD card is plugged in the slot */
  47:FATFS/Target/bsp_driver_sd.c ****   if (BSP_SD_IsDetected() != SD_PRESENT)
  48:FATFS/Target/bsp_driver_sd.c ****   {
  49:FATFS/Target/bsp_driver_sd.c ****     return MSD_ERROR_SD_NOT_PRESENT;
  50:FATFS/Target/bsp_driver_sd.c ****   }
  51:FATFS/Target/bsp_driver_sd.c ****   /* HAL SD initialization */
  52:FATFS/Target/bsp_driver_sd.c ****   sd_state = HAL_SD_Init(&hsd1);
  53:FATFS/Target/bsp_driver_sd.c ****   /* Configure SD Bus width (4 bits mode selected) */
  54:FATFS/Target/bsp_driver_sd.c ****   if (sd_state == MSD_OK)
  55:FATFS/Target/bsp_driver_sd.c ****   {
  56:FATFS/Target/bsp_driver_sd.c ****     /* Enable wide operation */
  57:FATFS/Target/bsp_driver_sd.c ****     if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
  58:FATFS/Target/bsp_driver_sd.c ****     {
  59:FATFS/Target/bsp_driver_sd.c ****       sd_state = MSD_ERROR;
  60:FATFS/Target/bsp_driver_sd.c ****     }
  61:FATFS/Target/bsp_driver_sd.c ****   }
  62:FATFS/Target/bsp_driver_sd.c **** 
  63:FATFS/Target/bsp_driver_sd.c ****   return sd_state;
  64:FATFS/Target/bsp_driver_sd.c **** }
  65:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN AfterInitSection */
  66:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  67:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END AfterInitSection */
  68:FATFS/Target/bsp_driver_sd.c **** 
  69:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN InterruptMode */
  70:FATFS/Target/bsp_driver_sd.c **** /**
  71:FATFS/Target/bsp_driver_sd.c ****   * @brief  Configures Interrupt mode for SD detection pin.
  72:FATFS/Target/bsp_driver_sd.c ****   * @retval Returns 0
  73:FATFS/Target/bsp_driver_sd.c ****   */
  74:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_ITConfig(void)
  75:FATFS/Target/bsp_driver_sd.c **** {
  27              		.loc 1 75 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  76:FATFS/Target/bsp_driver_sd.c ****   /* Code to be updated by the user or replaced by one from the FW pack (in a stmxxxx_sd.c file) */
  77:FATFS/Target/bsp_driver_sd.c **** 
  78:FATFS/Target/bsp_driver_sd.c ****   return (uint8_t)0;
  79:FATFS/Target/bsp_driver_sd.c **** }
  32              		.loc 1 79 0
  33 0000 0020     		movs	r0, #0
  34 0002 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE142:
ARM GAS  /tmp/ccbXllTZ.s 			page 3


  38              		.section	.text.BSP_SD_ReadBlocks,"ax",%progbits
  39              		.align	1
  40              		.weak	BSP_SD_ReadBlocks
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv5-d16
  46              	BSP_SD_ReadBlocks:
  47              	.LFB143:
  80:FATFS/Target/bsp_driver_sd.c **** 
  81:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END InterruptMode */
  82:FATFS/Target/bsp_driver_sd.c **** 
  83:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeReadBlocksSection */
  84:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
  85:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeReadBlocksSection */
  86:FATFS/Target/bsp_driver_sd.c **** /**
  87:FATFS/Target/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in polling mode.
  88:FATFS/Target/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
  89:FATFS/Target/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read
  90:FATFS/Target/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
  91:FATFS/Target/bsp_driver_sd.c ****   * @param  Timeout: Timeout for read operation
  92:FATFS/Target/bsp_driver_sd.c ****   * @retval SD status
  93:FATFS/Target/bsp_driver_sd.c ****   */
  94:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t
  95:FATFS/Target/bsp_driver_sd.c **** {
  48              		.loc 1 95 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              	.LVL0:
  53 0000 00B5     		push	{lr}
  54              	.LCFI0:
  55              		.cfi_def_cfa_offset 4
  56              		.cfi_offset 14, -4
  57 0002 83B0     		sub	sp, sp, #12
  58              	.LCFI1:
  59              		.cfi_def_cfa_offset 16
  60              	.LVL1:
  96:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
  97:FATFS/Target/bsp_driver_sd.c **** 
  98:FATFS/Target/bsp_driver_sd.c ****   if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
  61              		.loc 1 98 0
  62 0004 0093     		str	r3, [sp]
  63 0006 1346     		mov	r3, r2
  64              	.LVL2:
  65 0008 0A46     		mov	r2, r1
  66              	.LVL3:
  67 000a 0146     		mov	r1, r0
  68              	.LVL4:
  69 000c 0348     		ldr	r0, .L6
  70              	.LVL5:
  71 000e FFF7FEFF 		bl	HAL_SD_ReadBlocks
  72              	.LVL6:
  73 0012 00B1     		cbz	r0, .L3
  99:FATFS/Target/bsp_driver_sd.c ****   {
 100:FATFS/Target/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
  74              		.loc 1 100 0
ARM GAS  /tmp/ccbXllTZ.s 			page 4


  75 0014 0120     		movs	r0, #1
  76              	.L3:
  77              	.LVL7:
 101:FATFS/Target/bsp_driver_sd.c ****   }
 102:FATFS/Target/bsp_driver_sd.c **** 
 103:FATFS/Target/bsp_driver_sd.c ****   return sd_state;
 104:FATFS/Target/bsp_driver_sd.c **** }
  78              		.loc 1 104 0
  79 0016 03B0     		add	sp, sp, #12
  80              	.LCFI2:
  81              		.cfi_def_cfa_offset 4
  82              		@ sp needed
  83 0018 5DF804FB 		ldr	pc, [sp], #4
  84              	.L7:
  85              		.align	2
  86              	.L6:
  87 001c 00000000 		.word	hsd1
  88              		.cfi_endproc
  89              	.LFE143:
  91              		.section	.text.BSP_SD_WriteBlocks,"ax",%progbits
  92              		.align	1
  93              		.weak	BSP_SD_WriteBlocks
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv5-d16
  99              	BSP_SD_WriteBlocks:
 100              	.LFB144:
 105:FATFS/Target/bsp_driver_sd.c **** 
 106:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeWriteBlocksSection */
 107:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 108:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeWriteBlocksSection */
 109:FATFS/Target/bsp_driver_sd.c **** /**
 110:FATFS/Target/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in polling mode.
 111:FATFS/Target/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 112:FATFS/Target/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 113:FATFS/Target/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 114:FATFS/Target/bsp_driver_sd.c ****   * @param  Timeout: Timeout for write operation
 115:FATFS/Target/bsp_driver_sd.c ****   * @retval SD status
 116:FATFS/Target/bsp_driver_sd.c ****   */
 117:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32
 118:FATFS/Target/bsp_driver_sd.c **** {
 101              		.loc 1 118 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              	.LVL8:
 106 0000 00B5     		push	{lr}
 107              	.LCFI3:
 108              		.cfi_def_cfa_offset 4
 109              		.cfi_offset 14, -4
 110 0002 83B0     		sub	sp, sp, #12
 111              	.LCFI4:
 112              		.cfi_def_cfa_offset 16
 113              	.LVL9:
 119:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 120:FATFS/Target/bsp_driver_sd.c **** 
ARM GAS  /tmp/ccbXllTZ.s 			page 5


 121:FATFS/Target/bsp_driver_sd.c ****   if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 114              		.loc 1 121 0
 115 0004 0093     		str	r3, [sp]
 116 0006 1346     		mov	r3, r2
 117              	.LVL10:
 118 0008 0A46     		mov	r2, r1
 119              	.LVL11:
 120 000a 0146     		mov	r1, r0
 121              	.LVL12:
 122 000c 0348     		ldr	r0, .L12
 123              	.LVL13:
 124 000e FFF7FEFF 		bl	HAL_SD_WriteBlocks
 125              	.LVL14:
 126 0012 00B1     		cbz	r0, .L9
 122:FATFS/Target/bsp_driver_sd.c ****   {
 123:FATFS/Target/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 127              		.loc 1 123 0
 128 0014 0120     		movs	r0, #1
 129              	.L9:
 130              	.LVL15:
 124:FATFS/Target/bsp_driver_sd.c ****   }
 125:FATFS/Target/bsp_driver_sd.c **** 
 126:FATFS/Target/bsp_driver_sd.c ****   return sd_state;
 127:FATFS/Target/bsp_driver_sd.c **** }
 131              		.loc 1 127 0
 132 0016 03B0     		add	sp, sp, #12
 133              	.LCFI5:
 134              		.cfi_def_cfa_offset 4
 135              		@ sp needed
 136 0018 5DF804FB 		ldr	pc, [sp], #4
 137              	.L13:
 138              		.align	2
 139              	.L12:
 140 001c 00000000 		.word	hsd1
 141              		.cfi_endproc
 142              	.LFE144:
 144              		.section	.text.BSP_SD_ReadBlocks_DMA,"ax",%progbits
 145              		.align	1
 146              		.weak	BSP_SD_ReadBlocks_DMA
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv5-d16
 152              	BSP_SD_ReadBlocks_DMA:
 153              	.LFB145:
 128:FATFS/Target/bsp_driver_sd.c **** 
 129:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeReadDMABlocksSection */
 130:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 131:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeReadDMABlocksSection */
 132:FATFS/Target/bsp_driver_sd.c **** /**
 133:FATFS/Target/bsp_driver_sd.c ****   * @brief  Reads block(s) from a specified address in an SD card, in DMA mode.
 134:FATFS/Target/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 135:FATFS/Target/bsp_driver_sd.c ****   * @param  ReadAddr: Address from where data is to be read
 136:FATFS/Target/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to read
 137:FATFS/Target/bsp_driver_sd.c ****   * @retval SD status
 138:FATFS/Target/bsp_driver_sd.c ****   */
 139:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
ARM GAS  /tmp/ccbXllTZ.s 			page 6


 140:FATFS/Target/bsp_driver_sd.c **** {
 154              		.loc 1 140 0
 155              		.cfi_startproc
 156              		@ args = 0, pretend = 0, frame = 0
 157              		@ frame_needed = 0, uses_anonymous_args = 0
 158              	.LVL16:
 159 0000 08B5     		push	{r3, lr}
 160              	.LCFI6:
 161              		.cfi_def_cfa_offset 8
 162              		.cfi_offset 3, -8
 163              		.cfi_offset 14, -4
 164              	.LVL17:
 141:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 142:FATFS/Target/bsp_driver_sd.c **** 
 143:FATFS/Target/bsp_driver_sd.c ****   /* Read block(s) in DMA transfer mode */
 144:FATFS/Target/bsp_driver_sd.c ****   if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 165              		.loc 1 144 0
 166 0002 1346     		mov	r3, r2
 167 0004 0A46     		mov	r2, r1
 168              	.LVL18:
 169 0006 0146     		mov	r1, r0
 170              	.LVL19:
 171 0008 0248     		ldr	r0, .L18
 172              	.LVL20:
 173 000a FFF7FEFF 		bl	HAL_SD_ReadBlocks_DMA
 174              	.LVL21:
 175 000e 00B1     		cbz	r0, .L15
 145:FATFS/Target/bsp_driver_sd.c ****   {
 146:FATFS/Target/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 176              		.loc 1 146 0
 177 0010 0120     		movs	r0, #1
 178              	.L15:
 179              	.LVL22:
 147:FATFS/Target/bsp_driver_sd.c ****   }
 148:FATFS/Target/bsp_driver_sd.c **** 
 149:FATFS/Target/bsp_driver_sd.c ****   return sd_state;
 150:FATFS/Target/bsp_driver_sd.c **** }
 180              		.loc 1 150 0
 181 0012 08BD     		pop	{r3, pc}
 182              	.L19:
 183              		.align	2
 184              	.L18:
 185 0014 00000000 		.word	hsd1
 186              		.cfi_endproc
 187              	.LFE145:
 189              		.section	.text.BSP_SD_WriteBlocks_DMA,"ax",%progbits
 190              		.align	1
 191              		.weak	BSP_SD_WriteBlocks_DMA
 192              		.syntax unified
 193              		.thumb
 194              		.thumb_func
 195              		.fpu fpv5-d16
 197              	BSP_SD_WriteBlocks_DMA:
 198              	.LFB146:
 151:FATFS/Target/bsp_driver_sd.c **** 
 152:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeWriteDMABlocksSection */
 153:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
ARM GAS  /tmp/ccbXllTZ.s 			page 7


 154:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeWriteDMABlocksSection */
 155:FATFS/Target/bsp_driver_sd.c **** /**
 156:FATFS/Target/bsp_driver_sd.c ****   * @brief  Writes block(s) to a specified address in an SD card, in DMA mode.
 157:FATFS/Target/bsp_driver_sd.c ****   * @param  pData: Pointer to the buffer that will contain the data to transmit
 158:FATFS/Target/bsp_driver_sd.c ****   * @param  WriteAddr: Address from where data is to be written
 159:FATFS/Target/bsp_driver_sd.c ****   * @param  NumOfBlocks: Number of SD blocks to write
 160:FATFS/Target/bsp_driver_sd.c ****   * @retval SD status
 161:FATFS/Target/bsp_driver_sd.c ****   */
 162:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
 163:FATFS/Target/bsp_driver_sd.c **** {
 199              		.loc 1 163 0
 200              		.cfi_startproc
 201              		@ args = 0, pretend = 0, frame = 0
 202              		@ frame_needed = 0, uses_anonymous_args = 0
 203              	.LVL23:
 204 0000 08B5     		push	{r3, lr}
 205              	.LCFI7:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 3, -8
 208              		.cfi_offset 14, -4
 209              	.LVL24:
 164:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 165:FATFS/Target/bsp_driver_sd.c **** 
 166:FATFS/Target/bsp_driver_sd.c ****   /* Write block(s) in DMA transfer mode */
 167:FATFS/Target/bsp_driver_sd.c ****   if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 210              		.loc 1 167 0
 211 0002 1346     		mov	r3, r2
 212 0004 0A46     		mov	r2, r1
 213              	.LVL25:
 214 0006 0146     		mov	r1, r0
 215              	.LVL26:
 216 0008 0248     		ldr	r0, .L24
 217              	.LVL27:
 218 000a FFF7FEFF 		bl	HAL_SD_WriteBlocks_DMA
 219              	.LVL28:
 220 000e 00B1     		cbz	r0, .L21
 168:FATFS/Target/bsp_driver_sd.c ****   {
 169:FATFS/Target/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 221              		.loc 1 169 0
 222 0010 0120     		movs	r0, #1
 223              	.L21:
 224              	.LVL29:
 170:FATFS/Target/bsp_driver_sd.c ****   }
 171:FATFS/Target/bsp_driver_sd.c **** 
 172:FATFS/Target/bsp_driver_sd.c ****   return sd_state;
 173:FATFS/Target/bsp_driver_sd.c **** }
 225              		.loc 1 173 0
 226 0012 08BD     		pop	{r3, pc}
 227              	.L25:
 228              		.align	2
 229              	.L24:
 230 0014 00000000 		.word	hsd1
 231              		.cfi_endproc
 232              	.LFE146:
 234              		.section	.text.BSP_SD_Erase,"ax",%progbits
 235              		.align	1
 236              		.weak	BSP_SD_Erase
ARM GAS  /tmp/ccbXllTZ.s 			page 8


 237              		.syntax unified
 238              		.thumb
 239              		.thumb_func
 240              		.fpu fpv5-d16
 242              	BSP_SD_Erase:
 243              	.LFB147:
 174:FATFS/Target/bsp_driver_sd.c **** 
 175:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeEraseSection */
 176:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 177:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeEraseSection */
 178:FATFS/Target/bsp_driver_sd.c **** /**
 179:FATFS/Target/bsp_driver_sd.c ****   * @brief  Erases the specified memory area of the given SD card.
 180:FATFS/Target/bsp_driver_sd.c ****   * @param  StartAddr: Start byte address
 181:FATFS/Target/bsp_driver_sd.c ****   * @param  EndAddr: End byte address
 182:FATFS/Target/bsp_driver_sd.c ****   * @retval SD status
 183:FATFS/Target/bsp_driver_sd.c ****   */
 184:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_Erase(uint32_t StartAddr, uint32_t EndAddr)
 185:FATFS/Target/bsp_driver_sd.c **** {
 244              		.loc 1 185 0
 245              		.cfi_startproc
 246              		@ args = 0, pretend = 0, frame = 0
 247              		@ frame_needed = 0, uses_anonymous_args = 0
 248              	.LVL30:
 249 0000 08B5     		push	{r3, lr}
 250              	.LCFI8:
 251              		.cfi_def_cfa_offset 8
 252              		.cfi_offset 3, -8
 253              		.cfi_offset 14, -4
 254              	.LVL31:
 186:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 187:FATFS/Target/bsp_driver_sd.c **** 
 188:FATFS/Target/bsp_driver_sd.c ****   if (HAL_SD_Erase(&hsd1, StartAddr, EndAddr) != HAL_OK)
 255              		.loc 1 188 0
 256 0002 0A46     		mov	r2, r1
 257 0004 0146     		mov	r1, r0
 258              	.LVL32:
 259 0006 0348     		ldr	r0, .L30
 260              	.LVL33:
 261 0008 FFF7FEFF 		bl	HAL_SD_Erase
 262              	.LVL34:
 263 000c 00B1     		cbz	r0, .L27
 189:FATFS/Target/bsp_driver_sd.c ****   {
 190:FATFS/Target/bsp_driver_sd.c ****     sd_state = MSD_ERROR;
 264              		.loc 1 190 0
 265 000e 0120     		movs	r0, #1
 266              	.L27:
 267              	.LVL35:
 191:FATFS/Target/bsp_driver_sd.c ****   }
 192:FATFS/Target/bsp_driver_sd.c **** 
 193:FATFS/Target/bsp_driver_sd.c ****   return sd_state;
 194:FATFS/Target/bsp_driver_sd.c **** }
 268              		.loc 1 194 0
 269 0010 08BD     		pop	{r3, pc}
 270              	.L31:
 271 0012 00BF     		.align	2
 272              	.L30:
 273 0014 00000000 		.word	hsd1
ARM GAS  /tmp/ccbXllTZ.s 			page 9


 274              		.cfi_endproc
 275              	.LFE147:
 277              		.section	.text.BSP_SD_GetCardState,"ax",%progbits
 278              		.align	1
 279              		.weak	BSP_SD_GetCardState
 280              		.syntax unified
 281              		.thumb
 282              		.thumb_func
 283              		.fpu fpv5-d16
 285              	BSP_SD_GetCardState:
 286              	.LFB148:
 195:FATFS/Target/bsp_driver_sd.c **** 
 196:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeGetCardStateSection */
 197:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 198:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeGetCardStateSection */
 199:FATFS/Target/bsp_driver_sd.c **** 
 200:FATFS/Target/bsp_driver_sd.c **** /**
 201:FATFS/Target/bsp_driver_sd.c ****   * @brief  Gets the current SD card data status.
 202:FATFS/Target/bsp_driver_sd.c ****   * @param  None
 203:FATFS/Target/bsp_driver_sd.c ****   * @retval Data transfer state.
 204:FATFS/Target/bsp_driver_sd.c ****   *          This value can be one of the following values:
 205:FATFS/Target/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_OK: No data transfer is acting
 206:FATFS/Target/bsp_driver_sd.c ****   *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
 207:FATFS/Target/bsp_driver_sd.c ****   */
 208:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_GetCardState(void)
 209:FATFS/Target/bsp_driver_sd.c **** {
 287              		.loc 1 209 0
 288              		.cfi_startproc
 289              		@ args = 0, pretend = 0, frame = 0
 290              		@ frame_needed = 0, uses_anonymous_args = 0
 291 0000 08B5     		push	{r3, lr}
 292              	.LCFI9:
 293              		.cfi_def_cfa_offset 8
 294              		.cfi_offset 3, -8
 295              		.cfi_offset 14, -4
 210:FATFS/Target/bsp_driver_sd.c ****   return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY
 296              		.loc 1 210 0
 297 0002 0348     		ldr	r0, .L34
 298 0004 FFF7FEFF 		bl	HAL_SD_GetCardState
 299              	.LVL36:
 211:FATFS/Target/bsp_driver_sd.c **** }
 300              		.loc 1 211 0
 301 0008 0438     		subs	r0, r0, #4
 302 000a 18BF     		it	ne
 303 000c 0120     		movne	r0, #1
 304 000e 08BD     		pop	{r3, pc}
 305              	.L35:
 306              		.align	2
 307              	.L34:
 308 0010 00000000 		.word	hsd1
 309              		.cfi_endproc
 310              	.LFE148:
 312              		.section	.text.BSP_SD_GetCardInfo,"ax",%progbits
 313              		.align	1
 314              		.weak	BSP_SD_GetCardInfo
 315              		.syntax unified
 316              		.thumb
ARM GAS  /tmp/ccbXllTZ.s 			page 10


 317              		.thumb_func
 318              		.fpu fpv5-d16
 320              	BSP_SD_GetCardInfo:
 321              	.LFB149:
 212:FATFS/Target/bsp_driver_sd.c **** 
 213:FATFS/Target/bsp_driver_sd.c **** /**
 214:FATFS/Target/bsp_driver_sd.c ****   * @brief  Get SD information about specific SD card.
 215:FATFS/Target/bsp_driver_sd.c ****   * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
 216:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 217:FATFS/Target/bsp_driver_sd.c ****   */
 218:FATFS/Target/bsp_driver_sd.c **** __weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
 219:FATFS/Target/bsp_driver_sd.c **** {
 322              		.loc 1 219 0
 323              		.cfi_startproc
 324              		@ args = 0, pretend = 0, frame = 0
 325              		@ frame_needed = 0, uses_anonymous_args = 0
 326              	.LVL37:
 327 0000 08B5     		push	{r3, lr}
 328              	.LCFI10:
 329              		.cfi_def_cfa_offset 8
 330              		.cfi_offset 3, -8
 331              		.cfi_offset 14, -4
 220:FATFS/Target/bsp_driver_sd.c ****   /* Get SD card Information */
 221:FATFS/Target/bsp_driver_sd.c ****   HAL_SD_GetCardInfo(&hsd1, CardInfo);
 332              		.loc 1 221 0
 333 0002 0146     		mov	r1, r0
 334 0004 0148     		ldr	r0, .L38
 335              	.LVL38:
 336 0006 FFF7FEFF 		bl	HAL_SD_GetCardInfo
 337              	.LVL39:
 222:FATFS/Target/bsp_driver_sd.c **** }
 338              		.loc 1 222 0
 339 000a 08BD     		pop	{r3, pc}
 340              	.L39:
 341              		.align	2
 342              	.L38:
 343 000c 00000000 		.word	hsd1
 344              		.cfi_endproc
 345              	.LFE149:
 347              		.section	.text.BSP_SD_AbortCallback,"ax",%progbits
 348              		.align	1
 349              		.weak	BSP_SD_AbortCallback
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv5-d16
 355              	BSP_SD_AbortCallback:
 356              	.LFB153:
 223:FATFS/Target/bsp_driver_sd.c **** 
 224:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN BeforeCallBacksSection */
 225:FATFS/Target/bsp_driver_sd.c **** /* can be used to modify previous code / undefine following code / add code */
 226:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END BeforeCallBacksSection */
 227:FATFS/Target/bsp_driver_sd.c **** /**
 228:FATFS/Target/bsp_driver_sd.c ****   * @brief SD Abort callbacks
 229:FATFS/Target/bsp_driver_sd.c ****   * @param hsd: SD handle
 230:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 231:FATFS/Target/bsp_driver_sd.c ****   */
ARM GAS  /tmp/ccbXllTZ.s 			page 11


 232:FATFS/Target/bsp_driver_sd.c **** void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
 233:FATFS/Target/bsp_driver_sd.c **** {
 234:FATFS/Target/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 235:FATFS/Target/bsp_driver_sd.c **** }
 236:FATFS/Target/bsp_driver_sd.c **** 
 237:FATFS/Target/bsp_driver_sd.c **** /**
 238:FATFS/Target/bsp_driver_sd.c ****   * @brief Tx Transfer completed callback
 239:FATFS/Target/bsp_driver_sd.c ****   * @param hsd: SD handle
 240:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 241:FATFS/Target/bsp_driver_sd.c ****   */
 242:FATFS/Target/bsp_driver_sd.c **** void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
 243:FATFS/Target/bsp_driver_sd.c **** {
 244:FATFS/Target/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 245:FATFS/Target/bsp_driver_sd.c **** }
 246:FATFS/Target/bsp_driver_sd.c **** 
 247:FATFS/Target/bsp_driver_sd.c **** /**
 248:FATFS/Target/bsp_driver_sd.c ****   * @brief Rx Transfer completed callback
 249:FATFS/Target/bsp_driver_sd.c ****   * @param hsd: SD handle
 250:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 251:FATFS/Target/bsp_driver_sd.c ****   */
 252:FATFS/Target/bsp_driver_sd.c **** void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
 253:FATFS/Target/bsp_driver_sd.c **** {
 254:FATFS/Target/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 255:FATFS/Target/bsp_driver_sd.c **** }
 256:FATFS/Target/bsp_driver_sd.c **** 
 257:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN CallBacksSection_C */
 258:FATFS/Target/bsp_driver_sd.c **** /**
 259:FATFS/Target/bsp_driver_sd.c ****   * @brief BSP SD Abort callback
 260:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 261:FATFS/Target/bsp_driver_sd.c ****   * @note empty (up to the user to fill it in or to remove it if useless)
 262:FATFS/Target/bsp_driver_sd.c ****   */
 263:FATFS/Target/bsp_driver_sd.c **** __weak void BSP_SD_AbortCallback(void)
 264:FATFS/Target/bsp_driver_sd.c **** {
 357              		.loc 1 264 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 265:FATFS/Target/bsp_driver_sd.c **** 
 266:FATFS/Target/bsp_driver_sd.c **** }
 362              		.loc 1 266 0
 363 0000 7047     		bx	lr
 364              		.cfi_endproc
 365              	.LFE153:
 367              		.section	.text.HAL_SD_AbortCallback,"ax",%progbits
 368              		.align	1
 369              		.global	HAL_SD_AbortCallback
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu fpv5-d16
 375              	HAL_SD_AbortCallback:
 376              	.LFB150:
 233:FATFS/Target/bsp_driver_sd.c ****   BSP_SD_AbortCallback();
 377              		.loc 1 233 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccbXllTZ.s 			page 12


 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              	.LVL40:
 382 0000 08B5     		push	{r3, lr}
 383              	.LCFI11:
 384              		.cfi_def_cfa_offset 8
 385              		.cfi_offset 3, -8
 386              		.cfi_offset 14, -4
 234:FATFS/Target/bsp_driver_sd.c **** }
 387              		.loc 1 234 0
 388 0002 FFF7FEFF 		bl	BSP_SD_AbortCallback
 389              	.LVL41:
 235:FATFS/Target/bsp_driver_sd.c **** 
 390              		.loc 1 235 0
 391 0006 08BD     		pop	{r3, pc}
 392              		.cfi_endproc
 393              	.LFE150:
 395              		.section	.text.BSP_SD_WriteCpltCallback,"ax",%progbits
 396              		.align	1
 397              		.weak	BSP_SD_WriteCpltCallback
 398              		.syntax unified
 399              		.thumb
 400              		.thumb_func
 401              		.fpu fpv5-d16
 403              	BSP_SD_WriteCpltCallback:
 404              	.LFB154:
 267:FATFS/Target/bsp_driver_sd.c **** 
 268:FATFS/Target/bsp_driver_sd.c **** /**
 269:FATFS/Target/bsp_driver_sd.c ****   * @brief BSP Tx Transfer completed callback
 270:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 271:FATFS/Target/bsp_driver_sd.c ****   * @note empty (up to the user to fill it in or to remove it if useless)
 272:FATFS/Target/bsp_driver_sd.c ****   */
 273:FATFS/Target/bsp_driver_sd.c **** __weak void BSP_SD_WriteCpltCallback(void)
 274:FATFS/Target/bsp_driver_sd.c **** {
 405              		.loc 1 274 0
 406              		.cfi_startproc
 407              		@ args = 0, pretend = 0, frame = 0
 408              		@ frame_needed = 0, uses_anonymous_args = 0
 409              		@ link register save eliminated.
 275:FATFS/Target/bsp_driver_sd.c **** 
 276:FATFS/Target/bsp_driver_sd.c **** }
 410              		.loc 1 276 0
 411 0000 7047     		bx	lr
 412              		.cfi_endproc
 413              	.LFE154:
 415              		.section	.text.HAL_SD_TxCpltCallback,"ax",%progbits
 416              		.align	1
 417              		.global	HAL_SD_TxCpltCallback
 418              		.syntax unified
 419              		.thumb
 420              		.thumb_func
 421              		.fpu fpv5-d16
 423              	HAL_SD_TxCpltCallback:
 424              	.LFB151:
 243:FATFS/Target/bsp_driver_sd.c ****   BSP_SD_WriteCpltCallback();
 425              		.loc 1 243 0
 426              		.cfi_startproc
 427              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccbXllTZ.s 			page 13


 428              		@ frame_needed = 0, uses_anonymous_args = 0
 429              	.LVL42:
 430 0000 08B5     		push	{r3, lr}
 431              	.LCFI12:
 432              		.cfi_def_cfa_offset 8
 433              		.cfi_offset 3, -8
 434              		.cfi_offset 14, -4
 244:FATFS/Target/bsp_driver_sd.c **** }
 435              		.loc 1 244 0
 436 0002 FFF7FEFF 		bl	BSP_SD_WriteCpltCallback
 437              	.LVL43:
 245:FATFS/Target/bsp_driver_sd.c **** 
 438              		.loc 1 245 0
 439 0006 08BD     		pop	{r3, pc}
 440              		.cfi_endproc
 441              	.LFE151:
 443              		.section	.text.BSP_SD_ReadCpltCallback,"ax",%progbits
 444              		.align	1
 445              		.weak	BSP_SD_ReadCpltCallback
 446              		.syntax unified
 447              		.thumb
 448              		.thumb_func
 449              		.fpu fpv5-d16
 451              	BSP_SD_ReadCpltCallback:
 452              	.LFB155:
 277:FATFS/Target/bsp_driver_sd.c **** 
 278:FATFS/Target/bsp_driver_sd.c **** /**
 279:FATFS/Target/bsp_driver_sd.c ****   * @brief BSP Rx Transfer completed callback
 280:FATFS/Target/bsp_driver_sd.c ****   * @retval None
 281:FATFS/Target/bsp_driver_sd.c ****   * @note empty (up to the user to fill it in or to remove it if useless)
 282:FATFS/Target/bsp_driver_sd.c ****   */
 283:FATFS/Target/bsp_driver_sd.c **** __weak void BSP_SD_ReadCpltCallback(void)
 284:FATFS/Target/bsp_driver_sd.c **** {
 453              		.loc 1 284 0
 454              		.cfi_startproc
 455              		@ args = 0, pretend = 0, frame = 0
 456              		@ frame_needed = 0, uses_anonymous_args = 0
 457              		@ link register save eliminated.
 285:FATFS/Target/bsp_driver_sd.c **** 
 286:FATFS/Target/bsp_driver_sd.c **** }
 458              		.loc 1 286 0
 459 0000 7047     		bx	lr
 460              		.cfi_endproc
 461              	.LFE155:
 463              		.section	.text.HAL_SD_RxCpltCallback,"ax",%progbits
 464              		.align	1
 465              		.global	HAL_SD_RxCpltCallback
 466              		.syntax unified
 467              		.thumb
 468              		.thumb_func
 469              		.fpu fpv5-d16
 471              	HAL_SD_RxCpltCallback:
 472              	.LFB152:
 253:FATFS/Target/bsp_driver_sd.c ****   BSP_SD_ReadCpltCallback();
 473              		.loc 1 253 0
 474              		.cfi_startproc
 475              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccbXllTZ.s 			page 14


 476              		@ frame_needed = 0, uses_anonymous_args = 0
 477              	.LVL44:
 478 0000 08B5     		push	{r3, lr}
 479              	.LCFI13:
 480              		.cfi_def_cfa_offset 8
 481              		.cfi_offset 3, -8
 482              		.cfi_offset 14, -4
 254:FATFS/Target/bsp_driver_sd.c **** }
 483              		.loc 1 254 0
 484 0002 FFF7FEFF 		bl	BSP_SD_ReadCpltCallback
 485              	.LVL45:
 255:FATFS/Target/bsp_driver_sd.c **** 
 486              		.loc 1 255 0
 487 0006 08BD     		pop	{r3, pc}
 488              		.cfi_endproc
 489              	.LFE152:
 491              		.section	.text.BSP_SD_IsDetected,"ax",%progbits
 492              		.align	1
 493              		.weak	BSP_SD_IsDetected
 494              		.syntax unified
 495              		.thumb
 496              		.thumb_func
 497              		.fpu fpv5-d16
 499              	BSP_SD_IsDetected:
 500              	.LFB156:
 287:FATFS/Target/bsp_driver_sd.c **** /* USER CODE END CallBacksSection_C */
 288:FATFS/Target/bsp_driver_sd.c **** 
 289:FATFS/Target/bsp_driver_sd.c **** /**
 290:FATFS/Target/bsp_driver_sd.c ****  * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 291:FATFS/Target/bsp_driver_sd.c ****  * @param  None
 292:FATFS/Target/bsp_driver_sd.c ****  * @retval Returns if SD is detected or not
 293:FATFS/Target/bsp_driver_sd.c ****  */
 294:FATFS/Target/bsp_driver_sd.c **** __weak uint8_t BSP_SD_IsDetected(void)
 295:FATFS/Target/bsp_driver_sd.c **** {
 501              		.loc 1 295 0
 502              		.cfi_startproc
 503              		@ args = 0, pretend = 0, frame = 8
 504              		@ frame_needed = 0, uses_anonymous_args = 0
 505 0000 00B5     		push	{lr}
 506              	.LCFI14:
 507              		.cfi_def_cfa_offset 4
 508              		.cfi_offset 14, -4
 509 0002 83B0     		sub	sp, sp, #12
 510              	.LCFI15:
 511              		.cfi_def_cfa_offset 16
 296:FATFS/Target/bsp_driver_sd.c ****   __IO uint8_t status = SD_PRESENT;
 512              		.loc 1 296 0
 513 0004 0123     		movs	r3, #1
 514 0006 8DF80730 		strb	r3, [sp, #7]
 297:FATFS/Target/bsp_driver_sd.c **** 
 298:FATFS/Target/bsp_driver_sd.c ****   if (BSP_PlatformIsDetected() == 0x0)
 515              		.loc 1 298 0
 516 000a FFF7FEFF 		bl	BSP_PlatformIsDetected
 517              	.LVL46:
 518 000e 10B9     		cbnz	r0, .L50
 299:FATFS/Target/bsp_driver_sd.c ****   {
 300:FATFS/Target/bsp_driver_sd.c ****     status = SD_NOT_PRESENT;
ARM GAS  /tmp/ccbXllTZ.s 			page 15


 519              		.loc 1 300 0
 520 0010 0023     		movs	r3, #0
 521 0012 8DF80730 		strb	r3, [sp, #7]
 522              	.L50:
 301:FATFS/Target/bsp_driver_sd.c ****   }
 302:FATFS/Target/bsp_driver_sd.c **** 
 303:FATFS/Target/bsp_driver_sd.c ****   return status;
 523              		.loc 1 303 0
 524 0016 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 304:FATFS/Target/bsp_driver_sd.c **** }
 525              		.loc 1 304 0
 526 001a 03B0     		add	sp, sp, #12
 527              	.LCFI16:
 528              		.cfi_def_cfa_offset 4
 529              		@ sp needed
 530 001c 5DF804FB 		ldr	pc, [sp], #4
 531              		.cfi_endproc
 532              	.LFE156:
 534              		.section	.text.BSP_SD_Init,"ax",%progbits
 535              		.align	1
 536              		.weak	BSP_SD_Init
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv5-d16
 542              	BSP_SD_Init:
 543              	.LFB141:
  44:FATFS/Target/bsp_driver_sd.c ****   uint8_t sd_state = MSD_OK;
 544              		.loc 1 44 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548 0000 10B5     		push	{r4, lr}
 549              	.LCFI17:
 550              		.cfi_def_cfa_offset 8
 551              		.cfi_offset 4, -8
 552              		.cfi_offset 14, -4
 553              	.LVL47:
  47:FATFS/Target/bsp_driver_sd.c ****   {
 554              		.loc 1 47 0
 555 0002 FFF7FEFF 		bl	BSP_SD_IsDetected
 556              	.LVL48:
 557 0006 0128     		cmp	r0, #1
 558 0008 02D0     		beq	.L57
  49:FATFS/Target/bsp_driver_sd.c ****   }
 559              		.loc 1 49 0
 560 000a 0224     		movs	r4, #2
 561              	.LVL49:
 562              	.L53:
  64:FATFS/Target/bsp_driver_sd.c **** /* USER CODE BEGIN AfterInitSection */
 563              		.loc 1 64 0
 564 000c 2046     		mov	r0, r4
 565 000e 10BD     		pop	{r4, pc}
 566              	.LVL50:
 567              	.L57:
  52:FATFS/Target/bsp_driver_sd.c ****   /* Configure SD Bus width (4 bits mode selected) */
 568              		.loc 1 52 0
ARM GAS  /tmp/ccbXllTZ.s 			page 16


 569 0010 0748     		ldr	r0, .L58
 570 0012 FFF7FEFF 		bl	HAL_SD_Init
 571              	.LVL51:
  54:FATFS/Target/bsp_driver_sd.c ****   {
 572              		.loc 1 54 0
 573 0016 0446     		mov	r4, r0
 574 0018 0028     		cmp	r0, #0
 575 001a F7D1     		bne	.L53
  57:FATFS/Target/bsp_driver_sd.c ****     {
 576              		.loc 1 57 0
 577 001c 4FF48041 		mov	r1, #16384
 578 0020 0348     		ldr	r0, .L58
 579              	.LVL52:
 580 0022 FFF7FEFF 		bl	HAL_SD_ConfigWideBusOperation
 581              	.LVL53:
 582 0026 0028     		cmp	r0, #0
 583 0028 F0D0     		beq	.L53
  59:FATFS/Target/bsp_driver_sd.c ****     }
 584              		.loc 1 59 0
 585 002a 0124     		movs	r4, #1
 586 002c EEE7     		b	.L53
 587              	.L59:
 588 002e 00BF     		.align	2
 589              	.L58:
 590 0030 00000000 		.word	hsd1
 591              		.cfi_endproc
 592              	.LFE141:
 594              		.text
 595              	.Letext0:
 596              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 597              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 598              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 599              		.file 5 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 600              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h723xx.h"
 601              		.file 7 "/usr/include/newlib/sys/lock.h"
 602              		.file 8 "/usr/include/newlib/sys/_types.h"
 603              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 604              		.file 10 "/usr/include/newlib/sys/reent.h"
 605              		.file 11 "/usr/include/newlib/math.h"
 606              		.file 12 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 607              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 608              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_sdmmc.h"
 609              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_sd.h"
 610              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 611              		.file 17 "FATFS/Target/fatfs_platform.h"
ARM GAS  /tmp/ccbXllTZ.s 			page 17


DEFINED SYMBOLS
                            *ABS*:0000000000000000 bsp_driver_sd.c
     /tmp/ccbXllTZ.s:17     .text.BSP_SD_ITConfig:0000000000000000 $t
     /tmp/ccbXllTZ.s:24     .text.BSP_SD_ITConfig:0000000000000000 BSP_SD_ITConfig
     /tmp/ccbXllTZ.s:39     .text.BSP_SD_ReadBlocks:0000000000000000 $t
     /tmp/ccbXllTZ.s:46     .text.BSP_SD_ReadBlocks:0000000000000000 BSP_SD_ReadBlocks
     /tmp/ccbXllTZ.s:87     .text.BSP_SD_ReadBlocks:000000000000001c $d
     /tmp/ccbXllTZ.s:92     .text.BSP_SD_WriteBlocks:0000000000000000 $t
     /tmp/ccbXllTZ.s:99     .text.BSP_SD_WriteBlocks:0000000000000000 BSP_SD_WriteBlocks
     /tmp/ccbXllTZ.s:140    .text.BSP_SD_WriteBlocks:000000000000001c $d
     /tmp/ccbXllTZ.s:145    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 $t
     /tmp/ccbXllTZ.s:152    .text.BSP_SD_ReadBlocks_DMA:0000000000000000 BSP_SD_ReadBlocks_DMA
     /tmp/ccbXllTZ.s:185    .text.BSP_SD_ReadBlocks_DMA:0000000000000014 $d
     /tmp/ccbXllTZ.s:190    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 $t
     /tmp/ccbXllTZ.s:197    .text.BSP_SD_WriteBlocks_DMA:0000000000000000 BSP_SD_WriteBlocks_DMA
     /tmp/ccbXllTZ.s:230    .text.BSP_SD_WriteBlocks_DMA:0000000000000014 $d
     /tmp/ccbXllTZ.s:235    .text.BSP_SD_Erase:0000000000000000 $t
     /tmp/ccbXllTZ.s:242    .text.BSP_SD_Erase:0000000000000000 BSP_SD_Erase
     /tmp/ccbXllTZ.s:273    .text.BSP_SD_Erase:0000000000000014 $d
     /tmp/ccbXllTZ.s:278    .text.BSP_SD_GetCardState:0000000000000000 $t
     /tmp/ccbXllTZ.s:285    .text.BSP_SD_GetCardState:0000000000000000 BSP_SD_GetCardState
     /tmp/ccbXllTZ.s:308    .text.BSP_SD_GetCardState:0000000000000010 $d
     /tmp/ccbXllTZ.s:313    .text.BSP_SD_GetCardInfo:0000000000000000 $t
     /tmp/ccbXllTZ.s:320    .text.BSP_SD_GetCardInfo:0000000000000000 BSP_SD_GetCardInfo
     /tmp/ccbXllTZ.s:343    .text.BSP_SD_GetCardInfo:000000000000000c $d
     /tmp/ccbXllTZ.s:348    .text.BSP_SD_AbortCallback:0000000000000000 $t
     /tmp/ccbXllTZ.s:355    .text.BSP_SD_AbortCallback:0000000000000000 BSP_SD_AbortCallback
     /tmp/ccbXllTZ.s:368    .text.HAL_SD_AbortCallback:0000000000000000 $t
     /tmp/ccbXllTZ.s:375    .text.HAL_SD_AbortCallback:0000000000000000 HAL_SD_AbortCallback
     /tmp/ccbXllTZ.s:396    .text.BSP_SD_WriteCpltCallback:0000000000000000 $t
     /tmp/ccbXllTZ.s:403    .text.BSP_SD_WriteCpltCallback:0000000000000000 BSP_SD_WriteCpltCallback
     /tmp/ccbXllTZ.s:416    .text.HAL_SD_TxCpltCallback:0000000000000000 $t
     /tmp/ccbXllTZ.s:423    .text.HAL_SD_TxCpltCallback:0000000000000000 HAL_SD_TxCpltCallback
     /tmp/ccbXllTZ.s:444    .text.BSP_SD_ReadCpltCallback:0000000000000000 $t
     /tmp/ccbXllTZ.s:451    .text.BSP_SD_ReadCpltCallback:0000000000000000 BSP_SD_ReadCpltCallback
     /tmp/ccbXllTZ.s:464    .text.HAL_SD_RxCpltCallback:0000000000000000 $t
     /tmp/ccbXllTZ.s:471    .text.HAL_SD_RxCpltCallback:0000000000000000 HAL_SD_RxCpltCallback
     /tmp/ccbXllTZ.s:492    .text.BSP_SD_IsDetected:0000000000000000 $t
     /tmp/ccbXllTZ.s:499    .text.BSP_SD_IsDetected:0000000000000000 BSP_SD_IsDetected
     /tmp/ccbXllTZ.s:535    .text.BSP_SD_Init:0000000000000000 $t
     /tmp/ccbXllTZ.s:542    .text.BSP_SD_Init:0000000000000000 BSP_SD_Init
     /tmp/ccbXllTZ.s:590    .text.BSP_SD_Init:0000000000000030 $d

UNDEFINED SYMBOLS
HAL_SD_ReadBlocks
hsd1
HAL_SD_WriteBlocks
HAL_SD_ReadBlocks_DMA
HAL_SD_WriteBlocks_DMA
HAL_SD_Erase
HAL_SD_GetCardState
HAL_SD_GetCardInfo
BSP_PlatformIsDetected
HAL_SD_Init
HAL_SD_ConfigWideBusOperation
