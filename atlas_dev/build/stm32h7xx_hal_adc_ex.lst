ARM GAS  /tmp/ccmrLUMM.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_adc_ex.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_ADCEx_Calibration_Start,"ax",%progbits
  17              		.align	1
  18              		.global	HAL_ADCEx_Calibration_Start
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_ADCEx_Calibration_Start:
  25              	.LFB343:
  26              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @file    stm32h7xx_hal_adc_ex.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief   This file provides firmware functions to manage the following
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          peripheral:
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           + Operation functions
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Start, stop, get result of conversions of ADC group injected,
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *                using 2 possible modes: polling, interruption.
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Calibration
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *               +++ ADC automatic self-calibration
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *               +++ Calibration factors get or set
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Multimode feature when available
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           + Control functions
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ Channels configuration on ADC group injected
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           + State functions
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *             ++ ADC group injected contexts queue management
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          Other functions (generic functions) are available in file
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          "stm32h7xx_hal_adc.c".
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   @verbatim
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   [..]
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   (@) Sections "ADC peripheral features" and "How to use this driver" are
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       available in file of generic functions "stm32h7xx_hal_adc.c".
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   [..]
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   @endverbatim
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ******************************************************************************
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @attention
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * All rights reserved.</center></h2>
ARM GAS  /tmp/ccmrLUMM.s 			page 2


  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * This software component is licensed by ST under BSD 3-Clause license,
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * the "License"; You may not use this file except in compliance with the
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * License. You may obtain a copy of the License at:
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *                        opensource.org/licenses/BSD-3-Clause
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ******************************************************************************
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Includes ------------------------------------------------------------------*/
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #include "stm32h7xx_hal.h"
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @addtogroup STM32H7xx_HAL_Driver
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx ADCEx
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief ADC Extended HAL module driver
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #ifdef HAL_ADC_MODULE_ENABLED
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private typedef -----------------------------------------------------------*/
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private define ------------------------------------------------------------*/
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Private_Constants ADC Extended Private Constants
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #define ADC_JSQR_FIELDS  ((ADC_JSQR_JL | ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN |\
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                            ADC_JSQR_JSQ1  | ADC_JSQR_JSQ2 |\
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                            ADC_JSQR_JSQ3 | ADC_JSQR_JSQ4 ))  /*!< ADC_JSQR fields of parameters tha
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                                                   once the ADC is enabled */
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Fixed timeout value for ADC calibration.                                   */
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Fixed timeout value for ADC calibration.                                     */
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Values defined to be higher than worst cases: low clock frequency,         */
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* maximum prescalers.                                                        */
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Ex of profile low frequency : f_ADC at 0.125 Mhz (minimum value              */
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* according to Data sheet), calibration_time MAX = 165010 / f_ADC              */
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /*           165010 / 125000 = 1.32s                                            */
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* At maximum CPU speed (480 MHz), this means                                   */
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /*    1.32 * 480 MHz = 633600000 CPU cycles                                     */
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #define ADC_CALIBRATION_TIMEOUT         (633600000U)   /*!< ADC calibration time-out value */
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @}
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private macro -------------------------------------------------------------*/
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private variables ---------------------------------------------------------*/
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Private function prototypes -----------------------------------------------*/
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /* Exported functions --------------------------------------------------------*/
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions ADC Extended Exported Functions
ARM GAS  /tmp/ccmrLUMM.s 			page 3


  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group1 Extended Input and Output operation functions
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief    Extended IO operation functions
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @verbatim
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       ##### IO operation functions #####
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Perform the ADC self-calibration for single or differential ending.
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Get calibration factors for single or differential ending.
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Set calibration factors for single or differential ending.
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Start conversion of ADC group injected.
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Stop conversion of ADC group injected.
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Poll for conversion complete on ADC group injected.
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Get result of ADC group injected channel conversion.
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Start conversion of ADC group injected and enable interruptions.
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Stop conversion of ADC group injected and disable interruptions.
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) When multimode feature is available, start multimode and enable DMA transfer.
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Stop multimode and disable ADC DMA transfer.
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Get result of multimode conversion.
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @endverbatim
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Perform an ADC automatic self-calibration
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Calibration prerequisite: ADC must be disabled (execute this
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function before HAL_ADC_Start() or after HAL_ADC_Stop() ).
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc       ADC handle
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** * @param  CalibrationMode       Selection of calibration offset or
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         linear calibration offset.
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg ADC_CALIB_OFFSET       Channel in mode calibration offset
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg ADC_CALIB_OFFSET_LINEARITY Channel in mode linear calibration offset
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  SingleDiff Selection of single-ended or differential input
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         This parameter can be one of the following values:
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, ui
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
  27              		.loc 1 137 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 8
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
ARM GAS  /tmp/ccmrLUMM.s 			page 4


  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 32
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0UL;
  43              		.loc 1 139 0
  44 0004 0024     		movs	r4, #0
  45 0006 0194     		str	r4, [sp, #4]
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
  46              		.loc 1 146 0
  47 0008 90F85C40 		ldrb	r4, [r0, #92]	@ zero_extendqisi2
  48 000c 012C     		cmp	r4, #1
  49 000e 44D0     		beq	.L8
  50 0010 1646     		mov	r6, r2
  51 0012 0F46     		mov	r7, r1
  52 0014 0446     		mov	r4, r0
  53              		.loc 1 146 0 is_stmt 0 discriminator 2
  54 0016 0123     		movs	r3, #1
  55 0018 80F85C30 		strb	r3, [r0, #92]
 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Calibration prerequisite: ADC must be disabled. */
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable the ADC (if not already disabled) */
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_Disable(hadc);
  56              		.loc 1 151 0 is_stmt 1 discriminator 2
  57 001c FFF7FEFF 		bl	ADC_Disable
  58              	.LVL1:
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check if ADC is effectively disabled */
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
  59              		.loc 1 154 0 discriminator 2
  60 0020 0546     		mov	r5, r0
  61 0022 0028     		cmp	r0, #0
  62 0024 2FD1     		bne	.L3
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC state */
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
  63              		.loc 1 157 0
  64 0026 236E     		ldr	r3, [r4, #96]
  65 0028 1D48     		ldr	r0, .L10
  66              	.LVL2:
  67 002a 1840     		ands	r0, r0, r3
  68 002c 40F00200 		orr	r0, r0, #2
  69 0030 2066     		str	r0, [r4, #96]
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 5


 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start ADC calibration in mode single-ended or differential */
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
  70              		.loc 1 162 0
  71 0032 2068     		ldr	r0, [r4]
  72              	.LVL3:
  73              	.LBB323:
  74              	.LBB324:
  75              		.file 2 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
   1:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @file    stm32h7xx_ll_adc.h
   4:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @attention
   8:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
   9:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  12:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  17:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
  18:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  19:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  20:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifndef STM32H7xx_LL_ADC_H
  22:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define STM32H7xx_LL_ADC_H
  23:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  24:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifdef __cplusplus
  25:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** extern "C" {
  26:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
  27:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  28:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #include "stm32h7xx.h"
  30:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  31:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @addtogroup STM32H7xx_LL_Driver
  32:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  33:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  34:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  35:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3)
  36:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  37:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  39:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  40:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  41:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  44:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  47:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  48:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  49:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC calibration:                                         */
ARM GAS  /tmp/ccmrLUMM.s 			page 6


  50:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC calibration factors configuration */
  51:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  52:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_CALIB_OFFSET, LL_ADC_CALIB_LINEARITY, ...   */
  53:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
  54:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
  55:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration configuration: configuration before calibration start    */
  56:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration factors: register offset                                 */
  57:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_OFFSET_REGOFFSET    (0x00000000UL) /* Register CALFACT defined as referenc
  58:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_LINEARITY_REGOFFSET (0x00000001UL) /* Register CALFACT2 offset vs register
  59:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_REGOFFSET_MASK      (ADC_CALIB_FACTOR_OFFSET_REGOFFSET | ADC_CALIB_FACTOR_
  60:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_MASK                  (ADC_CR_ADCALLIN)
  61:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_BINARY_MASK           (ADC_CALIB_FACTOR_REGOFFSET_MASK) /* Mask to get binar
  62:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  63:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  64:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  65:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  66:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer register offset                                                */
  67:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  68:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  69:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  70:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  71:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  72:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  73:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  74:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  75:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  76:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  77:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  78:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  79:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  80:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  81:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  82:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR1_SQ1" po
  83:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR1_SQ2" po
  84:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR1_SQ3" po
  85:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR1_SQ4" po
  86:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  ( 0UL) /* Value equivalent to bitfield "ADC_SQR2_SQ5" po
  87:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR2_SQ6" po
  88:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR2_SQ7" po
  89:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR2_SQ8" po
  90:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR2_SQ9" po
  91:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR3_SQ10" p
  92:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR3_SQ11" p
  93:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (12UL) /* Value equivalent to bitfield "ADC_SQR3_SQ12" p
  94:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (18UL) /* Value equivalent to bitfield "ADC_SQR3_SQ13" p
  95:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (24UL) /* Value equivalent to bitfield "ADC_SQR3_SQ14" p
  96:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR4_SQ15" p
  97:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR4_SQ16" p
  98:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  99:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
 102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
 103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - data register offset                                                     */
 104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
 105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
ARM GAS  /tmp/ccmrLUMM.s 			page 7


 107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
 109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
 110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
 111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
 112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
 114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger source                                                   */
 129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger edge                                                     */
 130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_CFGR_EXTSEL"
 150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CFGR_EXTEN" 
 151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger source                                                  */
 157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger edge                                                    */
 158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL) << (4U 
ARM GAS  /tmp/ccmrLUMM.s 			page 8


 164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  ( 2UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTSEL
 178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   ( 6UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTEN"
 179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Value equivalent to bitfield "ADC_CHANNEL_ID_N
 196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
 203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
ARM GAS  /tmp/ccmrLUMM.s 			page 9


 221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_BITFIELD            (ADC_AWD2CR_AWD2CH_19)
 259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
ARM GAS  /tmp/ccmrLUMM.s 			page 10


 278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_SMP                 (ADC_SMPR2_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
 287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection on groups.                                                     */
 306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
ARM GAS  /tmp/ccmrLUMM.s 			page 11


 335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 thresholds registers */
 338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_TRX_REGOFFSET to spare 32 bits space */
 339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_VAL      (0x00000022UL)
 341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Legacy literals */
 343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1_TR                      LL_ADC_AWD1
 344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2_TR                      LL_ADC_AWD2
 345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3_TR                      LL_ADC_AWD3
 346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits positions */
 357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS_ADC3    (ADC3_CFGR_RES_Pos)
 363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits groups */
 367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC internal channels related definitions */
 371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x8fff810UL))  /* Internal voltage referen
 374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Adress related to STM32H
 375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FF1E860UL)) /* Internal voltage referen
 377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3300UL)                     /* Analog voltage reference
 379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Temperature sensor */
 380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x8fff814UL))  /* Internal temperature sen
 382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x8fff818UL))  /* Internal temperature sen
 383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Adresses related to STM3
 384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FF1E820UL)) /* Internal temperature sen
 386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FF1E840UL)) /* Internal temperature sen
 387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3300UL)                     /* Analog voltage reference
ARM GAS  /tmp/ccmrLUMM.s 			page 12


 392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Registers addresses with ADC linearity calibration content (programmed during device production,
 394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_1_ADDR ((uint32_t*) (0x1FF1EC00UL))
 395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_2_ADDR ((uint32_t*) (0x1FF1EC04UL))
 396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_3_ADDR ((uint32_t*) (0x1FF1EC08UL))
 397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_4_ADDR ((uint32_t*) (0x1FF1EC0CUL))
 398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_5_ADDR ((uint32_t*) (0x1FF1EC10UL))
 399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_6_ADDR ((uint32_t*) (0x1FF1EC14UL))
 400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_COUNT  (6UL)
 401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a register from a register basis from which an offset
 414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is applied.
 415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Pointer to register address
 418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and multimode
 436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sharing the same ADC common instance):
 440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         disabled.
 442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 serie, if ADC group injected is us
 448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
ARM GAS  /tmp/ccmrLUMM.s 			page 13


 449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC dual ADC mode DMA transfer data format: Each D
 459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LeftBitShift;                /*!< Configures the left shifting applied to the final resu
 498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LEFT_B
 499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_InitTypeDef;
ARM GAS  /tmp/ccmrLUMM.s 			page 14


 506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "REG").
 513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t DataTransferMode;            /*!< Set ADC group regular conversion data transfer mode: n
 555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DA
 556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              data preserved or overwritten.
 561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 15


 563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "INJ").
 573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
 602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
ARM GAS  /tmp/ccmrLUMM.s 			page 16


 620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
 659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
 660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
ARM GAS  /tmp/ccmrLUMM.s 			page 17


 677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* DMA transfer.                                                              */
 691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement pathes all d
 729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccmrLUMM.s 			page 18


 734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_BOOST_MODE ADC instance - Boost mode
 737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_6MHZ25   (0x00000000UL)                                            /*!< B
 740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_12MHZ5   (                                        ADC_CR_BOOST_0)  /*!< B
 741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_20MHZ    (                       ADC_CR_BOOST_1                 )  /*!< B
 742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_25MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1                 )  /*!< B
 743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_50MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1 | ADC_CR_BOOST_0)  /*!< B
 744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_OFFSET_LINEARITY  ADC instance - Calibration mode for offset an
 749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET                (ADC_CALIB_FACTOR_OFFSET_REGOFFSET)                     
 752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY             (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET)                  
 753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET_LINEARITY      (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET | ADC_CR_ADCALLIN)
 754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_LINEARITY_WORD  ADC instance - Calibration linearity words
 759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD1       (ADC_CR_LINCALRDYW1)    /*!< ADC calibration linearity w
 762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD2       (ADC_CR_LINCALRDYW2)    /*!< ADC calibration linearity w
 763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD3       (ADC_CR_LINCALRDYW3)    /*!< ADC calibration linearity w
 764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD4       (ADC_CR_LINCALRDYW4)    /*!< ADC calibration linearity w
 765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD5       (ADC_CR_LINCALRDYW5)    /*!< ADC calibration linearity w
 766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD6       (ADC_CR_LINCALRDYW6)    /*!< ADC calibration linearity w
 767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_16B              (0x00000000UL)                                      /*!<
 775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B              (                                  ADC_CFGR_RES_0)  /*!<
 776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (                 ADC_CFGR_RES_1                 )  /*!<
 777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_1 | ADC_CFGR_RES_0)  /*!<
 778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_X)
 780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B_OPT          (ADC_CFGR_RES_2 |                  ADC_CFGR_RES_0)  /*!<
 781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B_OPT          (ADC_CFGR_RES_2 | ADC_CFGR_RES_1                 )  /*!<
 782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
 785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0) /*!< AD
 786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2                                ) /*!< AD
 788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                             /*!< Th
 789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
ARM GAS  /tmp/ccmrLUMM.s 			page 19


 791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC3_CFGR_RES_1 | ADC3_CFGR_RES_0)   /*!< ADC resolutio
 794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC3_CFGR_ALIGN)       /*!< ADC conversion data alignme
 805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LEFT_BIT_SHIFT   ADC left Shift
 812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_NONE  (0x00000000UL)                                                 
 815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_1     (ADC_CFGR2_LSHIFT_0)                                           
 816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_2     (ADC_CFGR2_LSHIFT_1)                                           
 817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_3     (ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0)                      
 818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_4     (ADC_CFGR2_LSHIFT_2)                                           
 819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_5     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0)                      
 820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_6     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1)                      
 821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_7     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_8     (ADC_CFGR2_LSHIFT_3)                                           
 823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_9     (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_0)                      
 824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_10    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1)                      
 825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_11    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_12    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2)                      
 827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_13    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0) 
 828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_14    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1) 
 829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_15    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 |
 830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
ARM GAS  /tmp/ccmrLUMM.s 			page 20


 848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGNED_SATURATION ADC instance - Offset signed saturation mode
 855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE   (0x00000000UL)   /*!< ADC offset signed saturatio
 858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE    (ADC_OFR1_SSATE) /*!< ADC offset signed saturatio
 859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_RSHIFT ADC instance - Offset right shift
 864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_DISABLE   (0x00000000UL)      /*!< ADC offset right shift is disabled 
 867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_ENABLE    (ADC_CFGR2_RSHIFT1) /*!< ADC offset right shif is enabled (a
 868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)           /*!< ADC offset saturation is d
 876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC3_OFR1_SATEN)        /*!< ADC offset saturation is e
 877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC3_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among A
 886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)        /*!< ADC offset is negative (among
 894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC3_OFR1_OFFSETPOS) /*!< ADC offset is positive (among
 895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccmrLUMM.s 			page 21


 905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_19                  (ADC_CHANNEL_19_NUMBER | ADC_CHANNEL_19_SMP | ADC_CHANNE
 935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
 936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH1_ADC2        (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH2_ADC2        (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(DAC2)
 954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC2CH1_ADC2        (LL_ADC_CHANNEL_15 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
ARM GAS  /tmp/ccmrLUMM.s 			page 22


 962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE          (0x00000000UL)                                           
 965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1      (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                          
 966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2      (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3      (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2      (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11   (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1    (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM1_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM2_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM3_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM23)
 987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM23_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM23 */
 989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM24)
 990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM24_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM24 */
 992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
1000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
1001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
1002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
1007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)        /*!< ADC conversions sa
1010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC3_CFGR2_BULB)     /*!< ADC conversions sa
1011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Note: First conver
1012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC3_CFGR2_SMPTRIG)  /*!< ADC conversions sa
1013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger rising edg
1014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger falling ed
1015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */ 
1018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
ARM GAS  /tmp/ccmrLUMM.s 			page 23


1019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
1021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
1024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
1025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DATA_TRANSFER_MODE  ADC group regular - Data transfer mode of ADC conve
1030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DR_TRANSFER             (0x00000000UL)                        /*!< ADC conversio
1033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR_DMNGT_0) /*!< ADC conversio
1034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMNGT_1 | ADC_CFGR_DMNGT_0) /*!< ADC conversio
1035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DFSDM_TRANSFER          (ADC_CFGR_DMNGT_1                   ) /*!< ADC conversio
1036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
1042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversi
1046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_LIMITED    (                  ADC3_CFGR_DMAEN)    /*!< ADC convers
1047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_UNLIMITED  (ADC3_CFGR_DMACFG | ADC3_CFGR_DMAEN)    /*!< ADC conver
1048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
1054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
1057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
1058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
1063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
1066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
1067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
1068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
1069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
1070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
1071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
1072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
1074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
1075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
ARM GAS  /tmp/ccmrLUMM.s 			page 24


1076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
1077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
1078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
1115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
1116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
ARM GAS  /tmp/ccmrLUMM.s 			page 25


1133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM23_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM24_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
ARM GAS  /tmp/ccmrLUMM.s 			page 26


1190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                          
1219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_8CYCLES_5      (                    ADC_SMPR2_SMP10_1                  
1221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_16CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_32CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_64CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_387CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_810CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_2CYCLES_5      (0x00000000UL)                                     
1234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_6CYCLES_5      (                                        ADC_SMPR2_
1235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_12CYCLES_5     (                    ADC_SMPR2_SMP10_1             
1236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_47CYCLES_5     (ADC_SMPR2_SMP10_2                                 
1238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_
1239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1             
1240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
ARM GAS  /tmp/ccmrLUMM.s 			page 27


1247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
1286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
ARM GAS  /tmp/ccmrLUMM.s 			page 28


1304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK)              
1331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_INJ          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG_INJ      ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK)   
1337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK)   
1343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK)   
1346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (0x1UL)                     /*!< ADC analog watchdog thr
1356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (0x0UL)                     /*!< ADC analog watchdog thr
1357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
ARM GAS  /tmp/ccmrLUMM.s 			page 29


1361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                          ADC3_TR1_AWDF
1366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                     ADC3_TR1_AWDFILT_1                
1367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                     ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC3_TR1_AWDFILT_2                                     
1369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC3_TR1_AWDFILT_2 |                      ADC3_TR1_AWDF
1370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1                
1371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                        ADC3_CFGR2_OVSR
1403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                    ADC3_CFGR2_OVSR_1                  
1404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                    ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC3_CFGR2_OVSR_2                                      
1406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC3_CFGR2_OVSR_2                     | ADC3_CFGR2_OVSR
1407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1                  
1408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
ARM GAS  /tmp/ccmrLUMM.s 			page 30


1418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_9           (ADC_CFGR2_OVSS_3                                       
1427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_10          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_11          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                      /*!< ADC multimode
1452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_32_10B      (ADC_CCR_DAMDF_1                  ) /*!< ADC multimode
1453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_8B          (ADC_CCR_DAMDF_1 | ADC_CCR_DAMDF_0) /*!< ADC multimode
1454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5           (0x00000000UL)                                
1462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5          (                                             
1463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5          (                                    ADC_CCR_D
1464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5          (                                    ADC_CCR_D
1465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS   (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5          (                  ADC_CCR_DELAY_2            
1467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES            (ADC_CCR_DELAY_3                              
1469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5          (                  ADC_CCR_DELAY_2            
1470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5          (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES            (ADC_CCR_DELAY_3                              
1473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES            (ADC_CCR_DELAY_3                              
1474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccmrLUMM.s 			page 31


1475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not timeout values.
1493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         above each literal definition.
1495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       not timeout values.                                                  */
1500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       STM32 serie:                                                         */
1505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 16384/fADC.                   */
1506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         cycles                                                             */
1512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         configuration.                                                     */
1514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
1515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "ts_vrefint").                                                   */
1525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       (5UL)  /*!< Delay for internal voltage reference stabili
1527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tSTART_RUN").                                                   */
1531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
ARM GAS  /tmp/ccmrLUMM.s 			page 32


1532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    ( 26UL)  /*!< Delay for temperature sensor stabilization
1533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: On this STM32 serie, a minimum number of ADC clock cycles            */
1536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Fixed timeout value for ADC linearity word bit set/clear delay.                         */
1544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Values defined to be higher than worst cases: low clock frequency,                      */
1545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* maximum prescalers.                                                                     */
1546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Ex of profile low frequency : f_ADC at 4,577 Khz (minimum value                         */
1547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* according to Data sheet), linearity set/clear bit delay MAX = 6 / f_ADC + 3 cycles AHB  */
1548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*           6 / 4577 = 1,311ms                                                            */
1549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* At maximum CPU speed (400 MHz), this means                                              */
1550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*    3.58 * 400 MHz = 524400 CPU cycles                                                   */
1551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEARITY_BIT_TOGGLE_TIMEOUT         (524400UL)      /*!< ADC linearity set/clear bit d
1552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Write a value in ADC register
1573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be written
1575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
1577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Read a value in ADC register
1582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be read
1584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Register value
1585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccmrLUMM.s 			page 33


1589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the resolution defines to STM32H73x/2x ADC3 registers values
1598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the ADC3 resolution according to the STM32H73x/2x RefMan.
1599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from ADC3 resolution (12b, 10b, 8b,6b)
1600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x00000000UL (value correspodning to ADC3 12 bits)
1607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_0 = 0x00000004  (value corresponding to ADC3 10 bits)
1608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_1 = 0x00000008 (value corresponding to ADC3 8 bits)
1609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x0000001C (value corresponding to ADC3 6 bits)
1610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This helper macro is applicable for STM32H73x/2x devices only
1611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC12_RESOLUTION_TO_ADC3(__ADC_RESOLUTION__)                      \
1613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (                                                                     \
1614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_12B)                     \
1615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             ?(0x00000000UL)                                                    \
1616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              :                                                                 \
1617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_10B)                   \
1618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ?(ADC_CFGR_RES_0)                                               \
1619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 :                                                              \
1620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_8B)                 \
1621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   ?(ADC_CFGR_RES_1)                                            \
1622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    :                                                           \
1623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_6B)              \
1624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      ?((ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0))       \
1625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                        :(0x00000000UL)                                         \
1626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          )
1627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return decimal number "4".
1636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number is returned, either defined with number
1638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
ARM GAS  /tmp/ccmrLUMM.s 			page 34


1646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                    \
1675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                    \
1678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                    \
1679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
1685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from number in decimal format.
1686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
ARM GAS  /tmp/ccmrLUMM.s 			page 35


1703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                            
1728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
1733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                            
1734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
1742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC internal channel:
1745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
ARM GAS  /tmp/ccmrLUMM.s 			page 36


1760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
1799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a value defined from parameter definition of
1804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC registers.
1807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
ARM GAS  /tmp/ccmrLUMM.s 			page 37


1817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is
1872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
ARM GAS  /tmp/ccmrLUMM.s 			page 38


1874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
1886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
1890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2)                          \
1895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ||                                                                          \
1898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
1907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2) ||                       \
1912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
1926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
ARM GAS  /tmp/ccmrLUMM.s 			page 39


1931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
1966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
1967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
1970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
1971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
1972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
1973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
1974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
1975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
1976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
1977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
1978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
1979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
1980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
1981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
1982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
1983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
1984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
1985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
1986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
1987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
ARM GAS  /tmp/ccmrLUMM.s 			page 40


1988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
1989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
1990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
1991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
1992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
1993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
1994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
1995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
1996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
1997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
1998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
1999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
2027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
2028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
2030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
2031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
2032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
2033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
2034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
2035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
2036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
2037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
2038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
2039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
2040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
2041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
2042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
2043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
2044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
ARM GAS  /tmp/ccmrLUMM.s 			page 41


2045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
2046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
2047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
2049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
2050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
2051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                 
2055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
2056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                       
2057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)             
2058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :                                                                                         
2059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD
2060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDThresholds().
2067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (< ADCx param >,
2071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_1
2072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           < threshold_value_18_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
ARM GAS  /tmp/ccmrLUMM.s 			page 42


2102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_16_BITS__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_16_BITS__) \
2106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD_16_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationOffsetFactor().
2112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential ended to 0x2A:
2114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetCalibrationOffsetFactor(
2115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1,
2116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
2142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance).
2144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         considered as master instances (do not depend to
2148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         any other ADC instance).
2149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     )?                                                                         \
2155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (ADC1)                                                                    \
2156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      :                                                                         \
2157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADCx__)                                                                \
2158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
ARM GAS  /tmp/ccmrLUMM.s 			page 43


2159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC common register instance
2169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC3_COMMON)                                                           \
2179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)   (ADC12_COMMON)
2183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance are disabled.
2188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
2198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are disabled.
2199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
2201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3))                                                \
2212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
ARM GAS  /tmp/ccmrLUMM.s 			page 44


2216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                         (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (0xFFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: digital value of ADC conversion bit
2249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC3_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))
2252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
2255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a resolution to another resolution.
2256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccmrLUMM.s 			page 45


2273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_X) || defined(ADC_VER_V5_V90)
2274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* defined(ADC_VER_V5_3) */
2302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 46


2330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @brief  Helper macro to convert the ADC conversion data from
2333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         a resolution to another resolution.
2334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __DATA__ ADC conversion data to be converted
2335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @retval ADC conversion data to the requested resolution
2348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
2349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION_ADC3(__DATA__,\
2350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DATA__)                                                                 \
2353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))  \
2354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL))     \
2355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 16 bits)
2365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                       (unit: digital value).
2366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_DATA__,\
2376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         reference VrefInt.
2385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
ARM GAS  /tmp/ccmrLUMM.s 			page 47


2387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         connected to pin Vref+.
2389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of internal voltage reference
2392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 16 bits,
2393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 16 bits)
2398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
2411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        (__ADC_RESOLUTION__),                   \
2412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        LL_ADC_RESOLUTION_16B)                  \
2413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
2426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
2427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  parameters are correct (address and data).
2433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  less accurate than calibrated values),
2436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of temperature sensor
2443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to a resolution of 16 bits,
ARM GAS  /tmp/ccmrLUMM.s 			page 48


2444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor.
2446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_16B)         \
2467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to device datasheet).
2480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
2483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
2484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: digital value)
2485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values.
2492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
ARM GAS  /tmp/ccmrLUMM.s 			page 49


2501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 16 bits
2502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 16 bits.
2504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "Avg_Slop
2506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "V30" (co
2508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((( (                                                                        \
2527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        -                                                                       \
2531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
ARM GAS  /tmp/ccmrLUMM.s 			page 50


2558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
2566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC register address
2585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t data_reg_addr;
2589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register DR */
2593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & (ADCx->DR);
2594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register CDR */
2598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & ((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return data_reg_addr;
2602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, if ADC group injected is used, some
ARM GAS  /tmp/ccmrLUMM.s 			page 51


2615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must be respected.
2617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
2618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
2649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
2654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
ARM GAS  /tmp/ccmrLUMM.s 			page 52


2672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor stabilization time.
2689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a sampling time minimum value is required.
2695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
2704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
2705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
2717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
2727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
2728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
ARM GAS  /tmp/ccmrLUMM.s 			page 53


2729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
2739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
2761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor can be specified only once).
2764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         To perform this processing, use helper macro
2768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationOffsetFactor\n
2774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationOffsetFactor
2775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint
2784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
ARM GAS  /tmp/ccmrLUMM.s 			page 54


2786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT_RES13,
2787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationOffsetFactor\n
2807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationOffsetFactor
2808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT_RES13, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) 
2822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC Linear calibration factor in the mode single-ended.
2829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set linear calibration parameters
2830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor\n
2837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor
2838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
ARM GAS  /tmp/ccmrLUMM.s 			page 55


2843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord, u
2850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
2853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       timeout_cpu_cycles--;
2860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC Linear calibration factor in the mode single-ended.
2875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor\n
2878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor
2879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWor
2890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, LinearityWord);
2893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
2894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT));
2899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
ARM GAS  /tmp/ccmrLUMM.s 			page 56


2900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT));
2901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC resolution.
2905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
2911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
2924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_RES, (((Resolution & 0x10UL) | 0x08UL | (Resolution & 0x04UL))
2931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else /* Rev.V */
2939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if (LL_ADC_RESOLUTION_8B == Resolution)
2941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
2945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
2956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/ccmrLUMM.s 			page 57


2957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (LL_ADC_RESOLUTION_8B == Resolution)
2958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
2962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X*/
2968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC resolution.
2972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    *         @arg @ref LL_ADC_RESOLUTION_6B   **Value available for ADC3 on STM32H72x/3x devices on
2983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3)
2987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_RES));
2994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
2998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
3008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
3009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
3013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/ccmrLUMM.s 			page 58


3014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
3015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X */
3025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC low power mode.
3029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             IRQ vector sequencer.
3047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
3069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
ARM GAS  /tmp/ccmrLUMM.s 			page 59


3071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
3076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
3078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC low power mode:
3082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             IRQ vector sequencer.
3100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 60


3128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected Channel.
3130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the pre-selection of channel configuration.
3131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Channel selections is dependent to ADC instance and IP version:
3132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For STM32H72x/3x This is applicable only for ADC1/ADC2
3133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For Rest of STM32H7xxx This is applicable only all the ADCs instances.
3134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * 
3135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           
3138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           
3139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           
3140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           
3141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           
3142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           
3143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelPreSelection(ADC_TypeDef *ADCx, uint32_t Channel)
3160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (ADCx != ADC3)
3163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       /* ADC channels preselection */
3165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
3168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* ADC channels preselection */
3169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or group injected)
3179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           converted data).
3181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
ARM GAS  /tmp/ccmrLUMM.s 			page 61


3185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
ARM GAS  /tmp/ccmrLUMM.s 			page 62


3242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
3243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
3247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or group injected)
3270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
3278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
3280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
ARM GAS  /tmp/ccmrLUMM.s 			page 63


3299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
3324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
3325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
3326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
3333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
3338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted data).
3339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccmrLUMM.s 			page 64


3356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set data right shift for the ADC selected offset number 1, 2, 3 or 4:
3364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_SetDataRightShift\n
3366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  RigthShift This parameter can be one of the following values:
3373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthSh
3378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RS
3380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get data right shift for the ADC selected offset number 1, 2, 3 or 4:
3384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_GetDataRightShift\n
3386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety)
3397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 << (Offsety & 0x1FUL)))) >> (Offsety 
3399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_SetOffsetSignedSaturation
3408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
ARM GAS  /tmp/ccmrLUMM.s 			page 65


3413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSignedSaturation This parameter can be one of the following values:
3415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t
3420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
3431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_GetOffsetSignedSaturation
3441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
ARM GAS  /tmp/ccmrLUMM.s 			page 66


3470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset saturation mode.
3471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
3498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSaturation);
3499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
3509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_SATEN);
3526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }else
ARM GAS  /tmp/ccmrLUMM.s 			page 67


3527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset sign.
3535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
3562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSign);
3563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset sign if positive or negative.
3569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
ARM GAS  /tmp/ccmrLUMM.s 			page 68


3584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSETPOS);
3590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
3593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         force offset state disable or enable
3600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
3630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
3636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccmrLUMM.s 			page 69


3641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset state disabled or enabled.
3643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSET1_EN);
3663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
3674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
3678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
3685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
ARM GAS  /tmp/ccmrLUMM.s 			page 70


3698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
3737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
ARM GAS  /tmp/ccmrLUMM.s 			page 71


3755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2U
3775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
3779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
3782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or external.
3787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
3794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
3798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
ARM GAS  /tmp/ccmrLUMM.s 			page 72


3812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Set sampling mode is appied to all conversion of regular group.
3841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
3851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
3857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, SamplingMode);
3863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
ARM GAS  /tmp/ccmrLUMM.s 			page 73


3869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 74


3926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
ARM GAS  /tmp/ccmrLUMM.s 			page 75


3983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
3984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
3994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
3996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
4010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
4014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
4017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
4018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
4022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
4031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
4033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
4037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
ARM GAS  /tmp/ccmrLUMM.s 			page 76


4040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
4041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
4056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
4057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
4058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
4059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
4060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
4061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
4062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
4063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
4064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
4065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
4066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
4067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
4068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
4069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
4070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
4071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
ARM GAS  /tmp/ccmrLUMM.s 			page 77


4097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
4126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> A
4129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
4131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
ARM GAS  /tmp/ccmrLUMM.s 			page 78


4154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
ARM GAS  /tmp/ccmrLUMM.s 			page 79


4211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK
4227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
ARM GAS  /tmp/ccmrLUMM.s 			page 80


4268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC data transfer mode
4276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in one shot mode
4279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in circular mode
4280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered to DFSDM data register
4281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_SetDataTransferMode
4282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DataTransferMode Select Data Management configuration
4284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
4287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
4289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
4292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable DMA requests for ADC3.
4294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
4299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
4301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDMAReq(ADC_TypeDef *ADCx)
4304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT (ADCx->CFGR, ADC3_CFGR_DMAEN);
4306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabledDMAReq (ADC_TypeDef *ADCx)
4309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN) == (ADC3_CFGR_DMAEN)) ? 1UL : 0UL);
4311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
ARM GAS  /tmp/ccmrLUMM.s 			page 81


4325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransferMode\n
4339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransferMode
4340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
4352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
ARM GAS  /tmp/ccmrLUMM.s 			page 82


4382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransferMode(ADC_TypeDef *ADCx)
4386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG));
4390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    else
4392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
4393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
4394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
4398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC data transfer mode
4401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in one shot mode
4404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in circular mode
4405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered to DFSDM data register
4406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_GetDataTransferMode
4407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DR_TRANSFER
4410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
4413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDataTransferMode(ADC_TypeDef *ADCx)
4415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMNGT));
4417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         other devices without this feature have a behavior
4425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         equivalent to data overwritten.
4426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccmrLUMM.s 			page 83


4439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
4461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
4465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
4472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
ARM GAS  /tmp/ccmrLUMM.s 			page 84


4496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
4524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
ARM GAS  /tmp/ccmrLUMM.s 			page 85


4553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFSET_POS - 
4562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
4566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
4569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             or external
4574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
4585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
ARM GAS  /tmp/ccmrLUMM.s 			page 86


4610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function retrieves:
4651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
ARM GAS  /tmp/ccmrLUMM.s 			page 87


4667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
ARM GAS  /tmp/ccmrLUMM.s 			page 88


4724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
ARM GAS  /tmp/ccmrLUMM.s 			page 89


4781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
4836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
ARM GAS  /tmp/ccmrLUMM.s 			page 90


4838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group injected.
4849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent trigger.
4852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC group regular.
4857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
4877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
ARM GAS  /tmp/ccmrLUMM.s 			page 91


4895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is disabled:
4896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - only 1 sequence can be configured
4897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and is active perpetually.
4898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is enabled:
4899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           into the queue).
4910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
ARM GAS  /tmp/ccmrLUMM.s 			page 92


4952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         contexts queue.
4953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
4960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         cannot be used):
4961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
5000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
5001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
5002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
5003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
5004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
5005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
5006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
5007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
5008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
ARM GAS  /tmp/ccmrLUMM.s 			page 93


5009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
5010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
5011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
5012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
5014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
5015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
5016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
5017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
5018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
5019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
5020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
5021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
5052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
ARM GAS  /tmp/ccmrLUMM.s 			page 94


5066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
ARM GAS  /tmp/ccmrLUMM.s 			page 95


5123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1UL : 0UL);
5162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JL,
5170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)        |
5171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SequencerNbRanks
5177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             );
5178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 96


5180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted:
5195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         setting).
5198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TS_temp, ...).
5200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required.
5209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
5210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
5219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
ARM GAS  /tmp/ccmrLUMM.s 			page 97


5237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_M
5283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
5285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
ARM GAS  /tmp/ccmrLUMM.s 			page 98


5294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
ARM GAS  /tmp/ccmrLUMM.s 			page 99


5351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOF
5364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
5369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group regular or injected.
5376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
5397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
5398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
ARM GAS  /tmp/ccmrLUMM.s 			page 100


5408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR2_DIFSEL,
5431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->DIFSEL_RES12,
5437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
5441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
5445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
5447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
ARM GAS  /tmp/ccmrLUMM.s 			page 101


5465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
5496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL_RES12, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  
5498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
5516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
ARM GAS  /tmp/ccmrLUMM.s 			page 102


5522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
ARM GAS  /tmp/ccmrLUMM.s 			page 103


5579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
5621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
5622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
5623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
5624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
5625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
5626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
5627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
5628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
5629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
5630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
5631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
5632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
5633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
5634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
5635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
ARM GAS  /tmp/ccmrLUMM.s 			page 104


5636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
5637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
5639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> AD
5648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
5651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
5665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
5667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           one channel.
5670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
ARM GAS  /tmp/ccmrLUMM.s 			page 105


5693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             by bitfield.
5712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
ARM GAS  /tmp/ccmrLUMM.s 			page 106


5750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.
5779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)
5783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
5786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
5789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* or a single channel.                                                     */
5791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  )
5801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
ARM GAS  /tmp/ccmrLUMM.s 			page 107


5807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
5813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return AnalogWDMonitChannels;
5834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high or low.
5839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
ARM GAS  /tmp/ccmrLUMM.s 			page 108


5864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done
5865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on oversampling intermediate computation (after ratio, before shift
5866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         application): intermediate register bitfield [32:7]
5867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (26 most significant bits).
5868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
5900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
5902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdsHighLow,
5903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_
5904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
5913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
5914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (AWDThresholdsHighLow));
5915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
ARM GAS  /tmp/ccmrLUMM.s 			page 109


5921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> A
5925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) * 
5926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + (AWDThresholdsHighLow));
5927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
5930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         concatenated.
5936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
5954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
5955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_
5959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MA
5960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + (AWDThresholdsHighLow));
5961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + ((AWDy & ADC_AWD_TR12_REGOFFSE
5966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + (AWDThresholdsHighLow));
5967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high and low. Applicable for devices STM32H72xx and STM32H73xx.
5977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
ARM GAS  /tmp/ccmrLUMM.s 			page 110


5978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
6000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
6001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
6002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
6003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
6004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
6005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
6006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
6007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
6008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
6009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
6013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
6014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
6015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
6016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
6019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
6021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
6022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDy".                                                                  */
6023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
6024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
6025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
6028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
6030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_TR1_HT1 | ADC3_TR1_LT1,
6031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (AWDThresholdHighValue << ADC3_TR1_HT1_Pos) | AWDThresholdLowValue);
6032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/ccmrLUMM.s 			page 111


6035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
6036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
6037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (LL_ADC_AWD_THRESHOLD_LOW));
6038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
6039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK)
6040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + (LL_ADC_AWD_THRESHOLD_HIGH));
6041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
6043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
6044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
6050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
6058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
6062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT, FilteringConfig);
6079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be:
ARM GAS  /tmp/ccmrLUMM.s 			page 112


6092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT));
6108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance, return 0 */
6112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
6113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
6116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccmrLUMM.s 			page 113


6149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
6191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, oversampling discontinuous mode
6192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 114


6206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling
6227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ratio
6230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - shift
6231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Ratio This parameter can be in the range from 1 to 1024.
6239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_
6257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
ARM GAS  /tmp/ccmrLUMM.s 			page 115


6263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Ratio This parameter can be in the from 1 to 1024.
6265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (((uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR)) + (1UL << ADC_CFGR2_OVSR_Pos)) >> ADC_
6269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC boost mode.
6304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_SetBoostMode
6309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  BoostMode This parameter can be one of the following values:
6311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_6MHZ25
6312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_12MHZ5
6313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_20MHZ
6314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_25MHZ
6315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_50MHZ
6316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetBoostMode(ADC_TypeDef *ADCx, uint32_t BoostMode)
6319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccmrLUMM.s 			page 116


6320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
6322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else   /* ADC_VER_V5_V90 */
6326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
6329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
6335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC boost mode.
6340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_GetBoostMode
6345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: Boost disabled 1: Boost enabled
6347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetBoostMode(ADC_TypeDef *ADCx)
6349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)READ_BIT(ADCx->CR, ADC_CR_BOOST_0);
6353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return ((READ_BIT(ADCx->CR, ADC_CR_BOOST) == (ADC_CR_BOOST)) ? 1UL : 0UL);
6357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro
6371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
ARM GAS  /tmp/ccmrLUMM.s 			page 117


6377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
6413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
ARM GAS  /tmp/ccmrLUMM.s 			page 118


6434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DAMDF, MultiDMATransfer);
6461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
ARM GAS  /tmp/ccmrLUMM.s 			page 119


6491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
6504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccmrLUMM.s 			page 120


6548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
6553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccmrLUMM.s 			page 121


6605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
6633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
6644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC internal voltage regulator enable,
6649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccmrLUMM.s 			page 122


6662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
6693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC enable, a delay for
6698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion start.
6700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADEN);
ARM GAS  /tmp/ccmrLUMM.s 			page 123


6719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADDIS);
6739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
6753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
6764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, a minimum number of ADC clock cycles
6770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration duration:
6773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of offset: 520 ADC clock cycles
6774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of linearity: 131072 ADC clock cycles
6775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
ARM GAS  /tmp/ccmrLUMM.s 			page 124


6776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
6781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
6782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run can be performed only once).
6784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration\n
6789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALLIN       LL_ADC_StartCalibration
6790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationMode This parameter can be one of the following values:
6792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET
6793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET_LINEARITY
6794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t 
6800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
  76              		.loc 2 6804 0
  77 0034 8268     		ldr	r2, [r0, #8]
  78 0036 1B4B     		ldr	r3, .L10+4
  79 0038 1340     		ands	r3, r3, r2
  80 003a 07F48031 		and	r1, r7, #65536
  81 003e 06F08042 		and	r2, r6, #1073741824
  82 0042 0A43     		orrs	r2, r2, r1
  83 0044 1343     		orrs	r3, r3, r2
  84 0046 43F00043 		orr	r3, r3, #-2147483648
  85 004a 8360     		str	r3, [r0, #8]
  86              	.L4:
  87              	.LBE324:
  88              	.LBE323:
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Wait for calibration completion */
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
  89              		.loc 1 165 0
  90 004c 2368     		ldr	r3, [r4]
  91              	.LVL4:
  92              	.LBB325:
  93              	.LBB326:
6805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCALLIN | ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCAL | (CalibrationMode & ADC_CALIB_MODE_MASK) | (SingleDiff & ADC_SINGLEDIFF_
6807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
ARM GAS  /tmp/ccmrLUMM.s 			page 125


6812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
  94              		.loc 2 6817 0
  95 004e 9B68     		ldr	r3, [r3, #8]
  96              	.LVL5:
  97 0050 002B     		cmp	r3, #0
  98 0052 11DA     		bge	.L5
  99              	.LVL6:
 100              	.LBE326:
 101              	.LBE325:
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       wait_loop_index++;
 102              		.loc 1 167 0
 103 0054 019B     		ldr	r3, [sp, #4]
 104 0056 0133     		adds	r3, r3, #1
 105 0058 0193     		str	r3, [sp, #4]
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 106              		.loc 1 168 0
 107 005a 019A     		ldr	r2, [sp, #4]
 108 005c 124B     		ldr	r3, .L10+8
 109 005e 9A42     		cmp	r2, r3
 110 0060 F4D9     		bls	.L4
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 111              		.loc 1 171 0
 112 0062 236E     		ldr	r3, [r4, #96]
 113 0064 23F01203 		bic	r3, r3, #18
 114 0068 43F01003 		orr	r3, r3, #16
 115 006c 2366     		str	r3, [r4, #96]
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_BUSY_INTERNAL,
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_ERROR_INTERNAL);
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Process unlocked */
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 116              		.loc 1 176 0
 117 006e 0023     		movs	r3, #0
 118 0070 84F85C30 		strb	r3, [r4, #92]
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         return HAL_ERROR;
 119              		.loc 1 178 0
 120 0074 0125     		movs	r5, #1
 121 0076 0DE0     		b	.L2
 122              	.LVL7:
 123              	.L5:
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC state */
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 124              		.loc 1 183 0
 125 0078 236E     		ldr	r3, [r4, #96]
 126 007a 23F00303 		bic	r3, r3, #3
ARM GAS  /tmp/ccmrLUMM.s 			page 126


 127 007e 43F00103 		orr	r3, r3, #1
 128 0082 2366     		str	r3, [r4, #96]
 129 0084 03E0     		b	.L7
 130              	.LVL8:
 131              	.L3:
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_BUSY_INTERNAL,
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 132              		.loc 1 189 0
 133 0086 236E     		ldr	r3, [r4, #96]
 134 0088 43F01003 		orr	r3, r3, #16
 135 008c 2366     		str	r3, [r4, #96]
 136              	.LVL9:
 137              	.L7:
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: No need to update variable "tmp_hal_status" here: already set    */
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*       to state "HAL_ERROR" by function disabling the ADC.              */
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 138              		.loc 1 196 0
 139 008e 0023     		movs	r3, #0
 140 0090 84F85C30 		strb	r3, [r4, #92]
 141              	.LVL10:
 142              	.L2:
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 143              		.loc 1 200 0
 144 0094 2846     		mov	r0, r5
 145 0096 03B0     		add	sp, sp, #12
 146              	.LCFI2:
 147              		.cfi_remember_state
 148              		.cfi_def_cfa_offset 20
 149              		@ sp needed
 150 0098 F0BD     		pop	{r4, r5, r6, r7, pc}
 151              	.LVL11:
 152              	.L8:
 153              	.LCFI3:
 154              		.cfi_restore_state
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 155              		.loc 1 146 0
 156 009a 0225     		movs	r5, #2
 157 009c FAE7     		b	.L2
 158              	.L11:
 159 009e 00BF     		.align	2
 160              	.L10:
 161 00a0 FDEEFFFF 		.word	-4355
 162 00a4 C0FFFE3F 		.word	1073676224
 163 00a8 FFF7C325 		.word	633599999
 164              		.cfi_endproc
 165              	.LFE343:
ARM GAS  /tmp/ccmrLUMM.s 			page 127


 167              		.section	.text.HAL_ADCEx_Calibration_GetValue,"ax",%progbits
 168              		.align	1
 169              		.global	HAL_ADCEx_Calibration_GetValue
 170              		.syntax unified
 171              		.thumb
 172              		.thumb_func
 173              		.fpu fpv5-d16
 175              	HAL_ADCEx_Calibration_GetValue:
 176              	.LFB344:
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Get the calibration factor.
 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param SingleDiff This parameter can be only:
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval Calibration value.
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_Calibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 177              		.loc 1 211 0
 178              		.cfi_startproc
 179              		@ args = 0, pretend = 0, frame = 0
 180              		@ frame_needed = 0, uses_anonymous_args = 0
 181              		@ link register save eliminated.
 182              	.LVL12:
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return the selected ADC calibration value */
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return LL_ADC_GetCalibrationOffsetFactor(hadc->Instance, SingleDiff);
 183              		.loc 1 217 0
 184 0000 0368     		ldr	r3, [r0]
 185              	.LVL13:
 186              	.LBB327:
 187              	.LBB328:
2821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 188              		.loc 2 2821 0
 189 0002 D3F8C400 		ldr	r0, [r3, #196]
 190              	.LVL14:
 191 0006 0840     		ands	r0, r0, r1
 192 0008 20F0F820 		bic	r0, r0, #-134154240
 193 000c 090B     		lsrs	r1, r1, #12
 194              	.LVL15:
 195 000e 01F01001 		and	r1, r1, #16
 196              	.LVL16:
 197              	.LBE328:
 198              	.LBE327:
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 199              		.loc 1 218 0
 200 0012 C840     		lsrs	r0, r0, r1
 201 0014 7047     		bx	lr
 202              		.cfi_endproc
 203              	.LFE344:
 205              		.section	.text.HAL_ADCEx_LinearCalibration_GetValue,"ax",%progbits
 206              		.align	1
ARM GAS  /tmp/ccmrLUMM.s 			page 128


 207              		.global	HAL_ADCEx_LinearCalibration_GetValue
 208              		.syntax unified
 209              		.thumb
 210              		.thumb_func
 211              		.fpu fpv5-d16
 213              	HAL_ADCEx_LinearCalibration_GetValue:
 214              	.LFB345:
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Get the calibration factor from automatic conversion result
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc ADC handle
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  LinearCalib_Buffer: Linear calibration factor
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_GetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCal
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 215              		.loc 1 227 0
 216              		.cfi_startproc
 217              		@ args = 0, pretend = 0, frame = 0
 218              		@ frame_needed = 0, uses_anonymous_args = 0
 219              	.LVL17:
 220 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 221              	.LCFI4:
 222              		.cfi_def_cfa_offset 24
 223              		.cfi_offset 3, -24
 224              		.cfi_offset 4, -20
 225              		.cfi_offset 5, -16
 226              		.cfi_offset 6, -12
 227              		.cfi_offset 7, -8
 228              		.cfi_offset 14, -4
 229 0002 0646     		mov	r6, r0
 230 0004 0F46     		mov	r7, r1
 231              	.LVL18:
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t cnt;
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t temp_REG_IsConversionOngoing = 0UL;
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Enable the ADC ADEN = 1 to be able to read the linear calibration factor */
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 232              		.loc 1 236 0
 233 0006 0368     		ldr	r3, [r0]
 234              	.LVL19:
 235              	.LBB329:
 236              	.LBB330:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 237              		.loc 2 6752 0
 238 0008 9B68     		ldr	r3, [r3, #8]
 239              	.LVL20:
 240 000a 13F0010F 		tst	r3, #1
 241 000e 11D0     		beq	.L24
 242              	.LBE330:
 243              	.LBE329:
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t temp_REG_IsConversionOngoing = 0UL;
 244              		.loc 1 229 0
ARM GAS  /tmp/ccmrLUMM.s 			page 129


 245 0010 0020     		movs	r0, #0
 246              	.LVL21:
 247              	.L14:
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 248              		.loc 1 241 0
 249 0012 0028     		cmp	r0, #0
 250 0014 38D1     		bne	.L15
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 251              		.loc 1 243 0
 252 0016 3368     		ldr	r3, [r6]
 253              	.LVL22:
 254              	.LBB331:
 255              	.LBB332:
6818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
6834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
6837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTART);
6854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccmrLUMM.s 			page 130


6857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTP);
6874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 256              		.loc 2 6884 0
 257 0018 9A68     		ldr	r2, [r3, #8]
 258 001a 12F0040E 		ands	lr, r2, #4
 259 001e 07D0     		beq	.L16
 260              	.LVL23:
 261              	.LBE332:
 262              	.LBE331:
 263              	.LBB333:
 264              	.LBB334:
6871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 265              		.loc 2 6871 0
 266 0020 9968     		ldr	r1, [r3, #8]
 267 0022 1A4A     		ldr	r2, .L26
 268 0024 0A40     		ands	r2, r2, r1
 269 0026 42F01002 		orr	r2, r2, #16
 270 002a 9A60     		str	r2, [r3, #8]
 271              	.LVL24:
 272              	.LBE334:
 273              	.LBE333:
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StopConversion(hadc->Instance);
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       temp_REG_IsConversionOngoing = 1UL;
 274              		.loc 1 246 0
 275 002c 4FF0010E 		mov	lr, #1
 276              	.LVL25:
 277              	.L16:
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL; cnt--)
 278              		.loc 1 248 0
ARM GAS  /tmp/ccmrLUMM.s 			page 131


 279 0030 0625     		movs	r5, #6
 280 0032 09E0     		b	.L17
 281              	.LVL26:
 282              	.L24:
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 283              		.loc 1 238 0
 284 0034 FFF7FEFF 		bl	ADC_Enable
 285              	.LVL27:
 286 0038 EBE7     		b	.L14
 287              	.LVL28:
 288              	.L19:
 289              	.LBB335:
 290              	.LBB336:
2898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 291              		.loc 2 2898 0
 292 003a D1F8C830 		ldr	r3, [r1, #200]
 293              	.LVL29:
 294 003e 23F04043 		bic	r3, r3, #-1073741824
 295              	.LVL30:
 296              	.LBE336:
 297              	.LBE335:
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LinearCalib_Buffer[cnt - 1U] = LL_ADC_GetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCA
 298              		.loc 1 250 0
 299 0042 47F82C30 		str	r3, [r7, ip, lsl #2]
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 300              		.loc 1 248 0
 301 0046 013D     		subs	r5, r5, #1
 302              	.LVL31:
 303              	.L17:
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 304              		.loc 1 248 0 is_stmt 0 discriminator 1
 305 0048 A5B1     		cbz	r5, .L25
 306              		.loc 1 250 0 is_stmt 1 discriminator 3
 307 004a 3168     		ldr	r1, [r6]
 308 004c C5F10603 		rsb	r3, r5, #6
 309 0050 4FF00064 		mov	r4, #134217728
 310 0054 DC40     		lsrs	r4, r4, r3
 311 0056 6FF0404C 		mvn	ip, #-1073741824
 312 005a AC44     		add	ip, ip, r5
 313              	.LVL32:
 314              	.LBB338:
 315              	.LBB337:
2892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
 316              		.loc 2 2892 0 discriminator 3
 317 005c 8B68     		ldr	r3, [r1, #8]
 318 005e 23EA0403 		bic	r3, r3, r4
 319 0062 8B60     		str	r3, [r1, #8]
2891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, LinearityWord);
 320              		.loc 2 2891 0 discriminator 3
 321 0064 0A4B     		ldr	r3, .L26+4
 322              	.LVL33:
 323              	.L18:
2893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 324              		.loc 2 2893 0
 325 0066 8A68     		ldr	r2, [r1, #8]
 326 0068 1442     		tst	r4, r2
ARM GAS  /tmp/ccmrLUMM.s 			page 132


 327 006a E6D0     		beq	.L19
 328 006c 002B     		cmp	r3, #0
 329 006e E4D0     		beq	.L19
2895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
 330              		.loc 2 2895 0
 331 0070 013B     		subs	r3, r3, #1
 332              	.LVL34:
 333 0072 F8E7     		b	.L18
 334              	.LVL35:
 335              	.L25:
 336              	.LBE337:
 337              	.LBE338:
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (temp_REG_IsConversionOngoing != 0UL)
 338              		.loc 1 252 0
 339 0074 BEF1000F 		cmp	lr, #0
 340 0078 06D0     		beq	.L15
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 341              		.loc 1 254 0
 342 007a 3268     		ldr	r2, [r6]
 343              	.LVL36:
 344              	.LBB339:
 345              	.LBB340:
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 346              		.loc 2 6851 0
 347 007c 9168     		ldr	r1, [r2, #8]
 348 007e 034B     		ldr	r3, .L26
 349 0080 0B40     		ands	r3, r3, r1
 350 0082 43F00403 		orr	r3, r3, #4
 351 0086 9360     		str	r3, [r2, #8]
 352              	.LVL37:
 353              	.L15:
 354              	.LBE340:
 355              	.LBE339:
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 356              		.loc 1 259 0
 357 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 358              	.LVL38:
 359              	.L27:
 360 008a 00BF     		.align	2
 361              	.L26:
 362 008c C0FFFF7F 		.word	2147483584
 363 0090 70000800 		.word	524400
 364              		.cfi_endproc
 365              	.LFE345:
 367              		.section	.text.HAL_ADCEx_Calibration_SetValue,"ax",%progbits
 368              		.align	1
 369              		.global	HAL_ADCEx_Calibration_SetValue
 370              		.syntax unified
 371              		.thumb
 372              		.thumb_func
 373              		.fpu fpv5-d16
ARM GAS  /tmp/ccmrLUMM.s 			page 133


 375              	HAL_ADCEx_Calibration_SetValue:
 376              	.LFB346:
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Set the calibration factor to overwrite automatic conversion result.
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC must be enabled and no conversion is ongoing.
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param SingleDiff This parameter can be only:
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param CalibrationFactor Calibration factor (coded on 7 bits maximum)
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_Calibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t SingleDiff, uint
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 377              		.loc 1 272 0
 378              		.cfi_startproc
 379              		@ args = 0, pretend = 0, frame = 0
 380              		@ frame_needed = 0, uses_anonymous_args = 0
 381              		@ link register save eliminated.
 382              	.LVL39:
 383 0000 0346     		mov	r3, r0
 384              	.LVL40:
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_CALFACT(CalibrationFactor));
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 385              		.loc 1 283 0
 386 0002 90F85C00 		ldrb	r0, [r0, #92]	@ zero_extendqisi2
 387              	.LVL41:
 388 0006 0128     		cmp	r0, #1
 389 0008 3AD0     		beq	.L34
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 390              		.loc 1 272 0 discriminator 2
 391 000a 70B4     		push	{r4, r5, r6}
 392              	.LCFI5:
 393              		.cfi_def_cfa_offset 12
 394              		.cfi_offset 4, -12
 395              		.cfi_offset 5, -8
 396              		.cfi_offset 6, -4
 397              		.loc 1 283 0 discriminator 2
 398 000c 0120     		movs	r0, #1
 399 000e 83F85C00 		strb	r0, [r3, #92]
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Verification of hardware constraints before modifying the calibration    */
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* factors register: ADC must be enabled, no conversion on going.           */
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 400              		.loc 1 287 0 discriminator 2
 401 0012 1868     		ldr	r0, [r3]
 402              	.LVL42:
ARM GAS  /tmp/ccmrLUMM.s 			page 134


 403              	.LBB341:
 404              	.LBB342:
 405              		.loc 2 6884 0 discriminator 2
 406 0014 8468     		ldr	r4, [r0, #8]
 407 0016 14F0040F 		tst	r4, #4
 408 001a 1FD0     		beq	.L35
 409              		.loc 2 6884 0 is_stmt 0
 410 001c 0125     		movs	r5, #1
 411              	.L30:
 412              	.LVL43:
 413              	.LBE342:
 414              	.LBE341:
 415              	.LBB344:
 416              	.LBB345:
6885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
6903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
6915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData16
6919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
6921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
6923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccmrLUMM.s 			page 135


6928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
6930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData14
6934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FF
6936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData14(ADC_TypeDef *ADCx)
6938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
6945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
6960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
6975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
ARM GAS  /tmp/ccmrLUMM.s 			page 136


6985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
6994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
6995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
6996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         separately).
6997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
6998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
6999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
7002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
7003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
7004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
7005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
7008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
7010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ConversionData)
7011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
7012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
7020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
7025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
7026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
7027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
7028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
7029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
7030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
7031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
7032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
7033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
7035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
7036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
7038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccmrLUMM.s 			page 137


7042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTART);
7049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
7053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
7054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
7056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
7058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
7062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTP);
7069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
7073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
7074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
7076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
7078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 417              		.loc 2 7079 0 is_stmt 1
 418 001e 8468     		ldr	r4, [r0, #8]
 419 0020 14F0080F 		tst	r4, #8
 420 0024 1CD0     		beq	.L36
 421 0026 0126     		movs	r6, #1
 422              	.L31:
 423              	.LVL44:
 424              	.LBE345:
 425              	.LBE344:
 426              	.LBB347:
 427              	.LBB348:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 428              		.loc 2 6752 0
 429 0028 8468     		ldr	r4, [r0, #8]
 430 002a 14F0010F 		tst	r4, #1
 431 002e 19D0     		beq	.L32
 432              	.LVL45:
 433              	.LBE348:
 434              	.LBE347:
ARM GAS  /tmp/ccmrLUMM.s 			page 138


 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_regular == 0UL)
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
 435              		.loc 1 292 0
 436 0030 56EA0504 		orrs	r4, r6, r5
 437 0034 16D1     		bne	.L32
 438              	.LVL46:
 439              	.LBB349:
 440              	.LBB350:
2786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
 441              		.loc 2 2786 0
 442 0036 D0F8C450 		ldr	r5, [r0, #196]
 443 003a 21F0F824 		bic	r4, r1, #-134154240
 444 003e 25EA0405 		bic	r5, r5, r4
 445 0042 C1F30A04 		ubfx	r4, r1, #0, #11
 446 0046 E443     		mvns	r4, r4
 447 0048 04EA1131 		and	r1, r4, r1, lsr #12
 448              	.LVL47:
 449 004c 01F01001 		and	r1, r1, #16
 450 0050 8A40     		lsls	r2, r2, r1
 451              	.LVL48:
 452 0052 2A43     		orrs	r2, r2, r5
 453 0054 C0F8C420 		str	r2, [r0, #196]
 454              	.LBE350:
 455              	.LBE349:
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 456              		.loc 1 273 0
 457 0058 0020     		movs	r0, #0
 458              	.LVL49:
 459 005a 0CE0     		b	.L33
 460              	.LVL50:
 461              	.L35:
 462              	.LBB351:
 463              	.LBB343:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 464              		.loc 2 6884 0
 465 005c 0025     		movs	r5, #0
 466 005e DEE7     		b	.L30
 467              	.LVL51:
 468              	.L36:
 469              	.LBE343:
 470              	.LBE351:
 471              	.LBB352:
 472              	.LBB346:
 473              		.loc 2 7079 0
 474 0060 0026     		movs	r6, #0
 475 0062 E1E7     		b	.L31
 476              	.LVL52:
 477              	.L32:
 478              	.LBE346:
 479              	.LBE352:
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set the selected ADC calibration value */
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_SetCalibrationOffsetFactor(hadc->Instance, SingleDiff, CalibrationFactor);
ARM GAS  /tmp/ccmrLUMM.s 			page 139


 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine */
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 480              		.loc 1 301 0
 481 0064 1A6E     		ldr	r2, [r3, #96]
 482              	.LVL53:
 483 0066 42F02002 		orr	r2, r2, #32
 484 006a 1A66     		str	r2, [r3, #96]
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC error code */
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 485              		.loc 1 303 0
 486 006c 5A6E     		ldr	r2, [r3, #100]
 487 006e 42F00102 		orr	r2, r2, #1
 488 0072 5A66     		str	r2, [r3, #100]
 489              	.LVL54:
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 490              		.loc 1 306 0
 491 0074 0120     		movs	r0, #1
 492              	.LVL55:
 493              	.L33:
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 494              		.loc 1 310 0
 495 0076 0022     		movs	r2, #0
 496 0078 83F85C20 		strb	r2, [r3, #92]
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 497              		.loc 1 314 0
 498 007c 70BC     		pop	{r4, r5, r6}
 499              	.LCFI6:
 500              		.cfi_restore 6
 501              		.cfi_restore 5
 502              		.cfi_restore 4
 503              		.cfi_def_cfa_offset 0
 504 007e 7047     		bx	lr
 505              	.LVL56:
 506              	.L34:
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 507              		.loc 1 283 0
 508 0080 0220     		movs	r0, #2
 509              		.loc 1 314 0
 510 0082 7047     		bx	lr
 511              		.cfi_endproc
 512              	.LFE346:
 514              		.section	.text.HAL_ADCEx_LinearCalibration_SetValue,"ax",%progbits
 515              		.align	1
 516              		.global	HAL_ADCEx_LinearCalibration_SetValue
 517              		.syntax unified
 518              		.thumb
ARM GAS  /tmp/ccmrLUMM.s 			page 140


 519              		.thumb_func
 520              		.fpu fpv5-d16
 522              	HAL_ADCEx_LinearCalibration_SetValue:
 523              	.LFB347:
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Set the linear calibration factor
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc ADC handle
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  LinearCalib_Buffer: Linear calibration factor
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_SetValue(ADC_HandleTypeDef *hadc, uint32_t *LinearCal
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 524              		.loc 1 323 0
 525              		.cfi_startproc
 526              		@ args = 0, pretend = 0, frame = 8
 527              		@ frame_needed = 0, uses_anonymous_args = 0
 528              	.LVL57:
 529 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 530              	.LCFI7:
 531              		.cfi_def_cfa_offset 20
 532              		.cfi_offset 4, -20
 533              		.cfi_offset 5, -16
 534              		.cfi_offset 6, -12
 535              		.cfi_offset 7, -8
 536              		.cfi_offset 14, -4
 537 0002 83B0     		sub	sp, sp, #12
 538              	.LCFI8:
 539              		.cfi_def_cfa_offset 32
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t cnt;
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 540              		.loc 1 325 0
 541 0004 0023     		movs	r3, #0
 542 0006 0193     		str	r3, [sp, #4]
 543              	.LVL58:
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t temp_REG_IsConversionOngoing = 0UL;
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  Exit deep power down mode if still in that state                        */
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_DEEPPWD))
 544              		.loc 1 333 0
 545 0008 0368     		ldr	r3, [r0]
 546 000a 9A68     		ldr	r2, [r3, #8]
 547 000c 12F0005F 		tst	r2, #536870912
 548 0010 03D0     		beq	.L42
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Exit deep power down mode */
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 549              		.loc 1 336 0
 550 0012 9A68     		ldr	r2, [r3, #8]
 551 0014 22F00052 		bic	r2, r2, #536870912
 552 0018 9A60     		str	r2, [r3, #8]
 553              	.L42:
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 141


 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* System was in deep power down mode, calibration must
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        be relaunched or a previously saved calibration factor
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        re-applied once the ADC voltage regulator is enabled */
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 554              		.loc 1 344 0
 555 001a 0368     		ldr	r3, [r0]
 556 001c 9A68     		ldr	r2, [r3, #8]
 557 001e 12F0805F 		tst	r2, #268435456
 558 0022 14D1     		bne	.L43
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable ADC internal voltage regulator                                  */
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN);
 559              		.loc 1 347 0
 560 0024 9A68     		ldr	r2, [r3, #8]
 561 0026 42F08052 		orr	r2, r2, #268435456
 562 002a 9A60     		str	r2, [r3, #8]
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Delay for ADC stabilization time                                       */
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Wait loop initialization and execution                                 */
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: Variable divided by 2 to compensate partially                    */
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*       CPU processing cycles.                                           */
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / (1000000UL * 2UL)));
 563              		.loc 1 352 0
 564 002c 4B4B     		ldr	r3, .L67
 565 002e 1B68     		ldr	r3, [r3]
 566 0030 4B4A     		ldr	r2, .L67+4
 567 0032 A2FB0323 		umull	r2, r3, r2, r3
 568 0036 DB0C     		lsrs	r3, r3, #19
 569 0038 03EB8303 		add	r3, r3, r3, lsl #2
 570 003c 5A00     		lsls	r2, r3, #1
 571 003e 0192     		str	r2, [sp, #4]
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (wait_loop_index != 0UL)
 572              		.loc 1 353 0
 573 0040 02E0     		b	.L44
 574              	.L45:
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       wait_loop_index--;
 575              		.loc 1 355 0
 576 0042 019B     		ldr	r3, [sp, #4]
 577 0044 013B     		subs	r3, r3, #1
 578 0046 0193     		str	r3, [sp, #4]
 579              	.L44:
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while (wait_loop_index != 0UL)
 580              		.loc 1 353 0
 581 0048 019B     		ldr	r3, [sp, #4]
 582 004a 002B     		cmp	r3, #0
 583 004c F9D1     		bne	.L45
 584              	.L43:
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* clocking, voltage regulator would not be enabled).                       */
ARM GAS  /tmp/ccmrLUMM.s 			page 142


 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 585              		.loc 1 363 0
 586 004e 0368     		ldr	r3, [r0]
 587 0050 9A68     		ldr	r2, [r3, #8]
 588 0052 12F0805F 		tst	r2, #268435456
 589 0056 09D0     		beq	.L64
 590              	.LVL59:
 591              	.LBB353:
 592              	.LBB354:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 593              		.loc 2 6752 0
 594 0058 9A68     		ldr	r2, [r3, #8]
 595 005a 12F0010F 		tst	r2, #1
 596 005e 11D0     		beq	.L48
 597              	.LVL60:
 598              	.LBE354:
 599              	.LBE353:
 600              	.LBB355:
 601              	.LBB356:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 602              		.loc 2 6884 0
 603 0060 9F68     		ldr	r7, [r3, #8]
 604 0062 17F00407 		ands	r7, r7, #4
 605 0066 3ED1     		bne	.L49
 606              	.LVL61:
 607              	.L50:
 608              	.LBE356:
 609              	.LBE355:
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC error code to ADC peripheral internal error */
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return  HAL_ERROR;
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Enable the ADC peripheral */
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL) /* Enable the ADC if it is disabled */
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (ADC_Enable(hadc) != HAL_OK)
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return  HAL_ERROR;
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_R
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (void)ADC_Disable(hadc);
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else  /* ADC is already enabled, so no need to enable it but need to stop conversion */
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
ARM GAS  /tmp/ccmrLUMM.s 			page 143


 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StopConversion(hadc->Instance);
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       temp_REG_IsConversionOngoing = 1UL;
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     for (cnt = ADC_LINEAR_CALIB_REG_COUNT; cnt > 0UL ; cnt--)
 610              		.loc 1 396 0
 611 0068 0626     		movs	r6, #6
 612 006a 45E0     		b	.L56
 613              	.LVL62:
 614              	.L64:
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 615              		.loc 1 366 0
 616 006c 036E     		ldr	r3, [r0, #96]
 617 006e 43F01003 		orr	r3, r3, #16
 618 0072 0366     		str	r3, [r0, #96]
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 619              		.loc 1 369 0
 620 0074 436E     		ldr	r3, [r0, #100]
 621 0076 43F00103 		orr	r3, r3, #1
 622 007a 4366     		str	r3, [r0, #100]
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 623              		.loc 1 371 0
 624 007c 0125     		movs	r5, #1
 625              	.LVL63:
 626              	.L47:
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_SetCalibrationLinearFactor(hadc->Instance, ADC_CR_LINCALRDYW6 >> (ADC_LINEAR_CALIB_REG
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (temp_REG_IsConversionOngoing != 0UL)
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return HAL_OK;
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 627              		.loc 1 406 0
 628 007e 2846     		mov	r0, r5
 629 0080 03B0     		add	sp, sp, #12
 630              	.LCFI9:
 631              		.cfi_remember_state
 632              		.cfi_def_cfa_offset 20
 633              		@ sp needed
 634 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 635              	.LVL64:
 636              	.L48:
 637              	.LCFI10:
 638              		.cfi_restore_state
 639 0084 0E46     		mov	r6, r1
 640 0086 0746     		mov	r7, r0
 641              	.LVL65:
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 642              		.loc 1 376 0
 643 0088 FFF7FEFF 		bl	ADC_Enable
 644              	.LVL66:
 645 008c 0546     		mov	r5, r0
 646 008e 0028     		cmp	r0, #0
 647 0090 5FD1     		bne	.L61
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
ARM GAS  /tmp/ccmrLUMM.s 			page 144


 648              		.loc 1 382 0
 649 0092 0621     		movs	r1, #6
 650 0094 06E0     		b	.L51
 651              	.LVL67:
 652              	.L54:
 653              	.LBB357:
 654              	.LBB358:
 655              	.LBB359:
2859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
 656              		.loc 2 2859 0
 657 0096 013B     		subs	r3, r3, #1
 658              	.LVL68:
 659              	.L53:
2857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
 660              		.loc 2 2857 0
 661 0098 8268     		ldr	r2, [r0, #8]
 662 009a 1442     		tst	r4, r2
 663 009c 01D1     		bne	.L52
 664 009e 002B     		cmp	r3, #0
 665 00a0 F9D1     		bne	.L54
 666              	.LVL69:
 667              	.L52:
 668              	.LBE359:
 669              	.LBE358:
 670              	.LBE357:
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 671              		.loc 1 382 0 discriminator 3
 672 00a2 0139     		subs	r1, r1, #1
 673              	.LVL70:
 674              	.L51:
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 675              		.loc 1 382 0 is_stmt 0 discriminator 1
 676 00a4 D9B1     		cbz	r1, .L65
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 677              		.loc 1 384 0 is_stmt 1 discriminator 3
 678 00a6 3868     		ldr	r0, [r7]
 679 00a8 C1F10603 		rsb	r3, r1, #6
 680 00ac 4FF00064 		mov	r4, #134217728
 681 00b0 DC40     		lsrs	r4, r4, r3
 682 00b2 6FF04043 		mvn	r3, #-1073741824
 683 00b6 0B44     		add	r3, r3, r1
 684 00b8 56F82330 		ldr	r3, [r6, r3, lsl #2]
 685              	.LVL71:
 686              	.LBB362:
 687              	.LBB361:
2852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 688              		.loc 2 2852 0 discriminator 3
 689 00bc 294A     		ldr	r2, .L67+8
 690 00be 9042     		cmp	r0, r2
 691 00c0 EFD0     		beq	.L52
 692              	.LVL72:
 693              	.LBB360:
2855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
 694              		.loc 2 2855 0
 695 00c2 D0F8C820 		ldr	r2, [r0, #200]
 696 00c6 02F04042 		and	r2, r2, #-1073741824
 697 00ca 1343     		orrs	r3, r3, r2
ARM GAS  /tmp/ccmrLUMM.s 			page 145


 698              	.LVL73:
 699 00cc C0F8C830 		str	r3, [r0, #200]
 700              	.LVL74:
2856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 701              		.loc 2 2856 0
 702 00d0 8368     		ldr	r3, [r0, #8]
 703 00d2 23F48033 		bic	r3, r3, #65536
 704 00d6 2343     		orrs	r3, r3, r4
 705 00d8 8360     		str	r3, [r0, #8]
2854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
 706              		.loc 2 2854 0
 707 00da 234B     		ldr	r3, .L67+12
 708 00dc DCE7     		b	.L53
 709              	.LVL75:
 710              	.L65:
 711              	.LBE360:
 712              	.LBE361:
 713              	.LBE362:
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 714              		.loc 1 386 0
 715 00de 3846     		mov	r0, r7
 716 00e0 FFF7FEFF 		bl	ADC_Disable
 717              	.LVL76:
 718 00e4 CBE7     		b	.L47
 719              	.LVL77:
 720              	.L49:
 721              	.LBB363:
 722              	.LBB364:
6871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 723              		.loc 2 6871 0
 724 00e6 9C68     		ldr	r4, [r3, #8]
 725 00e8 204A     		ldr	r2, .L67+16
 726 00ea 2240     		ands	r2, r2, r4
 727 00ec 42F01002 		orr	r2, r2, #16
 728 00f0 9A60     		str	r2, [r3, #8]
 729              	.LVL78:
 730              	.LBE364:
 731              	.LBE363:
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 732              		.loc 1 394 0
 733 00f2 0127     		movs	r7, #1
 734 00f4 B8E7     		b	.L50
 735              	.LVL79:
 736              	.L57:
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 737              		.loc 1 396 0 discriminator 3
 738 00f6 013E     		subs	r6, r6, #1
 739              	.LVL80:
 740              	.L56:
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 741              		.loc 1 396 0 is_stmt 0 discriminator 1
 742 00f8 0EB3     		cbz	r6, .L66
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 743              		.loc 1 398 0 is_stmt 1 discriminator 3
 744 00fa 0468     		ldr	r4, [r0]
 745 00fc C6F10603 		rsb	r3, r6, #6
 746 0100 4FF00065 		mov	r5, #134217728
ARM GAS  /tmp/ccmrLUMM.s 			page 146


 747 0104 DD40     		lsrs	r5, r5, r3
 748 0106 6FF04043 		mvn	r3, #-1073741824
 749 010a 3344     		add	r3, r3, r6
 750 010c 51F82330 		ldr	r3, [r1, r3, lsl #2]
 751              	.LVL81:
 752              	.LBB365:
 753              	.LBB366:
2852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 754              		.loc 2 2852 0 discriminator 3
 755 0110 144A     		ldr	r2, .L67+8
 756 0112 9442     		cmp	r4, r2
 757 0114 EFD0     		beq	.L57
 758              	.LVL82:
 759              	.LBB367:
2855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
 760              		.loc 2 2855 0
 761 0116 D4F8C820 		ldr	r2, [r4, #200]
 762 011a 02F04042 		and	r2, r2, #-1073741824
 763 011e 1343     		orrs	r3, r3, r2
 764              	.LVL83:
 765 0120 C4F8C830 		str	r3, [r4, #200]
 766              	.LVL84:
2856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
 767              		.loc 2 2856 0
 768 0124 A368     		ldr	r3, [r4, #8]
 769 0126 23F48033 		bic	r3, r3, #65536
 770 012a 2B43     		orrs	r3, r3, r5
 771 012c A360     		str	r3, [r4, #8]
2854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
 772              		.loc 2 2854 0
 773 012e 0E4B     		ldr	r3, .L67+12
 774              	.LVL85:
 775              	.L58:
2857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
 776              		.loc 2 2857 0
 777 0130 A268     		ldr	r2, [r4, #8]
 778 0132 1542     		tst	r5, r2
 779 0134 DFD1     		bne	.L57
 780 0136 002B     		cmp	r3, #0
 781 0138 DDD0     		beq	.L57
2859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
 782              		.loc 2 2859 0
 783 013a 013B     		subs	r3, r3, #1
 784              	.LVL86:
 785 013c F8E7     		b	.L58
 786              	.LVL87:
 787              	.L66:
 788              	.LBE367:
 789              	.LBE366:
 790              	.LBE365:
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 791              		.loc 1 400 0
 792 013e 57B1     		cbz	r7, .L62
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 793              		.loc 1 402 0
 794 0140 0268     		ldr	r2, [r0]
 795              	.LVL88:
ARM GAS  /tmp/ccmrLUMM.s 			page 147


 796              	.LBB368:
 797              	.LBB369:
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 798              		.loc 2 6851 0
 799 0142 9168     		ldr	r1, [r2, #8]
 800              	.LVL89:
 801 0144 094B     		ldr	r3, .L67+16
 802 0146 0B40     		ands	r3, r3, r1
 803 0148 43F00403 		orr	r3, r3, #4
 804 014c 9360     		str	r3, [r2, #8]
 805              	.LBE369:
 806              	.LBE368:
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 807              		.loc 1 405 0
 808 014e 0025     		movs	r5, #0
 809 0150 95E7     		b	.L47
 810              	.LVL90:
 811              	.L61:
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 812              		.loc 1 378 0
 813 0152 0125     		movs	r5, #1
 814 0154 93E7     		b	.L47
 815              	.LVL91:
 816              	.L62:
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 817              		.loc 1 405 0
 818 0156 0025     		movs	r5, #0
 819 0158 91E7     		b	.L47
 820              	.L68:
 821 015a 00BF     		.align	2
 822              	.L67:
 823 015c 00000000 		.word	SystemCoreClock
 824 0160 83DE1B43 		.word	1125899907
 825 0164 00600258 		.word	1476550656
 826 0168 70000800 		.word	524400
 827 016c C0FFFF7F 		.word	2147483584
 828              		.cfi_endproc
 829              	.LFE347:
 831              		.section	.text.HAL_ADCEx_LinearCalibration_FactorLoad,"ax",%progbits
 832              		.align	1
 833              		.global	HAL_ADCEx_LinearCalibration_FactorLoad
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu fpv5-d16
 839              	HAL_ADCEx_LinearCalibration_FactorLoad:
 840              	.LFB348:
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Load the calibration factor from engi bytes
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param  hadc ADC handle
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL state
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_LinearCalibration_FactorLoad(ADC_HandleTypeDef *hadc)
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 841              		.loc 1 414 0
 842              		.cfi_startproc
ARM GAS  /tmp/ccmrLUMM.s 			page 148


 843              		@ args = 0, pretend = 0, frame = 24
 844              		@ frame_needed = 0, uses_anonymous_args = 0
 845              	.LVL92:
 846 0000 10B5     		push	{r4, lr}
 847              	.LCFI11:
 848              		.cfi_def_cfa_offset 8
 849              		.cfi_offset 4, -8
 850              		.cfi_offset 14, -4
 851 0002 86B0     		sub	sp, sp, #24
 852              	.LCFI12:
 853              		.cfi_def_cfa_offset 32
 854              	.LVL93:
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t cnt, FactorOffset;
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t LinearCalib_Buffer[ADC_LINEAR_CALIB_REG_COUNT];
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Linearity calibration is retrieved from engi bytes
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      read values from registers and put them to the CALFACT2 register */
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* If needed linearity calibration can be done in runtime using
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      LL_ADC_GetCalibrationLinearFactor()                             */
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Instance == ADC1)
 855              		.loc 1 423 0
 856 0004 0368     		ldr	r3, [r0]
 857 0006 114A     		ldr	r2, .L79
 858 0008 9342     		cmp	r3, r2
 859 000a 08D0     		beq	.L74
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     FactorOffset = 0UL;
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else if (hadc->Instance == ADC2)
 860              		.loc 1 427 0
 861 000c 02F58072 		add	r2, r2, #256
 862 0010 9342     		cmp	r3, r2
 863 0012 02D0     		beq	.L78
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     FactorOffset = 8UL;
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else   /*Case ADC3*/
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     FactorOffset = 16UL;
 864              		.loc 1 433 0
 865 0014 1024     		movs	r4, #16
 866              	.L70:
 867              	.LVL94:
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   for (cnt = 0UL; cnt < ADC_LINEAR_CALIB_REG_COUNT; cnt++)
 868              		.loc 1 436 0
 869 0016 0023     		movs	r3, #0
 870 0018 0DE0     		b	.L71
 871              	.LVL95:
 872              	.L78:
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 873              		.loc 1 429 0
 874 001a 0824     		movs	r4, #8
 875 001c FBE7     		b	.L70
 876              	.L74:
ARM GAS  /tmp/ccmrLUMM.s 			page 149


 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 877              		.loc 1 425 0
 878 001e 0024     		movs	r4, #0
 879 0020 F9E7     		b	.L70
 880              	.LVL96:
 881              	.L72:
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LinearCalib_Buffer[cnt] = *(uint32_t *)(ADC_LINEAR_CALIB_REG_1_ADDR + FactorOffset + cnt);
 882              		.loc 1 438 0 discriminator 3
 883 0022 1919     		adds	r1, r3, r4
 884 0024 0A4A     		ldr	r2, .L79+4
 885 0026 52F82110 		ldr	r1, [r2, r1, lsl #2]
 886 002a 06AA     		add	r2, sp, #24
 887 002c 02EB8302 		add	r2, r2, r3, lsl #2
 888 0030 42F8181C 		str	r1, [r2, #-24]
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 889              		.loc 1 436 0 discriminator 3
 890 0034 0133     		adds	r3, r3, #1
 891              	.LVL97:
 892              	.L71:
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 893              		.loc 1 436 0 is_stmt 0 discriminator 1
 894 0036 052B     		cmp	r3, #5
 895 0038 F3D9     		bls	.L72
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (HAL_ADCEx_LinearCalibration_SetValue(hadc, (uint32_t *)LinearCalib_Buffer) != HAL_OK)
 896              		.loc 1 440 0 is_stmt 1
 897 003a 6946     		mov	r1, sp
 898 003c FFF7FEFF 		bl	HAL_ADCEx_LinearCalibration_SetValue
 899              	.LVL98:
 900 0040 0346     		mov	r3, r0
 901 0042 00B1     		cbz	r0, .L73
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 902              		.loc 1 442 0
 903 0044 0123     		movs	r3, #1
 904              	.L73:
 905              	.LVL99:
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 906              		.loc 1 446 0
 907 0046 1846     		mov	r0, r3
 908 0048 06B0     		add	sp, sp, #24
 909              	.LCFI13:
 910              		.cfi_def_cfa_offset 8
 911              		@ sp needed
 912 004a 10BD     		pop	{r4, pc}
 913              	.LVL100:
 914              	.L80:
 915              		.align	2
 916              	.L79:
 917 004c 00200240 		.word	1073881088
 918 0050 00ECF11F 		.word	535948288
 919              		.cfi_endproc
 920              	.LFE348:
ARM GAS  /tmp/ccmrLUMM.s 			page 150


 922              		.section	.text.HAL_ADCEx_InjectedStart,"ax",%progbits
 923              		.align	1
 924              		.global	HAL_ADCEx_InjectedStart
 925              		.syntax unified
 926              		.thumb
 927              		.thumb_func
 928              		.fpu fpv5-d16
 930              	HAL_ADCEx_InjectedStart:
 931              	.LFB349:
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC, start conversion of injected group.
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Interruptions enabled in this function: None.
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Case of multimode enabled when multimode feature is available:
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStart() API must be called for ADC slave first,
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         then for ADC master.
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef *hadc)
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 932              		.loc 1 460 0
 933              		.cfi_startproc
 934              		@ args = 0, pretend = 0, frame = 0
 935              		@ frame_needed = 0, uses_anonymous_args = 0
 936              	.LVL101:
 937 0000 38B5     		push	{r3, r4, r5, lr}
 938              	.LCFI14:
 939              		.cfi_def_cfa_offset 16
 940              		.cfi_offset 3, -16
 941              		.cfi_offset 4, -12
 942              		.cfi_offset 5, -8
 943              		.cfi_offset 14, -4
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_config_injected_queue;
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 944              		.loc 1 463 0
 945 0002 0368     		ldr	r3, [r0]
 946 0004 3D49     		ldr	r1, .L102
 947 0006 3E4A     		ldr	r2, .L102+4
 948 0008 9342     		cmp	r3, r2
 949 000a 18BF     		it	ne
 950 000c 8B42     		cmpne	r3, r1
 951 000e 15D1     		bne	.L94
 952 0010 02F50072 		add	r2, r2, #512
 953              	.L82:
 954              	.LVL102:
 955              	.LBB370:
 956              	.LBB371:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 957              		.loc 2 6412 0 discriminator 4
 958 0014 9568     		ldr	r5, [r2, #8]
 959 0016 05F01F05 		and	r5, r5, #31
 960              	.LVL103:
 961              	.LBE371:
ARM GAS  /tmp/ccmrLUMM.s 			page 151


 962              	.LBE370:
 963              	.LBB372:
 964              	.LBB373:
 965              		.loc 2 7079 0 discriminator 4
 966 001a 9A68     		ldr	r2, [r3, #8]
 967 001c 12F0080F 		tst	r2, #8
 968 0020 66D1     		bne	.L95
 969              	.LVL104:
 970              	.LBE373:
 971              	.LBE372:
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_BUSY;
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* In case of software trigger detection enabled, JQDIS must be set
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (which can be done only if ADSTART and JADSTART are both cleared).
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        If JQDIS is not set at that point, returns an error
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - since software trigger detection is disabled. User needs to
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          the queue is empty */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 972              		.loc 1 481 0
 973 0022 DA68     		ldr	r2, [r3, #12]
 974              	.LVL105:
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 975              		.loc 1 483 0
 976 0024 DB6C     		ldr	r3, [r3, #76]
 977 0026 13F4C07F 		tst	r3, #384
 978 002a 09D1     		bne	.L84
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         && (tmp_config_injected_queue == 0UL)
 979              		.loc 1 484 0
 980 002c 002A     		cmp	r2, #0
 981 002e 07DB     		blt	.L84
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        )
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 982              		.loc 1 487 0
 983 0030 036E     		ldr	r3, [r0, #96]
 984 0032 43F02003 		orr	r3, r3, #32
 985 0036 0366     		str	r3, [r0, #96]
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 986              		.loc 1 488 0
 987 0038 0123     		movs	r3, #1
 988 003a 5AE0     		b	.L83
 989              	.LVL106:
 990              	.L94:
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 991              		.loc 1 463 0
 992 003c 314A     		ldr	r2, .L102+8
ARM GAS  /tmp/ccmrLUMM.s 			page 152


 993 003e E9E7     		b	.L82
 994              	.LVL107:
 995              	.L84:
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process locked */
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 996              		.loc 1 492 0
 997 0040 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 998 0044 012B     		cmp	r3, #1
 999 0046 56D0     		beq	.L96
 1000 0048 0446     		mov	r4, r0
 1001              		.loc 1 492 0 is_stmt 0 discriminator 2
 1002 004a 0123     		movs	r3, #1
 1003 004c 80F85C30 		strb	r3, [r0, #92]
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 1004              		.loc 1 495 0 is_stmt 1 discriminator 2
 1005 0050 FFF7FEFF 		bl	ADC_Enable
 1006              	.LVL108:
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1007              		.loc 1 498 0 discriminator 2
 1008 0054 0346     		mov	r3, r0
 1009 0056 0028     		cmp	r0, #0
 1010 0058 46D1     		bne	.L85
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 1011              		.loc 1 501 0
 1012 005a 226E     		ldr	r2, [r4, #96]
 1013 005c 12F4807F 		tst	r2, #256
 1014 0060 2ED0     		beq	.L86
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Reset ADC error code field related to injected conversions only */
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 1015              		.loc 1 504 0
 1016 0062 626E     		ldr	r2, [r4, #100]
 1017 0064 22F00802 		bic	r2, r2, #8
 1018 0068 6266     		str	r2, [r4, #100]
 1019              	.L87:
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC error code to none */
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1020              		.loc 1 515 0
 1021 006a 216E     		ldr	r1, [r4, #96]
 1022 006c 264A     		ldr	r2, .L102+12
ARM GAS  /tmp/ccmrLUMM.s 			page 153


 1023 006e 0A40     		ands	r2, r2, r1
 1024 0070 42F48052 		orr	r2, r2, #4096
 1025 0074 2266     		str	r2, [r4, #96]
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if ADC instance is master or if multimode feature is not available
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 1026              		.loc 1 522 0
 1027 0076 2268     		ldr	r2, [r4]
 1028 0078 2149     		ldr	r1, .L102+4
 1029 007a 8A42     		cmp	r2, r1
 1030 007c 23D0     		beq	.L100
 1031 007e 1146     		mov	r1, r2
 1032              	.L88:
 1033              		.loc 1 522 0 is_stmt 0 discriminator 4
 1034 0080 8A42     		cmp	r2, r1
 1035 0082 00D0     		beq	.L89
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1036              		.loc 1 523 0 is_stmt 1
 1037 0084 1DB9     		cbnz	r5, .L90
 1038              	.L89:
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1039              		.loc 1 526 0
 1040 0086 216E     		ldr	r1, [r4, #96]
 1041 0088 21F48011 		bic	r1, r1, #1048576
 1042 008c 2166     		str	r1, [r4, #96]
 1043              	.L90:
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Clear ADC group injected group conversion flag */
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 1044              		.loc 1 531 0
 1045 008e 6021     		movs	r1, #96
 1046 0090 1160     		str	r1, [r2]
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1047              		.loc 1 536 0
 1048 0092 0022     		movs	r2, #0
 1049 0094 84F85C20 		strb	r2, [r4, #92]
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected conversion  */
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* is disabled.                                                           */
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Case of multimode enabled (when multimode feature is available):       */
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if ADC is slave,                                                       */
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled only (conversion is not started),                  */
ARM GAS  /tmp/ccmrLUMM.s 			page 154


 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - if multimode only concerns regular conversion, ADC is enabled     */
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*     and conversion is started.                                         */
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If ADC is master or independent,                                       */
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled and conversion is started.                         */
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 1050              		.loc 1 550 0
 1051 0098 2268     		ldr	r2, [r4]
 1052 009a 1949     		ldr	r1, .L102+4
 1053 009c 8A42     		cmp	r2, r1
 1054 009e 15D0     		beq	.L101
 1055 00a0 1146     		mov	r1, r2
 1056              	.L91:
 1057              		.loc 1 550 0 is_stmt 0 discriminator 4
 1058 00a2 8A42     		cmp	r2, r1
 1059 00a4 15D0     		beq	.L92
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 1060              		.loc 1 552 0 is_stmt 1
 1061 00a6 062D     		cmp	r5, #6
 1062 00a8 14BF     		ite	ne
 1063 00aa 0021     		movne	r1, #0
 1064 00ac 0121     		moveq	r1, #1
 1065 00ae 85B1     		cbz	r5, .L92
 1066 00b0 79B9     		cbnz	r1, .L92
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 1067              		.loc 1 553 0
 1068 00b2 072D     		cmp	r5, #7
 1069 00b4 0DD0     		beq	.L92
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_INJ_StartConversion(hadc->Instance);
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1070              		.loc 1 565 0
 1071 00b6 226E     		ldr	r2, [r4, #96]
 1072 00b8 42F48012 		orr	r2, r2, #1048576
 1073 00bc 2266     		str	r2, [r4, #96]
 1074 00be 18E0     		b	.L83
 1075              	.L86:
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 1076              		.loc 1 509 0
 1077 00c0 0022     		movs	r2, #0
 1078 00c2 6266     		str	r2, [r4, #100]
 1079 00c4 D1E7     		b	.L87
 1080              	.L100:
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1081              		.loc 1 522 0
 1082 00c6 A1F58071 		sub	r1, r1, #256
 1083 00ca D9E7     		b	.L88
 1084              	.L101:
ARM GAS  /tmp/ccmrLUMM.s 			page 155


 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1085              		.loc 1 550 0
 1086 00cc A1F58071 		sub	r1, r1, #256
 1087 00d0 E7E7     		b	.L91
 1088              	.L92:
 1089              	.LVL109:
 1090              	.LBB374:
 1091              	.LBB375:
4886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1092              		.loc 2 4886 0
 1093 00d2 D168     		ldr	r1, [r2, #12]
 1094              	.LVL110:
 1095              	.LBE375:
 1096              	.LBE374:
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 1097              		.loc 1 557 0
 1098 00d4 11F0007F 		tst	r1, #33554432
 1099 00d8 0BD1     		bne	.L83
 1100              	.LVL111:
 1101              	.LBB376:
 1102              	.LBB377:
7046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1103              		.loc 2 7046 0
 1104 00da 9068     		ldr	r0, [r2, #8]
 1105              	.LVL112:
 1106 00dc 0B49     		ldr	r1, .L102+16
 1107 00de 0140     		ands	r1, r1, r0
 1108 00e0 41F00801 		orr	r1, r1, #8
 1109 00e4 9160     		str	r1, [r2, #8]
 1110 00e6 04E0     		b	.L83
 1111              	.LVL113:
 1112              	.L85:
 1113              	.LBE377:
 1114              	.LBE376:
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1115              		.loc 1 572 0
 1116 00e8 0022     		movs	r2, #0
 1117 00ea 84F85C20 		strb	r2, [r4, #92]
 1118 00ee 00E0     		b	.L83
 1119              	.LVL114:
 1120              	.L95:
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 1121              		.loc 1 470 0
 1122 00f0 0223     		movs	r3, #2
 1123              	.LVL115:
 1124              	.L83:
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Return function status */
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return tmp_hal_status;
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/ccmrLUMM.s 			page 156


 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1125              		.loc 1 578 0
 1126 00f2 1846     		mov	r0, r3
 1127 00f4 38BD     		pop	{r3, r4, r5, pc}
 1128              	.LVL116:
 1129              	.L96:
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1130              		.loc 1 492 0
 1131 00f6 0223     		movs	r3, #2
 1132 00f8 FBE7     		b	.L83
 1133              	.L103:
 1134 00fa 00BF     		.align	2
 1135              	.L102:
 1136 00fc 00200240 		.word	1073881088
 1137 0100 00210240 		.word	1073881344
 1138 0104 00630258 		.word	1476551424
 1139 0108 FECFFFFF 		.word	-12290
 1140 010c C0FFFF7F 		.word	2147483584
 1141              		.cfi_endproc
 1142              	.LFE349:
 1144              		.section	.text.HAL_ADCEx_InjectedStop,"ax",%progbits
 1145              		.align	1
 1146              		.global	HAL_ADCEx_InjectedStop
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv5-d16
 1152              	HAL_ADCEx_InjectedStop:
 1153              	.LFB350:
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels. Disable ADC peripheral if
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         no regular conversion is on going.
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of multimode enabled (when multimode feature is available),
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStop() must be called for ADC master first, then for ADC slave.
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled.
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef *hadc)
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1154              		.loc 1 597 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158              	.LVL117:
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccmrLUMM.s 			page 157


 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1159              		.loc 1 604 0
 1160 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 1161 0004 012B     		cmp	r3, #1
 1162 0006 24D0     		beq	.L108
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1163              		.loc 1 597 0 discriminator 2
 1164 0008 10B5     		push	{r4, lr}
 1165              	.LCFI15:
 1166              		.cfi_def_cfa_offset 8
 1167              		.cfi_offset 4, -8
 1168              		.cfi_offset 14, -4
 1169 000a 0446     		mov	r4, r0
 1170              		.loc 1 604 0 discriminator 2
 1171 000c 0123     		movs	r3, #1
 1172 000e 80F85C30 		strb	r3, [r0, #92]
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going on injected group only. */
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 1173              		.loc 1 607 0 discriminator 2
 1174 0012 0221     		movs	r1, #2
 1175 0014 FFF7FEFF 		bl	ADC_ConversionStop
 1176              	.LVL118:
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if injected conversions are effectively stopped   */
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* and if no conversion on regular group is on-going                       */
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1177              		.loc 1 611 0 discriminator 2
 1178 0018 0346     		mov	r3, r0
 1179 001a 40B9     		cbnz	r0, .L106
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 1180              		.loc 1 613 0
 1181 001c 2268     		ldr	r2, [r4]
 1182              	.LVL119:
 1183              	.LBB378:
 1184              	.LBB379:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1185              		.loc 2 6884 0
 1186 001e 9268     		ldr	r2, [r2, #8]
 1187              	.LVL120:
 1188 0020 12F0040F 		tst	r2, #4
 1189 0024 08D0     		beq	.L107
 1190              	.LVL121:
 1191              	.LBE379:
 1192              	.LBE378:
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/ccmrLUMM.s 			page 158


 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 1193              		.loc 1 632 0
 1194 0026 226E     		ldr	r2, [r4, #96]
 1195 0028 22F48052 		bic	r2, r2, #4096
 1196 002c 2266     		str	r2, [r4, #96]
 1197              	.L106:
 1198              	.LVL122:
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1199              		.loc 1 637 0
 1200 002e 0022     		movs	r2, #0
 1201 0030 84F85C20 		strb	r2, [r4, #92]
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1202              		.loc 1 641 0
 1203 0034 1846     		mov	r0, r3
 1204 0036 10BD     		pop	{r4, pc}
 1205              	.LVL123:
 1206              	.L107:
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1207              		.loc 1 616 0
 1208 0038 2046     		mov	r0, r4
 1209              	.LVL124:
 1210 003a FFF7FEFF 		bl	ADC_Disable
 1211              	.LVL125:
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 1212              		.loc 1 619 0
 1213 003e 0346     		mov	r3, r0
 1214 0040 0028     		cmp	r0, #0
 1215 0042 F4D1     		bne	.L106
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1216              		.loc 1 622 0
 1217 0044 216E     		ldr	r1, [r4, #96]
 1218 0046 044A     		ldr	r2, .L113
 1219 0048 0A40     		ands	r2, r2, r1
 1220 004a 42F00102 		orr	r2, r2, #1
 1221 004e 2266     		str	r2, [r4, #96]
 1222 0050 EDE7     		b	.L106
 1223              	.LVL126:
 1224              	.L108:
 1225              	.LCFI16:
 1226              		.cfi_def_cfa_offset 0
 1227              		.cfi_restore 4
ARM GAS  /tmp/ccmrLUMM.s 			page 159


 1228              		.cfi_restore 14
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1229              		.loc 1 604 0
 1230 0052 0223     		movs	r3, #2
 1231              		.loc 1 641 0
 1232 0054 1846     		mov	r0, r3
 1233              	.LVL127:
 1234 0056 7047     		bx	lr
 1235              	.L114:
 1236              		.align	2
 1237              	.L113:
 1238 0058 FEEEFFFF 		.word	-4354
 1239              		.cfi_endproc
 1240              	.LFE350:
 1242              		.section	.text.HAL_ADCEx_InjectedPollForConversion,"ax",%progbits
 1243              		.align	1
 1244              		.global	HAL_ADCEx_InjectedPollForConversion
 1245              		.syntax unified
 1246              		.thumb
 1247              		.thumb_func
 1248              		.fpu fpv5-d16
 1250              	HAL_ADCEx_InjectedPollForConversion:
 1251              	.LFB351:
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Wait for injected group conversion to be completed.
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param Timeout Timeout value in millisecond.
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Depending on hadc->Init.EOCSelection, JEOS or JEOC is
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         checked and cleared depending on AUTDLY bit status.
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1252              		.loc 1 652 0
 1253              		.cfi_startproc
 1254              		@ args = 0, pretend = 0, frame = 0
 1255              		@ frame_needed = 0, uses_anonymous_args = 0
 1256              	.LVL128:
 1257 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1258              	.LCFI17:
 1259              		.cfi_def_cfa_offset 24
 1260              		.cfi_offset 4, -24
 1261              		.cfi_offset 5, -20
 1262              		.cfi_offset 6, -16
 1263              		.cfi_offset 7, -12
 1264              		.cfi_offset 8, -8
 1265              		.cfi_offset 14, -4
 1266 0004 0446     		mov	r4, r0
 1267 0006 0E46     		mov	r6, r1
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tickstart;
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_Flag_End;
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_cfgr;
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   const ADC_TypeDef *tmpADC_Master;
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccmrLUMM.s 			page 160


 1268              		.loc 1 659 0
 1269 0008 0368     		ldr	r3, [r0]
 1270 000a 3F49     		ldr	r1, .L143
 1271              	.LVL129:
 1272 000c 3F4A     		ldr	r2, .L143+4
 1273 000e 9342     		cmp	r3, r2
 1274 0010 18BF     		it	ne
 1275 0012 8B42     		cmpne	r3, r1
 1276 0014 22D1     		bne	.L132
 1277 0016 3E4B     		ldr	r3, .L143+8
 1278              	.L116:
 1279              	.LVL130:
 1280              	.LBB380:
 1281              	.LBB381:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1282              		.loc 2 6412 0 discriminator 4
 1283 0018 9F68     		ldr	r7, [r3, #8]
 1284 001a 07F01F07 		and	r7, r7, #31
 1285              	.LVL131:
 1286              	.LBE381:
 1287              	.LBE380:
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* If end of sequence selected */
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 1288              		.loc 1 665 0 discriminator 4
 1289 001e 6369     		ldr	r3, [r4, #20]
 1290 0020 082B     		cmp	r3, #8
 1291 0022 1DD0     		beq	.L139
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_Flag_End = ADC_FLAG_JEOS;
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else /* end of conversion selected */
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_Flag_End = ADC_FLAG_JEOC;
 1292              		.loc 1 671 0
 1293 0024 2025     		movs	r5, #32
 1294              	.L117:
 1295              	.LVL132:
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Get timeout */
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tickstart = HAL_GetTick();
 1296              		.loc 1 675 0
 1297 0026 FFF7FEFF 		bl	HAL_GetTick
 1298              	.LVL133:
 1299 002a 8046     		mov	r8, r0
 1300              	.LVL134:
 1301              	.L119:
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Wait until End of Conversion or Sequence flag is raised */
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 1302              		.loc 1 678 0
 1303 002c 2368     		ldr	r3, [r4]
 1304 002e 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccmrLUMM.s 			page 161


 1305 0030 2A42     		tst	r2, r5
 1306 0032 17D1     		bne	.L140
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if timeout is disabled (set to infinite wait) */
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (Timeout != HAL_MAX_DELAY)
 1307              		.loc 1 681 0
 1308 0034 B6F1FF3F 		cmp	r6, #-1
 1309 0038 F8D0     		beq	.L119
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 1310              		.loc 1 683 0
 1311 003a FFF7FEFF 		bl	HAL_GetTick
 1312              	.LVL135:
 1313 003e A0EB0800 		sub	r0, r0, r8
 1314 0042 B042     		cmp	r0, r6
 1315 0044 01D8     		bhi	.L120
 1316              		.loc 1 683 0 is_stmt 0 discriminator 1
 1317 0046 002E     		cmp	r6, #0
 1318 0048 F0D1     		bne	.L119
 1319              	.L120:
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to timeout */
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 1320              		.loc 1 686 0 is_stmt 1
 1321 004a 236E     		ldr	r3, [r4, #96]
 1322 004c 43F00403 		orr	r3, r3, #4
 1323 0050 2366     		str	r3, [r4, #96]
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Process unlocked */
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 1324              		.loc 1 689 0
 1325 0052 0023     		movs	r3, #0
 1326 0054 84F85C30 		strb	r3, [r4, #92]
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         return HAL_TIMEOUT;
 1327              		.loc 1 691 0
 1328 0058 0320     		movs	r0, #3
 1329 005a 49E0     		b	.L121
 1330              	.LVL136:
 1331              	.L132:
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1332              		.loc 1 659 0
 1333 005c 2D4B     		ldr	r3, .L143+12
 1334 005e DBE7     		b	.L116
 1335              	.L139:
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 1336              		.loc 1 667 0
 1337 0060 4025     		movs	r5, #64
 1338 0062 E0E7     		b	.L117
 1339              	.LVL137:
 1340              	.L140:
 1341              	.LBB382:
 1342              	.LBB383:
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1343              		.loc 2 4584 0
 1344 0064 DA6C     		ldr	r2, [r3, #76]
 1345 0066 12F4C07F 		tst	r2, #384
ARM GAS  /tmp/ccmrLUMM.s 			page 162


 1346 006a 15D1     		bne	.L134
 1347 006c 0120     		movs	r0, #1
 1348              	.L123:
 1349              	.LVL138:
 1350              	.LBE383:
 1351              	.LBE382:
 1352              	.LBB385:
 1353              	.LBB386:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1354              		.loc 2 3797 0
 1355 006e DA68     		ldr	r2, [r3, #12]
 1356 0070 12F4406F 		tst	r2, #3072
 1357 0074 12D1     		bne	.L135
 1358 0076 0126     		movs	r6, #1
 1359              	.LVL139:
 1360              	.L124:
 1361              	.LBE386:
 1362              	.LBE385:
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Retrieve ADC configuration */
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave  */
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* in function of multimode state (for devices with multimode         */
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* available).                                                        */
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 1363              		.loc 1 702 0
 1364 0078 244A     		ldr	r2, .L143+4
 1365 007a 9342     		cmp	r3, r2
 1366 007c 10D0     		beq	.L141
 1367 007e 1A46     		mov	r2, r3
 1368              	.L125:
 1369              		.loc 1 702 0 is_stmt 0 discriminator 4
 1370 0080 9342     		cmp	r3, r2
 1371 0082 10D0     		beq	.L126
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 1372              		.loc 1 704 0 is_stmt 1
 1373 0084 062F     		cmp	r7, #6
 1374 0086 14BF     		ite	ne
 1375 0088 0021     		movne	r1, #0
 1376 008a 0121     		moveq	r1, #1
 1377 008c 5FB1     		cbz	r7, .L126
 1378 008e 51B9     		cbnz	r1, .L126
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 1379              		.loc 1 705 0
 1380 0090 072F     		cmp	r7, #7
 1381 0092 08D0     		beq	.L126
 1382              	.LVL140:
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
ARM GAS  /tmp/ccmrLUMM.s 			page 163


 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 1383              		.loc 1 713 0 discriminator 4
 1384 0094 D168     		ldr	r1, [r2, #12]
 1385              	.LVL141:
 1386 0096 07E0     		b	.L128
 1387              	.LVL142:
 1388              	.L134:
 1389              	.LBB388:
 1390              	.LBB384:
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1391              		.loc 2 4584 0
 1392 0098 0020     		movs	r0, #0
 1393 009a E8E7     		b	.L123
 1394              	.LVL143:
 1395              	.L135:
 1396              	.LBE384:
 1397              	.LBE388:
 1398              	.LBB389:
 1399              	.LBB387:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1400              		.loc 2 3797 0
 1401 009c 0026     		movs	r6, #0
 1402              	.LVL144:
 1403 009e EBE7     		b	.L124
 1404              	.LVL145:
 1405              	.L141:
 1406              	.LBE387:
 1407              	.LBE389:
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1408              		.loc 1 702 0
 1409 00a0 A2F58072 		sub	r2, r2, #256
 1410 00a4 ECE7     		b	.L125
 1411              	.L126:
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 1412              		.loc 1 708 0
 1413 00a6 D968     		ldr	r1, [r3, #12]
 1414              	.LVL146:
 1415              	.L128:
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Update ADC state machine */
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 1416              		.loc 1 717 0
 1417 00a8 226E     		ldr	r2, [r4, #96]
 1418 00aa 42F40052 		orr	r2, r2, #8192
 1419 00ae 2266     		str	r2, [r4, #96]
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Determine whether any further conversion upcoming on group injected      */
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* by external trigger or by automatic injected conversion                  */
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* from group regular.                                                      */
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 1420              		.loc 1 722 0
 1421 00b0 30B9     		cbnz	r0, .L129
 1422              		.loc 1 722 0 is_stmt 0 discriminator 1
 1423 00b2 11F0007F 		tst	r1, #33554432
ARM GAS  /tmp/ccmrLUMM.s 			page 164


 1424 00b6 16D1     		bne	.L130
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 1425              		.loc 1 723 0 is_stmt 1
 1426 00b8 AEB1     		cbz	r6, .L130
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 1427              		.loc 1 724 0
 1428 00ba 11F4005F 		tst	r1, #8192
 1429 00be 12D1     		bne	.L130
 1430              	.L129:
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check whether end of sequence is reached */
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 1431              		.loc 1 728 0
 1432 00c0 1A68     		ldr	r2, [r3]
 1433 00c2 12F0400F 		tst	r2, #64
 1434 00c6 0ED0     		beq	.L130
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Particular case if injected contexts queue is enabled:             */
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* when the last context has been fully processed, JSQR is reset      */
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* by the hardware. Even if no injected conversion is planned to come */
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (queue empty, triggers are ignored), it can start again            */
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* immediately after setting a new context (JADSTART is still set).   */
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Therefore, state of HAL ADC injected group is kept to busy.        */
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 1435              		.loc 1 736 0
 1436 00c8 11F4001F 		tst	r1, #2097152
 1437 00cc 0BD1     		bne	.L130
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 1438              		.loc 1 739 0
 1439 00ce 226E     		ldr	r2, [r4, #96]
 1440 00d0 22F48052 		bic	r2, r2, #4096
 1441 00d4 2266     		str	r2, [r4, #96]
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 1442              		.loc 1 741 0
 1443 00d6 226E     		ldr	r2, [r4, #96]
 1444 00d8 12F4807F 		tst	r2, #256
 1445 00dc 03D1     		bne	.L130
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 1446              		.loc 1 743 0
 1447 00de 226E     		ldr	r2, [r4, #96]
 1448 00e0 42F00102 		orr	r2, r2, #1
 1449 00e4 2266     		str	r2, [r4, #96]
 1450              	.L130:
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Clear polled flag */
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_Flag_End == ADC_FLAG_JEOS)
 1451              		.loc 1 750 0
 1452 00e6 402D     		cmp	r5, #64
ARM GAS  /tmp/ccmrLUMM.s 			page 165


 1453 00e8 04D0     		beq	.L142
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear end of sequence JEOS flag of injected group if low power feature */
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature.   */
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* For injected groups, no new conversion will start before JEOS is       */
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* cleared.                                                               */
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
 1454              		.loc 1 763 0
 1455 00ea 2022     		movs	r2, #32
 1456 00ec 1A60     		str	r2, [r3]
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return API HAL status */
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return HAL_OK;
 1457              		.loc 1 767 0
 1458 00ee 0020     		movs	r0, #0
 1459              	.LVL147:
 1460              	.L121:
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1461              		.loc 1 768 0
 1462 00f0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1463              	.LVL148:
 1464              	.L142:
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 1465              		.loc 1 756 0
 1466 00f4 11F4804F 		tst	r1, #16384
 1467 00f8 03D1     		bne	.L137
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 1468              		.loc 1 758 0
 1469 00fa 6022     		movs	r2, #96
 1470 00fc 1A60     		str	r2, [r3]
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1471              		.loc 1 767 0
 1472 00fe 0020     		movs	r0, #0
 1473 0100 F6E7     		b	.L121
 1474              	.L137:
 1475 0102 0020     		movs	r0, #0
 1476 0104 F4E7     		b	.L121
 1477              	.L144:
 1478 0106 00BF     		.align	2
 1479              	.L143:
 1480 0108 00200240 		.word	1073881088
 1481 010c 00210240 		.word	1073881344
 1482 0110 00230240 		.word	1073881856
 1483 0114 00630258 		.word	1476551424
 1484              		.cfi_endproc
 1485              	.LFE351:
 1487              		.section	.text.HAL_ADCEx_InjectedStart_IT,"ax",%progbits
 1488              		.align	1
 1489              		.global	HAL_ADCEx_InjectedStart_IT
ARM GAS  /tmp/ccmrLUMM.s 			page 166


 1490              		.syntax unified
 1491              		.thumb
 1492              		.thumb_func
 1493              		.fpu fpv5-d16
 1495              	HAL_ADCEx_InjectedStart_IT:
 1496              	.LFB352:
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC, start conversion of injected group with interruption.
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Interruptions enabled in this function according to initialization
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         setting : JEOC (end of conversion) or JEOS (end of sequence)
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (when multimode feature is enabled):
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStart_IT() API must be called for ADC slave first,
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         then for ADC master.
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is enabled only (conversion is not started).
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, ADC is enabled and multimode conversion is started.
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle.
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef *hadc)
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1497              		.loc 1 783 0
 1498              		.cfi_startproc
 1499              		@ args = 0, pretend = 0, frame = 0
 1500              		@ frame_needed = 0, uses_anonymous_args = 0
 1501              	.LVL149:
 1502 0000 38B5     		push	{r3, r4, r5, lr}
 1503              	.LCFI18:
 1504              		.cfi_def_cfa_offset 16
 1505              		.cfi_offset 3, -16
 1506              		.cfi_offset 4, -12
 1507              		.cfi_offset 5, -8
 1508              		.cfi_offset 14, -4
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_config_injected_queue;
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 1509              		.loc 1 786 0
 1510 0002 0368     		ldr	r3, [r0]
 1511 0004 4E49     		ldr	r1, .L171
 1512 0006 4F4A     		ldr	r2, .L171+4
 1513 0008 9342     		cmp	r3, r2
 1514 000a 18BF     		it	ne
 1515 000c 8B42     		cmpne	r3, r1
 1516 000e 16D1     		bne	.L162
 1517 0010 02F50072 		add	r2, r2, #512
 1518              	.L146:
 1519              	.LVL150:
 1520              	.LBB390:
 1521              	.LBB391:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1522              		.loc 2 6412 0 discriminator 4
 1523 0014 9568     		ldr	r5, [r2, #8]
 1524 0016 05F01F05 		and	r5, r5, #31
 1525              	.LVL151:
 1526              	.LBE391:
 1527              	.LBE390:
 1528              	.LBB392:
ARM GAS  /tmp/ccmrLUMM.s 			page 167


 1529              	.LBB393:
 1530              		.loc 2 7079 0 discriminator 4
 1531 001a 9A68     		ldr	r2, [r3, #8]
 1532 001c 12F0080F 		tst	r2, #8
 1533 0020 40F08880 		bne	.L163
 1534              	.LVL152:
 1535              	.LBE393:
 1536              	.LBE392:
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_BUSY;
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* In case of software trigger detection enabled, JQDIS must be set
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (which can be done only if ADSTART and JADSTART are both cleared).
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        If JQDIS is not set at that point, returns an error
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - since software trigger detection is disabled. User needs to
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        resort to HAL_ADCEx_DisableInjectedQueue() API to set JQDIS.
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        - or (if JQDIS is intentionally reset) since JEXTEN = 0 which means
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          the queue is empty */
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_config_injected_queue = READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 1537              		.loc 1 804 0
 1538 0024 DA68     		ldr	r2, [r3, #12]
 1539              	.LVL153:
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if ((READ_BIT(hadc->Instance->JSQR, ADC_JSQR_JEXTEN) == 0UL)
 1540              		.loc 1 806 0
 1541 0026 DB6C     		ldr	r3, [r3, #76]
 1542 0028 13F4C07F 		tst	r3, #384
 1543 002c 09D1     		bne	.L148
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         && (tmp_config_injected_queue == 0UL)
 1544              		.loc 1 807 0
 1545 002e 002A     		cmp	r2, #0
 1546 0030 07DB     		blt	.L148
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****        )
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 1547              		.loc 1 810 0
 1548 0032 036E     		ldr	r3, [r0, #96]
 1549 0034 43F02003 		orr	r3, r3, #32
 1550 0038 0366     		str	r3, [r0, #96]
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
 1551              		.loc 1 811 0
 1552 003a 0123     		movs	r3, #1
 1553 003c 7BE0     		b	.L147
 1554              	.LVL154:
 1555              	.L162:
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1556              		.loc 1 786 0
 1557 003e 424A     		ldr	r2, .L171+8
 1558 0040 E8E7     		b	.L146
 1559              	.LVL155:
ARM GAS  /tmp/ccmrLUMM.s 			page 168


 1560              	.L148:
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process locked */
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1561              		.loc 1 815 0
 1562 0042 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 1563 0046 012B     		cmp	r3, #1
 1564 0048 77D0     		beq	.L164
 1565 004a 0446     		mov	r4, r0
 1566              		.loc 1 815 0 is_stmt 0 discriminator 2
 1567 004c 0123     		movs	r3, #1
 1568 004e 80F85C30 		strb	r3, [r0, #92]
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable the ADC peripheral */
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 1569              		.loc 1 818 0 is_stmt 1 discriminator 2
 1570 0052 FFF7FEFF 		bl	ADC_Enable
 1571              	.LVL156:
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start conversion if ADC is effectively enabled */
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1572              		.loc 1 821 0 discriminator 2
 1573 0056 0346     		mov	r3, r0
 1574 0058 0028     		cmp	r0, #0
 1575 005a 67D1     		bne	.L149
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if a regular conversion is ongoing */
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((hadc->State & HAL_ADC_STATE_REG_BUSY) != 0UL)
 1576              		.loc 1 824 0
 1577 005c 226E     		ldr	r2, [r4, #96]
 1578 005e 12F4807F 		tst	r2, #256
 1579 0062 44D0     		beq	.L150
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Reset ADC error code field related to injected conversions only */
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 1580              		.loc 1 827 0
 1581 0064 626E     		ldr	r2, [r4, #100]
 1582 0066 22F00802 		bic	r2, r2, #8
 1583 006a 6266     		str	r2, [r4, #100]
 1584              	.L151:
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC error code to none */
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_CLEAR_ERRORCODE(hadc);
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state                                                        */
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Clear state bitfield related to injected group conversion results  */
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* - Set state bitfield related to injected operation                   */
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1585              		.loc 1 838 0
 1586 006c 216E     		ldr	r1, [r4, #96]
 1587 006e 374A     		ldr	r2, .L171+12
 1588 0070 0A40     		ands	r2, r2, r1
 1589 0072 42F48052 		orr	r2, r2, #4096
ARM GAS  /tmp/ccmrLUMM.s 			page 169


 1590 0076 2266     		str	r2, [r4, #96]
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_INJ_BUSY);
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if ADC instance is master or if multimode feature is not available
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 1591              		.loc 1 845 0
 1592 0078 2268     		ldr	r2, [r4]
 1593 007a 3249     		ldr	r1, .L171+4
 1594 007c 8A42     		cmp	r2, r1
 1595 007e 39D0     		beq	.L169
 1596 0080 1146     		mov	r1, r2
 1597              	.L152:
 1598              		.loc 1 845 0 is_stmt 0 discriminator 4
 1599 0082 8A42     		cmp	r2, r1
 1600 0084 00D0     		beq	.L153
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1601              		.loc 1 846 0 is_stmt 1
 1602 0086 1DB9     		cbnz	r5, .L154
 1603              	.L153:
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1604              		.loc 1 849 0
 1605 0088 216E     		ldr	r1, [r4, #96]
 1606 008a 21F48011 		bic	r1, r1, #1048576
 1607 008e 2166     		str	r1, [r4, #96]
 1608              	.L154:
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Clear ADC group injected group conversion flag */
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JEOC | ADC_FLAG_JEOS));
 1609              		.loc 1 854 0
 1610 0090 6021     		movs	r1, #96
 1611 0092 1160     		str	r1, [r2]
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1612              		.loc 1 859 0
 1613 0094 0022     		movs	r2, #0
 1614 0096 84F85C20 		strb	r2, [r4, #92]
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable ADC Injected context queue overflow interrupt if this feature   */
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* is enabled.                                                            */
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((hadc->Instance->CFGR & ADC_CFGR_JQM) != 0UL)
 1615              		.loc 1 863 0
 1616 009a 2268     		ldr	r2, [r4]
 1617 009c D168     		ldr	r1, [r2, #12]
 1618 009e 11F4001F 		tst	r1, #2097152
 1619 00a2 03D0     		beq	.L155
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_FLAG_JQOVF);
ARM GAS  /tmp/ccmrLUMM.s 			page 170


 1620              		.loc 1 865 0
 1621 00a4 5168     		ldr	r1, [r2, #4]
 1622 00a6 41F48061 		orr	r1, r1, #1024
 1623 00aa 5160     		str	r1, [r2, #4]
 1624              	.L155:
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable ADC end of conversion interrupt */
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       switch (hadc->Init.EOCSelection)
 1625              		.loc 1 869 0
 1626 00ac 6269     		ldr	r2, [r4, #20]
 1627 00ae 082A     		cmp	r2, #8
 1628 00b0 23D1     		bne	.L167
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         case ADC_EOC_SEQ_CONV:
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 1629              		.loc 1 872 0
 1630 00b2 2168     		ldr	r1, [r4]
 1631 00b4 4A68     		ldr	r2, [r1, #4]
 1632 00b6 22F02002 		bic	r2, r2, #32
 1633 00ba 4A60     		str	r2, [r1, #4]
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 1634              		.loc 1 873 0
 1635 00bc 2168     		ldr	r1, [r4]
 1636 00be 4A68     		ldr	r2, [r1, #4]
 1637 00c0 42F04002 		orr	r2, r2, #64
 1638 00c4 4A60     		str	r2, [r1, #4]
 1639              	.L158:
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           break;
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* case ADC_EOC_SINGLE_CONV */
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         default:
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           break;
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable conversion of injected group, if automatic injected conversion  */
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* is disabled.                                                           */
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* trigger event.                                                         */
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Case of multimode enabled (when multimode feature is available):       */
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if ADC is slave,                                                       */
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled only (conversion is not started),                  */
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - if multimode only concerns regular conversion, ADC is enabled     */
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*     and conversion is started.                                         */
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If ADC is master or independent,                                       */
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    - ADC is enabled and conversion is started.                         */
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 1640              		.loc 1 894 0
 1641 00c6 2268     		ldr	r2, [r4]
 1642 00c8 1E49     		ldr	r1, .L171+4
 1643 00ca 8A42     		cmp	r2, r1
 1644 00cc 20D0     		beq	.L170
 1645 00ce 1146     		mov	r1, r2
 1646              	.L159:
 1647              		.loc 1 894 0 is_stmt 0 discriminator 4
ARM GAS  /tmp/ccmrLUMM.s 			page 171


 1648 00d0 8A42     		cmp	r2, r1
 1649 00d2 20D0     		beq	.L160
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 1650              		.loc 1 896 0 is_stmt 1
 1651 00d4 062D     		cmp	r5, #6
 1652 00d6 14BF     		ite	ne
 1653 00d8 0021     		movne	r1, #0
 1654 00da 0121     		moveq	r1, #1
 1655 00dc DDB1     		cbz	r5, .L160
 1656 00de D1B9     		cbnz	r1, .L160
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 1657              		.loc 1 897 0
 1658 00e0 072D     		cmp	r5, #7
 1659 00e2 18D0     		beq	.L160
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          )
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (LL_ADC_INJ_GetTrigAuto(hadc->Instance) == LL_ADC_INJ_TRIG_INDEPENDENT)
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_INJ_StartConversion(hadc->Instance);
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* ADC instance is not a multimode slave instance with multimode injected conversions enabl
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 1660              		.loc 1 909 0
 1661 00e4 226E     		ldr	r2, [r4, #96]
 1662 00e6 42F48012 		orr	r2, r2, #1048576
 1663 00ea 2266     		str	r2, [r4, #96]
 1664 00ec 23E0     		b	.L147
 1665              	.L150:
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 1666              		.loc 1 832 0
 1667 00ee 0022     		movs	r2, #0
 1668 00f0 6266     		str	r2, [r4, #100]
 1669 00f2 BBE7     		b	.L151
 1670              	.L169:
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1671              		.loc 1 845 0
 1672 00f4 A1F58071 		sub	r1, r1, #256
 1673 00f8 C3E7     		b	.L152
 1674              	.L167:
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 1675              		.loc 1 877 0
 1676 00fa 2168     		ldr	r1, [r4]
 1677 00fc 4A68     		ldr	r2, [r1, #4]
 1678 00fe 22F04002 		bic	r2, r2, #64
 1679 0102 4A60     		str	r2, [r1, #4]
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           break;
 1680              		.loc 1 878 0
 1681 0104 2168     		ldr	r1, [r4]
 1682 0106 4A68     		ldr	r2, [r1, #4]
 1683 0108 42F02002 		orr	r2, r2, #32
 1684 010c 4A60     		str	r2, [r1, #4]
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
ARM GAS  /tmp/ccmrLUMM.s 			page 172


 1685              		.loc 1 879 0
 1686 010e DAE7     		b	.L158
 1687              	.L170:
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 1688              		.loc 1 894 0
 1689 0110 A1F58071 		sub	r1, r1, #256
 1690 0114 DCE7     		b	.L159
 1691              	.L160:
 1692              	.LVL157:
 1693              	.LBB394:
 1694              	.LBB395:
4886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1695              		.loc 2 4886 0
 1696 0116 D168     		ldr	r1, [r2, #12]
 1697              	.LVL158:
 1698              	.LBE395:
 1699              	.LBE394:
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 1700              		.loc 1 901 0
 1701 0118 11F0007F 		tst	r1, #33554432
 1702 011c 0BD1     		bne	.L147
 1703              	.LVL159:
 1704              	.LBB396:
 1705              	.LBB397:
7046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1706              		.loc 2 7046 0
 1707 011e 9068     		ldr	r0, [r2, #8]
 1708              	.LVL160:
 1709 0120 0B49     		ldr	r1, .L171+16
 1710 0122 0140     		ands	r1, r1, r0
 1711 0124 41F00801 		orr	r1, r1, #8
 1712 0128 9160     		str	r1, [r2, #8]
 1713 012a 04E0     		b	.L147
 1714              	.LVL161:
 1715              	.L149:
 1716              	.LBE397:
 1717              	.LBE396:
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1718              		.loc 1 916 0
 1719 012c 0022     		movs	r2, #0
 1720 012e 84F85C20 		strb	r2, [r4, #92]
 1721 0132 00E0     		b	.L147
 1722              	.LVL162:
 1723              	.L163:
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 1724              		.loc 1 793 0
 1725 0134 0223     		movs	r3, #2
 1726              	.LVL163:
 1727              	.L147:
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 173


 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Return function status */
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return tmp_hal_status;
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1728              		.loc 1 922 0
 1729 0136 1846     		mov	r0, r3
 1730 0138 38BD     		pop	{r3, r4, r5, pc}
 1731              	.LVL164:
 1732              	.L164:
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1733              		.loc 1 815 0
 1734 013a 0223     		movs	r3, #2
 1735 013c FBE7     		b	.L147
 1736              	.L172:
 1737 013e 00BF     		.align	2
 1738              	.L171:
 1739 0140 00200240 		.word	1073881088
 1740 0144 00210240 		.word	1073881344
 1741 0148 00630258 		.word	1476551424
 1742 014c FECFFFFF 		.word	-12290
 1743 0150 C0FFFF7F 		.word	2147483584
 1744              		.cfi_endproc
 1745              	.LFE352:
 1747              		.section	.text.HAL_ADCEx_InjectedStop_IT,"ax",%progbits
 1748              		.align	1
 1749              		.global	HAL_ADCEx_InjectedStop_IT
 1750              		.syntax unified
 1751              		.thumb
 1752              		.thumb_func
 1753              		.fpu fpv5-d16
 1755              	HAL_ADCEx_InjectedStop_IT:
 1756              	.LFB353:
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop conversion of injected channels, disable interruption of
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         end-of-conversion. Disable ADC peripheral if no regular conversion
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         is on going.
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If ADC must be disabled and if conversion is on going on
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         regular group, function HAL_ADC_Stop must be used to stop both
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         injected and regular groups, and disable the ADC.
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   If injected group mode auto-injection is enabled,
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function HAL_ADC_Stop must be used.
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Case of multimode enabled (when multimode feature is available):
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedStop_IT() API must be called for ADC master first,
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         then for ADC slave.
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC master, conversion is stopped and ADC is disabled.
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For ADC slave, ADC is disabled only (conversion stop of ADC master
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         has already stopped conversion of ADC slave).
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of auto-injection mode, HAL_ADC_Stop() must be used.
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef *hadc)
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1757              		.loc 1 944 0
 1758              		.cfi_startproc
 1759              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccmrLUMM.s 			page 174


 1760              		@ frame_needed = 0, uses_anonymous_args = 0
 1761              	.LVL165:
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 1762              		.loc 1 951 0
 1763 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 1764 0004 012B     		cmp	r3, #1
 1765 0006 29D0     		beq	.L177
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 1766              		.loc 1 944 0 discriminator 2
 1767 0008 10B5     		push	{r4, lr}
 1768              	.LCFI19:
 1769              		.cfi_def_cfa_offset 8
 1770              		.cfi_offset 4, -8
 1771              		.cfi_offset 14, -4
 1772 000a 0446     		mov	r4, r0
 1773              		.loc 1 951 0 discriminator 2
 1774 000c 0123     		movs	r3, #1
 1775 000e 80F85C30 		strb	r3, [r0, #92]
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential conversion on going on injected group only. */
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_INJECTED_GROUP);
 1776              		.loc 1 954 0 discriminator 2
 1777 0012 0221     		movs	r1, #2
 1778 0014 FFF7FEFF 		bl	ADC_ConversionStop
 1779              	.LVL166:
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if injected conversions are effectively stopped   */
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* and if no conversion on the other group (regular group) is intended to   */
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* continue.                                                                */
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 1780              		.loc 1 959 0 discriminator 2
 1781 0018 0346     		mov	r3, r0
 1782 001a 68B9     		cbnz	r0, .L175
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC end of conversion interrupt for injected channels */
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_JEOC | ADC_IT_JEOS | ADC_FLAG_JQOVF));
 1783              		.loc 1 962 0
 1784 001c 2168     		ldr	r1, [r4]
 1785 001e 4A68     		ldr	r2, [r1, #4]
 1786 0020 22F48C62 		bic	r2, r2, #1120
 1787 0024 4A60     		str	r2, [r1, #4]
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 1788              		.loc 1 964 0
 1789 0026 2268     		ldr	r2, [r4]
 1790              	.LVL167:
 1791              	.LBB398:
 1792              	.LBB399:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1793              		.loc 2 6884 0
 1794 0028 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccmrLUMM.s 			page 175


 1795              	.LVL168:
 1796 002a 12F0040F 		tst	r2, #4
 1797 002e 08D0     		beq	.L176
 1798              	.LVL169:
 1799              	.LBE399:
 1800              	.LBE398:
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 1801              		.loc 1 983 0
 1802 0030 226E     		ldr	r2, [r4, #96]
 1803 0032 22F48052 		bic	r2, r2, #4096
 1804 0036 2266     		str	r2, [r4, #96]
 1805              	.L175:
 1806              	.LVL170:
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 1807              		.loc 1 988 0
 1808 0038 0022     		movs	r2, #0
 1809 003a 84F85C20 		strb	r2, [r4, #92]
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 1810              		.loc 1 992 0
 1811 003e 1846     		mov	r0, r3
 1812 0040 10BD     		pop	{r4, pc}
 1813              	.LVL171:
 1814              	.L176:
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1815              		.loc 1 967 0
 1816 0042 2046     		mov	r0, r4
 1817              	.LVL172:
 1818 0044 FFF7FEFF 		bl	ADC_Disable
 1819              	.LVL173:
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 1820              		.loc 1 970 0
 1821 0048 0346     		mov	r3, r0
ARM GAS  /tmp/ccmrLUMM.s 			page 176


 1822 004a 0028     		cmp	r0, #0
 1823 004c F4D1     		bne	.L175
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 1824              		.loc 1 973 0
 1825 004e 216E     		ldr	r1, [r4, #96]
 1826 0050 044A     		ldr	r2, .L182
 1827 0052 0A40     		ands	r2, r2, r1
 1828 0054 42F00102 		orr	r2, r2, #1
 1829 0058 2266     		str	r2, [r4, #96]
 1830 005a EDE7     		b	.L175
 1831              	.LVL174:
 1832              	.L177:
 1833              	.LCFI20:
 1834              		.cfi_def_cfa_offset 0
 1835              		.cfi_restore 4
 1836              		.cfi_restore 14
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1837              		.loc 1 951 0
 1838 005c 0223     		movs	r3, #2
 1839              		.loc 1 992 0
 1840 005e 1846     		mov	r0, r3
 1841              	.LVL175:
 1842 0060 7047     		bx	lr
 1843              	.L183:
 1844 0062 00BF     		.align	2
 1845              	.L182:
 1846 0064 FEEEFFFF 		.word	-4354
 1847              		.cfi_endproc
 1848              	.LFE353:
 1850              		.section	.text.HAL_ADCEx_MultiModeStart_DMA,"ax",%progbits
 1851              		.align	1
 1852              		.global	HAL_ADCEx_MultiModeStart_DMA
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv5-d16
 1858              	HAL_ADCEx_MultiModeStart_DMA:
 1859              	.LFB354:
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC, start MultiMode conversion and transfer regular results through DMA.
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Multimode must have been previously configured using
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_MultiModeConfigChannel() function.
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Interruptions enabled in this function:
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          overrun, DMA half transfer, DMA transfer complete.
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Each of these interruptions has its dedicated callback function.
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   State field of Slave ADC handle is not updated in this configuration:
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          user should not rely on it for information related to Slave regular
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversions.
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param pData Destination Buffer address.
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param Length Length of data to be transferred from ADC peripheral to memory (in bytes).
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t L
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 1860              		.loc 1 1010 0
ARM GAS  /tmp/ccmrLUMM.s 			page 177


 1861              		.cfi_startproc
 1862              		@ args = 0, pretend = 0, frame = 112
 1863              		@ frame_needed = 0, uses_anonymous_args = 0
 1864              	.LVL176:
 1865 0000 70B5     		push	{r4, r5, r6, lr}
 1866              	.LCFI21:
 1867              		.cfi_def_cfa_offset 16
 1868              		.cfi_offset 4, -16
 1869              		.cfi_offset 5, -12
 1870              		.cfi_offset 6, -8
 1871              		.cfi_offset 14, -4
 1872 0002 9CB0     		sub	sp, sp, #112
 1873              	.LCFI22:
 1874              		.cfi_def_cfa_offset 128
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 1875              		.loc 1 1020 0
 1876 0004 0468     		ldr	r4, [r0]
 1877              	.LVL177:
 1878              	.LBB400:
 1879              	.LBB401:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1880              		.loc 2 6884 0
 1881 0006 A568     		ldr	r5, [r4, #8]
 1882 0008 15F0040F 		tst	r5, #4
 1883 000c 64D1     		bne	.L192
 1884              	.LVL178:
 1885              	.LBE401:
 1886              	.LBE400:
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_BUSY;
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process locked */
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_LOCK(hadc);
 1887              		.loc 1 1027 0
 1888 000e 90F85C50 		ldrb	r5, [r0, #92]	@ zero_extendqisi2
 1889 0012 012D     		cmp	r5, #1
 1890 0014 64D0     		beq	.L193
 1891              		.loc 1 1027 0 is_stmt 0 discriminator 2
 1892 0016 0123     		movs	r3, #1
 1893 0018 80F85C30 		strb	r3, [r0, #92]
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 1894              		.loc 1 1030 0 is_stmt 1 discriminator 2
 1895 001c 314B     		ldr	r3, .L200
 1896 001e 9C42     		cmp	r4, r3
ARM GAS  /tmp/ccmrLUMM.s 			page 178


 1897 0020 41D0     		beq	.L196
 1898 0022 0023     		movs	r3, #0
 1899 0024 0093     		str	r3, [sp]
 1900              	.L187:
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 1901              		.loc 1 1032 0
 1902 0026 009B     		ldr	r3, [sp]
 1903 0028 002B     		cmp	r3, #0
 1904 002a 40D0     		beq	.L197
 1905 002c 1646     		mov	r6, r2
 1906 002e 0D46     		mov	r5, r1
 1907 0030 0446     		mov	r4, r0
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Enable the ADC peripherals: master and slave (in case if not already   */
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* enabled previously)                                                    */
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = ADC_Enable(hadc);
 1908              		.loc 1 1045 0
 1909 0032 FFF7FEFF 		bl	ADC_Enable
 1910              	.LVL179:
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1911              		.loc 1 1046 0
 1912 0036 0346     		mov	r3, r0
 1913 0038 0028     		cmp	r0, #0
 1914 003a 41D0     		beq	.L198
 1915              	.LVL180:
 1916              	.L189:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Enable(&tmphadcSlave);
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Start multimode conversion of ADCs pair */
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 1917              		.loc 1 1052 0
 1918 003c 002B     		cmp	r3, #0
 1919 003e 47D1     		bne	.L190
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC state */
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_STATE_CLR_SET(hadc->State,
 1920              		.loc 1 1055 0
 1921 0040 226E     		ldr	r2, [r4, #96]
 1922 0042 A3F60273 		subw	r3, r3, #3842
 1923              	.LVL181:
 1924 0046 1340     		ands	r3, r3, r2
 1925 0048 43F48073 		orr	r3, r3, #256
 1926 004c 2366     		str	r3, [r4, #96]
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         (HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                         HAL_ADC_STATE_REG_BUSY);
ARM GAS  /tmp/ccmrLUMM.s 			page 179


1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC error code to none */
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       ADC_CLEAR_ERRORCODE(hadc);
 1927              		.loc 1 1060 0
 1928 004e 0023     		movs	r3, #0
 1929 0050 6366     		str	r3, [r4, #100]
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set the DMA transfer complete callback */
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 1930              		.loc 1 1063 0
 1931 0052 A36D     		ldr	r3, [r4, #88]
 1932 0054 244A     		ldr	r2, .L200+4
 1933 0056 DA63     		str	r2, [r3, #60]
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set the DMA half transfer complete callback */
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 1934              		.loc 1 1066 0
 1935 0058 A36D     		ldr	r3, [r4, #88]
 1936 005a 244A     		ldr	r2, .L200+8
 1937 005c 1A64     		str	r2, [r3, #64]
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set the DMA error callback */
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->DMA_Handle->XferErrorCallback = ADC_DMAError ;
 1938              		.loc 1 1069 0
 1939 005e A36D     		ldr	r3, [r4, #88]
 1940 0060 234A     		ldr	r2, .L200+12
 1941 0062 DA64     		str	r2, [r3, #76]
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Pointer to the common control register  */
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 1942              		.loc 1 1072 0
 1943 0064 2368     		ldr	r3, [r4]
 1944 0066 1F49     		ldr	r1, .L200
 1945 0068 224A     		ldr	r2, .L200+16
 1946 006a 9342     		cmp	r3, r2
 1947 006c 18BF     		it	ne
 1948 006e 8B42     		cmpne	r3, r1
 1949 0070 2BD0     		beq	.L199
 1950 0072 2149     		ldr	r1, .L200+20
 1951              	.L191:
 1952              	.LVL182:
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* start (in case of SW start):                                           */
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Clear regular group conversion flag and overrun flag */
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 1953              		.loc 1 1079 0 discriminator 4
 1954 0074 1C22     		movs	r2, #28
 1955 0076 1A60     		str	r2, [r3]
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 1956              		.loc 1 1084 0 discriminator 4
ARM GAS  /tmp/ccmrLUMM.s 			page 180


 1957 0078 0023     		movs	r3, #0
 1958 007a 84F85C30 		strb	r3, [r4, #92]
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable ADC overrun interrupt */
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 1959              		.loc 1 1087 0 discriminator 4
 1960 007e 2268     		ldr	r2, [r4]
 1961 0080 5368     		ldr	r3, [r2, #4]
 1962 0082 43F01003 		orr	r3, r3, #16
 1963 0086 5360     		str	r3, [r2, #4]
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Start the DMA channel */
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)
 1964              		.loc 1 1090 0 discriminator 4
 1965 0088 3346     		mov	r3, r6
 1966 008a 2A46     		mov	r2, r5
 1967 008c 0C31     		adds	r1, r1, #12
 1968              	.LVL183:
 1969 008e A06D     		ldr	r0, [r4, #88]
 1970 0090 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1971              	.LVL184:
 1972 0094 0346     		mov	r3, r0
 1973              	.LVL185:
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable conversion of regular group.                                    */
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If software start has been selected, conversion starts immediately.    */
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If external trigger has been selected, conversion will start at next   */
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* trigger event.                                                         */
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Start ADC group regular conversion */
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_REG_StartConversion(hadc->Instance);
 1974              		.loc 1 1097 0 discriminator 4
 1975 0096 2168     		ldr	r1, [r4]
 1976              	.LVL186:
 1977              	.LBB402:
 1978              	.LBB403:
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 1979              		.loc 2 6851 0 discriminator 4
 1980 0098 8868     		ldr	r0, [r1, #8]
 1981 009a 184A     		ldr	r2, .L200+24
 1982 009c 0240     		ands	r2, r2, r0
 1983 009e 42F00402 		orr	r2, r2, #4
 1984 00a2 8A60     		str	r2, [r1, #8]
 1985 00a4 19E0     		b	.L185
 1986              	.LVL187:
 1987              	.L196:
 1988              	.LBE403:
 1989              	.LBE402:
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1990              		.loc 1 1030 0 discriminator 1
 1991 00a6 03F58073 		add	r3, r3, #256
 1992 00aa 0093     		str	r3, [sp]
 1993 00ac BBE7     		b	.L187
 1994              	.L197:
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1995              		.loc 1 1035 0
 1996 00ae 036E     		ldr	r3, [r0, #96]
 1997 00b0 43F02003 		orr	r3, r3, #32
ARM GAS  /tmp/ccmrLUMM.s 			page 181


 1998 00b4 0366     		str	r3, [r0, #96]
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 1999              		.loc 1 1038 0
 2000 00b6 0023     		movs	r3, #0
 2001 00b8 80F85C30 		strb	r3, [r0, #92]
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2002              		.loc 1 1040 0
 2003 00bc 0123     		movs	r3, #1
 2004 00be 0CE0     		b	.L185
 2005              	.LVL188:
 2006              	.L198:
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2007              		.loc 1 1048 0
 2008 00c0 6846     		mov	r0, sp
 2009              	.LVL189:
 2010 00c2 FFF7FEFF 		bl	ADC_Enable
 2011              	.LVL190:
 2012 00c6 0346     		mov	r3, r0
 2013              	.LVL191:
 2014 00c8 B8E7     		b	.L189
 2015              	.LVL192:
 2016              	.L199:
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2017              		.loc 1 1072 0
 2018 00ca 01F54071 		add	r1, r1, #768
 2019 00ce D1E7     		b	.L191
 2020              	.LVL193:
 2021              	.L190:
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
 2022              		.loc 1 1102 0
 2023 00d0 0022     		movs	r2, #0
 2024 00d2 84F85C20 		strb	r2, [r4, #92]
 2025 00d6 00E0     		b	.L185
 2026              	.LVL194:
 2027              	.L192:
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 2028              		.loc 1 1022 0
 2029 00d8 0223     		movs	r3, #2
 2030              	.LVL195:
 2031              	.L185:
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Return function status */
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return tmp_hal_status;
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2032              		.loc 1 1108 0
 2033 00da 1846     		mov	r0, r3
 2034 00dc 1CB0     		add	sp, sp, #112
 2035              	.LCFI23:
 2036              		.cfi_remember_state
 2037              		.cfi_def_cfa_offset 16
 2038              		@ sp needed
ARM GAS  /tmp/ccmrLUMM.s 			page 182


 2039 00de 70BD     		pop	{r4, r5, r6, pc}
 2040              	.LVL196:
 2041              	.L193:
 2042              	.LCFI24:
 2043              		.cfi_restore_state
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2044              		.loc 1 1027 0
 2045 00e0 0223     		movs	r3, #2
 2046 00e2 FAE7     		b	.L185
 2047              	.L201:
 2048              		.align	2
 2049              	.L200:
 2050 00e4 00200240 		.word	1073881088
 2051 00e8 00000000 		.word	ADC_DMAConvCplt
 2052 00ec 00000000 		.word	ADC_DMAHalfConvCplt
 2053 00f0 00000000 		.word	ADC_DMAError
 2054 00f4 00210240 		.word	1073881344
 2055 00f8 00630258 		.word	1476551424
 2056 00fc C0FFFF7F 		.word	2147483584
 2057              		.cfi_endproc
 2058              	.LFE354:
 2060              		.section	.text.HAL_ADCEx_MultiModeStop_DMA,"ax",%progbits
 2061              		.align	1
 2062              		.global	HAL_ADCEx_MultiModeStop_DMA
 2063              		.syntax unified
 2064              		.thumb
 2065              		.thumb_func
 2066              		.fpu fpv5-d16
 2068              	HAL_ADCEx_MultiModeStop_DMA:
 2069              	.LFB355:
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop multimode ADC conversion, disable ADC DMA transfer, disable ADC peripheral.
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. MultiMode DMA bits
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (MDMA and DMACFG bits of common CCR register) are maintained. To disable
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Multimode (set with HAL_ADCEx_MultiModeConfigChannel()), ADC must be
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_DeInit(), or the user can
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADCEx_DisableMultiMode() API.
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADC_Stop_DMA() must be called after this function with handle of
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef *hadc)
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2070              		.loc 1 1124 0
 2071              		.cfi_startproc
 2072              		@ args = 0, pretend = 0, frame = 112
 2073              		@ frame_needed = 0, uses_anonymous_args = 0
 2074              	.LVL197:
 2075 0000 70B5     		push	{r4, r5, r6, lr}
 2076              	.LCFI25:
 2077              		.cfi_def_cfa_offset 16
 2078              		.cfi_offset 4, -16
 2079              		.cfi_offset 5, -12
 2080              		.cfi_offset 6, -8
ARM GAS  /tmp/ccmrLUMM.s 			page 183


 2081              		.cfi_offset 14, -4
 2082 0002 9CB0     		sub	sp, sp, #112
 2083              	.LCFI26:
 2084              		.cfi_def_cfa_offset 128
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tickstart;
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmphadcSlave_disable_status;
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2085              		.loc 1 1135 0
 2086 0004 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2087 0008 012B     		cmp	r3, #1
 2088 000a 74D0     		beq	.L216
 2089 000c 0446     		mov	r4, r0
 2090              		.loc 1 1135 0 is_stmt 0 discriminator 2
 2091 000e 0123     		movs	r3, #1
 2092 0010 80F85C30 		strb	r3, [r0, #92]
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular and injected groups */
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 2093              		.loc 1 1139 0 is_stmt 1 discriminator 2
 2094 0014 0321     		movs	r1, #3
 2095 0016 FFF7FEFF 		bl	ADC_ConversionStop
 2096              	.LVL198:
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2097              		.loc 1 1142 0 discriminator 2
 2098 001a 0546     		mov	r5, r0
 2099 001c 0028     		cmp	r0, #0
 2100 001e 64D1     		bne	.L204
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 2101              		.loc 1 1145 0
 2102 0020 2268     		ldr	r2, [r4]
 2103 0022 364B     		ldr	r3, .L226
 2104 0024 9A42     		cmp	r2, r3
 2105 0026 0DD0     		beq	.L221
 2106              		.loc 1 1145 0 is_stmt 0 discriminator 2
 2107 0028 0023     		movs	r3, #0
 2108 002a 0093     		str	r3, [sp]
 2109              	.L206:
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 2110              		.loc 1 1147 0 is_stmt 1
 2111 002c 009B     		ldr	r3, [sp]
 2112 002e 6BB1     		cbz	r3, .L222
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
ARM GAS  /tmp/ccmrLUMM.s 			page 184


1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
 2113              		.loc 1 1162 0
 2114 0030 FFF7FEFF 		bl	HAL_GetTick
 2115              	.LVL199:
 2116 0034 0546     		mov	r5, r0
 2117              	.LVL200:
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 2118              		.loc 1 1164 0
 2119 0036 009B     		ldr	r3, [sp]
 2120              	.LVL201:
 2121              	.LBB404:
 2122              	.LBB405:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2123              		.loc 2 6884 0
 2124 0038 9B68     		ldr	r3, [r3, #8]
 2125              	.LVL202:
 2126 003a 13F0040F 		tst	r3, #4
 2127 003e 0ED0     		beq	.L217
 2128 0040 0122     		movs	r2, #1
 2129 0042 18E0     		b	.L209
 2130              	.LVL203:
 2131              	.L221:
 2132              	.LBE405:
 2133              	.LBE404:
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2134              		.loc 1 1145 0 discriminator 1
 2135 0044 03F58073 		add	r3, r3, #256
 2136 0048 0093     		str	r3, [sp]
 2137 004a EFE7     		b	.L206
 2138              	.L222:
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2139              		.loc 1 1150 0
 2140 004c 236E     		ldr	r3, [r4, #96]
 2141 004e 43F02003 		orr	r3, r3, #32
 2142 0052 2366     		str	r3, [r4, #96]
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2143              		.loc 1 1153 0
 2144 0054 0023     		movs	r3, #0
 2145 0056 84F85C30 		strb	r3, [r4, #92]
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2146              		.loc 1 1155 0
 2147 005a 0125     		movs	r5, #1
 2148 005c 48E0     		b	.L203
 2149              	.LVL204:
ARM GAS  /tmp/ccmrLUMM.s 			page 185


 2150              	.L217:
 2151              	.LBB407:
 2152              	.LBB406:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2153              		.loc 2 6884 0
 2154 005e 0022     		movs	r2, #0
 2155 0060 09E0     		b	.L209
 2156              	.LVL205:
 2157              	.L224:
 2158              	.LBE406:
 2159              	.LBE407:
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2160              		.loc 1 1172 0
 2161 0062 236E     		ldr	r3, [r4, #96]
 2162 0064 43F01003 		orr	r3, r3, #16
 2163 0068 2366     		str	r3, [r4, #96]
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Process unlocked */
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 2164              		.loc 1 1175 0
 2165 006a 0023     		movs	r3, #0
 2166 006c 84F85C30 		strb	r3, [r4, #92]
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         return HAL_ERROR;
 2167              		.loc 1 1177 0
 2168 0070 0125     		movs	r5, #1
 2169              	.LVL206:
 2170 0072 3DE0     		b	.L203
 2171              	.LVL207:
 2172              	.L218:
 2173              	.LBB408:
 2174              	.LBB409:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2175              		.loc 2 6884 0
 2176 0074 0022     		movs	r2, #0
 2177              	.LVL208:
 2178              	.L209:
 2179              	.LBE409:
 2180              	.LBE408:
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 2181              		.loc 1 1165 0
 2182 0076 2368     		ldr	r3, [r4]
 2183              	.LVL209:
 2184              	.LBB411:
 2185              	.LBB412:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2186              		.loc 2 6884 0
 2187 0078 9B68     		ldr	r3, [r3, #8]
 2188              	.LVL210:
 2189 007a 13F0040F 		tst	r3, #4
ARM GAS  /tmp/ccmrLUMM.s 			page 186


 2190 007e 00D1     		bne	.L212
 2191              	.LVL211:
 2192              	.LBE412:
 2193              	.LBE411:
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
 2194              		.loc 1 1166 0
 2195 0080 5AB1     		cbz	r2, .L223
 2196              	.L212:
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2197              		.loc 1 1169 0
 2198 0082 FFF7FEFF 		bl	HAL_GetTick
 2199              	.LVL212:
 2200 0086 401B     		subs	r0, r0, r5
 2201 0088 0528     		cmp	r0, #5
 2202 008a EAD8     		bhi	.L224
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 2203              		.loc 1 1180 0
 2204 008c 009B     		ldr	r3, [sp]
 2205              	.LVL213:
 2206              	.LBB413:
 2207              	.LBB410:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2208              		.loc 2 6884 0
 2209 008e 9B68     		ldr	r3, [r3, #8]
 2210              	.LVL214:
 2211 0090 13F0040F 		tst	r3, #4
 2212 0094 EED0     		beq	.L218
 2213 0096 0122     		movs	r2, #1
 2214 0098 EDE7     		b	.L209
 2215              	.LVL215:
 2216              	.L223:
 2217              	.LBE410:
 2218              	.LBE413:
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: DMA channel of ADC slave should be stopped after this function   */
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*       with HAL_ADC_Stop_DMA() API.                                     */
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 2219              		.loc 1 1187 0
 2220 009a A06D     		ldr	r0, [r4, #88]
 2221 009c FFF7FEFF 		bl	HAL_DMA_Abort
 2222              	.LVL216:
 2223 00a0 0546     		mov	r5, r0
 2224              	.LVL217:
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_ERROR)
 2225              		.loc 1 1190 0
 2226 00a2 0128     		cmp	r0, #1
 2227 00a4 10D0     		beq	.L225
 2228              	.L213:
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
ARM GAS  /tmp/ccmrLUMM.s 			page 187


1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 2229              		.loc 1 1197 0
 2230 00a6 2268     		ldr	r2, [r4]
 2231 00a8 5368     		ldr	r3, [r2, #4]
 2232 00aa 23F01003 		bic	r3, r3, #16
 2233 00ae 5360     		str	r3, [r2, #4]
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave */
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* memory a potential failing status.                                     */
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 2234              		.loc 1 1202 0
 2235 00b0 7DB9     		cbnz	r5, .L214
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmphadcSlave_disable_status = ADC_Disable(&tmphadcSlave);
 2236              		.loc 1 1204 0
 2237 00b2 6846     		mov	r0, sp
 2238              	.LVL218:
 2239 00b4 FFF7FEFF 		bl	ADC_Disable
 2240              	.LVL219:
 2241 00b8 0646     		mov	r6, r0
 2242              	.LVL220:
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((ADC_Disable(hadc) == HAL_OK)           &&
 2243              		.loc 1 1205 0
 2244 00ba 2046     		mov	r0, r4
 2245 00bc FFF7FEFF 		bl	ADC_Disable
 2246              	.LVL221:
 2247 00c0 68B9     		cbnz	r0, .L215
 2248              		.loc 1 1205 0 is_stmt 0 discriminator 1
 2249 00c2 66B9     		cbnz	r6, .L215
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           (tmphadcSlave_disable_status == HAL_OK))
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = HAL_OK;
 2250              		.loc 1 1208 0 is_stmt 1
 2251 00c4 3546     		mov	r5, r6
 2252 00c6 0AE0     		b	.L215
 2253              	.LVL222:
 2254              	.L225:
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2255              		.loc 1 1193 0
 2256 00c8 236E     		ldr	r3, [r4, #96]
 2257 00ca 43F04003 		orr	r3, r3, #64
 2258 00ce 2366     		str	r3, [r4, #96]
 2259 00d0 E9E7     		b	.L213
 2260              	.L214:
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* In case of error, attempt to disable ADC master and slave without status assert */
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (void) ADC_Disable(hadc);
 2261              		.loc 1 1214 0
 2262 00d2 2046     		mov	r0, r4
ARM GAS  /tmp/ccmrLUMM.s 			page 188


 2263              	.LVL223:
 2264 00d4 FFF7FEFF 		bl	ADC_Disable
 2265              	.LVL224:
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (void) ADC_Disable(&tmphadcSlave);
 2266              		.loc 1 1215 0
 2267 00d8 6846     		mov	r0, sp
 2268 00da FFF7FEFF 		bl	ADC_Disable
 2269              	.LVL225:
 2270              	.L215:
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set ADC state (ADC master) */
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_STATE_CLR_SET(hadc->State,
 2271              		.loc 1 1219 0
 2272 00de 226E     		ldr	r2, [r4, #96]
 2273 00e0 074B     		ldr	r3, .L226+4
 2274 00e2 1340     		ands	r3, r3, r2
 2275 00e4 43F00103 		orr	r3, r3, #1
 2276 00e8 2366     		str	r3, [r4, #96]
 2277              	.LVL226:
 2278              	.L204:
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                       HAL_ADC_STATE_READY);
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2279              		.loc 1 1225 0
 2280 00ea 0023     		movs	r3, #0
 2281 00ec 84F85C30 		strb	r3, [r4, #92]
 2282              	.LVL227:
 2283              	.L203:
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2284              		.loc 1 1229 0
 2285 00f0 2846     		mov	r0, r5
 2286 00f2 1CB0     		add	sp, sp, #112
 2287              	.LCFI27:
 2288              		.cfi_remember_state
 2289              		.cfi_def_cfa_offset 16
 2290              		@ sp needed
 2291 00f4 70BD     		pop	{r4, r5, r6, pc}
 2292              	.LVL228:
 2293              	.L216:
 2294              	.LCFI28:
 2295              		.cfi_restore_state
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2296              		.loc 1 1135 0
 2297 00f6 0225     		movs	r5, #2
 2298 00f8 FAE7     		b	.L203
 2299              	.L227:
 2300 00fa 00BF     		.align	2
 2301              	.L226:
 2302 00fc 00200240 		.word	1073881088
 2303 0100 FEEEFFFF 		.word	-4354
ARM GAS  /tmp/ccmrLUMM.s 			page 189


 2304              		.cfi_endproc
 2305              	.LFE355:
 2307              		.section	.text.HAL_ADCEx_MultiModeGetValue,"ax",%progbits
 2308              		.align	1
 2309              		.global	HAL_ADCEx_MultiModeGetValue
 2310              		.syntax unified
 2311              		.thumb
 2312              		.thumb_func
 2313              		.fpu fpv5-d16
 2315              	HAL_ADCEx_MultiModeGetValue:
 2316              	.LFB356:
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Return the last ADC Master and Slave regular conversions results when in multimode conf
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC Master (handle of ADC Slave must not be used)
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval The converted data values.
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef *hadc)
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2317              		.loc 1 1237 0
 2318              		.cfi_startproc
 2319              		@ args = 0, pretend = 0, frame = 0
 2320              		@ frame_needed = 0, uses_anonymous_args = 0
 2321              		@ link register save eliminated.
 2322              	.LVL229:
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   const ADC_Common_TypeDef *tmpADC_Common;
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning if no assert_param check */
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* and possible no usage in __LL_ADC_COMMON_INSTANCE() below               */
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Pointer to the common control register  */
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 2323              		.loc 1 1248 0
 2324 0000 0368     		ldr	r3, [r0]
 2325 0002 0549     		ldr	r1, .L232
 2326 0004 054A     		ldr	r2, .L232+4
 2327 0006 9342     		cmp	r3, r2
 2328 0008 18BF     		it	ne
 2329 000a 8B42     		cmpne	r3, r1
 2330 000c 02D0     		beq	.L231
 2331 000e 044B     		ldr	r3, .L232+8
 2332              	.L229:
 2333              	.LVL230:
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return the multi mode conversion value */
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmpADC_Common->CDR;
 2334              		.loc 1 1251 0 discriminator 4
 2335 0010 D868     		ldr	r0, [r3, #12]
 2336              	.LVL231:
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2337              		.loc 1 1252 0 discriminator 4
 2338 0012 7047     		bx	lr
 2339              	.LVL232:
ARM GAS  /tmp/ccmrLUMM.s 			page 190


 2340              	.L231:
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2341              		.loc 1 1248 0
 2342 0014 034B     		ldr	r3, .L232+12
 2343 0016 FBE7     		b	.L229
 2344              	.L233:
 2345              		.align	2
 2346              	.L232:
 2347 0018 00200240 		.word	1073881088
 2348 001c 00210240 		.word	1073881344
 2349 0020 00630258 		.word	1476551424
 2350 0024 00230240 		.word	1073881856
 2351              		.cfi_endproc
 2352              	.LFE356:
 2354              		.section	.text.HAL_ADCEx_InjectedGetValue,"ax",%progbits
 2355              		.align	1
 2356              		.global	HAL_ADCEx_InjectedGetValue
 2357              		.syntax unified
 2358              		.thumb
 2359              		.thumb_func
 2360              		.fpu fpv5-d16
 2362              	HAL_ADCEx_InjectedGetValue:
 2363              	.LFB357:
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Get ADC injected group conversion result.
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Reading register JDRx automatically clears ADC flag JEOC
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (ADC group injected end of unitary conversion).
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This function does not clear ADC flag JEOS
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (ADC group injected end of sequence conversion)
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Occurrence of flag JEOS rising:
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          - If sequencer is composed of 1 rank, flag JEOS is equivalent
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            to flag JEOC.
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          - If sequencer is composed of several ranks, during the scan
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            sequence flag JEOC only is raised, at the end of the scan sequence
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            both flags JEOC and EOS are raised.
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Flag JEOS must not be cleared by this function because
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         it would not be compliant with low power features
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (feature low power auto-wait, not available on all STM32 families).
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         To clear this flag, either use function:
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         model polling: @ref HAL_ADCEx_InjectedPollForConversion()
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_JEOS).
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param InjectedRank the converted ADC injected rank.
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *          This parameter can be one of the following values:
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_1 ADC group injected rank 1
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_2 ADC group injected rank 2
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_3 ADC group injected rank 3
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *            @arg @ref ADC_INJECTED_RANK_4 ADC group injected rank 4
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval ADC group injected conversion data
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef *hadc, uint32_t InjectedRank)
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2364              		.loc 1 1283 0
 2365              		.cfi_startproc
 2366              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccmrLUMM.s 			page 191


 2367              		@ frame_needed = 0, uses_anonymous_args = 0
 2368              		@ link register save eliminated.
 2369              	.LVL233:
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_jdr;
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Get ADC converted value */
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   switch (InjectedRank)
 2370              		.loc 1 1291 0
 2371 0000 40F21523 		movw	r3, #533
 2372 0004 9942     		cmp	r1, r3
 2373 0006 0FD0     		beq	.L236
 2374 0008 40F21B33 		movw	r3, #795
 2375 000c 9942     		cmp	r1, r3
 2376 000e 07D0     		beq	.L237
 2377 0010 40F20F13 		movw	r3, #271
 2378 0014 9942     		cmp	r1, r3
 2379 0016 0BD0     		beq	.L241
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_4:
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR4;
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3:
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR3;
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2:
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR2;
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     default:
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_jdr = hadc->Instance->JDR1;
 2380              		.loc 1 1304 0
 2381 0018 0368     		ldr	r3, [r0]
 2382 001a D3F88000 		ldr	r0, [r3, #128]
 2383              	.LVL234:
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return ADC converted value */
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_jdr;
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2384              		.loc 1 1310 0
 2385 001e 7047     		bx	lr
 2386              	.LVL235:
 2387              	.L237:
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 2388              		.loc 1 1294 0
 2389 0020 0368     		ldr	r3, [r0]
 2390 0022 D3F88C00 		ldr	r0, [r3, #140]
 2391              	.LVL236:
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_3:
 2392              		.loc 1 1295 0
 2393 0026 7047     		bx	lr
 2394              	.LVL237:
ARM GAS  /tmp/ccmrLUMM.s 			page 192


 2395              	.L236:
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 2396              		.loc 1 1297 0
 2397 0028 0368     		ldr	r3, [r0]
 2398 002a D3F88800 		ldr	r0, [r3, #136]
 2399              	.LVL238:
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_2:
 2400              		.loc 1 1298 0
 2401 002e 7047     		bx	lr
 2402              	.LVL239:
 2403              	.L241:
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       break;
 2404              		.loc 1 1300 0
 2405 0030 0368     		ldr	r3, [r0]
 2406 0032 D3F88400 		ldr	r0, [r3, #132]
 2407              	.LVL240:
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     case ADC_INJECTED_RANK_1:
 2408              		.loc 1 1301 0
 2409 0036 7047     		bx	lr
 2410              		.cfi_endproc
 2411              	.LFE357:
 2413              		.section	.text.HAL_ADCEx_InjectedConvCpltCallback,"ax",%progbits
 2414              		.align	1
 2415              		.weak	HAL_ADCEx_InjectedConvCpltCallback
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu fpv5-d16
 2421              	HAL_ADCEx_InjectedConvCpltCallback:
 2422              	.LFB358:
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Injected conversion complete callback in non-blocking mode.
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2423              		.loc 1 1318 0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427              		@ link register save eliminated.
 2428              	.LVL241:
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2429              		.loc 1 1325 0
 2430 0000 7047     		bx	lr
 2431              		.cfi_endproc
 2432              	.LFE358:
 2434              		.section	.text.HAL_ADCEx_InjectedQueueOverflowCallback,"ax",%progbits
 2435              		.align	1
ARM GAS  /tmp/ccmrLUMM.s 			page 193


 2436              		.weak	HAL_ADCEx_InjectedQueueOverflowCallback
 2437              		.syntax unified
 2438              		.thumb
 2439              		.thumb_func
 2440              		.fpu fpv5-d16
 2442              	HAL_ADCEx_InjectedQueueOverflowCallback:
 2443              	.LFB359:
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Injected context queue overflow callback.
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This callback is called if injected context queue is enabled
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             (parameter "QueueInjectedContext" in injected channel configuration)
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             and if a new injected context is set when queue is full (maximum 2
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             contexts).
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2444              		.loc 1 1337 0
 2445              		.cfi_startproc
 2446              		@ args = 0, pretend = 0, frame = 0
 2447              		@ frame_needed = 0, uses_anonymous_args = 0
 2448              		@ link register save eliminated.
 2449              	.LVL242:
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2450              		.loc 1 1344 0
 2451 0000 7047     		bx	lr
 2452              		.cfi_endproc
 2453              	.LFE359:
 2455              		.section	.text.HAL_ADCEx_LevelOutOfWindow2Callback,"ax",%progbits
 2456              		.align	1
 2457              		.weak	HAL_ADCEx_LevelOutOfWindow2Callback
 2458              		.syntax unified
 2459              		.thumb
 2460              		.thumb_func
 2461              		.fpu fpv5-d16
 2463              	HAL_ADCEx_LevelOutOfWindow2Callback:
 2464              	.LFB360:
1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Analog watchdog 2 callback in non-blocking mode.
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2465              		.loc 1 1352 0
 2466              		.cfi_startproc
 2467              		@ args = 0, pretend = 0, frame = 0
 2468              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccmrLUMM.s 			page 194


 2469              		@ link register save eliminated.
 2470              	.LVL243:
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2471              		.loc 1 1359 0
 2472 0000 7047     		bx	lr
 2473              		.cfi_endproc
 2474              	.LFE360:
 2476              		.section	.text.HAL_ADCEx_LevelOutOfWindow3Callback,"ax",%progbits
 2477              		.align	1
 2478              		.weak	HAL_ADCEx_LevelOutOfWindow3Callback
 2479              		.syntax unified
 2480              		.thumb
 2481              		.thumb_func
 2482              		.fpu fpv5-d16
 2484              	HAL_ADCEx_LevelOutOfWindow3Callback:
 2485              	.LFB361:
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Analog watchdog 3 callback in non-blocking mode.
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2486              		.loc 1 1367 0
 2487              		.cfi_startproc
 2488              		@ args = 0, pretend = 0, frame = 0
 2489              		@ frame_needed = 0, uses_anonymous_args = 0
 2490              		@ link register save eliminated.
 2491              	.LVL244:
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2492              		.loc 1 1374 0
 2493 0000 7047     		bx	lr
 2494              		.cfi_endproc
 2495              	.LFE361:
 2497              		.section	.text.HAL_ADCEx_EndOfSamplingCallback,"ax",%progbits
 2498              		.align	1
 2499              		.weak	HAL_ADCEx_EndOfSamplingCallback
 2500              		.syntax unified
 2501              		.thumb
 2502              		.thumb_func
 2503              		.fpu fpv5-d16
 2505              	HAL_ADCEx_EndOfSamplingCallback:
 2506              	.LFB362:
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 195


1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  End Of Sampling callback in non-blocking mode.
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval None
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** __weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2507              		.loc 1 1383 0
 2508              		.cfi_startproc
 2509              		@ args = 0, pretend = 0, frame = 0
 2510              		@ frame_needed = 0, uses_anonymous_args = 0
 2511              		@ link register save eliminated.
 2512              	.LVL245:
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Prevent unused argument(s) compilation warning */
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   UNUSED(hadc);
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2513              		.loc 1 1390 0
 2514 0000 7047     		bx	lr
 2515              		.cfi_endproc
 2516              	.LFE362:
 2518              		.section	.text.HAL_ADCEx_RegularStop,"ax",%progbits
 2519              		.align	1
 2520              		.global	HAL_ADCEx_RegularStop
 2521              		.syntax unified
 2522              		.thumb
 2523              		.thumb_func
 2524              		.fpu fpv5-d16
 2526              	HAL_ADCEx_RegularStop:
 2527              	.LFB363:
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC peripheral if no
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversion is on going on injected group.
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop(ADC_HandleTypeDef *hadc)
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2528              		.loc 1 1400 0
 2529              		.cfi_startproc
 2530              		@ args = 0, pretend = 0, frame = 0
 2531              		@ frame_needed = 0, uses_anonymous_args = 0
 2532              	.LVL246:
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2533              		.loc 1 1407 0
ARM GAS  /tmp/ccmrLUMM.s 			page 196


 2534 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2535 0004 012B     		cmp	r3, #1
 2536 0006 27D0     		beq	.L251
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2537              		.loc 1 1400 0 discriminator 2
 2538 0008 10B5     		push	{r4, lr}
 2539              	.LCFI29:
 2540              		.cfi_def_cfa_offset 8
 2541              		.cfi_offset 4, -8
 2542              		.cfi_offset 14, -4
 2543 000a 0446     		mov	r4, r0
 2544              		.loc 1 1407 0 discriminator 2
 2545 000c 0121     		movs	r1, #1
 2546 000e 80F85C10 		strb	r1, [r0, #92]
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2547              		.loc 1 1410 0 discriminator 2
 2548 0012 FFF7FEFF 		bl	ADC_ConversionStop
 2549              	.LVL247:
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if regular conversions are effectively stopped
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      and if no injected conversions are on-going */
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2550              		.loc 1 1414 0 discriminator 2
 2551 0016 0346     		mov	r3, r0
 2552 0018 60B9     		cbnz	r0, .L249
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2553              		.loc 1 1417 0
 2554 001a 226E     		ldr	r2, [r4, #96]
 2555 001c 22F48072 		bic	r2, r2, #256
 2556 0020 2266     		str	r2, [r4, #96]
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 2557              		.loc 1 1419 0
 2558 0022 2268     		ldr	r2, [r4]
 2559              	.LVL248:
 2560              	.LBB414:
 2561              	.LBB415:
 2562              		.loc 2 7079 0
 2563 0024 9268     		ldr	r2, [r2, #8]
 2564              	.LVL249:
 2565 0026 12F0080F 		tst	r2, #8
 2566 002a 08D0     		beq	.L250
 2567              	.LVL250:
 2568              	.LBE415:
 2569              	.LBE414:
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* 2. Disable the ADC peripheral */
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
ARM GAS  /tmp/ccmrLUMM.s 			page 197


1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Conversion on injected group is stopped, but ADC not disabled since    */
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* conversion on regular group is still running.                          */
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2570              		.loc 1 1437 0
 2571 002c 226E     		ldr	r2, [r4, #96]
 2572 002e 42F48052 		orr	r2, r2, #4096
 2573 0032 2266     		str	r2, [r4, #96]
 2574              	.L249:
 2575              	.LVL251:
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2576              		.loc 1 1442 0
 2577 0034 0022     		movs	r2, #0
 2578 0036 84F85C20 		strb	r2, [r4, #92]
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2579              		.loc 1 1446 0
 2580 003a 1846     		mov	r0, r3
 2581 003c 10BD     		pop	{r4, pc}
 2582              	.LVL252:
 2583              	.L250:
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2584              		.loc 1 1422 0
 2585 003e 2046     		mov	r0, r4
 2586              	.LVL253:
 2587 0040 FFF7FEFF 		bl	ADC_Disable
 2588              	.LVL254:
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2589              		.loc 1 1425 0
 2590 0044 0346     		mov	r3, r0
 2591 0046 0028     		cmp	r0, #0
 2592 0048 F4D1     		bne	.L249
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
 2593              		.loc 1 1428 0
 2594 004a 216E     		ldr	r1, [r4, #96]
 2595 004c 044A     		ldr	r2, .L256
 2596 004e 0A40     		ands	r2, r2, r1
 2597 0050 42F00102 		orr	r2, r2, #1
 2598 0054 2266     		str	r2, [r4, #96]
 2599 0056 EDE7     		b	.L249
 2600              	.LVL255:
 2601              	.L251:
 2602              	.LCFI30:
 2603              		.cfi_def_cfa_offset 0
 2604              		.cfi_restore 4
ARM GAS  /tmp/ccmrLUMM.s 			page 198


 2605              		.cfi_restore 14
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2606              		.loc 1 1407 0
 2607 0058 0223     		movs	r3, #2
 2608              		.loc 1 1446 0
 2609 005a 1846     		mov	r0, r3
 2610              	.LVL256:
 2611 005c 7047     		bx	lr
 2612              	.L257:
 2613 005e 00BF     		.align	2
 2614              	.L256:
 2615 0060 FEEFFFFF 		.word	-4098
 2616              		.cfi_endproc
 2617              	.LFE363:
 2619              		.section	.text.HAL_ADCEx_RegularStop_IT,"ax",%progbits
 2620              		.align	1
 2621              		.global	HAL_ADCEx_RegularStop_IT
 2622              		.syntax unified
 2623              		.thumb
 2624              		.thumb_func
 2625              		.fpu fpv5-d16
 2627              	HAL_ADCEx_RegularStop_IT:
 2628              	.LFB364:
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of ADC groups regular and injected,
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         disable interrution of end-of-conversion,
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         disable ADC peripheral if no conversion is on going
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         on injected group.
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_IT(ADC_HandleTypeDef *hadc)
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2629              		.loc 1 1458 0
 2630              		.cfi_startproc
 2631              		@ args = 0, pretend = 0, frame = 0
 2632              		@ frame_needed = 0, uses_anonymous_args = 0
 2633              	.LVL257:
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2634              		.loc 1 1465 0
 2635 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2636 0004 012B     		cmp	r3, #1
 2637 0006 2CD0     		beq	.L262
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2638              		.loc 1 1458 0 discriminator 2
 2639 0008 10B5     		push	{r4, lr}
 2640              	.LCFI31:
 2641              		.cfi_def_cfa_offset 8
 2642              		.cfi_offset 4, -8
ARM GAS  /tmp/ccmrLUMM.s 			page 199


 2643              		.cfi_offset 14, -4
 2644 000a 0446     		mov	r4, r0
 2645              		.loc 1 1465 0 discriminator 2
 2646 000c 0121     		movs	r1, #1
 2647 000e 80F85C10 		strb	r1, [r0, #92]
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2648              		.loc 1 1468 0 discriminator 2
 2649 0012 FFF7FEFF 		bl	ADC_ConversionStop
 2650              	.LVL258:
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     and if no injected conversion is on-going */
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2651              		.loc 1 1472 0 discriminator 2
 2652 0016 0346     		mov	r3, r0
 2653 0018 88B9     		cbnz	r0, .L260
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2654              		.loc 1 1475 0
 2655 001a 226E     		ldr	r2, [r4, #96]
 2656 001c 22F48072 		bic	r2, r2, #256
 2657 0020 2266     		str	r2, [r4, #96]
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable all regular-related interrupts */
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 2658              		.loc 1 1478 0
 2659 0022 2168     		ldr	r1, [r4]
 2660 0024 4A68     		ldr	r2, [r1, #4]
 2661 0026 22F01C02 		bic	r2, r2, #28
 2662 002a 4A60     		str	r2, [r1, #4]
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable ADC peripheral if no injected conversions are on-going */
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 2663              		.loc 1 1481 0
 2664 002c 2268     		ldr	r2, [r4]
 2665              	.LVL259:
 2666              	.LBB416:
 2667              	.LBB417:
 2668              		.loc 2 7079 0
 2669 002e 9268     		ldr	r2, [r2, #8]
 2670              	.LVL260:
 2671 0030 12F0080F 		tst	r2, #8
 2672 0034 08D0     		beq	.L261
 2673              	.LVL261:
 2674              	.LBE417:
 2675              	.LBE416:
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmp_hal_status = ADC_Disable(hadc);
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if no issue reported */
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
ARM GAS  /tmp/ccmrLUMM.s 			page 200


1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 2676              		.loc 1 1495 0
 2677 0036 226E     		ldr	r2, [r4, #96]
 2678 0038 42F48052 		orr	r2, r2, #4096
 2679 003c 2266     		str	r2, [r4, #96]
 2680              	.L260:
 2681              	.LVL262:
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2682              		.loc 1 1500 0
 2683 003e 0022     		movs	r2, #0
 2684 0040 84F85C20 		strb	r2, [r4, #92]
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2685              		.loc 1 1504 0
 2686 0044 1846     		mov	r0, r3
 2687 0046 10BD     		pop	{r4, pc}
 2688              	.LVL263:
 2689              	.L261:
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* if no issue reported */
 2690              		.loc 1 1483 0
 2691 0048 2046     		mov	r0, r4
 2692              	.LVL264:
 2693 004a FFF7FEFF 		bl	ADC_Disable
 2694              	.LVL265:
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2695              		.loc 1 1485 0
 2696 004e 0346     		mov	r3, r0
 2697 0050 0028     		cmp	r0, #0
 2698 0052 F4D1     		bne	.L260
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
 2699              		.loc 1 1488 0
 2700 0054 216E     		ldr	r1, [r4, #96]
 2701 0056 044A     		ldr	r2, .L267
 2702 0058 0A40     		ands	r2, r2, r1
 2703 005a 42F00102 		orr	r2, r2, #1
 2704 005e 2266     		str	r2, [r4, #96]
 2705 0060 EDE7     		b	.L260
 2706              	.LVL266:
 2707              	.L262:
 2708              	.LCFI32:
 2709              		.cfi_def_cfa_offset 0
 2710              		.cfi_restore 4
 2711              		.cfi_restore 14
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2712              		.loc 1 1465 0
 2713 0062 0223     		movs	r3, #2
ARM GAS  /tmp/ccmrLUMM.s 			page 201


 2714              		.loc 1 1504 0
 2715 0064 1846     		mov	r0, r3
 2716              	.LVL267:
 2717 0066 7047     		bx	lr
 2718              	.L268:
 2719              		.align	2
 2720              	.L267:
 2721 0068 FEEFFFFF 		.word	-4098
 2722              		.cfi_endproc
 2723              	.LFE364:
 2725              		.section	.text.HAL_ADCEx_RegularStop_DMA,"ax",%progbits
 2726              		.align	1
 2727              		.global	HAL_ADCEx_RegularStop_DMA
 2728              		.syntax unified
 2729              		.thumb
 2730              		.thumb_func
 2731              		.fpu fpv5-d16
 2733              	HAL_ADCEx_RegularStop_DMA:
 2734              	.LFB365:
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC peripheral if no conversion is on going
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         on injected group.
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   HAL_ADCEx_RegularStop_DMA() function is dedicated to single-ADC mode only.
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For multimode (when multimode feature is available),
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_RegularMultiModeStop_DMA() API must be used.
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status.
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularStop_DMA(ADC_HandleTypeDef *hadc)
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2735              		.loc 1 1518 0
 2736              		.cfi_startproc
 2737              		@ args = 0, pretend = 0, frame = 0
 2738              		@ frame_needed = 0, uses_anonymous_args = 0
 2739              	.LVL268:
 2740 0000 38B5     		push	{r3, r4, r5, lr}
 2741              	.LCFI33:
 2742              		.cfi_def_cfa_offset 16
 2743              		.cfi_offset 3, -16
 2744              		.cfi_offset 4, -12
 2745              		.cfi_offset 5, -8
 2746              		.cfi_offset 14, -4
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2747              		.loc 1 1525 0
 2748 0002 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2749 0006 012B     		cmp	r3, #1
 2750 0008 3FD0     		beq	.L276
 2751 000a 0446     		mov	r4, r0
ARM GAS  /tmp/ccmrLUMM.s 			page 202


 2752              		.loc 1 1525 0 is_stmt 0 discriminator 2
 2753 000c 0121     		movs	r1, #1
 2754 000e 80F85C10 		strb	r1, [r0, #92]
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential regular conversion on going */
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2755              		.loc 1 1528 0 is_stmt 1 discriminator 2
 2756 0012 FFF7FEFF 		bl	ADC_ConversionStop
 2757              	.LVL269:
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      and if no injected conversion is on-going */
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2758              		.loc 1 1532 0 discriminator 2
 2759 0016 0546     		mov	r5, r0
 2760 0018 20B1     		cbz	r0, .L278
 2761              	.LVL270:
 2762              	.L271:
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop while */
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripheral */
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* to keep in memory a potential failing status.                          */
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = ADC_Disable(hadc);
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         (void)ADC_Disable(hadc);
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Check if ADC is effectively disabled */
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC state */
ARM GAS  /tmp/ccmrLUMM.s 			page 203


1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State,
1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_READY);
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 2763              		.loc 1 1584 0
 2764 001a 0023     		movs	r3, #0
 2765 001c 84F85C30 		strb	r3, [r4, #92]
 2766              	.LVL271:
 2767              	.L270:
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 2768              		.loc 1 1588 0
 2769 0020 2846     		mov	r0, r5
 2770 0022 38BD     		pop	{r3, r4, r5, pc}
 2771              	.LVL272:
 2772              	.L278:
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2773              		.loc 1 1535 0
 2774 0024 236E     		ldr	r3, [r4, #96]
 2775 0026 23F48073 		bic	r3, r3, #256
 2776 002a 2366     		str	r3, [r4, #96]
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2777              		.loc 1 1538 0
 2778 002c 2268     		ldr	r2, [r4]
 2779 002e D368     		ldr	r3, [r2, #12]
 2780 0030 23F00303 		bic	r3, r3, #3
 2781 0034 D360     		str	r3, [r2, #12]
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2782              		.loc 1 1542 0
 2783 0036 A06D     		ldr	r0, [r4, #88]
 2784              	.LVL273:
 2785 0038 FFF7FEFF 		bl	HAL_DMA_Abort
 2786              	.LVL274:
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 2787              		.loc 1 1545 0
 2788 003c 0546     		mov	r5, r0
 2789 003e 18B1     		cbz	r0, .L272
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2790              		.loc 1 1548 0
 2791 0040 236E     		ldr	r3, [r4, #96]
 2792 0042 43F04003 		orr	r3, r3, #64
 2793 0046 2366     		str	r3, [r4, #96]
 2794              	.L272:
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2795              		.loc 1 1552 0
 2796 0048 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccmrLUMM.s 			page 204


 2797 004a 5368     		ldr	r3, [r2, #4]
 2798 004c 23F01003 		bic	r3, r3, #16
 2799 0050 5360     		str	r3, [r2, #4]
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 2800              		.loc 1 1557 0
 2801 0052 2368     		ldr	r3, [r4]
 2802              	.LVL275:
 2803              	.LBB418:
 2804              	.LBB419:
 2805              		.loc 2 7079 0
 2806 0054 9B68     		ldr	r3, [r3, #8]
 2807              	.LVL276:
 2808 0056 13F0080F 		tst	r3, #8
 2809 005a 04D0     		beq	.L273
 2810              	.LVL277:
 2811              	.LBE419:
 2812              	.LBE418:
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2813              		.loc 1 1579 0
 2814 005c 236E     		ldr	r3, [r4, #96]
 2815 005e 43F48053 		orr	r3, r3, #4096
 2816 0062 2366     		str	r3, [r4, #96]
 2817 0064 D9E7     		b	.L271
 2818              	.LVL278:
 2819              	.L273:
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2820              		.loc 1 1559 0
 2821 0066 65B9     		cbnz	r5, .L274
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 2822              		.loc 1 1561 0
 2823 0068 2046     		mov	r0, r4
 2824              	.LVL279:
 2825 006a FFF7FEFF 		bl	ADC_Disable
 2826              	.LVL280:
 2827 006e 0546     		mov	r5, r0
 2828              	.LVL281:
 2829              	.L275:
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2830              		.loc 1 1569 0
 2831 0070 002D     		cmp	r5, #0
 2832 0072 D2D1     		bne	.L271
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                           HAL_ADC_STATE_INJ_BUSY,
 2833              		.loc 1 1572 0
 2834 0074 226E     		ldr	r2, [r4, #96]
 2835 0076 064B     		ldr	r3, .L279
 2836 0078 1340     		ands	r3, r3, r2
 2837 007a 43F00103 		orr	r3, r3, #1
 2838 007e 2366     		str	r3, [r4, #96]
 2839 0080 CBE7     		b	.L271
 2840              	.LVL282:
 2841              	.L274:
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 2842              		.loc 1 1565 0
 2843 0082 2046     		mov	r0, r4
 2844              	.LVL283:
 2845 0084 FFF7FEFF 		bl	ADC_Disable
 2846              	.LVL284:
ARM GAS  /tmp/ccmrLUMM.s 			page 205


 2847 0088 F2E7     		b	.L275
 2848              	.LVL285:
 2849              	.L276:
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2850              		.loc 1 1525 0
 2851 008a 0225     		movs	r5, #2
 2852 008c C8E7     		b	.L270
 2853              	.L280:
 2854 008e 00BF     		.align	2
 2855              	.L279:
 2856 0090 FEEFFFFF 		.word	-4098
 2857              		.cfi_endproc
 2858              	.LFE365:
 2860              		.section	.text.HAL_ADCEx_RegularMultiModeStop_DMA,"ax",%progbits
 2861              		.align	1
 2862              		.global	HAL_ADCEx_RegularMultiModeStop_DMA
 2863              		.syntax unified
 2864              		.thumb
 2865              		.thumb_func
 2866              		.fpu fpv5-d16
 2868              	HAL_ADCEx_RegularMultiModeStop_DMA:
 2869              	.LFB366:
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Stop DMA-based multimode ADC conversion, disable ADC DMA transfer, disable ADC peripher
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Multimode is kept enabled after this function. Multimode DMA bits
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         (MDMA and DMACFG bits of common CCR register) are maintained. To disable
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         multimode (set with HAL_ADCEx_MultiModeConfigChannel()), ADC must be
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         reinitialized using HAL_ADC_Init() or HAL_ADC_DeInit(), or the user can
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADCEx_DisableMultiMode() API.
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of DMA configured in circular mode, function
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_RegularStop_DMA() must be called after this function with handle of
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC slave, to properly disable the DMA channel.
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle of ADC master (handle of ADC slave must not be used)
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_RegularMultiModeStop_DMA(ADC_HandleTypeDef *hadc)
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 2870              		.loc 1 1604 0
 2871              		.cfi_startproc
 2872              		@ args = 0, pretend = 0, frame = 112
 2873              		@ frame_needed = 0, uses_anonymous_args = 0
 2874              	.LVL286:
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tickstart;
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef tmphadcSlave;
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 2875              		.loc 1 1614 0
 2876 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 2877 0004 012B     		cmp	r3, #1
 2878 0006 7CD0     		beq	.L294
ARM GAS  /tmp/ccmrLUMM.s 			page 206


1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
 2879              		.loc 1 1604 0 discriminator 2
 2880 0008 30B5     		push	{r4, r5, lr}
 2881              	.LCFI34:
 2882              		.cfi_def_cfa_offset 12
 2883              		.cfi_offset 4, -12
 2884              		.cfi_offset 5, -8
 2885              		.cfi_offset 14, -4
 2886 000a 9DB0     		sub	sp, sp, #116
 2887              	.LCFI35:
 2888              		.cfi_def_cfa_offset 128
 2889 000c 0446     		mov	r4, r0
 2890              		.loc 1 1614 0 discriminator 2
 2891 000e 0121     		movs	r1, #1
 2892 0010 80F85C10 		strb	r1, [r0, #92]
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* 1. Stop potential multimode conversion on going, on regular groups */
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_GROUP);
 2893              		.loc 1 1618 0 discriminator 2
 2894 0014 FFF7FEFF 		bl	ADC_ConversionStop
 2895              	.LVL287:
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmp_hal_status == HAL_OK)
 2896              		.loc 1 1621 0 discriminator 2
 2897 0018 0346     		mov	r3, r0
 2898 001a 0028     		cmp	r0, #0
 2899 001c 5BD1     		bne	.L283
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear HAL_ADC_STATE_REG_BUSY bit */
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 2900              		.loc 1 1624 0
 2901 001e 236E     		ldr	r3, [r4, #96]
 2902 0020 23F48073 		bic	r3, r3, #256
 2903 0024 2366     		str	r3, [r4, #96]
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set a temporary handle of the ADC slave associated to the ADC master   */
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 2904              		.loc 1 1627 0
 2905 0026 2268     		ldr	r2, [r4]
 2906 0028 374B     		ldr	r3, .L306
 2907 002a 9A42     		cmp	r2, r3
 2908 002c 0DD0     		beq	.L301
 2909              		.loc 1 1627 0 is_stmt 0 discriminator 2
 2910 002e 0023     		movs	r3, #0
 2911 0030 0093     		str	r3, [sp]
 2912              	.L285:
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmphadcSlave.Instance == NULL)
 2913              		.loc 1 1629 0 is_stmt 1
 2914 0032 009B     		ldr	r3, [sp]
 2915 0034 6BB1     		cbz	r3, .L302
1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 207


1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Process unlocked */
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       __HAL_UNLOCK(hadc);
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       return HAL_ERROR;
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Procedure to disable the ADC peripheral: wait for conversions          */
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* effectively stopped (ADC master and ADC slave), then disable ADC       */
1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 1. Wait for ADC conversion completion for ADC master and ADC slave */
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tickstart = HAL_GetTick();
 2916              		.loc 1 1644 0
 2917 0036 FFF7FEFF 		bl	HAL_GetTick
 2918              	.LVL288:
 2919 003a 0546     		mov	r5, r0
 2920              	.LVL289:
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 2921              		.loc 1 1646 0
 2922 003c 009B     		ldr	r3, [sp]
 2923              	.LVL290:
 2924              	.LBB420:
 2925              	.LBB421:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2926              		.loc 2 6884 0
 2927 003e 9B68     		ldr	r3, [r3, #8]
 2928              	.LVL291:
 2929 0040 13F0040F 		tst	r3, #4
 2930 0044 0ED0     		beq	.L295
 2931 0046 0122     		movs	r2, #1
 2932 0048 18E0     		b	.L288
 2933              	.LVL292:
 2934              	.L301:
 2935              	.LBE421:
 2936              	.LBE420:
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2937              		.loc 1 1627 0 discriminator 1
 2938 004a 03F58073 		add	r3, r3, #256
 2939 004e 0093     		str	r3, [sp]
 2940 0050 EFE7     		b	.L285
 2941              	.L302:
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2942              		.loc 1 1632 0
 2943 0052 236E     		ldr	r3, [r4, #96]
 2944 0054 43F02003 		orr	r3, r3, #32
 2945 0058 2366     		str	r3, [r4, #96]
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 2946              		.loc 1 1635 0
 2947 005a 0023     		movs	r3, #0
 2948 005c 84F85C30 		strb	r3, [r4, #92]
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 2949              		.loc 1 1637 0
 2950 0060 0123     		movs	r3, #1
 2951 0062 3BE0     		b	.L282
 2952              	.LVL293:
 2953              	.L295:
 2954              	.LBB423:
ARM GAS  /tmp/ccmrLUMM.s 			page 208


 2955              	.LBB422:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2956              		.loc 2 6884 0
 2957 0064 0022     		movs	r2, #0
 2958 0066 09E0     		b	.L288
 2959              	.LVL294:
 2960              	.L304:
 2961              	.LBE422:
 2962              	.LBE423:
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     while ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 1UL)
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 2963              		.loc 1 1654 0
 2964 0068 236E     		ldr	r3, [r4, #96]
 2965 006a 43F01003 		orr	r3, r3, #16
 2966 006e 2366     		str	r3, [r4, #96]
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Process unlocked */
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         __HAL_UNLOCK(hadc);
 2967              		.loc 1 1657 0
 2968 0070 0023     		movs	r3, #0
 2969 0072 84F85C30 		strb	r3, [r4, #92]
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         return HAL_ERROR;
 2970              		.loc 1 1659 0
 2971 0076 0123     		movs	r3, #1
 2972 0078 30E0     		b	.L282
 2973              	.LVL295:
 2974              	.L296:
 2975              	.LBB424:
 2976              	.LBB425:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2977              		.loc 2 6884 0
 2978 007a 0022     		movs	r2, #0
 2979              	.LVL296:
 2980              	.L288:
 2981              	.LBE425:
 2982              	.LBE424:
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            || (tmphadcSlave_conversion_on_going == 1UL)
 2983              		.loc 1 1647 0
 2984 007c 2368     		ldr	r3, [r4]
 2985              	.LVL297:
 2986              	.LBB427:
 2987              	.LBB428:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2988              		.loc 2 6884 0
 2989 007e 9B68     		ldr	r3, [r3, #8]
 2990              	.LVL298:
 2991 0080 13F0040F 		tst	r3, #4
 2992 0084 00D1     		bne	.L291
 2993              	.LVL299:
 2994              	.LBE428:
ARM GAS  /tmp/ccmrLUMM.s 			page 209


 2995              	.LBE427:
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           )
 2996              		.loc 1 1648 0
 2997 0086 5AB1     		cbz	r2, .L303
 2998              	.L291:
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 2999              		.loc 1 1651 0
 3000 0088 FFF7FEFF 		bl	HAL_GetTick
 3001              	.LVL300:
 3002 008c 401B     		subs	r0, r0, r5
 3003 008e 0528     		cmp	r0, #5
 3004 0090 EAD8     		bhi	.L304
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 3005              		.loc 1 1662 0
 3006 0092 009B     		ldr	r3, [sp]
 3007              	.LVL301:
 3008              	.LBB429:
 3009              	.LBB426:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3010              		.loc 2 6884 0
 3011 0094 9B68     		ldr	r3, [r3, #8]
 3012              	.LVL302:
 3013 0096 13F0040F 		tst	r3, #4
 3014 009a EED0     		beq	.L296
 3015 009c 0122     		movs	r2, #1
 3016 009e EDE7     		b	.L288
 3017              	.LVL303:
 3018              	.L303:
 3019              	.LBE426:
 3020              	.LBE429:
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* while DMA transfer is on going)                                        */
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: DMA channel of ADC slave should be stopped after this function   */
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* with HAL_ADCEx_RegularStop_DMA() API.                                  */
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 3021              		.loc 1 1669 0
 3022 00a0 A06D     		ldr	r0, [r4, #88]
 3023 00a2 FFF7FEFF 		bl	HAL_DMA_Abort
 3024              	.LVL304:
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Check if DMA channel effectively disabled */
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status != HAL_OK)
 3025              		.loc 1 1672 0
 3026 00a6 0346     		mov	r3, r0
 3027 00a8 18B1     		cbz	r0, .L292
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Update ADC state machine to error */
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 3028              		.loc 1 1675 0
 3029 00aa 226E     		ldr	r2, [r4, #96]
 3030 00ac 42F04002 		orr	r2, r2, #64
 3031 00b0 2266     		str	r2, [r4, #96]
 3032              	.L292:
ARM GAS  /tmp/ccmrLUMM.s 			page 210


1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Disable ADC overrun interrupt */
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 3033              		.loc 1 1679 0
 3034 00b2 2168     		ldr	r1, [r4]
 3035 00b4 4A68     		ldr	r2, [r1, #4]
 3036 00b6 22F01002 		bic	r2, r2, #16
 3037 00ba 4A60     		str	r2, [r1, #4]
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Disable the ADC peripherals: master and slave if no injected        */
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*   conversion is on-going.                                              */
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep in */
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* memory a potential failing status.                                     */
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (tmp_hal_status == HAL_OK)
 3038              		.loc 1 1685 0
 3039 00bc 5BB9     		cbnz	r3, .L283
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 3040              		.loc 1 1687 0
 3041 00be 2268     		ldr	r2, [r4]
 3042              	.LVL305:
 3043              	.LBB430:
 3044              	.LBB431:
 3045              		.loc 2 7079 0
 3046 00c0 9268     		ldr	r2, [r2, #8]
 3047              	.LVL306:
 3048 00c2 12F0080F 		tst	r2, #8
 3049 00c6 0CD0     		beq	.L305
 3050              	.LVL307:
 3051              	.L293:
 3052              	.LBE431:
 3053              	.LBE430:
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status =  ADC_Disable(hadc);
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (LL_ADC_INJ_IsConversionOngoing((&tmphadcSlave)->Instance) == 0UL)
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             tmp_hal_status =  ADC_Disable(&tmphadcSlave);
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (tmp_hal_status == HAL_OK)
 3054              		.loc 1 1699 0
 3055 00c8 2BB9     		cbnz	r3, .L283
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Both Master and Slave ADC's could be disabled. Update Master State */
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Clear HAL_ADC_STATE_INJ_BUSY bit, set HAL_ADC_STATE_READY bit */
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY, HAL_ADC_STATE_READY);
 3056              		.loc 1 1703 0
 3057 00ca 216E     		ldr	r1, [r4, #96]
 3058 00cc 0F4A     		ldr	r2, .L306+4
 3059 00ce 0A40     		ands	r2, r2, r1
 3060 00d0 42F00102 		orr	r2, r2, #1
 3061 00d4 2266     		str	r2, [r4, #96]
ARM GAS  /tmp/ccmrLUMM.s 			page 211


 3062              	.LVL308:
 3063              	.L283:
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* injected (Master or Slave) conversions are still on-going,
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****            no Master State change */
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 3064              		.loc 1 1714 0
 3065 00d6 0022     		movs	r2, #0
 3066 00d8 84F85C20 		strb	r2, [r4, #92]
 3067              	.LVL309:
 3068              	.L282:
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 3069              		.loc 1 1718 0
 3070 00dc 1846     		mov	r0, r3
 3071 00de 1DB0     		add	sp, sp, #116
 3072              	.LCFI36:
 3073              		.cfi_remember_state
 3074              		.cfi_def_cfa_offset 12
 3075              		@ sp needed
 3076 00e0 30BD     		pop	{r4, r5, pc}
 3077              	.LVL310:
 3078              	.L305:
 3079              	.LCFI37:
 3080              		.cfi_restore_state
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (tmp_hal_status == HAL_OK)
 3081              		.loc 1 1689 0
 3082 00e2 2046     		mov	r0, r4
 3083              	.LVL311:
 3084 00e4 FFF7FEFF 		bl	ADC_Disable
 3085              	.LVL312:
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3086              		.loc 1 1690 0
 3087 00e8 0346     		mov	r3, r0
 3088 00ea 0028     		cmp	r0, #0
 3089 00ec ECD1     		bne	.L293
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
 3090              		.loc 1 1692 0
 3091 00ee 009A     		ldr	r2, [sp]
 3092              	.LVL313:
 3093              	.LBB432:
 3094              	.LBB433:
 3095              		.loc 2 7079 0
 3096 00f0 9268     		ldr	r2, [r2, #8]
 3097              	.LVL314:
 3098 00f2 12F0080F 		tst	r2, #8
 3099 00f6 E7D1     		bne	.L293
 3100              	.LVL315:
ARM GAS  /tmp/ccmrLUMM.s 			page 212


 3101              	.LBE433:
 3102              	.LBE432:
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
 3103              		.loc 1 1694 0
 3104 00f8 6846     		mov	r0, sp
 3105              	.LVL316:
 3106 00fa FFF7FEFF 		bl	ADC_Disable
 3107              	.LVL317:
 3108 00fe 0346     		mov	r3, r0
 3109              	.LVL318:
 3110 0100 E2E7     		b	.L293
 3111              	.LVL319:
 3112              	.L294:
 3113              	.LCFI38:
 3114              		.cfi_def_cfa_offset 0
 3115              		.cfi_restore 4
 3116              		.cfi_restore 5
 3117              		.cfi_restore 14
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3118              		.loc 1 1614 0
 3119 0102 0223     		movs	r3, #2
 3120              		.loc 1 1718 0
 3121 0104 1846     		mov	r0, r3
 3122              	.LVL320:
 3123 0106 7047     		bx	lr
 3124              	.L307:
 3125              		.align	2
 3126              	.L306:
 3127 0108 00200240 		.word	1073881088
 3128 010c FEEFFFFF 		.word	-4098
 3129              		.cfi_endproc
 3130              	.LFE366:
 3132              		.section	.text.HAL_ADCEx_InjectedConfigChannel,"ax",%progbits
 3133              		.align	1
 3134              		.global	HAL_ADCEx_InjectedConfigChannel
 3135              		.syntax unified
 3136              		.thumb
 3137              		.thumb_func
 3138              		.fpu fpv5-d16
 3140              	HAL_ADCEx_InjectedConfigChannel:
 3141              	.LFB367:
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @}
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /** @defgroup ADCEx_Exported_Functions_Group2 ADC Extended Peripheral Control functions
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief    ADC Extended Peripheral Control functions
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @verbatim
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****              ##### Peripheral Control functions #####
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****  ===============================================================================
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     [..]  This section provides functions allowing to:
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Configure channels on injected group
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Configure multimode when multimode feature is available
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Enable or Disable Injected Queue
ARM GAS  /tmp/ccmrLUMM.s 			page 213


1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Disable ADC voltage regulator
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (+) Enter ADC deep-power-down mode
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** @endverbatim
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @{
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Configure a channel to be assigned to ADC group injected.
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         This function initializes injected group, following calls to this
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         function can be used to reconfigure some parameters of structure
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         "ADC_InjectionConfTypeDef" on the fly, without resetting the ADC.
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state:
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Refer to comments of structure "ADC_InjectionConfTypeDef".
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   In case of usage of internal measurement channels:
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Vbat/VrefInt/TempSensor.
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         These internal paths can be disabled using function
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADC_DeInit().
1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Caution: For Injected Context Queue use, a context must be fully
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         defined before start of injected conversion. All channels are configured
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         consecutively for the same ADC instance. Therefore, the number of calls to
1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_InjectedConfigChannel() must be equal to the value of parameter
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         InjectedNbrOfConversion for each context.
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *  - Example 1: If 1 context is intended to be used (or if there is no use of the
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    Injected Queue Context feature) and if the context contains 3 injected ranks
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    (InjectedNbrOfConversion = 3), HAL_ADCEx_InjectedConfigChannel() must be
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    called once for each channel (i.e. 3 times) before starting a conversion.
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    This function must not be called to configure a 4th injected channel:
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    it would start a new context into context queue.
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *  - Example 2: If 2 contexts are intended to be used and each of them contains
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    3 injected ranks (InjectedNbrOfConversion = 3),
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() must be called once for each channel and
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    for each context (3 channels x 2 contexts = 6 calls). Conversion can
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    start once the 1st context is set, that is after the first three
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *    HAL_ADCEx_InjectedConfigChannel() calls. The 2nd context can be set on the fly.
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param sConfigInjected Structure of ADC injected group and ADC channel for
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         injected group.
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc, ADC_InjectionConfTypeDef
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 3142              		.loc 1 1777 0
 3143              		.cfi_startproc
 3144              		@ args = 0, pretend = 0, frame = 8
 3145              		@ frame_needed = 0, uses_anonymous_args = 0
 3146              		@ link register save eliminated.
 3147              	.LVL321:
 3148 0000 F0B4     		push	{r4, r5, r6, r7}
 3149              	.LCFI39:
 3150              		.cfi_def_cfa_offset 16
 3151              		.cfi_offset 4, -16
 3152              		.cfi_offset 5, -12
 3153              		.cfi_offset 6, -8
 3154              		.cfi_offset 7, -4
 3155 0002 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccmrLUMM.s 			page 214


 3156              	.LCFI40:
 3157              		.cfi_def_cfa_offset 24
 3158 0004 0346     		mov	r3, r0
 3159              	.LVL322:
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_config_internal_channel;
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __IO uint32_t wait_loop_index = 0;
 3160              		.loc 1 1783 0
 3161 0006 0022     		movs	r2, #0
 3162 0008 0192     		str	r2, [sp, #4]
 3163              	.LVL323:
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_JSQR_ContextQueueBeingBuilt = 0U;
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfigInjected->InjectedSingleDiff));
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->QueueInjectedContext));
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_EXTTRIGINJEC(sConfigInjected->ExternalTrigInjecConv));
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfigInjected->InjectedOffsetNumber));
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjecOversamplingMode));
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedOffsetSaturation));
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Instance == ADC3)
 3164              		.loc 1 1799 0
 3165 000a 0468     		ldr	r4, [r0]
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC3_OFFSET_SIGN(sConfigInjected->InjectedOffsetSign));
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 3166              		.loc 1 1810 0
 3167 000c 0069     		ldr	r0, [r0, #16]
 3168              	.LVL324:
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_INJECTED_NB_CONV(sConfigInjected->InjectedNbrOfConversion));
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check offset range according to oversampling setting */
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Init.OversamplingMode == ENABLE)
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset / (hadc->In
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
ARM GAS  /tmp/ccmrLUMM.s 			page 215


1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfigInjected->InjectedOffset));
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* if JOVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      ignored (considered as reset) */
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (hadc->Instance == ADC3)
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(!((sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE) && (sConfigInjected->
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif  /* ADC_VER_V5_V90 */
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* JDISCEN and JAUTO bits can't be set at the same time  */
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(!((sConfigInjected->InjectedDiscontinuousConvMode == ENABLE) && (sConfigInjected->Au
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  DISCEN and JAUTO bits can't be set at the same time */
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (sConfigInjected->AutoInjectedConv
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Verification of channel number */
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC1)
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC1_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC2)
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC2_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined (ADC3)
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC3)
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC3_DIFF_CHANNEL(sConfigInjected->InjectedChannel));
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 3169              		.loc 1 1864 0
 3170 000e 93F85C20 		ldrb	r2, [r3, #92]	@ zero_extendqisi2
 3171 0012 012A     		cmp	r2, #1
 3172 0014 00F00384 		beq	.L402
 3173              		.loc 1 1864 0 is_stmt 0 discriminator 2
 3174 0018 0122     		movs	r2, #1
 3175 001a 83F85C20 		strb	r2, [r3, #92]
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Configuration of injected group sequencer:                               */
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Hardware constraint: Must fully define injected context register JSQR    */
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* before make it entering into injected sequencer queue.                   */
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*                                                                          */
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* - if scan mode is disabled:                                              */
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to 0x00: 1 channel         */
ARM GAS  /tmp/ccmrLUMM.s 			page 216


1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      converted (channel on injected rank 1)                              */
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      Parameter "InjectedNbrOfConversion" is discarded.                   */
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting is simple: register is fully */
1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      defined on one call of this function (for injected rank 1) and can  */
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      be entered into queue directly.                                     */
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* - if scan mode is enabled:                                               */
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected channels sequence length is set to parameter               */
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      "InjectedNbrOfConversion".                                          */
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    * Injected context register JSQR setting more complex: register is    */
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      fully defined over successive calls of this function, for each      */
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      injected channel rank. It is entered into queue only when all       */
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*      injected ranks have been set.                                       */
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*   Note: Scan mode is not present by hardware on this device, but used    */
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*   by software for alignment over all STM32 devices.                      */
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 3176              		.loc 1 1887 0 is_stmt 1 discriminator 2
 3177 001e A8B1     		cbz	r0, .L310
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U))
 3178              		.loc 1 1888 0 discriminator 1
 3179 0020 4A6A     		ldr	r2, [r1, #36]
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       (sConfigInjected->InjectedNbrOfConversion == 1U))
 3180              		.loc 1 1887 0 discriminator 1
 3181 0022 012A     		cmp	r2, #1
 3182 0024 12D0     		beq	.L310
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Configuration of context register JSQR:                                */
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - number of ranks in injected group sequencer: fixed to 1st rank      */
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*    (scan mode disabled, only rank 1 used)                              */
1893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - external trigger to start conversion                                */
1894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - external trigger polarity                                           */
1895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*  - channel set to rank 1 (scan mode disabled, only rank 1 can be used) */
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
1898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
1900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* software start.                                                      */
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
1903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       software start.                                                */
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECT
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
1909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                           );
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = (ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECT
1914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_JSQR_ContextQueueBeingBuilt);
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* For debug and informative reasons, hadc handle saves JSQR setting */
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/ccmrLUMM.s 			page 217


1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
1923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
1924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Case of scan mode enabled, several channels to set into injected group */
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* sequencer.                                                             */
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*                                                                        */
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Procedure to define injected context register JSQR over successive     */
1928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* calls of this function, for each injected channel rank:                */
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 1. Start new context and set parameters related to all injected        */
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*    channels: injected sequence length and trigger.                     */
1931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
1933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*   call of the context under setting                                    */
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
 3183              		.loc 1 1934 0
 3184 0026 D86E     		ldr	r0, [r3, #108]
 3185 0028 0028     		cmp	r0, #0
 3186 002a 40F0B280 		bne	.L403
1935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Initialize number of channels that will be configured on the context */
1937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  being built                                                         */
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 3187              		.loc 1 1938 0
 3188 002e DA66     		str	r2, [r3, #108]
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Handle hadc saves the context under build up over each HAL_ADCEx_InjectedConfigChannel()
1940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          call, this context will be written in JSQR register at the last call.
1941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****          At this point, the context is merely reset  */
1942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->InjectionConfig.ContextQueue = 0x00000000U;
 3189              		.loc 1 1942 0
 3190 0030 0022     		movs	r2, #0
 3191 0032 9A66     		str	r2, [r3, #104]
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Configuration of context register JSQR:                              */
1945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - number of ranks in injected group sequencer                       */
1946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - external trigger to start conversion                              */
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - external trigger polarity                                         */
1948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable external trigger if trigger selection is different of         */
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* software start.                                                      */
1951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Note: This configuration keeps the hardware feature of parameter     */
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*       software start.                                                */
1954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 3192              		.loc 1 1954 0
 3193 0034 CD6A     		ldr	r5, [r1, #44]
 3194 0036 002D     		cmp	r5, #0
 3195 0038 00F0A880 		beq	.L316
1955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U)
 3196              		.loc 1 1956 0
 3197 003c 4A6A     		ldr	r2, [r1, #36]
 3198 003e 013A     		subs	r2, r2, #1
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 3199              		.loc 1 1957 0
 3200 0040 05F07C05 		and	r5, r5, #124
 3201 0044 2A43     		orrs	r2, r2, r5
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
ARM GAS  /tmp/ccmrLUMM.s 			page 218


 3202              		.loc 1 1958 0
 3203 0046 0D6B     		ldr	r5, [r1, #48]
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 3204              		.loc 1 1956 0
 3205 0048 1543     		orrs	r5, r5, r2
 3206              	.LVL325:
 3207 004a A3E0     		b	.L315
 3208              	.LVL326:
 3209              	.L310:
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 3210              		.loc 1 1897 0
 3211 004c 4A68     		ldr	r2, [r1, #4]
 3212 004e 092A     		cmp	r2, #9
 3213 0050 7DD0     		beq	.L414
 3214              	.LVL327:
 3215              	.L312:
1959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                           );
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
1962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_JSQR_ContextQueueBeingBuilt = ((sConfigInjected->InjectedNbrOfConversion - 1U));
1964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 2. Continue setting of context under definition with parameter       */
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /*    related to each channel: channel rank sequence                    */
1970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Clear the old JSQx bits for the selected rank */
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_JSQR_ContextQueueBeingBuilt &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, sConfigInjected->InjectedRank);
1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set the JSQx bits for the selected rank */
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_JSQR_ContextQueueBeingBuilt |= ADC_JSQR_RK(sConfigInjected->InjectedChannel, sConfigInjecte
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Decrease channel count  */
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     hadc->InjectionConfig.ChannelCount--;
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 3. tmp_JSQR_ContextQueueBeingBuilt is fully built for this HAL_ADCEx_InjectedConfigChannel()
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           call, aggregate the setting to those already built during the previous
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     hadc->InjectionConfig.ContextQueue |= tmp_JSQR_ContextQueueBeingBuilt;
1983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* 4. End of context setting: if this is the last channel set, then write context
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         into register JSQR and make it enter into queue                   */
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->InjectionConfig.ChannelCount == 0U)
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
1990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
1991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
1992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
1994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* conversion on going on injected group:                                   */
1995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Injected context queue: Queue disable (active context is kept) or     */
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    enable (context decremented, up to 2 contexts queued)                 */
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
1998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    mode is disabled.                                                     */
1999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
ARM GAS  /tmp/ccmrLUMM.s 			page 219


 3216              		.loc 1 1999 0
 3217 0052 1A68     		ldr	r2, [r3]
 3218              	.LVL328:
 3219              	.LBB551:
 3220              	.LBB552:
 3221              		.loc 2 7079 0
 3222 0054 9068     		ldr	r0, [r2, #8]
 3223 0056 10F0080F 		tst	r0, #8
 3224 005a 21D1     		bne	.L317
 3225              	.LVL329:
 3226              	.LBE552:
 3227              	.LBE551:
2000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance != ADC3)
 3228              		.loc 1 2002 0
 3229 005c AE48     		ldr	r0, .L442
 3230 005e 8242     		cmp	r2, r0
 3231 0060 0CD0     		beq	.L318
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* ADC channels preselection */
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->Inject
 3232              		.loc 1 2005 0
 3233 0062 0868     		ldr	r0, [r1]
 3234 0064 C0F31304 		ubfx	r4, r0, #0, #20
 3235 0068 002C     		cmp	r4, #0
 3236 006a 40F0B180 		bne	.L319
 3237              		.loc 1 2005 0 is_stmt 0 discriminator 1
 3238 006e C0F38460 		ubfx	r0, r0, #26, #5
 3239 0072 0124     		movs	r4, #1
 3240 0074 8440     		lsls	r4, r4, r0
 3241              	.L320:
 3242              		.loc 1 2005 0 discriminator 4
 3243 0076 D069     		ldr	r0, [r2, #28]
 3244 0078 2043     		orrs	r0, r0, r4
 3245 007a D061     		str	r0, [r2, #28]
 3246              	.L318:
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #else
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* ADC channels preselection */
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfigInjected->InjectedChann
2010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If auto-injected mode is disabled: no constraint                       */
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->AutoInjectedConv == DISABLE)
 3247              		.loc 1 2013 0 is_stmt 1
 3248 007c 91F82920 		ldrb	r2, [r1, #41]	@ zero_extendqisi2
 3249 0080 002A     		cmp	r2, #0
 3250 0082 40F0AE80 		bne	.L321
2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR,
 3251              		.loc 1 2015 0
 3252 0086 1C68     		ldr	r4, [r3]
 3253 0088 E268     		ldr	r2, [r4, #12]
 3254 008a 22F44012 		bic	r2, r2, #3145728
 3255 008e 91F82A50 		ldrb	r5, [r1, #42]	@ zero_extendqisi2
 3256 0092 91F82800 		ldrb	r0, [r1, #40]	@ zero_extendqisi2
ARM GAS  /tmp/ccmrLUMM.s 			page 220


 3257 0096 0005     		lsls	r0, r0, #20
 3258 0098 40EA4550 		orr	r0, r0, r5, lsl #21
 3259 009c 0243     		orrs	r2, r2, r0
 3260 009e E260     		str	r2, [r4, #12]
 3261              	.L317:
2016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext)    
2018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_DISCCONTINUOUS((uint32_t)sConfigInjected->InjectedDiscontinuousCon
2019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If auto-injected mode is enabled: Injected discontinuous setting is    */
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* discarded.                                                             */
2022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR,
2025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_INJECT_CONTEXT_QUEUE((uint32_t)sConfigInjected->QueueInjectedContext));
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* conversion on going on regular and injected groups:                      */
2034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Automatic injected conversion: can be enabled if injected group       */
2035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*    external triggers are disabled.                                       */
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Channel sampling time                                                 */
2037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Channel offset                                                        */
2038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 3262              		.loc 1 2038 0
 3263 00a0 1A68     		ldr	r2, [r3]
 3264              	.LVL330:
 3265              	.LBB553:
 3266              	.LBB554:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3267              		.loc 2 6884 0
 3268 00a2 9068     		ldr	r0, [r2, #8]
 3269 00a4 10F0040F 		tst	r0, #4
 3270 00a8 00F0A580 		beq	.L404
 3271 00ac 0120     		movs	r0, #1
 3272              	.L322:
 3273              	.LVL331:
 3274              	.LBE554:
 3275              	.LBE553:
 3276              	.LBB556:
 3277              	.LBB557:
 3278              		.loc 2 7079 0
 3279 00ae 9468     		ldr	r4, [r2, #8]
 3280 00b0 14F0080F 		tst	r4, #8
 3281 00b4 00F0A180 		beq	.L405
 3282 00b8 0124     		movs	r4, #1
 3283              	.L323:
 3284              	.LVL332:
 3285              	.LBE557:
 3286              	.LBE556:
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
2040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
ARM GAS  /tmp/ccmrLUMM.s 			page 221


 3287              		.loc 1 2041 0
 3288 00ba 2043     		orrs	r0, r4, r0
 3289 00bc 40F04182 		bne	.L406
2042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
2043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
2044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If injected group external triggers are disabled (set to injected      */
2046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* software start): no constraint                                         */
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if ((sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 3290              		.loc 1 2047 0
 3291 00c0 C86A     		ldr	r0, [r1, #44]
 3292 00c2 18B1     		cbz	r0, .L325
2048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         || (sConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 3293              		.loc 1 2048 0
 3294 00c4 086B     		ldr	r0, [r1, #48]
 3295 00c6 0028     		cmp	r0, #0
 3296 00c8 40F09F80 		bne	.L326
 3297              	.L325:
2049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
 3298              		.loc 1 2050 0
 3299 00cc 91F82900 		ldrb	r0, [r1, #41]	@ zero_extendqisi2
 3300 00d0 0128     		cmp	r0, #1
 3301 00d2 00F09480 		beq	.L415
2051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
2053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 3302              		.loc 1 2056 0
 3303 00d6 D068     		ldr	r0, [r2, #12]
 3304 00d8 20F00070 		bic	r0, r0, #33554432
 3305 00dc D060     		str	r0, [r2, #12]
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 3306              		.loc 1 1778 0
 3307 00de 0020     		movs	r0, #0
 3308              	.LVL333:
 3309              	.L328:
2057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If Automatic injected conversion was intended to be set and could not  */
2060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* due to injected group external triggers enabled, error is reported.    */
2061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (sConfigInjected->AutoInjectedConv == ENABLE)
2064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
2066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
2073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
ARM GAS  /tmp/ccmrLUMM.s 			page 222


2075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjecOversamplingMode == ENABLE)
 3310              		.loc 1 2076 0
 3311 00e0 91F83420 		ldrb	r2, [r1, #52]	@ zero_extendqisi2
 3312 00e4 012A     		cmp	r2, #1
 3313 00e6 00F09F80 		beq	.L416
2077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC_OVERSAMPLING_RATIO(sConfigInjected->InjecOversampling.Ratio));
2079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(IS_ADC_RIGHT_BIT_SHIFT(sConfigInjected->InjecOversampling.RightBitShift));
2080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  JOVSE must be reset in case of triggered regular mode  */
2082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       assert_param(!(READ_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_TROVS) == (ADC_CFG
2083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Configuration of Injected Oversampler:                                 */
2085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Oversampling Ratio                                                  */
2086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Right bit shift                                                     */
2087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Enable OverSampling mode */
2089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(hadc->Instance->CFGR2,
2090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE |
2091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_OVSR  |
2092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_OVSS,
2093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE                                  |
2094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                 ((sConfigInjected->InjecOversampling.Ratio - 1UL) << ADC_CFGR2_OVSR_Pos) |
2095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  sConfigInjected->InjecOversampling.RightBitShift
2096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                 );
2097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Disable Regular OverSampling */
2101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 3314              		.loc 1 2101 0
 3315 00ea 1C68     		ldr	r4, [r3]
 3316 00ec 2269     		ldr	r2, [r4, #16]
 3317 00ee 22F00202 		bic	r2, r2, #2
 3318 00f2 2261     		str	r2, [r4, #16]
 3319              	.L331:
2102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set sampling time of the selected ADC channel */
2105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected
 3320              		.loc 1 2105 0
 3321 00f4 1F68     		ldr	r7, [r3]
 3322 00f6 0E68     		ldr	r6, [r1]
 3323 00f8 8D68     		ldr	r5, [r1, #8]
 3324              	.LVL334:
 3325              	.LBB559:
 3326              	.LBB560:
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 3327              		.loc 2 5282 0
 3328 00fa 1437     		adds	r7, r7, #20
 3329              	.LVL335:
 3330 00fc 720E     		lsrs	r2, r6, #25
 3331 00fe 9200     		lsls	r2, r2, #2
 3332 0100 02F00402 		and	r2, r2, #4
 3333              	.LVL336:
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
ARM GAS  /tmp/ccmrLUMM.s 			page 223


 3334              		.loc 2 5284 0
 3335 0104 BC58     		ldr	r4, [r7, r2]
 3336 0106 C6F30456 		ubfx	r6, r6, #20, #5
 3337              	.LVL337:
 3338 010a 4FF0070C 		mov	ip, #7
 3339 010e 0CFA06FC 		lsl	ip, ip, r6
 3340 0112 24EA0C04 		bic	r4, r4, ip
 3341 0116 B540     		lsls	r5, r5, r6
 3342              	.LVL338:
 3343 0118 2C43     		orrs	r4, r4, r5
 3344 011a BC50     		str	r4, [r7, r2]
 3345              	.LVL339:
 3346              	.LBE560:
 3347              	.LBE559:
2106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Configure the offset: offset enable/disable, channel, offset value */
2108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Shift the offset with respect to the selected ADC resolution. */
2110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (hadc->Instance == ADC3)
 3348              		.loc 1 2112 0
 3349 011c 1A68     		ldr	r2, [r3]
 3350 011e 7E4C     		ldr	r4, .L442
 3351 0120 A242     		cmp	r2, r4
 3352 0122 00F08F80 		beq	.L417
2113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
2115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 3353              		.loc 1 2119 0
 3354 0126 7D4C     		ldr	r4, .L442+4
 3355 0128 2468     		ldr	r4, [r4]
 3356 012a 04F07044 		and	r4, r4, #-268435456
 3357 012e B4F1805F 		cmp	r4, #268435456
 3358 0132 00F0B480 		beq	.L418
 3359              		.loc 1 2119 0 is_stmt 0 discriminator 2
 3360 0136 D468     		ldr	r4, [r2, #12]
 3361 0138 14F0100F 		tst	r4, #16
 3362 013c 40F0B680 		bne	.L335
 3363              		.loc 1 2119 0 discriminator 4
 3364 0140 4C69     		ldr	r4, [r1, #20]
 3365 0142 D568     		ldr	r5, [r2, #12]
 3366 0144 C5F38205 		ubfx	r5, r5, #2, #3
 3367 0148 6D00     		lsls	r5, r5, #1
 3368 014a AC40     		lsls	r4, r4, r5
 3369 014c 80E0     		b	.L333
 3370              	.LVL340:
 3371              	.L414:
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 3372              		.loc 1 1904 0 is_stmt 1
 3373 014e CD6A     		ldr	r5, [r1, #44]
 3374 0150 B5B1     		cbz	r5, .L313
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
ARM GAS  /tmp/ccmrLUMM.s 			page 224


 3375              		.loc 1 1906 0
 3376 0152 0868     		ldr	r0, [r1]
 3377 0154 820E     		lsrs	r2, r0, #26
 3378 0156 5202     		lsls	r2, r2, #9
 3379 0158 02F47852 		and	r2, r2, #15872
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | sConfigInjected->ExternalTrigInjecConvEdge
 3380              		.loc 1 1907 0
 3381 015c 05F07C05 		and	r5, r5, #124
 3382 0160 2A43     		orrs	r2, r2, r5
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                           );
 3383              		.loc 1 1908 0
 3384 0162 086B     		ldr	r0, [r1, #48]
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                                            | (sConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEX
 3385              		.loc 1 1906 0
 3386 0164 0243     		orrs	r2, r2, r0
 3387              	.LVL341:
 3388              	.L314:
1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* For debug and informative reasons, hadc handle saves JSQR setting */
 3389              		.loc 1 1916 0
 3390 0166 E06C     		ldr	r0, [r4, #76]
 3391 0168 20F07B40 		bic	r0, r0, #-83886080
 3392 016c 20F46F00 		bic	r0, r0, #15663104
 3393 0170 20F43F40 		bic	r0, r0, #48896
 3394 0174 20F0FF00 		bic	r0, r0, #255
 3395 0178 1043     		orrs	r0, r0, r2
 3396 017a E064     		str	r0, [r4, #76]
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3397              		.loc 1 1918 0
 3398 017c 9A66     		str	r2, [r3, #104]
 3399 017e 68E7     		b	.L312
 3400              	.LVL342:
 3401              	.L313:
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 3402              		.loc 1 1913 0
 3403 0180 0A68     		ldr	r2, [r1]
 3404 0182 920E     		lsrs	r2, r2, #26
 3405 0184 5202     		lsls	r2, r2, #9
 3406 0186 02F47852 		and	r2, r2, #15872
 3407              	.LVL343:
 3408 018a ECE7     		b	.L314
 3409              	.LVL344:
 3410              	.L316:
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 3411              		.loc 1 1963 0
 3412 018c 4A6A     		ldr	r2, [r1, #36]
 3413 018e 551E     		subs	r5, r2, #1
 3414              	.LVL345:
 3415 0190 00E0     		b	.L315
 3416              	.LVL346:
 3417              	.L403:
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3418              		.loc 1 1785 0
 3419 0192 0025     		movs	r5, #0
 3420              	.LVL347:
 3421              	.L315:
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3422              		.loc 1 1974 0
ARM GAS  /tmp/ccmrLUMM.s 			page 225


 3423 0194 0868     		ldr	r0, [r1]
 3424 0196 C0F38460 		ubfx	r0, r0, #26, #5
 3425 019a 4A68     		ldr	r2, [r1, #4]
 3426 019c 02F01F02 		and	r2, r2, #31
 3427 01a0 00FA02F2 		lsl	r2, r0, r2
 3428 01a4 2A43     		orrs	r2, r2, r5
 3429              	.LVL348:
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3430              		.loc 1 1977 0
 3431 01a6 D86E     		ldr	r0, [r3, #108]
 3432 01a8 0138     		subs	r0, r0, #1
 3433 01aa D866     		str	r0, [r3, #108]
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3434              		.loc 1 1982 0
 3435 01ac 9D6E     		ldr	r5, [r3, #104]
 3436 01ae 2A43     		orrs	r2, r2, r5
 3437              	.LVL349:
 3438 01b0 9A66     		str	r2, [r3, #104]
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 3439              		.loc 1 1986 0
 3440 01b2 0028     		cmp	r0, #0
 3441 01b4 7FF44DAF 		bne	.L312
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 3442              		.loc 1 1988 0
 3443 01b8 E06C     		ldr	r0, [r4, #76]
 3444 01ba 20F07B40 		bic	r0, r0, #-83886080
 3445 01be 20F46F00 		bic	r0, r0, #15663104
 3446 01c2 20F43F40 		bic	r0, r0, #48896
 3447 01c6 20F0FF00 		bic	r0, r0, #255
 3448 01ca 0243     		orrs	r2, r2, r0
 3449 01cc E264     		str	r2, [r4, #76]
 3450 01ce 40E7     		b	.L312
 3451              	.L319:
 3452              	.LVL350:
 3453              	.LBB561:
 3454              	.LBB562:
 3455              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
ARM GAS  /tmp/ccmrLUMM.s 			page 226


  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccmrLUMM.s 			page 227


  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 228


 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
ARM GAS  /tmp/ccmrLUMM.s 			page 229


 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccmrLUMM.s 			page 230


 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
ARM GAS  /tmp/ccmrLUMM.s 			page 231


 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccmrLUMM.s 			page 232


 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccmrLUMM.s 			page 233


 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
ARM GAS  /tmp/ccmrLUMM.s 			page 234


 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
ARM GAS  /tmp/ccmrLUMM.s 			page 235


 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
ARM GAS  /tmp/ccmrLUMM.s 			page 236


 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 237


 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
ARM GAS  /tmp/ccmrLUMM.s 			page 238


 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccmrLUMM.s 			page 239


 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 240


 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
ARM GAS  /tmp/ccmrLUMM.s 			page 241


 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
ARM GAS  /tmp/ccmrLUMM.s 			page 242


 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 3456              		.loc 3 988 0 discriminator 2
ARM GAS  /tmp/ccmrLUMM.s 			page 243


 3457              		.syntax unified
 3458              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3459 01d0 90FAA0F0 		rbit r0, r0
 3460              	@ 0 "" 2
 3461              	.LVL351:
 3462              		.thumb
 3463              		.syntax unified
 3464              	.LBE562:
 3465              	.LBE561:
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 3466              		.loc 1 2005 0 discriminator 2
 3467 01d4 B0FA80F0 		clz	r0, r0
 3468 01d8 00F01F00 		and	r0, r0, #31
 3469 01dc 0124     		movs	r4, #1
 3470 01de 8440     		lsls	r4, r4, r0
 3471 01e0 49E7     		b	.L320
 3472              	.L321:
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR_JQM | ADC_CFGR_JDISCEN,
 3473              		.loc 1 2024 0
 3474 01e2 1868     		ldr	r0, [r3]
 3475 01e4 C268     		ldr	r2, [r0, #12]
 3476 01e6 22F44012 		bic	r2, r2, #3145728
 3477 01ea 91F82A40 		ldrb	r4, [r1, #42]	@ zero_extendqisi2
 3478 01ee 42EA4452 		orr	r2, r2, r4, lsl #21
 3479 01f2 C260     		str	r2, [r0, #12]
 3480 01f4 54E7     		b	.L317
 3481              	.LVL352:
 3482              	.L404:
 3483              	.LBB563:
 3484              	.LBB555:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3485              		.loc 2 6884 0
 3486 01f6 0020     		movs	r0, #0
 3487 01f8 59E7     		b	.L322
 3488              	.LVL353:
 3489              	.L405:
 3490              	.LBE555:
 3491              	.LBE563:
 3492              	.LBB564:
 3493              	.LBB558:
 3494              		.loc 2 7079 0
 3495 01fa 0024     		movs	r4, #0
 3496 01fc 5DE7     		b	.L323
 3497              	.LVL354:
 3498              	.L415:
 3499              	.LBE558:
 3500              	.LBE564:
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 3501              		.loc 1 2052 0
 3502 01fe D068     		ldr	r0, [r2, #12]
 3503 0200 40F00070 		orr	r0, r0, #33554432
 3504 0204 D060     		str	r0, [r2, #12]
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 3505              		.loc 1 1778 0
 3506 0206 0020     		movs	r0, #0
 3507 0208 6AE7     		b	.L328
 3508              	.L326:
ARM GAS  /tmp/ccmrLUMM.s 			page 244


2063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 3509              		.loc 1 2063 0
 3510 020a 91F82900 		ldrb	r0, [r1, #41]	@ zero_extendqisi2
 3511 020e 0128     		cmp	r0, #1
 3512 0210 05D0     		beq	.L419
2072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 3513              		.loc 1 2072 0
 3514 0212 D068     		ldr	r0, [r2, #12]
 3515 0214 20F00070 		bic	r0, r0, #33554432
 3516 0218 D060     		str	r0, [r2, #12]
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 3517              		.loc 1 1778 0
 3518 021a 0020     		movs	r0, #0
 3519 021c 60E7     		b	.L328
 3520              	.L419:
2066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 3521              		.loc 1 2066 0
 3522 021e 1A6E     		ldr	r2, [r3, #96]
 3523 0220 42F02002 		orr	r2, r2, #32
 3524 0224 1A66     		str	r2, [r3, #96]
 3525              	.LVL355:
 3526 0226 5BE7     		b	.L328
 3527              	.LVL356:
 3528              	.L416:
2089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                  ADC_CFGR2_JOVSE |
 3529              		.loc 1 2089 0
 3530 0228 1E68     		ldr	r6, [r3]
 3531 022a 3469     		ldr	r4, [r6, #16]
 3532 022c 3C4A     		ldr	r2, .L442+8
 3533 022e 2240     		ands	r2, r2, r4
 3534 0230 8C6B     		ldr	r4, [r1, #56]
 3535 0232 651E     		subs	r5, r4, #1
 3536 0234 CC6B     		ldr	r4, [r1, #60]
 3537 0236 44EA0544 		orr	r4, r4, r5, lsl #16
 3538 023a 2243     		orrs	r2, r2, r4
 3539 023c 42F00202 		orr	r2, r2, #2
 3540 0240 3261     		str	r2, [r6, #16]
 3541 0242 57E7     		b	.L331
 3542              	.L417:
2114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 3543              		.loc 1 2114 0
 3544 0244 4C69     		ldr	r4, [r1, #20]
 3545 0246 D568     		ldr	r5, [r2, #12]
 3546 0248 C5F3C105 		ubfx	r5, r5, #3, #2
 3547 024c 6D00     		lsls	r5, r5, #1
 3548 024e AC40     		lsls	r4, r4, r5
 3549              	.LVL357:
 3550              	.L333:
2120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     
2122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 3551              		.loc 1 2122 0
 3552 0250 0D69     		ldr	r5, [r1, #16]
 3553 0252 042D     		cmp	r5, #4
 3554 0254 66D0     		beq	.L336
2123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set ADC selected offset number */
ARM GAS  /tmp/ccmrLUMM.s 			page 245


2125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_SetOffset(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected->Inje
 3555              		.loc 1 2125 0
 3556 0256 0E68     		ldr	r6, [r1]
 3557              	.LVL358:
 3558              	.LBB565:
 3559              	.LBB566:
3248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 3560              		.loc 2 3248 0
 3561 0258 02F16007 		add	r7, r2, #96
 3562              	.LVL359:
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 3563              		.loc 2 3250 0
 3564 025c DFF8B8C0 		ldr	ip, .L442
 3565 0260 6245     		cmp	r2, ip
 3566 0262 2BD0     		beq	.L420
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 3567              		.loc 2 3259 0
 3568 0264 57F82520 		ldr	r2, [r7, r5, lsl #2]
 3569              	.LVL360:
 3570 0268 02F00042 		and	r2, r2, #-2147483648
 3571 026c 06F0F846 		and	r6, r6, #2080374784
 3572              	.LVL361:
 3573 0270 3443     		orrs	r4, r4, r6
 3574              	.LVL362:
 3575 0272 1443     		orrs	r4, r4, r2
 3576 0274 47F82540 		str	r4, [r7, r5, lsl #2]
 3577              	.LVL363:
 3578              	.L338:
 3579              	.LBE566:
 3580              	.LBE565:
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (hadc->Instance == ADC3)
 3581              		.loc 1 2128 0
 3582 0278 1A68     		ldr	r2, [r3]
 3583 027a 274C     		ldr	r4, .L442
 3584 027c A242     		cmp	r2, r4
 3585 027e 27D0     		beq	.L421
2129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC selected offset sign & saturation */
2131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSign(hadc->Instance, sConfigInjected->InjectedOffsetNumber, sConfigInjected
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigI
2133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Set ADC selected offset signed saturation */
2138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sC
 3586              		.loc 1 2138 0
 3587 0280 0E69     		ldr	r6, [r1, #16]
 3588 0282 91F82140 		ldrb	r4, [r1, #33]	@ zero_extendqisi2
 3589 0286 012C     		cmp	r4, #1
 3590 0288 43D0     		beq	.L422
 3591 028a 0025     		movs	r5, #0
 3592              	.L341:
 3593              	.LVL364:
 3594              	.LBB568:
ARM GAS  /tmp/ccmrLUMM.s 			page 246


 3595              	.LBB569:
3429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 3596              		.loc 2 3429 0 discriminator 4
 3597 028c 6032     		adds	r2, r2, #96
 3598              	.LVL365:
3430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
 3599              		.loc 2 3430 0 discriminator 4
 3600 028e 52F82640 		ldr	r4, [r2, r6, lsl #2]
 3601 0292 24F00044 		bic	r4, r4, #-2147483648
 3602 0296 2C43     		orrs	r4, r4, r5
 3603 0298 42F82640 		str	r4, [r2, r6, lsl #2]
 3604              	.LVL366:
 3605 029c 52E1     		b	.L324
 3606              	.LVL367:
 3607              	.L418:
 3608              	.LBE569:
 3609              	.LBE568:
2119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 3610              		.loc 1 2119 0 discriminator 1
 3611 029e 4C69     		ldr	r4, [r1, #20]
 3612 02a0 D568     		ldr	r5, [r2, #12]
 3613 02a2 C5F38205 		ubfx	r5, r5, #2, #3
 3614 02a6 6D00     		lsls	r5, r5, #1
 3615 02a8 AC40     		lsls	r4, r4, r5
 3616 02aa D1E7     		b	.L333
 3617              	.L335:
2119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 3618              		.loc 1 2119 0 is_stmt 0 discriminator 5
 3619 02ac 4C69     		ldr	r4, [r1, #20]
 3620 02ae D568     		ldr	r5, [r2, #12]
 3621 02b0 AD08     		lsrs	r5, r5, #2
 3622 02b2 05F00405 		and	r5, r5, #4
 3623 02b6 6D00     		lsls	r5, r5, #1
 3624 02b8 AC40     		lsls	r4, r4, r5
 3625 02ba C9E7     		b	.L333
 3626              	.LVL368:
 3627              	.L420:
 3628              	.LBB570:
 3629              	.LBB567:
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 3630              		.loc 2 3252 0 is_stmt 1
 3631 02bc 57F82520 		ldr	r2, [r7, r5, lsl #2]
 3632              	.LVL369:
 3633 02c0 06F0F846 		and	r6, r6, #2080374784
 3634              	.LVL370:
 3635 02c4 3443     		orrs	r4, r4, r6
 3636              	.LVL371:
 3637 02c6 44F00044 		orr	r4, r4, #-2147483648
 3638 02ca 47F82540 		str	r4, [r7, r5, lsl #2]
 3639              	.LVL372:
 3640 02ce D3E7     		b	.L338
 3641              	.LVL373:
 3642              	.L421:
 3643              	.LBE567:
 3644              	.LBE570:
2131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         LL_ADC_SetOffsetSaturation(hadc->Instance, sConfigInjected->InjectedOffsetNumber, (sConfigI
 3645              		.loc 1 2131 0
ARM GAS  /tmp/ccmrLUMM.s 			page 247


 3646 02d0 0E69     		ldr	r6, [r1, #16]
 3647 02d2 CD69     		ldr	r5, [r1, #28]
 3648              	.LVL374:
 3649              	.LBB571:
 3650              	.LBB572:
3558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 3651              		.loc 2 3558 0
 3652 02d4 6032     		adds	r2, r2, #96
 3653              	.LVL375:
3560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
 3654              		.loc 2 3560 0
 3655 02d6 52F82640 		ldr	r4, [r2, r6, lsl #2]
 3656 02da 24F08074 		bic	r4, r4, #16777216
 3657 02de 2C43     		orrs	r4, r4, r5
 3658 02e0 42F82640 		str	r4, [r2, r6, lsl #2]
 3659              	.LVL376:
 3660              	.LBE572:
 3661              	.LBE571:
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 3662              		.loc 1 2132 0
 3663 02e4 1A68     		ldr	r2, [r3]
 3664 02e6 0E69     		ldr	r6, [r1, #16]
 3665 02e8 91F82040 		ldrb	r4, [r1, #32]	@ zero_extendqisi2
 3666 02ec 012C     		cmp	r4, #1
 3667 02ee 0DD0     		beq	.L423
 3668 02f0 0025     		movs	r5, #0
 3669              	.L340:
 3670              	.LVL377:
 3671              	.LBB573:
 3672              	.LBB574:
3492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 3673              		.loc 2 3492 0 discriminator 4
 3674 02f2 094C     		ldr	r4, .L442
 3675 02f4 A242     		cmp	r2, r4
 3676 02f6 40F02581 		bne	.L324
 3677              	.LBB575:
3494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 3678              		.loc 2 3494 0
 3679 02fa 6032     		adds	r2, r2, #96
 3680              	.LVL378:
3496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
 3681              		.loc 2 3496 0
 3682 02fc 52F82640 		ldr	r4, [r2, r6, lsl #2]
 3683 0300 24F00074 		bic	r4, r4, #33554432
 3684 0304 2543     		orrs	r5, r5, r4
 3685              	.LVL379:
 3686 0306 42F82650 		str	r5, [r2, r6, lsl #2]
 3687              	.LVL380:
 3688 030a 1BE1     		b	.L324
 3689              	.LVL381:
 3690              	.L423:
 3691              	.LBE575:
 3692              	.LBE574:
 3693              	.LBE573:
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 3694              		.loc 1 2132 0
 3695 030c 4FF00075 		mov	r5, #33554432
ARM GAS  /tmp/ccmrLUMM.s 			page 248


 3696 0310 EFE7     		b	.L340
 3697              	.L422:
 3698              		.loc 1 2138 0
 3699 0312 4FF00045 		mov	r5, #-2147483648
 3700 0316 B9E7     		b	.L341
 3701              	.L443:
 3702              		.align	2
 3703              	.L442:
 3704 0318 00600258 		.word	1476550656
 3705 031c 0010005C 		.word	1543507968
 3706 0320 1DFE00FC 		.word	-67043811
 3707              	.LVL382:
 3708              	.L336:
2139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else
2143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #if defined(ADC_VER_V5_V90)
2145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (hadc->Instance == ADC3)
 3709              		.loc 1 2145 0
 3710 0324 8D4C     		ldr	r4, .L444
 3711              	.LVL383:
 3712 0326 A242     		cmp	r2, r4
 3713 0328 4CD0     		beq	.L424
 3714              	.LVL384:
 3715              	.LBB576:
 3716              	.LBB577:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3717              		.loc 2 3332 0
 3718 032a 146E     		ldr	r4, [r2, #96]
 3719              	.LVL385:
 3720              	.LBE577:
 3721              	.LBE576:
 3722              	.LBB578:
 3723              	.LBB579:
 3724 032c 156E     		ldr	r5, [r2, #96]
 3725              	.LVL386:
 3726              	.LBE579:
 3727              	.LBE578:
2146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Scan each offset register to check if the selected channel is targeted. */
2148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* If this is the case, the corresponding offset number is disabled.       */
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)
2150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
2152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)
2154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
2156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)
2158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
2160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)
2162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
ARM GAS  /tmp/ccmrLUMM.s 			page 249


2163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
2164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** #endif /* ADC_VER_V5_V90 */
2168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Scan each offset register to check if the selected channel is targeted. */
2170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* If this is the case, the corresponding offset number is disabled.       */
2171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)
 3728              		.loc 1 2171 0
 3729 032e C5F38465 		ubfx	r5, r5, #26, #5
 3730 0332 0C68     		ldr	r4, [r1]
 3731 0334 C4F31306 		ubfx	r6, r4, #0, #20
 3732 0338 002E     		cmp	r6, #0
 3733 033a 40F0BB80 		bne	.L357
 3734              		.loc 1 2171 0 is_stmt 0 discriminator 5
 3735 033e C4F38466 		ubfx	r6, r4, #26, #5
 3736              	.L358:
 3737              		.loc 1 2171 0 discriminator 8
 3738 0342 B542     		cmp	r5, r6
 3739 0344 00F0BB80 		beq	.L425
 3740              	.L359:
2172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_1, sConfigInjected->InjectedChannel, LL_AD
2174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)
 3741              		.loc 1 2175 0 is_stmt 1
 3742 0348 1E68     		ldr	r6, [r3]
 3743              	.LVL387:
 3744              	.LBB580:
 3745              	.LBB581:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3746              		.loc 2 3332 0
 3747 034a 726E     		ldr	r2, [r6, #100]
 3748              	.LVL388:
 3749              	.LBE581:
 3750              	.LBE580:
 3751              	.LBB582:
 3752              	.LBB583:
 3753 034c 746E     		ldr	r4, [r6, #100]
 3754              	.LVL389:
 3755              	.LBE583:
 3756              	.LBE582:
 3757              		.loc 1 2175 0
 3758 034e C4F38464 		ubfx	r4, r4, #26, #5
 3759 0352 0A68     		ldr	r2, [r1]
 3760 0354 C2F31305 		ubfx	r5, r2, #0, #20
 3761 0358 002D     		cmp	r5, #0
 3762 035a 40F0B880 		bne	.L360
 3763              		.loc 1 2175 0 is_stmt 0 discriminator 5
 3764 035e C2F38465 		ubfx	r5, r2, #26, #5
 3765              	.L361:
 3766              		.loc 1 2175 0 discriminator 8
 3767 0362 AC42     		cmp	r4, r5
 3768 0364 00F0B880 		beq	.L426
 3769              	.L362:
2176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
ARM GAS  /tmp/ccmrLUMM.s 			page 250


2177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_2, sConfigInjected->InjectedChannel, LL_AD
2178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)
 3770              		.loc 1 2179 0 is_stmt 1
 3771 0368 1A68     		ldr	r2, [r3]
 3772              	.LVL390:
 3773              	.LBB584:
 3774              	.LBB585:
3330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 3775              		.loc 2 3330 0
 3776 036a 02F16007 		add	r7, r2, #96
 3777              	.LVL391:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3778              		.loc 2 3332 0
 3779 036e 946E     		ldr	r4, [r2, #104]
 3780              	.LVL392:
 3781              	.LBE585:
 3782              	.LBE584:
 3783              	.LBB586:
 3784              	.LBB587:
 3785 0370 956E     		ldr	r5, [r2, #104]
 3786              	.LVL393:
 3787              	.LBE587:
 3788              	.LBE586:
 3789              		.loc 1 2179 0
 3790 0372 C5F38465 		ubfx	r5, r5, #26, #5
 3791 0376 0C68     		ldr	r4, [r1]
 3792 0378 C4F31306 		ubfx	r6, r4, #0, #20
 3793 037c 002E     		cmp	r6, #0
 3794 037e 40F0BD80 		bne	.L364
 3795              		.loc 1 2179 0 is_stmt 0 discriminator 5
 3796 0382 C4F38466 		ubfx	r6, r4, #26, #5
 3797              	.L365:
 3798              		.loc 1 2179 0 discriminator 8
 3799 0386 B542     		cmp	r5, r6
 3800 0388 00F0BD80 		beq	.L427
 3801              	.L366:
2180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_AD
2182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)
 3802              		.loc 1 2183 0 is_stmt 1
 3803 038c 1E68     		ldr	r6, [r3]
 3804              	.LVL394:
 3805              	.LBB588:
 3806              	.LBB589:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3807              		.loc 2 3332 0
 3808 038e F26E     		ldr	r2, [r6, #108]
 3809              	.LVL395:
 3810              	.LBE589:
 3811              	.LBE588:
 3812              	.LBB590:
 3813              	.LBB591:
 3814 0390 F46E     		ldr	r4, [r6, #108]
 3815              	.LVL396:
 3816              	.LBE591:
ARM GAS  /tmp/ccmrLUMM.s 			page 251


 3817              	.LBE590:
 3818              		.loc 1 2183 0
 3819 0392 C4F38464 		ubfx	r4, r4, #26, #5
 3820 0396 0A68     		ldr	r2, [r1]
 3821 0398 C2F31305 		ubfx	r5, r2, #0, #20
 3822 039c 002D     		cmp	r5, #0
 3823 039e 40F0C480 		bne	.L368
 3824              		.loc 1 2183 0 is_stmt 0 discriminator 5
 3825 03a2 C2F38465 		ubfx	r5, r2, #26, #5
 3826              	.L369:
 3827              		.loc 1 2183 0 discriminator 8
 3828 03a6 AC42     		cmp	r4, r5
 3829 03a8 40F0CC80 		bne	.L324
 3830              	.LVL397:
 3831              	.LBB592:
 3832              	.LBB593:
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 3833              		.loc 2 3250 0 is_stmt 1
 3834 03ac 6B4C     		ldr	r4, .L444
 3835 03ae A642     		cmp	r6, r4
 3836 03b0 00F0C080 		beq	.L428
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 3837              		.loc 2 3259 0
 3838 03b4 F46E     		ldr	r4, [r6, #108]
 3839 03b6 04F00044 		and	r4, r4, #-2147483648
 3840 03ba 02F0F842 		and	r2, r2, #2080374784
 3841              	.LVL398:
 3842 03be 2243     		orrs	r2, r2, r4
 3843 03c0 F266     		str	r2, [r6, #108]
 3844              	.LVL399:
 3845 03c2 BFE0     		b	.L324
 3846              	.LVL400:
 3847              	.L424:
 3848              	.LBE593:
 3849              	.LBE592:
 3850              	.LBB595:
 3851              	.LBB596:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3852              		.loc 2 3332 0
 3853 03c4 146E     		ldr	r4, [r2, #96]
 3854              	.LVL401:
 3855              	.LBE596:
 3856              	.LBE595:
 3857              	.LBB597:
 3858              	.LBB598:
 3859 03c6 156E     		ldr	r5, [r2, #96]
 3860              	.LVL402:
 3861              	.LBE598:
 3862              	.LBE597:
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3863              		.loc 1 2149 0
 3864 03c8 C5F38465 		ubfx	r5, r5, #26, #5
 3865 03cc 0C68     		ldr	r4, [r1]
 3866 03ce C4F31306 		ubfx	r6, r4, #0, #20
 3867 03d2 002E     		cmp	r6, #0
 3868 03d4 36D1     		bne	.L343
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
ARM GAS  /tmp/ccmrLUMM.s 			page 252


 3869              		.loc 1 2149 0 is_stmt 0 discriminator 5
 3870 03d6 C4F38464 		ubfx	r4, r4, #26, #5
 3871              	.L344:
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3872              		.loc 1 2149 0 discriminator 8
 3873 03da A542     		cmp	r5, r4
 3874 03dc 37D0     		beq	.L429
 3875              	.L345:
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3876              		.loc 1 2153 0 is_stmt 1
 3877 03de 1D68     		ldr	r5, [r3]
 3878              	.LVL403:
 3879              	.LBB599:
 3880              	.LBB600:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3881              		.loc 2 3332 0
 3882 03e0 6A6E     		ldr	r2, [r5, #100]
 3883              	.LVL404:
 3884              	.LBE600:
 3885              	.LBE599:
 3886              	.LBB601:
 3887              	.LBB602:
 3888 03e2 6C6E     		ldr	r4, [r5, #100]
 3889              	.LVL405:
 3890              	.LBE602:
 3891              	.LBE601:
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3892              		.loc 1 2153 0
 3893 03e4 C4F38464 		ubfx	r4, r4, #26, #5
 3894 03e8 0A68     		ldr	r2, [r1]
 3895 03ea C2F31306 		ubfx	r6, r2, #0, #20
 3896 03ee 002E     		cmp	r6, #0
 3897 03f0 32D1     		bne	.L346
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3898              		.loc 1 2153 0 is_stmt 0 discriminator 5
 3899 03f2 C2F38462 		ubfx	r2, r2, #26, #5
 3900              	.L347:
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3901              		.loc 1 2153 0 discriminator 8
 3902 03f6 9442     		cmp	r4, r2
 3903 03f8 33D0     		beq	.L430
 3904              	.L348:
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3905              		.loc 1 2157 0 is_stmt 1
 3906 03fa 1D68     		ldr	r5, [r3]
 3907              	.LVL406:
 3908              	.LBB603:
 3909              	.LBB604:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3910              		.loc 2 3332 0
 3911 03fc AA6E     		ldr	r2, [r5, #104]
 3912              	.LVL407:
 3913              	.LBE604:
 3914              	.LBE603:
 3915              	.LBB605:
 3916              	.LBB606:
 3917 03fe AC6E     		ldr	r4, [r5, #104]
ARM GAS  /tmp/ccmrLUMM.s 			page 253


 3918              	.LVL408:
 3919              	.LBE606:
 3920              	.LBE605:
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3921              		.loc 1 2157 0
 3922 0400 C4F38464 		ubfx	r4, r4, #26, #5
 3923 0404 0A68     		ldr	r2, [r1]
 3924 0406 C2F31306 		ubfx	r6, r2, #0, #20
 3925 040a 002E     		cmp	r6, #0
 3926 040c 36D1     		bne	.L350
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3927              		.loc 1 2157 0 is_stmt 0 discriminator 5
 3928 040e C2F38462 		ubfx	r2, r2, #26, #5
 3929              	.L351:
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3930              		.loc 1 2157 0 discriminator 8
 3931 0412 9442     		cmp	r4, r2
 3932 0414 37D0     		beq	.L431
 3933              	.L352:
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3934              		.loc 1 2161 0 is_stmt 1
 3935 0416 1D68     		ldr	r5, [r3]
 3936              	.LVL409:
 3937              	.LBB607:
 3938              	.LBB608:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3939              		.loc 2 3332 0
 3940 0418 EA6E     		ldr	r2, [r5, #108]
 3941              	.LVL410:
 3942              	.LBE608:
 3943              	.LBE607:
 3944              	.LBB609:
 3945              	.LBB610:
 3946 041a EC6E     		ldr	r4, [r5, #108]
 3947              	.LVL411:
 3948              	.LBE610:
 3949              	.LBE609:
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3950              		.loc 1 2161 0
 3951 041c C4F38464 		ubfx	r4, r4, #26, #5
 3952 0420 0A68     		ldr	r2, [r1]
 3953 0422 C2F31306 		ubfx	r6, r2, #0, #20
 3954 0426 002E     		cmp	r6, #0
 3955 0428 3AD1     		bne	.L354
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3956              		.loc 1 2161 0 is_stmt 0 discriminator 5
 3957 042a C2F38462 		ubfx	r2, r2, #26, #5
 3958              	.L355:
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3959              		.loc 1 2161 0 discriminator 8
 3960 042e 9442     		cmp	r4, r2
 3961 0430 40F08880 		bne	.L324
 3962              	.LVL412:
 3963              	.LBB611:
 3964              	.LBB612:
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 3965              		.loc 2 3626 0 is_stmt 1
ARM GAS  /tmp/ccmrLUMM.s 			page 254


 3966 0434 494A     		ldr	r2, .L444
 3967 0436 9542     		cmp	r5, r2
 3968 0438 37D0     		beq	.L432
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
 3969              		.loc 2 3634 0
 3970 043a EA6E     		ldr	r2, [r5, #108]
 3971 043c 22F00042 		bic	r2, r2, #-2147483648
 3972 0440 EA66     		str	r2, [r5, #108]
 3973 0442 7FE0     		b	.L324
 3974              	.LVL413:
 3975              	.L343:
 3976              	.LBE612:
 3977              	.LBE611:
 3978              	.LBB614:
 3979              	.LBB615:
 3980              		.loc 3 988 0 discriminator 6
 3981              		.syntax unified
 3982              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3983 0444 94FAA4F4 		rbit r4, r4
 3984              	@ 0 "" 2
 3985              	.LVL414:
 3986              		.thumb
 3987              		.syntax unified
 3988              	.LBE615:
 3989              	.LBE614:
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 3990              		.loc 1 2149 0 discriminator 6
 3991 0448 B4FA84F4 		clz	r4, r4
 3992 044c C5E7     		b	.L344
 3993              	.L429:
 3994              	.LVL415:
 3995              	.LBB616:
 3996              	.LBB617:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 3997              		.loc 2 3628 0
 3998 044e 146E     		ldr	r4, [r2, #96]
 3999 0450 24F00044 		bic	r4, r4, #-2147483648
 4000 0454 1466     		str	r4, [r2, #96]
 4001 0456 C2E7     		b	.L345
 4002              	.LVL416:
 4003              	.L346:
 4004              	.LBE617:
 4005              	.LBE616:
 4006              	.LBB618:
 4007              	.LBB619:
 4008              		.loc 3 988 0 discriminator 6
 4009              		.syntax unified
 4010              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4011 0458 92FAA2F2 		rbit r2, r2
 4012              	@ 0 "" 2
 4013              	.LVL417:
 4014              		.thumb
 4015              		.syntax unified
 4016              	.LBE619:
 4017              	.LBE618:
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4018              		.loc 1 2153 0 discriminator 6
ARM GAS  /tmp/ccmrLUMM.s 			page 255


 4019 045c B2FA82F2 		clz	r2, r2
 4020 0460 C9E7     		b	.L347
 4021              	.L430:
 4022              	.LVL418:
 4023              	.LBB620:
 4024              	.LBB621:
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 4025              		.loc 2 3626 0
 4026 0462 3E4A     		ldr	r2, .L444
 4027 0464 9542     		cmp	r5, r2
 4028 0466 04D0     		beq	.L433
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
 4029              		.loc 2 3634 0
 4030 0468 6A6E     		ldr	r2, [r5, #100]
 4031 046a 22F00042 		bic	r2, r2, #-2147483648
 4032 046e 6A66     		str	r2, [r5, #100]
 4033 0470 C3E7     		b	.L348
 4034              	.L433:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 4035              		.loc 2 3628 0
 4036 0472 6A6E     		ldr	r2, [r5, #100]
 4037 0474 22F00042 		bic	r2, r2, #-2147483648
 4038 0478 6A66     		str	r2, [r5, #100]
 4039 047a BEE7     		b	.L348
 4040              	.LVL419:
 4041              	.L350:
 4042              	.LBE621:
 4043              	.LBE620:
 4044              	.LBB622:
 4045              	.LBB623:
 4046              		.loc 3 988 0 discriminator 6
 4047              		.syntax unified
 4048              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4049 047c 92FAA2F2 		rbit r2, r2
 4050              	@ 0 "" 2
 4051              	.LVL420:
 4052              		.thumb
 4053              		.syntax unified
 4054              	.LBE623:
 4055              	.LBE622:
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4056              		.loc 1 2157 0 discriminator 6
 4057 0480 B2FA82F2 		clz	r2, r2
 4058 0484 C5E7     		b	.L351
 4059              	.L431:
 4060              	.LVL421:
 4061              	.LBB624:
 4062              	.LBB625:
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 4063              		.loc 2 3626 0
 4064 0486 354A     		ldr	r2, .L444
 4065 0488 9542     		cmp	r5, r2
 4066 048a 04D0     		beq	.L434
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
 4067              		.loc 2 3634 0
 4068 048c AA6E     		ldr	r2, [r5, #104]
 4069 048e 22F00042 		bic	r2, r2, #-2147483648
ARM GAS  /tmp/ccmrLUMM.s 			page 256


 4070 0492 AA66     		str	r2, [r5, #104]
 4071 0494 BFE7     		b	.L352
 4072              	.L434:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 4073              		.loc 2 3628 0
 4074 0496 AA6E     		ldr	r2, [r5, #104]
 4075 0498 22F00042 		bic	r2, r2, #-2147483648
 4076 049c AA66     		str	r2, [r5, #104]
 4077 049e BAE7     		b	.L352
 4078              	.LVL422:
 4079              	.L354:
 4080              	.LBE625:
 4081              	.LBE624:
 4082              	.LBB626:
 4083              	.LBB627:
 4084              		.loc 3 988 0 discriminator 6
 4085              		.syntax unified
 4086              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4087 04a0 92FAA2F2 		rbit r2, r2
 4088              	@ 0 "" 2
 4089              	.LVL423:
 4090              		.thumb
 4091              		.syntax unified
 4092              	.LBE627:
 4093              	.LBE626:
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4094              		.loc 1 2161 0 discriminator 6
 4095 04a4 B2FA82F2 		clz	r2, r2
 4096 04a8 C1E7     		b	.L355
 4097              	.LVL424:
 4098              	.L432:
 4099              	.LBB628:
 4100              	.LBB613:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 4101              		.loc 2 3628 0
 4102 04aa EA6E     		ldr	r2, [r5, #108]
 4103 04ac 22F00042 		bic	r2, r2, #-2147483648
 4104 04b0 EA66     		str	r2, [r5, #108]
 4105 04b2 47E0     		b	.L324
 4106              	.LVL425:
 4107              	.L357:
 4108              	.LBE613:
 4109              	.LBE628:
 4110              	.LBB629:
 4111              	.LBB630:
 4112              		.loc 3 988 0 discriminator 6
 4113              		.syntax unified
 4114              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4115 04b4 94FAA4F6 		rbit r6, r4
 4116              	@ 0 "" 2
 4117              	.LVL426:
 4118              		.thumb
 4119              		.syntax unified
 4120              	.LBE630:
 4121              	.LBE629:
2171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4122              		.loc 1 2171 0 discriminator 6
ARM GAS  /tmp/ccmrLUMM.s 			page 257


 4123 04b8 B6FA86F6 		clz	r6, r6
 4124 04bc 41E7     		b	.L358
 4125              	.L425:
 4126              	.LVL427:
 4127              	.LBB631:
 4128              	.LBB632:
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 4129              		.loc 2 3259 0
 4130 04be 156E     		ldr	r5, [r2, #96]
 4131 04c0 05F00045 		and	r5, r5, #-2147483648
 4132 04c4 04F0F844 		and	r4, r4, #2080374784
 4133              	.LVL428:
 4134 04c8 2C43     		orrs	r4, r4, r5
 4135 04ca 1466     		str	r4, [r2, #96]
 4136              	.LVL429:
 4137 04cc 3CE7     		b	.L359
 4138              	.LVL430:
 4139              	.L360:
 4140              	.LBE632:
 4141              	.LBE631:
 4142              	.LBB633:
 4143              	.LBB634:
 4144              		.loc 3 988 0 discriminator 6
 4145              		.syntax unified
 4146              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4147 04ce 92FAA2F5 		rbit r5, r2
 4148              	@ 0 "" 2
 4149              	.LVL431:
 4150              		.thumb
 4151              		.syntax unified
 4152              	.LBE634:
 4153              	.LBE633:
2175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4154              		.loc 1 2175 0 discriminator 6
 4155 04d2 B5FA85F5 		clz	r5, r5
 4156 04d6 44E7     		b	.L361
 4157              	.L426:
 4158              	.LVL432:
 4159              	.LBB635:
 4160              	.LBB636:
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 4161              		.loc 2 3250 0
 4162 04d8 204C     		ldr	r4, .L444
 4163 04da A642     		cmp	r6, r4
 4164 04dc 07D0     		beq	.L435
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 4165              		.loc 2 3259 0
 4166 04de 746E     		ldr	r4, [r6, #100]
 4167 04e0 04F00044 		and	r4, r4, #-2147483648
 4168 04e4 02F0F842 		and	r2, r2, #2080374784
 4169              	.LVL433:
 4170 04e8 2243     		orrs	r2, r2, r4
 4171 04ea 7266     		str	r2, [r6, #100]
 4172              	.LVL434:
 4173 04ec 3CE7     		b	.L362
 4174              	.LVL435:
 4175              	.L435:
ARM GAS  /tmp/ccmrLUMM.s 			page 258


3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 4176              		.loc 2 3252 0
 4177 04ee 746E     		ldr	r4, [r6, #100]
 4178 04f0 02F0F842 		and	r2, r2, #2080374784
 4179              	.LVL436:
 4180 04f4 42F00042 		orr	r2, r2, #-2147483648
 4181 04f8 7266     		str	r2, [r6, #100]
 4182              	.LVL437:
 4183 04fa 35E7     		b	.L362
 4184              	.LVL438:
 4185              	.L364:
 4186              	.LBE636:
 4187              	.LBE635:
 4188              	.LBB637:
 4189              	.LBB638:
 4190              		.loc 3 988 0 discriminator 6
 4191              		.syntax unified
 4192              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4193 04fc 94FAA4F6 		rbit r6, r4
 4194              	@ 0 "" 2
 4195              	.LVL439:
 4196              		.thumb
 4197              		.syntax unified
 4198              	.LBE638:
 4199              	.LBE637:
2179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4200              		.loc 1 2179 0 discriminator 6
 4201 0500 B6FA86F6 		clz	r6, r6
 4202 0504 3FE7     		b	.L365
 4203              	.L427:
 4204              	.LVL440:
 4205              	.LBB639:
 4206              	.LBB640:
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 4207              		.loc 2 3250 0
 4208 0506 154D     		ldr	r5, .L444
 4209 0508 AA42     		cmp	r2, r5
 4210 050a 07D0     		beq	.L436
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 4211              		.loc 2 3259 0
 4212 050c FA68     		ldr	r2, [r7, #12]
 4213              	.LVL441:
 4214 050e 02F00042 		and	r2, r2, #-2147483648
 4215 0512 04F0F844 		and	r4, r4, #2080374784
 4216              	.LVL442:
 4217 0516 1443     		orrs	r4, r4, r2
 4218 0518 FC60     		str	r4, [r7, #12]
 4219              	.LVL443:
 4220 051a 37E7     		b	.L366
 4221              	.LVL444:
 4222              	.L436:
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 4223              		.loc 2 3252 0
 4224 051c FA68     		ldr	r2, [r7, #12]
 4225              	.LVL445:
 4226 051e 04F0F842 		and	r2, r4, #2080374784
 4227 0522 42F00042 		orr	r2, r2, #-2147483648
ARM GAS  /tmp/ccmrLUMM.s 			page 259


 4228 0526 FA60     		str	r2, [r7, #12]
 4229              	.LVL446:
 4230 0528 30E7     		b	.L366
 4231              	.LVL447:
 4232              	.L368:
 4233              	.LBE640:
 4234              	.LBE639:
 4235              	.LBB641:
 4236              	.LBB642:
 4237              		.loc 3 988 0 discriminator 6
 4238              		.syntax unified
 4239              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4240 052a 92FAA2F5 		rbit r5, r2
 4241              	@ 0 "" 2
 4242              	.LVL448:
 4243              		.thumb
 4244              		.syntax unified
 4245              	.LBE642:
 4246              	.LBE641:
 4247              		.loc 1 2183 0 discriminator 6
 4248 052e B5FA85F5 		clz	r5, r5
 4249 0532 38E7     		b	.L369
 4250              	.LVL449:
 4251              	.L428:
 4252              	.LBB643:
 4253              	.LBB594:
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 4254              		.loc 2 3252 0
 4255 0534 F46E     		ldr	r4, [r6, #108]
 4256 0536 02F0F842 		and	r2, r2, #2080374784
 4257              	.LVL450:
 4258 053a 42F00042 		orr	r2, r2, #-2147483648
 4259 053e F266     		str	r2, [r6, #108]
 4260              	.LVL451:
 4261 0540 00E0     		b	.L324
 4262              	.LVL452:
 4263              	.L406:
 4264              	.LBE594:
 4265              	.LBE643:
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmpOffsetShifted;
 4266              		.loc 1 1778 0
 4267 0542 0020     		movs	r0, #0
 4268              	.LVL453:
 4269              	.L324:
2184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           LL_ADC_SetOffset(hadc->Instance, LL_ADC_OFFSET_4, sConfigInjected->InjectedChannel, LL_AD
2186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated only when ADC is disabled:                */
2194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Single or differential mode                                           */
2195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
2196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
ARM GAS  /tmp/ccmrLUMM.s 			page 260


 4270              		.loc 1 2196 0
 4271 0544 1A68     		ldr	r2, [r3]
 4272              	.LVL454:
 4273              	.LBB644:
 4274              	.LBB645:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4275              		.loc 2 6752 0
 4276 0546 9468     		ldr	r4, [r2, #8]
 4277 0548 14F0010F 		tst	r4, #1
 4278 054c 08D0     		beq	.L437
 4279              	.LVL455:
 4280              	.L371:
 4281              	.LBE645:
 4282              	.LBE644:
2197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Set mode single-ended or differential input of the selected ADC channel */
2199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->
2200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Configuration of differential mode */
2202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range
2203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
2204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Set sampling time of the selected ADC channel */
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL
2207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Management of internal measurement channels: Vbat/VrefInt/TempSensor   */
2210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* internal measurement paths enable: If internal channel selected,       */
2211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* enable dedicated internal buffers and path.                            */
2212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Note: these internal measurement paths can be disabled using           */
2213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* HAL_ADC_DeInit().                                                      */
2214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
2216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Configuration of common ADC parameters (continuation)                */
2218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Software is allowed to change common parameters only when all ADCs   */
2219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* of the common group are disabled.                                    */
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
2221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
2223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* If the requested internal measurement path has already been enabled, */
2225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* bypass the configuration processing.                                 */
2226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_c
2227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
2229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
2230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_IN
2231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /* Delay for temperature sensor stabilization time */
2233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /* Wait loop initialization and execution */
2234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /* Note: Variable divided by 2 to compensate partially              */
2235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /*       CPU processing cycles, scaling in us split to not          */
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             /*       exceed 32 bits register capacity and handle low frequency. */
2237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (10000
2238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             while (wait_loop_index != 0UL)
2239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             {
ARM GAS  /tmp/ccmrLUMM.s 			page 261


2240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****               wait_loop_index--;
2241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             }
2242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
2243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_ch
2245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
2247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
2248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_IN
2249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
2250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal
2252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           if (ADC_VREFINT_INSTANCE(hadc))
2254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
2255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_IN
2256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
2257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         else
2259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
2260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           /* nothing to do */
2261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         }
2262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* If the requested internal measurement path has already been enabled  */
2264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* and other ADC of the common group are enabled, internal              */
2265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* measurement paths cannot be enabled.                                 */
2266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       else
2267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         /* Update ADC state machine to error */
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         tmp_hal_status = HAL_ERROR;
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
2278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 4283              		.loc 1 2278 0
 4284 054e 0022     		movs	r2, #0
 4285 0550 83F85C20 		strb	r2, [r3, #92]
 4286              	.LVL456:
 4287              	.L309:
2279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
2281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
2282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 4288              		.loc 1 2282 0
 4289 0554 02B0     		add	sp, sp, #8
 4290              	.LCFI41:
 4291              		.cfi_remember_state
 4292              		.cfi_def_cfa_offset 16
 4293              		@ sp needed
 4294 0556 F0BC     		pop	{r4, r5, r6, r7}
 4295              	.LCFI42:
 4296              		.cfi_restore 7
ARM GAS  /tmp/ccmrLUMM.s 			page 262


 4297              		.cfi_restore 6
 4298              		.cfi_restore 5
 4299              		.cfi_restore 4
 4300              		.cfi_def_cfa_offset 0
 4301 0558 7047     		bx	lr
 4302              	.L445:
 4303 055a 00BF     		.align	2
 4304              	.L444:
 4305 055c 00600258 		.word	1476550656
 4306              	.LVL457:
 4307              	.L437:
 4308              	.LCFI43:
 4309              		.cfi_restore_state
2199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 4310              		.loc 1 2199 0
 4311 0560 0C68     		ldr	r4, [r1]
 4312 0562 CE68     		ldr	r6, [r1, #12]
 4313              	.LVL458:
 4314              	.LBB646:
 4315              	.LBB647:
5428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 4316              		.loc 2 5428 0
 4317 0564 AF4D     		ldr	r5, .L446
 4318 0566 AA42     		cmp	r2, r5
 4319 0568 58D0     		beq	.L438
5436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 4320              		.loc 2 5436 0
 4321 056a D2F8C050 		ldr	r5, [r2, #192]
 4322 056e C4F31307 		ubfx	r7, r4, #0, #20
 4323 0572 25EA0705 		bic	r5, r5, r7
 4324 0576 06F01806 		and	r6, r6, #24
 4325              	.LVL459:
 4326 057a AB4F     		ldr	r7, .L446+4
 4327 057c 27FA06F6 		lsr	r6, r7, r6
 4328 0580 3440     		ands	r4, r4, r6
 4329              	.LVL460:
 4330 0582 C4F31304 		ubfx	r4, r4, #0, #20
 4331 0586 2C43     		orrs	r4, r4, r5
 4332 0588 C2F8C040 		str	r4, [r2, #192]
 4333              	.LVL461:
 4334              	.L373:
 4335              	.LBE647:
 4336              	.LBE646:
2203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 4337              		.loc 1 2203 0
 4338 058c CC68     		ldr	r4, [r1, #12]
 4339 058e A74A     		ldr	r2, .L446+8
 4340 0590 9442     		cmp	r4, r2
 4341 0592 55D0     		beq	.L439
 4342              	.L374:
2215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
 4343              		.loc 1 2215 0
 4344 0594 0A68     		ldr	r2, [r1]
 4345 0596 002A     		cmp	r2, #0
 4346 0598 D9DA     		bge	.L371
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 4347              		.loc 1 2220 0
ARM GAS  /tmp/ccmrLUMM.s 			page 263


 4348 059a 1968     		ldr	r1, [r3]
 4349              	.LVL462:
 4350 059c A44D     		ldr	r5, .L446+12
 4351 059e A54C     		ldr	r4, .L446+16
 4352 05a0 A142     		cmp	r1, r4
 4353 05a2 18BF     		it	ne
 4354 05a4 A942     		cmpne	r1, r5
 4355 05a6 0CBF     		ite	eq
 4356 05a8 0125     		moveq	r5, #1
 4357 05aa 0025     		movne	r5, #0
 4358 05ac 40F0F480 		bne	.L391
 4359              	.LVL463:
 4360              	.LBB649:
 4361              	.LBB650:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4362              		.loc 2 6752 0
 4363 05b0 A4F58074 		sub	r4, r4, #256
 4364 05b4 A468     		ldr	r4, [r4, #8]
 4365 05b6 14F0010F 		tst	r4, #1
 4366 05ba 00F0E980 		beq	.L409
 4367 05be 0124     		movs	r4, #1
 4368              	.L392:
 4369              	.LVL464:
 4370              	.LBE650:
 4371              	.LBE649:
 4372              	.LBB652:
 4373              	.LBB653:
 4374 05c0 9C4E     		ldr	r6, .L446+16
 4375 05c2 B668     		ldr	r6, [r6, #8]
 4376 05c4 16F0010F 		tst	r6, #1
 4377 05c8 00F0E480 		beq	.L410
 4378 05cc 0126     		movs	r6, #1
 4379              	.L393:
 4380              	.LVL465:
 4381              	.LBE653:
 4382              	.LBE652:
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 4383              		.loc 1 2220 0
 4384 05ce 3443     		orrs	r4, r6, r4
 4385 05d0 0CBF     		ite	eq
 4386 05d2 0124     		moveq	r4, #1
 4387 05d4 0024     		movne	r4, #0
 4388              	.L394:
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 4389              		.loc 1 2220 0 is_stmt 0 discriminator 4
 4390 05d6 002C     		cmp	r4, #0
 4391 05d8 00F01B81 		beq	.L396
2222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 4392              		.loc 1 2222 0 is_stmt 1
 4393 05dc 002D     		cmp	r5, #0
 4394 05de 00F0E680 		beq	.L412
 4395 05e2 954D     		ldr	r5, .L446+20
 4396              	.L397:
 4397              	.LVL466:
 4398              	.LBB655:
 4399              	.LBB656:
2738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccmrLUMM.s 			page 264


 4400              		.loc 2 2738 0 discriminator 4
 4401 05e4 AC68     		ldr	r4, [r5, #8]
 4402 05e6 04F0E077 		and	r7, r4, #29360128
 4403              	.LVL467:
 4404              	.LBE656:
 4405              	.LBE655:
2226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4406              		.loc 1 2226 0 discriminator 4
 4407 05ea 944E     		ldr	r6, .L446+24
 4408 05ec B242     		cmp	r2, r6
 4409 05ee 00F0E080 		beq	.L440
 4410              	.L398:
2244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4411              		.loc 1 2244 0
 4412 05f2 934E     		ldr	r6, .L446+28
 4413 05f4 B242     		cmp	r2, r6
 4414 05f6 00F0FC80 		beq	.L441
 4415              	.L401:
2251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4416              		.loc 1 2251 0
 4417 05fa 924E     		ldr	r6, .L446+32
 4418 05fc B242     		cmp	r2, r6
 4419 05fe A6D1     		bne	.L371
2251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4420              		.loc 1 2251 0 is_stmt 0 discriminator 1
 4421 0600 14F4800F 		tst	r4, #4194304
 4422 0604 A3D1     		bne	.L371
2253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
 4423              		.loc 1 2253 0 is_stmt 1
 4424 0606 874A     		ldr	r2, .L446
 4425 0608 9142     		cmp	r1, r2
 4426 060a A0D1     		bne	.L371
2255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
 4427              		.loc 1 2255 0 discriminator 4
 4428 060c 47F48002 		orr	r2, r7, #4194304
 4429              	.LVL468:
 4430              	.LBB657:
 4431              	.LBB658:
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4432              		.loc 2 2716 0 discriminator 4
 4433 0610 A968     		ldr	r1, [r5, #8]
 4434 0612 21F0E071 		bic	r1, r1, #29360128
 4435 0616 0A43     		orrs	r2, r2, r1
 4436              	.LVL469:
 4437 0618 AA60     		str	r2, [r5, #8]
 4438 061a 98E7     		b	.L371
 4439              	.LVL470:
 4440              	.L438:
 4441              	.LBE658:
 4442              	.LBE657:
 4443              	.LBB659:
 4444              	.LBB648:
5430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 4445              		.loc 2 5430 0
 4446 061c D2F8B070 		ldr	r7, [r2, #176]
 4447 0620 C4F31305 		ubfx	r5, r4, #0, #20
 4448 0624 27EA0507 		bic	r7, r7, r5
ARM GAS  /tmp/ccmrLUMM.s 			page 265


 4449 0628 06F01806 		and	r6, r6, #24
 4450              	.LVL471:
 4451 062c 7E4D     		ldr	r5, .L446+4
 4452 062e 25FA06F6 		lsr	r6, r5, r6
 4453 0632 3440     		ands	r4, r4, r6
 4454              	.LVL472:
 4455 0634 C4F31304 		ubfx	r4, r4, #0, #20
 4456 0638 3C43     		orrs	r4, r4, r7
 4457 063a C2F8B040 		str	r4, [r2, #176]
 4458              	.LVL473:
 4459 063e A5E7     		b	.L373
 4460              	.LVL474:
 4461              	.L439:
 4462              	.LBE648:
 4463              	.LBE659:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4464              		.loc 1 2206 0
 4465 0640 1E68     		ldr	r6, [r3]
 4466 0642 0A68     		ldr	r2, [r1]
 4467 0644 C2F31307 		ubfx	r7, r2, #0, #20
 4468 0648 002F     		cmp	r7, #0
 4469 064a 38D1     		bne	.L375
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4470              		.loc 1 2206 0 is_stmt 0 discriminator 1
 4471 064c 940E     		lsrs	r4, r2, #26
 4472 064e 0134     		adds	r4, r4, #1
 4473 0650 04F01F04 		and	r4, r4, #31
 4474 0654 092C     		cmp	r4, #9
 4475 0656 8CBF     		ite	hi
 4476 0658 0024     		movhi	r4, #0
 4477 065a 0124     		movls	r4, #1
 4478              	.L376:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4479              		.loc 1 2206 0 discriminator 4
 4480 065c 002C     		cmp	r4, #0
 4481 065e 59D0     		beq	.L377
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4482              		.loc 1 2206 0 discriminator 5
 4483 0660 002F     		cmp	r7, #0
 4484 0662 38D1     		bne	.L378
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4485              		.loc 1 2206 0 discriminator 7
 4486 0664 950E     		lsrs	r5, r2, #26
 4487 0666 0135     		adds	r5, r5, #1
 4488 0668 AD06     		lsls	r5, r5, #26
 4489 066a 05F0F845 		and	r5, r5, #2080374784
 4490              	.L379:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4491              		.loc 1 2206 0 discriminator 10
 4492 066e 002F     		cmp	r7, #0
 4493 0670 3AD1     		bne	.L380
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4494              		.loc 1 2206 0 discriminator 11
 4495 0672 940E     		lsrs	r4, r2, #26
 4496 0674 0134     		adds	r4, r4, #1
 4497 0676 04F01F0C 		and	ip, r4, #31
 4498 067a 0124     		movs	r4, #1
ARM GAS  /tmp/ccmrLUMM.s 			page 266


 4499 067c 04FA0CF4 		lsl	r4, r4, ip
 4500              	.L381:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4501              		.loc 1 2206 0 discriminator 14
 4502 0680 2543     		orrs	r5, r5, r4
 4503 0682 002F     		cmp	r7, #0
 4504 0684 3BD1     		bne	.L382
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4505              		.loc 1 2206 0 discriminator 15
 4506 0686 920E     		lsrs	r2, r2, #26
 4507 0688 0132     		adds	r2, r2, #1
 4508 068a 02F01F02 		and	r2, r2, #31
 4509 068e 02EB4202 		add	r2, r2, r2, lsl #1
 4510 0692 1205     		lsls	r2, r2, #20
 4511              	.L383:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4512              		.loc 1 2206 0 discriminator 18
 4513 0694 2A43     		orrs	r2, r2, r5
 4514              	.L384:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4515              		.loc 1 2206 0 discriminator 32
 4516 0696 8D68     		ldr	r5, [r1, #8]
 4517              	.LVL475:
 4518              	.LBB660:
 4519              	.LBB661:
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 4520              		.loc 2 5282 0 is_stmt 1 discriminator 32
 4521 0698 1436     		adds	r6, r6, #20
 4522              	.LVL476:
 4523 069a 540E     		lsrs	r4, r2, #25
 4524 069c A400     		lsls	r4, r4, #2
 4525 069e 04F00404 		and	r4, r4, #4
 4526              	.LVL477:
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
 4527              		.loc 2 5284 0 discriminator 32
 4528 06a2 3759     		ldr	r7, [r6, r4]
 4529 06a4 C2F30452 		ubfx	r2, r2, #20, #5
 4530              	.LVL478:
 4531 06a8 4FF0070C 		mov	ip, #7
 4532 06ac 0CFA02FC 		lsl	ip, ip, r2
 4533 06b0 27EA0C07 		bic	r7, r7, ip
 4534 06b4 05FA02F2 		lsl	r2, r5, r2
 4535 06b8 3A43     		orrs	r2, r2, r7
 4536 06ba 3251     		str	r2, [r6, r4]
 4537              	.LVL479:
 4538 06bc 6AE7     		b	.L374
 4539              	.LVL480:
 4540              	.L375:
 4541              	.LBE661:
 4542              	.LBE660:
 4543              	.LBB662:
 4544              	.LBB663:
 4545              		.loc 3 988 0 discriminator 2
 4546              		.syntax unified
 4547              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4548 06be 92FAA2F4 		rbit r4, r2
 4549              	@ 0 "" 2
ARM GAS  /tmp/ccmrLUMM.s 			page 267


 4550              	.LVL481:
 4551              		.thumb
 4552              		.syntax unified
 4553              	.LBE663:
 4554              	.LBE662:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4555              		.loc 1 2206 0 discriminator 2
 4556 06c2 B4FA84F4 		clz	r4, r4
 4557 06c6 0134     		adds	r4, r4, #1
 4558 06c8 04F01F04 		and	r4, r4, #31
 4559 06cc 092C     		cmp	r4, #9
 4560 06ce 8CBF     		ite	hi
 4561 06d0 0024     		movhi	r4, #0
 4562 06d2 0124     		movls	r4, #1
 4563 06d4 C2E7     		b	.L376
 4564              	.L378:
 4565              	.LVL482:
 4566              	.LBB664:
 4567              	.LBB665:
 4568              		.loc 3 988 0 discriminator 8
 4569              		.syntax unified
 4570              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4571 06d6 92FAA2F5 		rbit r5, r2
 4572              	@ 0 "" 2
 4573              	.LVL483:
 4574              		.thumb
 4575              		.syntax unified
 4576              	.LBE665:
 4577              	.LBE664:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4578              		.loc 1 2206 0 discriminator 8
 4579 06da B5FA85F5 		clz	r5, r5
 4580 06de 0135     		adds	r5, r5, #1
 4581 06e0 AD06     		lsls	r5, r5, #26
 4582 06e2 05F0F845 		and	r5, r5, #2080374784
 4583 06e6 C2E7     		b	.L379
 4584              	.L380:
 4585              	.LVL484:
 4586              	.LBB666:
 4587              	.LBB667:
 4588              		.loc 3 988 0 discriminator 12
 4589              		.syntax unified
 4590              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4591 06e8 92FAA2F4 		rbit r4, r2
 4592              	@ 0 "" 2
 4593              	.LVL485:
 4594              		.thumb
 4595              		.syntax unified
 4596              	.LBE667:
 4597              	.LBE666:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4598              		.loc 1 2206 0 discriminator 12
 4599 06ec B4FA84F4 		clz	r4, r4
 4600 06f0 0134     		adds	r4, r4, #1
 4601 06f2 04F01F0C 		and	ip, r4, #31
 4602 06f6 0124     		movs	r4, #1
 4603 06f8 04FA0CF4 		lsl	r4, r4, ip
ARM GAS  /tmp/ccmrLUMM.s 			page 268


 4604 06fc C0E7     		b	.L381
 4605              	.L382:
 4606              	.LVL486:
 4607              	.LBB668:
 4608              	.LBB669:
 4609              		.loc 3 988 0 discriminator 16
 4610              		.syntax unified
 4611              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4612 06fe 92FAA2F2 		rbit r2, r2
 4613              	@ 0 "" 2
 4614              	.LVL487:
 4615              		.thumb
 4616              		.syntax unified
 4617              	.LBE669:
 4618              	.LBE668:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4619              		.loc 1 2206 0 discriminator 16
 4620 0702 B2FA82F2 		clz	r2, r2
 4621 0706 0132     		adds	r2, r2, #1
 4622 0708 02F01F02 		and	r2, r2, #31
 4623 070c 02EB4202 		add	r2, r2, r2, lsl #1
 4624 0710 1205     		lsls	r2, r2, #20
 4625 0712 BFE7     		b	.L383
 4626              	.L377:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4627              		.loc 1 2206 0 is_stmt 0 discriminator 6
 4628 0714 D7B9     		cbnz	r7, .L385
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4629              		.loc 1 2206 0 discriminator 20
 4630 0716 950E     		lsrs	r5, r2, #26
 4631 0718 0135     		adds	r5, r5, #1
 4632 071a AD06     		lsls	r5, r5, #26
 4633 071c 05F0F845 		and	r5, r5, #2080374784
 4634              	.L386:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4635              		.loc 1 2206 0 discriminator 23
 4636 0720 EFB9     		cbnz	r7, .L387
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4637              		.loc 1 2206 0 discriminator 24
 4638 0722 940E     		lsrs	r4, r2, #26
 4639 0724 0134     		adds	r4, r4, #1
 4640 0726 04F01F0C 		and	ip, r4, #31
 4641 072a 0124     		movs	r4, #1
 4642 072c 04FA0CF4 		lsl	r4, r4, ip
 4643              	.L388:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4644              		.loc 1 2206 0 discriminator 27
 4645 0730 2543     		orrs	r5, r5, r4
 4646 0732 FFB9     		cbnz	r7, .L389
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4647              		.loc 1 2206 0 discriminator 28
 4648 0734 940E     		lsrs	r4, r2, #26
 4649 0736 0134     		adds	r4, r4, #1
 4650 0738 04F01F04 		and	r4, r4, #31
 4651 073c 04EB4402 		add	r2, r4, r4, lsl #1
 4652 0740 1E3A     		subs	r2, r2, #30
 4653 0742 1205     		lsls	r2, r2, #20
ARM GAS  /tmp/ccmrLUMM.s 			page 269


 4654 0744 42F00072 		orr	r2, r2, #33554432
 4655              	.L390:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4656              		.loc 1 2206 0 discriminator 31
 4657 0748 2A43     		orrs	r2, r2, r5
 4658 074a A4E7     		b	.L384
 4659              	.L385:
 4660              	.LVL488:
 4661              	.LBB670:
 4662              	.LBB671:
 4663              		.loc 3 988 0 is_stmt 1 discriminator 21
 4664              		.syntax unified
 4665              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4666 074c 92FAA2F5 		rbit r5, r2
 4667              	@ 0 "" 2
 4668              	.LVL489:
 4669              		.thumb
 4670              		.syntax unified
 4671              	.LBE671:
 4672              	.LBE670:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4673              		.loc 1 2206 0 discriminator 21
 4674 0750 B5FA85F5 		clz	r5, r5
 4675 0754 0135     		adds	r5, r5, #1
 4676 0756 AD06     		lsls	r5, r5, #26
 4677 0758 05F0F845 		and	r5, r5, #2080374784
 4678 075c E0E7     		b	.L386
 4679              	.L387:
 4680              	.LVL490:
 4681              	.LBB672:
 4682              	.LBB673:
 4683              		.loc 3 988 0 discriminator 25
 4684              		.syntax unified
 4685              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4686 075e 92FAA2F4 		rbit r4, r2
 4687              	@ 0 "" 2
 4688              	.LVL491:
 4689              		.thumb
 4690              		.syntax unified
 4691              	.LBE673:
 4692              	.LBE672:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4693              		.loc 1 2206 0 discriminator 25
 4694 0762 B4FA84F4 		clz	r4, r4
 4695 0766 0134     		adds	r4, r4, #1
 4696 0768 04F01F0C 		and	ip, r4, #31
 4697 076c 0124     		movs	r4, #1
 4698 076e 04FA0CF4 		lsl	r4, r4, ip
 4699 0772 DDE7     		b	.L388
 4700              	.L389:
 4701              	.LVL492:
 4702              	.LBB674:
 4703              	.LBB675:
 4704              		.loc 3 988 0 discriminator 29
 4705              		.syntax unified
 4706              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 4707 0774 92FAA2F4 		rbit r4, r2
ARM GAS  /tmp/ccmrLUMM.s 			page 270


 4708              	@ 0 "" 2
 4709              	.LVL493:
 4710              		.thumb
 4711              		.syntax unified
 4712              	.LBE675:
 4713              	.LBE674:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
 4714              		.loc 1 2206 0 discriminator 29
 4715 0778 B4FA84F4 		clz	r4, r4
 4716 077c 0134     		adds	r4, r4, #1
 4717 077e 04F01F04 		and	r4, r4, #31
 4718 0782 04EB4402 		add	r2, r4, r4, lsl #1
 4719 0786 1E3A     		subs	r2, r2, #30
 4720 0788 1205     		lsls	r2, r2, #20
 4721 078a 42F00072 		orr	r2, r2, #33554432
 4722 078e DBE7     		b	.L390
 4723              	.LVL494:
 4724              	.L409:
 4725              	.LBB676:
 4726              	.LBB651:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4727              		.loc 2 6752 0
 4728 0790 0024     		movs	r4, #0
 4729 0792 15E7     		b	.L392
 4730              	.LVL495:
 4731              	.L410:
 4732              	.LBE651:
 4733              	.LBE676:
 4734              	.LBB677:
 4735              	.LBB654:
 4736 0794 0026     		movs	r6, #0
 4737 0796 1AE7     		b	.L393
 4738              	.LVL496:
 4739              	.L391:
 4740              	.LBE654:
 4741              	.LBE677:
 4742              	.LBB678:
 4743              	.LBB679:
 4744 0798 224C     		ldr	r4, .L446
 4745 079a A468     		ldr	r4, [r4, #8]
 4746 079c 14F0010F 		tst	r4, #1
 4747 07a0 03D0     		beq	.L411
 4748 07a2 0124     		movs	r4, #1
 4749              	.L395:
 4750              	.LVL497:
 4751              	.LBE679:
 4752              	.LBE678:
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 4753              		.loc 1 2220 0
 4754 07a4 84F00104 		eor	r4, r4, #1
 4755 07a8 15E7     		b	.L394
 4756              	.LVL498:
 4757              	.L411:
 4758              	.LBB681:
 4759              	.LBB680:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4760              		.loc 2 6752 0
ARM GAS  /tmp/ccmrLUMM.s 			page 271


 4761 07aa 0024     		movs	r4, #0
 4762 07ac FAE7     		b	.L395
 4763              	.LVL499:
 4764              	.L412:
 4765              	.LBE680:
 4766              	.LBE681:
2222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 4767              		.loc 1 2222 0
 4768 07ae 264D     		ldr	r5, .L446+36
 4769 07b0 18E7     		b	.L397
 4770              	.L440:
2226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4771              		.loc 1 2226 0 discriminator 1
 4772 07b2 14F4000F 		tst	r4, #8388608
 4773 07b6 7FF41CAF 		bne	.L398
2228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
 4774              		.loc 1 2228 0
 4775 07ba 1A4A     		ldr	r2, .L446
 4776 07bc 9142     		cmp	r1, r2
 4777 07be 7FF4C6AE 		bne	.L371
2230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 4778              		.loc 1 2230 0 discriminator 4
 4779 07c2 47F40002 		orr	r2, r7, #8388608
 4780              	.LVL500:
 4781              	.LBB682:
 4782              	.LBB683:
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4783              		.loc 2 2716 0 discriminator 4
 4784 07c6 A968     		ldr	r1, [r5, #8]
 4785 07c8 21F0E071 		bic	r1, r1, #29360128
 4786 07cc 0A43     		orrs	r2, r2, r1
 4787              	.LVL501:
 4788 07ce AA60     		str	r2, [r5, #8]
 4789              	.LVL502:
 4790              	.LBE683:
 4791              	.LBE682:
2237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             while (wait_loop_index != 0UL)
 4792              		.loc 1 2237 0 discriminator 4
 4793 07d0 1E4A     		ldr	r2, .L446+40
 4794 07d2 1268     		ldr	r2, [r2]
 4795 07d4 9209     		lsrs	r2, r2, #6
 4796 07d6 1E49     		ldr	r1, .L446+44
 4797 07d8 A1FB0212 		umull	r1, r2, r1, r2
 4798 07dc 9209     		lsrs	r2, r2, #6
 4799 07de 5200     		lsls	r2, r2, #1
 4800 07e0 0192     		str	r2, [sp, #4]
2238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             {
 4801              		.loc 1 2238 0 discriminator 4
 4802 07e2 02E0     		b	.L399
 4803              	.L400:
2240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             }
 4804              		.loc 1 2240 0
 4805 07e4 019A     		ldr	r2, [sp, #4]
 4806 07e6 013A     		subs	r2, r2, #1
 4807 07e8 0192     		str	r2, [sp, #4]
 4808              	.L399:
2238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****             {
ARM GAS  /tmp/ccmrLUMM.s 			page 272


 4809              		.loc 1 2238 0
 4810 07ea 019A     		ldr	r2, [sp, #4]
 4811 07ec 002A     		cmp	r2, #0
 4812 07ee F9D1     		bne	.L400
 4813 07f0 ADE6     		b	.L371
 4814              	.L441:
2244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         {
 4815              		.loc 1 2244 0 discriminator 1
 4816 07f2 14F0807F 		tst	r4, #16777216
 4817 07f6 7FF400AF 		bne	.L401
2246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           {
 4818              		.loc 1 2246 0
 4819 07fa 0A4A     		ldr	r2, .L446
 4820 07fc 9142     		cmp	r1, r2
 4821 07fe 7FF4A6AE 		bne	.L371
2248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****           }
 4822              		.loc 1 2248 0 discriminator 4
 4823 0802 47F08072 		orr	r2, r7, #16777216
 4824              	.LVL503:
 4825              	.LBB684:
 4826              	.LBB685:
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4827              		.loc 2 2716 0 discriminator 4
 4828 0806 A968     		ldr	r1, [r5, #8]
 4829 0808 21F0E071 		bic	r1, r1, #29360128
 4830 080c 0A43     		orrs	r2, r2, r1
 4831              	.LVL504:
 4832 080e AA60     		str	r2, [r5, #8]
 4833 0810 9DE6     		b	.L371
 4834              	.LVL505:
 4835              	.L396:
 4836              	.LBE685:
 4837              	.LBE684:
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 4838              		.loc 1 2269 0
 4839 0812 1A6E     		ldr	r2, [r3, #96]
 4840 0814 42F02002 		orr	r2, r2, #32
 4841 0818 1A66     		str	r2, [r3, #96]
 4842              	.LVL506:
2271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
 4843              		.loc 1 2271 0
 4844 081a 0120     		movs	r0, #1
 4845 081c 97E6     		b	.L371
 4846              	.LVL507:
 4847              	.L402:
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 4848              		.loc 1 1864 0
 4849 081e 0220     		movs	r0, #2
 4850 0820 98E6     		b	.L309
 4851              	.L447:
 4852 0822 00BF     		.align	2
 4853              	.L446:
 4854 0824 00600258 		.word	1476550656
 4855 0828 FFFF0F00 		.word	1048575
 4856 082c 0000FF47 		.word	1207894016
 4857 0830 00200240 		.word	1073881088
 4858 0834 00210240 		.word	1073881344
ARM GAS  /tmp/ccmrLUMM.s 			page 273


 4859 0838 00230240 		.word	1073881856
 4860 083c 000052C7 		.word	-950927360
 4861 0840 000021C3 		.word	-1021247488
 4862 0844 000084CB 		.word	-880541696
 4863 0848 00630258 		.word	1476551424
 4864 084c 00000000 		.word	SystemCoreClock
 4865 0850 632D3E05 		.word	87960931
 4866              		.cfi_endproc
 4867              	.LFE367:
 4869              		.section	.text.HAL_ADCEx_MultiModeConfigChannel,"ax",%progbits
 4870              		.align	1
 4871              		.global	HAL_ADCEx_MultiModeConfigChannel
 4872              		.syntax unified
 4873              		.thumb
 4874              		.thumb_func
 4875              		.fpu fpv5-d16
 4877              	HAL_ADCEx_MultiModeConfigChannel:
 4878              	.LFB368:
2283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable ADC multimode and configure multimode parameters
2286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Possibility to update parameters on the fly:
2287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         This function initializes multimode parameters, following
2288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         calls to this function can be used to reconfigure some parameters
2289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         of structure "ADC_MultiModeTypeDef" on the fly, without resetting
2290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         the ADCs.
2291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         The setting of these parameters is conditioned to ADC state.
2292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         For parameters constraints, see comments of structure
2293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         "ADC_MultiModeTypeDef".
2294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   To move back configuration from multimode to single mode, ADC must
2295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         be reset (using function HAL_ADC_Init() ).
2296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc Master ADC handle
2297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param multimode Structure of ADC multimode configuration
2298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *m
2301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 4879              		.loc 1 2301 0
 4880              		.cfi_startproc
 4881              		@ args = 0, pretend = 0, frame = 112
 4882              		@ frame_needed = 0, uses_anonymous_args = 0
 4883              		@ link register save eliminated.
 4884              	.LVL508:
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
2304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_HandleTypeDef  tmphadcSlave;
2305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmphadcSlave_conversion_on_going;
2306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
2309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_MULTIMODE(multimode->Mode));
2310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (multimode->Mode != ADC_MODE_INDEPENDENT)
2311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
2313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
2314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
ARM GAS  /tmp/ccmrLUMM.s 			page 274


2316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process locked */
2317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_LOCK(hadc);
 4885              		.loc 1 2317 0
 4886 0000 90F85C20 		ldrb	r2, [r0, #92]	@ zero_extendqisi2
 4887 0004 012A     		cmp	r2, #1
 4888 0006 00F0AA80 		beq	.L468
2301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 4889              		.loc 1 2301 0 discriminator 2
 4890 000a 30B4     		push	{r4, r5}
 4891              	.LCFI44:
 4892              		.cfi_def_cfa_offset 8
 4893              		.cfi_offset 4, -8
 4894              		.cfi_offset 5, -4
 4895 000c 9CB0     		sub	sp, sp, #112
 4896              	.LCFI45:
 4897              		.cfi_def_cfa_offset 120
 4898 000e 0346     		mov	r3, r0
 4899              		.loc 1 2317 0 discriminator 2
 4900 0010 0122     		movs	r2, #1
 4901 0012 80F85C20 		strb	r2, [r0, #92]
2318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 4902              		.loc 1 2319 0 discriminator 2
 4903 0016 0268     		ldr	r2, [r0]
 4904 0018 5248     		ldr	r0, .L483
 4905              	.LVL509:
 4906 001a 8242     		cmp	r2, r0
 4907 001c 43D0     		beq	.L481
 4908 001e 0020     		movs	r0, #0
 4909 0020 0090     		str	r0, [sp]
 4910              	.L451:
2320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (tmphadcSlave.Instance == NULL)
 4911              		.loc 1 2321 0
 4912 0022 0098     		ldr	r0, [sp]
 4913 0024 0028     		cmp	r0, #0
 4914 0026 42D0     		beq	.L482
 4915              	.LVL510:
 4916              	.LBB686:
 4917              	.LBB687:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4918              		.loc 2 6884 0
 4919 0028 8068     		ldr	r0, [r0, #8]
 4920              	.LVL511:
 4921 002a 10F0040F 		tst	r0, #4
 4922 002e 47D0     		beq	.L469
 4923 0030 0124     		movs	r4, #1
 4924              	.L453:
 4925              	.LVL512:
 4926              	.LBE687:
 4927              	.LBE686:
 4928              	.LBB689:
 4929              	.LBB690:
 4930 0032 9068     		ldr	r0, [r2, #8]
 4931 0034 10F0040F 		tst	r0, #4
 4932 0038 40F08280 		bne	.L454
 4933              	.LVL513:
ARM GAS  /tmp/ccmrLUMM.s 			page 275


 4934              	.LBE690:
 4935              	.LBE689:
2322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
2324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
2325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Process unlocked */
2327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     __HAL_UNLOCK(hadc);
2328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     return HAL_ERROR;
2330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters update conditioned to ADC state:                              */
2333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* conversion on going on regular group:                                    */
2335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /*  - Multimode DATA Format configuration                                   */
2336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
2337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmphadcSlave_conversion_on_going == 0UL))
 4936              		.loc 1 2338 0
 4937 003c 002C     		cmp	r4, #0
 4938 003e 7FD1     		bne	.L454
2339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Pointer to the common control register */
2341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 4939              		.loc 1 2341 0
 4940 0040 484C     		ldr	r4, .L483
 4941 0042 4948     		ldr	r0, .L483+4
 4942 0044 8242     		cmp	r2, r0
 4943 0046 18BF     		it	ne
 4944 0048 A242     		cmpne	r2, r4
 4945 004a 3BD1     		bne	.L470
 4946 004c 00F50070 		add	r0, r0, #512
 4947              	.L455:
 4948              	.LVL514:
2342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* If multimode is selected, configure all multimode parameters.          */
2344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Otherwise, reset multimode parameters (can be used in case of          */
2345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* transition from multimode to independent mode).                        */
2346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     if (multimode->Mode != ADC_MODE_INDEPENDENT)
 4949              		.loc 1 2346 0 discriminator 4
 4950 0050 0A68     		ldr	r2, [r1]
 4951 0052 002A     		cmp	r2, #0
 4952 0054 47D0     		beq	.L456
2347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 4953              		.loc 1 2348 0
 4954 0056 8268     		ldr	r2, [r0, #8]
 4955 0058 22F44042 		bic	r2, r2, #49152
 4956 005c 4C68     		ldr	r4, [r1, #4]
 4957 005e 2243     		orrs	r2, r2, r4
 4958 0060 8260     		str	r2, [r0, #8]
2349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:              */
2351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                            */
2352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode delay                                                     */
2353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    Note: Delay range depends on selected resolution:                   */
ARM GAS  /tmp/ccmrLUMM.s 			page 276


2354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 9 clock cycles for 16 bits                              */
2355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 9 clock cycles for 14 bits,                             */
2356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 8 clock cycles for 12 bits                              */
2357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
2358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    If a higher delay is selected, it will be clipped to maximum delay  */
2359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*    range                                                               */
2360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 4959              		.loc 1 2361 0
 4960 0062 1A68     		ldr	r2, [r3]
 4961 0064 3F4D     		ldr	r5, .L483
 4962 0066 404C     		ldr	r4, .L483+4
 4963 0068 A242     		cmp	r2, r4
 4964 006a 18BF     		it	ne
 4965 006c AA42     		cmpne	r2, r5
 4966 006e 2FD1     		bne	.L457
 4967              	.LVL515:
 4968              	.LBB691:
 4969              	.LBB692:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4970              		.loc 2 6752 0
 4971 0070 AA68     		ldr	r2, [r5, #8]
 4972 0072 12F0010F 		tst	r2, #1
 4973 0076 27D0     		beq	.L471
 4974 0078 0124     		movs	r4, #1
 4975              	.L458:
 4976              	.LVL516:
 4977              	.LBE692:
 4978              	.LBE691:
 4979              	.LBB694:
 4980              	.LBB695:
 4981 007a 3B4A     		ldr	r2, .L483+4
 4982 007c 9268     		ldr	r2, [r2, #8]
 4983 007e 12F0010F 		tst	r2, #1
 4984 0082 23D0     		beq	.L472
 4985 0084 0122     		movs	r2, #1
 4986              	.L459:
 4987              	.LVL517:
 4988              	.LBE695:
 4989              	.LBE694:
 4990              		.loc 1 2361 0
 4991 0086 2243     		orrs	r2, r2, r4
 4992 0088 0CBF     		ite	eq
 4993 008a 0122     		moveq	r2, #1
 4994 008c 0022     		movne	r2, #0
 4995              	.L460:
 4996              		.loc 1 2361 0 is_stmt 0 discriminator 4
 4997 008e 002A     		cmp	r2, #0
 4998 0090 61D0     		beq	.L474
2362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         MODIFY_REG(tmpADC_Common->CCR,
 4999              		.loc 1 2363 0 is_stmt 1
 5000 0092 8468     		ldr	r4, [r0, #8]
 5001 0094 354A     		ldr	r2, .L483+8
 5002 0096 2240     		ands	r2, r2, r4
 5003 0098 0C68     		ldr	r4, [r1]
 5004 009a 8968     		ldr	r1, [r1, #8]
ARM GAS  /tmp/ccmrLUMM.s 			page 277


 5005              	.LVL518:
 5006 009c 2143     		orrs	r1, r1, r4
 5007 009e 0A43     		orrs	r2, r2, r1
 5008 00a0 8260     		str	r2, [r0, #8]
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 5009              		.loc 1 2302 0
 5010 00a2 0020     		movs	r0, #0
 5011              	.LVL519:
 5012 00a4 51E0     		b	.L462
 5013              	.LVL520:
 5014              	.L481:
2319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 5015              		.loc 1 2319 0 discriminator 1
 5016 00a6 00F58070 		add	r0, r0, #256
 5017 00aa 0090     		str	r0, [sp]
 5018 00ac B9E7     		b	.L451
 5019              	.L482:
2324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 5020              		.loc 1 2324 0
 5021 00ae 1A6E     		ldr	r2, [r3, #96]
 5022 00b0 42F02002 		orr	r2, r2, #32
 5023 00b4 1A66     		str	r2, [r3, #96]
2327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 5024              		.loc 1 2327 0
 5025 00b6 0022     		movs	r2, #0
 5026 00b8 83F85C20 		strb	r2, [r3, #92]
2329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
 5027              		.loc 1 2329 0
 5028 00bc 0120     		movs	r0, #1
 5029 00be 47E0     		b	.L449
 5030              	.LVL521:
 5031              	.L469:
 5032              	.LBB697:
 5033              	.LBB688:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5034              		.loc 2 6884 0
 5035 00c0 0024     		movs	r4, #0
 5036 00c2 B6E7     		b	.L453
 5037              	.LVL522:
 5038              	.L470:
 5039              	.LBE688:
 5040              	.LBE697:
2341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 5041              		.loc 1 2341 0
 5042 00c4 2A48     		ldr	r0, .L483+12
 5043 00c6 C3E7     		b	.L455
 5044              	.LVL523:
 5045              	.L471:
 5046              	.LBB698:
 5047              	.LBB693:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5048              		.loc 2 6752 0
 5049 00c8 0024     		movs	r4, #0
 5050 00ca D6E7     		b	.L458
 5051              	.LVL524:
 5052              	.L472:
 5053              	.LBE693:
ARM GAS  /tmp/ccmrLUMM.s 			page 278


 5054              	.LBE698:
 5055              	.LBB699:
 5056              	.LBB696:
 5057 00cc 0022     		movs	r2, #0
 5058 00ce DAE7     		b	.L459
 5059              	.LVL525:
 5060              	.L457:
 5061              	.LBE696:
 5062              	.LBE699:
 5063              	.LBB700:
 5064              	.LBB701:
 5065 00d0 284A     		ldr	r2, .L483+16
 5066 00d2 9268     		ldr	r2, [r2, #8]
 5067 00d4 12F0010F 		tst	r2, #1
 5068 00d8 03D0     		beq	.L473
 5069 00da 0122     		movs	r2, #1
 5070              	.L461:
 5071              	.LVL526:
 5072              	.LBE701:
 5073              	.LBE700:
2361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 5074              		.loc 1 2361 0
 5075 00dc 82F00102 		eor	r2, r2, #1
 5076 00e0 D5E7     		b	.L460
 5077              	.LVL527:
 5078              	.L473:
 5079              	.LBB703:
 5080              	.LBB702:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5081              		.loc 2 6752 0
 5082 00e2 0022     		movs	r2, #0
 5083 00e4 FAE7     		b	.L461
 5084              	.LVL528:
 5085              	.L456:
 5086              	.LBE702:
 5087              	.LBE703:
2364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    ADC_CCR_DUAL |
2365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    ADC_CCR_DELAY,
2366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    multimode->Mode |
2367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                    multimode->TwoSamplingDelay
2368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****                   );
2369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     else /* ADC_MODE_INDEPENDENT */
2372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     {
2373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 5088              		.loc 1 2373 0
 5089 00e6 8168     		ldr	r1, [r0, #8]
 5090              	.LVL529:
 5091 00e8 21F44041 		bic	r1, r1, #49152
 5092 00ec 8160     		str	r1, [r0, #8]
2374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /* Parameters that can be updated only when ADC is disabled:                */
2376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode mode selection                                              */
2377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       /*  - Multimode delay                                                       */
2378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 5093              		.loc 1 2378 0
ARM GAS  /tmp/ccmrLUMM.s 			page 279


 5094 00ee 1968     		ldr	r1, [r3]
 5095 00f0 1C4D     		ldr	r5, .L483
 5096 00f2 1D4C     		ldr	r4, .L483+4
 5097 00f4 A142     		cmp	r1, r4
 5098 00f6 18BF     		it	ne
 5099 00f8 A942     		cmpne	r1, r5
 5100 00fa 17D1     		bne	.L463
 5101              	.LVL530:
 5102              	.LBB704:
 5103              	.LBB705:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5104              		.loc 2 6752 0
 5105 00fc A968     		ldr	r1, [r5, #8]
 5106 00fe 11F0010F 		tst	r1, #1
 5107 0102 11D0     		beq	.L475
 5108 0104 0124     		movs	r4, #1
 5109              	.L464:
 5110              	.LVL531:
 5111              	.LBE705:
 5112              	.LBE704:
 5113              	.LBB707:
 5114              	.LBB708:
 5115 0106 1849     		ldr	r1, .L483+4
 5116 0108 8968     		ldr	r1, [r1, #8]
 5117 010a 11F0010F 		tst	r1, #1
 5118 010e 00D0     		beq	.L465
 5119 0110 0122     		movs	r2, #1
 5120              	.L465:
 5121              	.LVL532:
 5122              	.LBE708:
 5123              	.LBE707:
 5124              		.loc 1 2378 0
 5125 0112 2243     		orrs	r2, r2, r4
 5126 0114 0CBF     		ite	eq
 5127 0116 0122     		moveq	r2, #1
 5128 0118 0022     		movne	r2, #0
 5129              	.L466:
 5130              		.loc 1 2378 0 is_stmt 0 discriminator 4
 5131 011a F2B1     		cbz	r2, .L476
2379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
2380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****         CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 5132              		.loc 1 2380 0 is_stmt 1
 5133 011c 8168     		ldr	r1, [r0, #8]
 5134 011e 134A     		ldr	r2, .L483+8
 5135 0120 0A40     		ands	r2, r2, r1
 5136 0122 8260     		str	r2, [r0, #8]
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 5137              		.loc 1 2302 0
 5138 0124 0020     		movs	r0, #0
 5139              	.LVL533:
 5140 0126 10E0     		b	.L462
 5141              	.LVL534:
 5142              	.L475:
 5143              	.LBB709:
 5144              	.LBB706:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5145              		.loc 2 6752 0
ARM GAS  /tmp/ccmrLUMM.s 			page 280


 5146 0128 1446     		mov	r4, r2
 5147 012a ECE7     		b	.L464
 5148              	.LVL535:
 5149              	.L463:
 5150              	.LBE706:
 5151              	.LBE709:
 5152              	.LBB710:
 5153              	.LBB711:
 5154 012c 1149     		ldr	r1, .L483+16
 5155 012e 8968     		ldr	r1, [r1, #8]
 5156 0130 11F0010F 		tst	r1, #1
 5157 0134 00D0     		beq	.L467
 5158 0136 0122     		movs	r2, #1
 5159              	.L467:
 5160              	.LVL536:
 5161              	.LBE711:
 5162              	.LBE710:
2378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       {
 5163              		.loc 1 2378 0
 5164 0138 B2FA82F2 		clz	r2, r2
 5165 013c 5209     		lsrs	r2, r2, #5
 5166 013e ECE7     		b	.L466
 5167              	.LVL537:
 5168              	.L454:
2381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       }
2382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     }
2383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* If one of the ADC sharing the same common group is enabled, no update    */
2385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* could be done on neither of the multimode structure parameters.          */
2386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update ADC state machine to error */
2389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 5169              		.loc 1 2389 0
 5170 0140 1A6E     		ldr	r2, [r3, #96]
 5171 0142 42F02002 		orr	r2, r2, #32
 5172 0146 1A66     		str	r2, [r3, #96]
 5173              	.LVL538:
2390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 5174              		.loc 1 2391 0
 5175 0148 0120     		movs	r0, #1
 5176              	.LVL539:
 5177              	.L462:
2392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Process unlocked */
2395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   __HAL_UNLOCK(hadc);
 5178              		.loc 1 2395 0
 5179 014a 0022     		movs	r2, #0
 5180 014c 83F85C20 		strb	r2, [r3, #92]
 5181              	.LVL540:
 5182              	.L449:
2396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Return function status */
2398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
2399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
ARM GAS  /tmp/ccmrLUMM.s 			page 281


 5183              		.loc 1 2399 0
 5184 0150 1CB0     		add	sp, sp, #112
 5185              	.LCFI46:
 5186              		.cfi_remember_state
 5187              		.cfi_def_cfa_offset 8
 5188              		@ sp needed
 5189 0152 30BC     		pop	{r4, r5}
 5190              	.LCFI47:
 5191              		.cfi_restore 5
 5192              		.cfi_restore 4
 5193              		.cfi_def_cfa_offset 0
 5194 0154 7047     		bx	lr
 5195              	.LVL541:
 5196              	.L474:
 5197              	.LCFI48:
 5198              		.cfi_restore_state
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   ADC_Common_TypeDef *tmpADC_Common;
 5199              		.loc 1 2302 0
 5200 0156 0020     		movs	r0, #0
 5201              	.LVL542:
 5202 0158 F7E7     		b	.L462
 5203              	.LVL543:
 5204              	.L476:
 5205 015a 0020     		movs	r0, #0
 5206              	.LVL544:
 5207 015c F5E7     		b	.L462
 5208              	.LVL545:
 5209              	.L468:
 5210              	.LCFI49:
 5211              		.cfi_def_cfa_offset 0
 5212              		.cfi_restore 4
 5213              		.cfi_restore 5
2317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
 5214              		.loc 1 2317 0
 5215 015e 0220     		movs	r0, #2
 5216              	.LVL546:
 5217              		.loc 1 2399 0
 5218 0160 7047     		bx	lr
 5219              	.L484:
 5220 0162 00BF     		.align	2
 5221              	.L483:
 5222 0164 00200240 		.word	1073881088
 5223 0168 00210240 		.word	1073881344
 5224 016c E0F0FFFF 		.word	-3872
 5225 0170 00630258 		.word	1476551424
 5226 0174 00600258 		.word	1476550656
 5227              		.cfi_endproc
 5228              	.LFE368:
 5230              		.section	.text.HAL_ADCEx_EnableInjectedQueue,"ax",%progbits
 5231              		.align	1
 5232              		.global	HAL_ADCEx_EnableInjectedQueue
 5233              		.syntax unified
 5234              		.thumb
 5235              		.thumb_func
 5236              		.fpu fpv5-d16
 5238              	HAL_ADCEx_EnableInjectedQueue:
 5239              	.LFB369:
ARM GAS  /tmp/ccmrLUMM.s 			page 282


2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enable Injected Queue
2403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This function resets CFGR register JQDIS bit in order to enable the
2404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Injected Queue. JQDIS can be written only when ADSTART and JDSTART
2405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         are both equal to 0 to ensure that no regular nor injected
2406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversion is ongoing.
2407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_EnableInjectedQueue(ADC_HandleTypeDef *hadc)
2411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 5240              		.loc 1 2411 0
 5241              		.cfi_startproc
 5242              		@ args = 0, pretend = 0, frame = 0
 5243              		@ frame_needed = 0, uses_anonymous_args = 0
 5244              		@ link register save eliminated.
 5245              	.LVL547:
2412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 5246              		.loc 1 2419 0
 5247 0000 0368     		ldr	r3, [r0]
 5248              	.LVL548:
 5249              	.LBB712:
 5250              	.LBB713:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5251              		.loc 2 6884 0
 5252 0002 9A68     		ldr	r2, [r3, #8]
 5253 0004 12F0040F 		tst	r2, #4
 5254 0008 11D0     		beq	.L489
 5255 000a 0122     		movs	r2, #1
 5256              	.L486:
 5257              	.LVL549:
 5258              	.LBE713:
 5259              	.LBE712:
 5260              	.LBB715:
 5261              	.LBB716:
 5262              		.loc 2 7079 0
 5263 000c 9968     		ldr	r1, [r3, #8]
 5264 000e 11F0080F 		tst	r1, #8
 5265 0012 0ED0     		beq	.L490
 5266 0014 0121     		movs	r1, #1
 5267              	.L487:
 5268              	.LVL550:
 5269              	.LBE716:
 5270              	.LBE715:
2420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
2421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameter can be set only if no conversion is on-going */
2423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 5271              		.loc 1 2423 0
ARM GAS  /tmp/ccmrLUMM.s 			page 283


 5272 0016 0A43     		orrs	r2, r1, r2
 5273 0018 0DD1     		bne	.L491
2424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
2425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
2426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 5274              		.loc 1 2427 0
 5275 001a DA68     		ldr	r2, [r3, #12]
 5276 001c 22F00042 		bic	r2, r2, #-2147483648
 5277 0020 DA60     		str	r2, [r3, #12]
2428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     /* Update state, clear previous result related to injected queue overflow */
2430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 5278              		.loc 1 2430 0
 5279 0022 036E     		ldr	r3, [r0, #96]
 5280 0024 23F48043 		bic	r3, r3, #16384
 5281 0028 0366     		str	r3, [r0, #96]
 5282              	.LVL551:
2431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 5283              		.loc 1 2432 0
 5284 002a 0020     		movs	r0, #0
 5285              	.LVL552:
 5286 002c 7047     		bx	lr
 5287              	.LVL553:
 5288              	.L489:
 5289              	.LBB718:
 5290              	.LBB714:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5291              		.loc 2 6884 0
 5292 002e 0022     		movs	r2, #0
 5293 0030 ECE7     		b	.L486
 5294              	.LVL554:
 5295              	.L490:
 5296              	.LBE714:
 5297              	.LBE718:
 5298              	.LBB719:
 5299              	.LBB717:
 5300              		.loc 2 7079 0
 5301 0032 0021     		movs	r1, #0
 5302 0034 EFE7     		b	.L487
 5303              	.LVL555:
 5304              	.L491:
 5305              	.LBE717:
 5306              	.LBE719:
2433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 5307              		.loc 1 2436 0
 5308 0036 0120     		movs	r0, #1
 5309              	.LVL556:
2437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
2440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 5310              		.loc 1 2440 0
ARM GAS  /tmp/ccmrLUMM.s 			page 284


 5311 0038 7047     		bx	lr
 5312              		.cfi_endproc
 5313              	.LFE369:
 5315              		.section	.text.HAL_ADCEx_DisableInjectedQueue,"ax",%progbits
 5316              		.align	1
 5317              		.global	HAL_ADCEx_DisableInjectedQueue
 5318              		.syntax unified
 5319              		.thumb
 5320              		.thumb_func
 5321              		.fpu fpv5-d16
 5323              	HAL_ADCEx_DisableInjectedQueue:
 5324              	.LFB370:
2441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Disable Injected Queue
2444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This function sets CFGR register JQDIS bit in order to disable the
2445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         Injected Queue. JQDIS can be written only when ADSTART and JDSTART
2446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         are both equal to 0 to ensure that no regular nor injected
2447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         conversion is ongoing.
2448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_DisableInjectedQueue(ADC_HandleTypeDef *hadc)
2452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 5325              		.loc 1 2452 0
 5326              		.cfi_startproc
 5327              		@ args = 0, pretend = 0, frame = 0
 5328              		@ frame_needed = 0, uses_anonymous_args = 0
 5329              		@ link register save eliminated.
 5330              	.LVL557:
2453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 5331              		.loc 1 2460 0
 5332 0000 0368     		ldr	r3, [r0]
 5333              	.LVL558:
 5334              	.LBB720:
 5335              	.LBB721:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5336              		.loc 2 6884 0
 5337 0002 9A68     		ldr	r2, [r3, #8]
 5338 0004 12F0040F 		tst	r2, #4
 5339 0008 0FD0     		beq	.L496
 5340 000a 0122     		movs	r2, #1
 5341              	.L493:
 5342              	.LVL559:
 5343              	.LBE721:
 5344              	.LBE720:
 5345              	.LBB723:
 5346              	.LBB724:
 5347              		.loc 2 7079 0
 5348 000c 9968     		ldr	r1, [r3, #8]
ARM GAS  /tmp/ccmrLUMM.s 			page 285


 5349 000e 11F0080F 		tst	r1, #8
 5350 0012 0CD0     		beq	.L497
 5351 0014 0121     		movs	r1, #1
 5352              	.L494:
 5353              	.LVL560:
 5354              	.LBE724:
 5355              	.LBE723:
2461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
2462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Parameter can be set only if no conversion is on-going */
2464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 5356              		.loc 1 2464 0
 5357 0016 0A43     		orrs	r2, r1, r2
 5358 0018 0BD1     		bne	.L498
 5359              	.LVL561:
 5360              	.LBB726:
 5361              	.LBB727:
4932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5362              		.loc 2 4932 0
 5363 001a D968     		ldr	r1, [r3, #12]
 5364 001c 064A     		ldr	r2, .L499
 5365 001e 0A40     		ands	r2, r2, r1
 5366 0020 42F00042 		orr	r2, r2, #-2147483648
 5367 0024 DA60     		str	r2, [r3, #12]
 5368              	.LVL562:
 5369              	.LBE727:
 5370              	.LBE726:
2465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
2466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****      )
2467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_INJ_SetQueueMode(hadc->Instance, LL_ADC_INJ_QUEUE_DISABLE);
2469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 5371              		.loc 1 2469 0
 5372 0026 0020     		movs	r0, #0
 5373              	.LVL563:
 5374 0028 7047     		bx	lr
 5375              	.LVL564:
 5376              	.L496:
 5377              	.LBB728:
 5378              	.LBB722:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5379              		.loc 2 6884 0
 5380 002a 0022     		movs	r2, #0
 5381 002c EEE7     		b	.L493
 5382              	.LVL565:
 5383              	.L497:
 5384              	.LBE722:
 5385              	.LBE728:
 5386              	.LBB729:
 5387              	.LBB725:
 5388              		.loc 2 7079 0
 5389 002e 0021     		movs	r1, #0
 5390 0030 F1E7     		b	.L494
 5391              	.LVL566:
 5392              	.L498:
 5393              	.LBE725:
 5394              	.LBE729:
ARM GAS  /tmp/ccmrLUMM.s 			page 286


2470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 5395              		.loc 1 2473 0
 5396 0032 0120     		movs	r0, #1
 5397              	.LVL567:
2474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
2477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 5398              		.loc 1 2477 0
 5399 0034 7047     		bx	lr
 5400              	.L500:
 5401 0036 00BF     		.align	2
 5402              	.L499:
 5403 0038 FFFFDF7F 		.word	2145386495
 5404              		.cfi_endproc
 5405              	.LFE370:
 5407              		.section	.text.HAL_ADCEx_DisableVoltageRegulator,"ax",%progbits
 5408              		.align	1
 5409              		.global	HAL_ADCEx_DisableVoltageRegulator
 5410              		.syntax unified
 5411              		.thumb
 5412              		.thumb_func
 5413              		.fpu fpv5-d16
 5415              	HAL_ADCEx_DisableVoltageRegulator:
 5416              	.LFB371:
2478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Disable ADC voltage regulator.
2481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Disabling voltage regulator allows to save power. This operation can
2482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         be carried out only when ADC is disabled.
2483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   To enable again the voltage regulator, the user is expected to
2484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADC_Init() API.
2485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_DisableVoltageRegulator(ADC_HandleTypeDef *hadc)
2489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 5417              		.loc 1 2489 0
 5418              		.cfi_startproc
 5419              		@ args = 0, pretend = 0, frame = 0
 5420              		@ frame_needed = 0, uses_anonymous_args = 0
 5421              		@ link register save eliminated.
 5422              	.LVL568:
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
2496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 5423              		.loc 1 2496 0
 5424 0000 0368     		ldr	r3, [r0]
 5425              	.LVL569:
 5426              	.LBB730:
ARM GAS  /tmp/ccmrLUMM.s 			page 287


 5427              	.LBB731:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5428              		.loc 2 6752 0
 5429 0002 9A68     		ldr	r2, [r3, #8]
 5430 0004 12F0010F 		tst	r2, #1
 5431 0008 05D1     		bne	.L503
 5432              	.LVL570:
 5433              	.LBE731:
 5434              	.LBE730:
 5435              	.LBB732:
 5436              	.LBB733:
6681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5437              		.loc 2 6681 0
 5438 000a 9968     		ldr	r1, [r3, #8]
 5439 000c 034A     		ldr	r2, .L504
 5440 000e 0A40     		ands	r2, r2, r1
 5441 0010 9A60     		str	r2, [r3, #8]
 5442              	.LVL571:
 5443              	.LBE733:
 5444              	.LBE732:
2497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_DisableInternalRegulator(hadc->Instance);
2499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 5445              		.loc 1 2499 0
 5446 0012 0020     		movs	r0, #0
 5447              	.LVL572:
 5448 0014 7047     		bx	lr
 5449              	.LVL573:
 5450              	.L503:
2500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 5451              		.loc 1 2503 0
 5452 0016 0120     		movs	r0, #1
 5453              	.LVL574:
2504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
2507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 5454              		.loc 1 2507 0
 5455 0018 7047     		bx	lr
 5456              	.L505:
 5457 001a 00BF     		.align	2
 5458              	.L504:
 5459 001c C0FFFF6F 		.word	1879048128
 5460              		.cfi_endproc
 5461              	.LFE371:
 5463              		.section	.text.HAL_ADCEx_EnterADCDeepPowerDownMode,"ax",%progbits
 5464              		.align	1
 5465              		.global	HAL_ADCEx_EnterADCDeepPowerDownMode
 5466              		.syntax unified
 5467              		.thumb
 5468              		.thumb_func
 5469              		.fpu fpv5-d16
 5471              	HAL_ADCEx_EnterADCDeepPowerDownMode:
 5472              	.LFB372:
ARM GAS  /tmp/ccmrLUMM.s 			page 288


2508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** /**
2510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @brief  Enter ADC deep-power-down mode
2511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   This mode is achieved in setting DEEPPWD bit and allows to save power
2512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         in reducing leakage currents. It is particularly interesting before
2513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         entering stop modes.
2514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   Setting DEEPPWD automatically clears ADVREGEN bit and disables the
2515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         ADC voltage regulator. This means that this API encompasses
2516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         HAL_ADCEx_DisableVoltageRegulator(). Additionally, the internal
2517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         calibration is lost.
2518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @note   To exit the ADC deep-power-down mode, the user is expected to
2519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         resort to HAL_ADC_Init() API as well as to relaunch a calibration
2520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         with HAL_ADCEx_Calibration_Start() API or to re-apply a previously
2521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   *         saved calibration factor.
2522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @param hadc ADC handle
2523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   * @retval HAL status
2524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   */
2525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** HAL_StatusTypeDef HAL_ADCEx_EnterADCDeepPowerDownMode(ADC_HandleTypeDef *hadc)
2526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** {
 5473              		.loc 1 2526 0
 5474              		.cfi_startproc
 5475              		@ args = 0, pretend = 0, frame = 0
 5476              		@ frame_needed = 0, uses_anonymous_args = 0
 5477              		@ link register save eliminated.
 5478              	.LVL575:
2527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   HAL_StatusTypeDef tmp_hal_status;
2528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Check the parameters */
2530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   /* Setting of this feature is conditioned to ADC state: ADC must be ADC disabled */
2533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 5479              		.loc 1 2533 0
 5480 0000 0268     		ldr	r2, [r0]
 5481              	.LVL576:
 5482              	.LBB734:
 5483              	.LBB735:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5484              		.loc 2 6752 0
 5485 0002 9368     		ldr	r3, [r2, #8]
 5486 0004 13F0010F 		tst	r3, #1
 5487 0008 07D1     		bne	.L508
 5488              	.LVL577:
 5489              	.LBE735:
 5490              	.LBE734:
 5491              	.LBB736:
 5492              	.LBB737:
6609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 5493              		.loc 2 6609 0
 5494 000a 9168     		ldr	r1, [r2, #8]
 5495 000c 044B     		ldr	r3, .L509
 5496 000e 0B40     		ands	r3, r3, r1
 5497 0010 43F00053 		orr	r3, r3, #536870912
 5498 0014 9360     		str	r3, [r2, #8]
 5499              	.LVL578:
 5500              	.LBE737:
 5501              	.LBE736:
ARM GAS  /tmp/ccmrLUMM.s 			page 289


2534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     LL_ADC_EnableDeepPowerDown(hadc->Instance);
2536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_OK;
 5502              		.loc 1 2536 0
 5503 0016 0020     		movs	r0, #0
 5504              	.LVL579:
 5505 0018 7047     		bx	lr
 5506              	.LVL580:
 5507              	.L508:
2537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   else
2539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   {
2540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****     tmp_hal_status = HAL_ERROR;
 5508              		.loc 1 2540 0
 5509 001a 0120     		movs	r0, #1
 5510              	.LVL581:
2541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   }
2542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** 
2543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c ****   return tmp_hal_status;
2544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc_ex.c **** }
 5511              		.loc 1 2544 0
 5512 001c 7047     		bx	lr
 5513              	.L510:
 5514 001e 00BF     		.align	2
 5515              	.L509:
 5516 0020 C0FFFF5F 		.word	1610612672
 5517              		.cfi_endproc
 5518              	.LFE372:
 5520              		.text
 5521              	.Letext0:
 5522              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 5523              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 5524              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 5525              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 5526              		.file 8 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h723xx.h"
 5527              		.file 9 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 5528              		.file 10 "/usr/include/newlib/sys/lock.h"
 5529              		.file 11 "/usr/include/newlib/sys/_types.h"
 5530              		.file 12 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 5531              		.file 13 "/usr/include/newlib/sys/reent.h"
 5532              		.file 14 "/usr/include/newlib/math.h"
 5533              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 5534              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 5535              		.file 17 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 5536              		.file 18 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
 5537              		.file 19 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 5538              		.file 20 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 5539              		.file 21 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
ARM GAS  /tmp/ccmrLUMM.s 			page 290


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_adc_ex.c
     /tmp/ccmrLUMM.s:17     .text.HAL_ADCEx_Calibration_Start:0000000000000000 $t
     /tmp/ccmrLUMM.s:24     .text.HAL_ADCEx_Calibration_Start:0000000000000000 HAL_ADCEx_Calibration_Start
     /tmp/ccmrLUMM.s:161    .text.HAL_ADCEx_Calibration_Start:00000000000000a0 $d
     /tmp/ccmrLUMM.s:168    .text.HAL_ADCEx_Calibration_GetValue:0000000000000000 $t
     /tmp/ccmrLUMM.s:175    .text.HAL_ADCEx_Calibration_GetValue:0000000000000000 HAL_ADCEx_Calibration_GetValue
     /tmp/ccmrLUMM.s:206    .text.HAL_ADCEx_LinearCalibration_GetValue:0000000000000000 $t
     /tmp/ccmrLUMM.s:213    .text.HAL_ADCEx_LinearCalibration_GetValue:0000000000000000 HAL_ADCEx_LinearCalibration_GetValue
     /tmp/ccmrLUMM.s:362    .text.HAL_ADCEx_LinearCalibration_GetValue:000000000000008c $d
     /tmp/ccmrLUMM.s:368    .text.HAL_ADCEx_Calibration_SetValue:0000000000000000 $t
     /tmp/ccmrLUMM.s:375    .text.HAL_ADCEx_Calibration_SetValue:0000000000000000 HAL_ADCEx_Calibration_SetValue
     /tmp/ccmrLUMM.s:515    .text.HAL_ADCEx_LinearCalibration_SetValue:0000000000000000 $t
     /tmp/ccmrLUMM.s:522    .text.HAL_ADCEx_LinearCalibration_SetValue:0000000000000000 HAL_ADCEx_LinearCalibration_SetValue
     /tmp/ccmrLUMM.s:823    .text.HAL_ADCEx_LinearCalibration_SetValue:000000000000015c $d
     /tmp/ccmrLUMM.s:832    .text.HAL_ADCEx_LinearCalibration_FactorLoad:0000000000000000 $t
     /tmp/ccmrLUMM.s:839    .text.HAL_ADCEx_LinearCalibration_FactorLoad:0000000000000000 HAL_ADCEx_LinearCalibration_FactorLoad
     /tmp/ccmrLUMM.s:917    .text.HAL_ADCEx_LinearCalibration_FactorLoad:000000000000004c $d
     /tmp/ccmrLUMM.s:923    .text.HAL_ADCEx_InjectedStart:0000000000000000 $t
     /tmp/ccmrLUMM.s:930    .text.HAL_ADCEx_InjectedStart:0000000000000000 HAL_ADCEx_InjectedStart
     /tmp/ccmrLUMM.s:1136   .text.HAL_ADCEx_InjectedStart:00000000000000fc $d
     /tmp/ccmrLUMM.s:1145   .text.HAL_ADCEx_InjectedStop:0000000000000000 $t
     /tmp/ccmrLUMM.s:1152   .text.HAL_ADCEx_InjectedStop:0000000000000000 HAL_ADCEx_InjectedStop
     /tmp/ccmrLUMM.s:1238   .text.HAL_ADCEx_InjectedStop:0000000000000058 $d
     /tmp/ccmrLUMM.s:1243   .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 $t
     /tmp/ccmrLUMM.s:1250   .text.HAL_ADCEx_InjectedPollForConversion:0000000000000000 HAL_ADCEx_InjectedPollForConversion
     /tmp/ccmrLUMM.s:1480   .text.HAL_ADCEx_InjectedPollForConversion:0000000000000108 $d
     /tmp/ccmrLUMM.s:1488   .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 $t
     /tmp/ccmrLUMM.s:1495   .text.HAL_ADCEx_InjectedStart_IT:0000000000000000 HAL_ADCEx_InjectedStart_IT
     /tmp/ccmrLUMM.s:1739   .text.HAL_ADCEx_InjectedStart_IT:0000000000000140 $d
     /tmp/ccmrLUMM.s:1748   .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 $t
     /tmp/ccmrLUMM.s:1755   .text.HAL_ADCEx_InjectedStop_IT:0000000000000000 HAL_ADCEx_InjectedStop_IT
     /tmp/ccmrLUMM.s:1846   .text.HAL_ADCEx_InjectedStop_IT:0000000000000064 $d
     /tmp/ccmrLUMM.s:1851   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 $t
     /tmp/ccmrLUMM.s:1858   .text.HAL_ADCEx_MultiModeStart_DMA:0000000000000000 HAL_ADCEx_MultiModeStart_DMA
     /tmp/ccmrLUMM.s:2050   .text.HAL_ADCEx_MultiModeStart_DMA:00000000000000e4 $d
     /tmp/ccmrLUMM.s:2061   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 $t
     /tmp/ccmrLUMM.s:2068   .text.HAL_ADCEx_MultiModeStop_DMA:0000000000000000 HAL_ADCEx_MultiModeStop_DMA
     /tmp/ccmrLUMM.s:2302   .text.HAL_ADCEx_MultiModeStop_DMA:00000000000000fc $d
     /tmp/ccmrLUMM.s:2308   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 $t
     /tmp/ccmrLUMM.s:2315   .text.HAL_ADCEx_MultiModeGetValue:0000000000000000 HAL_ADCEx_MultiModeGetValue
     /tmp/ccmrLUMM.s:2347   .text.HAL_ADCEx_MultiModeGetValue:0000000000000018 $d
     /tmp/ccmrLUMM.s:2355   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 $t
     /tmp/ccmrLUMM.s:2362   .text.HAL_ADCEx_InjectedGetValue:0000000000000000 HAL_ADCEx_InjectedGetValue
     /tmp/ccmrLUMM.s:2414   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 $t
     /tmp/ccmrLUMM.s:2421   .text.HAL_ADCEx_InjectedConvCpltCallback:0000000000000000 HAL_ADCEx_InjectedConvCpltCallback
     /tmp/ccmrLUMM.s:2435   .text.HAL_ADCEx_InjectedQueueOverflowCallback:0000000000000000 $t
     /tmp/ccmrLUMM.s:2442   .text.HAL_ADCEx_InjectedQueueOverflowCallback:0000000000000000 HAL_ADCEx_InjectedQueueOverflowCallback
     /tmp/ccmrLUMM.s:2456   .text.HAL_ADCEx_LevelOutOfWindow2Callback:0000000000000000 $t
     /tmp/ccmrLUMM.s:2463   .text.HAL_ADCEx_LevelOutOfWindow2Callback:0000000000000000 HAL_ADCEx_LevelOutOfWindow2Callback
     /tmp/ccmrLUMM.s:2477   .text.HAL_ADCEx_LevelOutOfWindow3Callback:0000000000000000 $t
     /tmp/ccmrLUMM.s:2484   .text.HAL_ADCEx_LevelOutOfWindow3Callback:0000000000000000 HAL_ADCEx_LevelOutOfWindow3Callback
     /tmp/ccmrLUMM.s:2498   .text.HAL_ADCEx_EndOfSamplingCallback:0000000000000000 $t
     /tmp/ccmrLUMM.s:2505   .text.HAL_ADCEx_EndOfSamplingCallback:0000000000000000 HAL_ADCEx_EndOfSamplingCallback
     /tmp/ccmrLUMM.s:2519   .text.HAL_ADCEx_RegularStop:0000000000000000 $t
     /tmp/ccmrLUMM.s:2526   .text.HAL_ADCEx_RegularStop:0000000000000000 HAL_ADCEx_RegularStop
     /tmp/ccmrLUMM.s:2615   .text.HAL_ADCEx_RegularStop:0000000000000060 $d
ARM GAS  /tmp/ccmrLUMM.s 			page 291


     /tmp/ccmrLUMM.s:2620   .text.HAL_ADCEx_RegularStop_IT:0000000000000000 $t
     /tmp/ccmrLUMM.s:2627   .text.HAL_ADCEx_RegularStop_IT:0000000000000000 HAL_ADCEx_RegularStop_IT
     /tmp/ccmrLUMM.s:2721   .text.HAL_ADCEx_RegularStop_IT:0000000000000068 $d
     /tmp/ccmrLUMM.s:2726   .text.HAL_ADCEx_RegularStop_DMA:0000000000000000 $t
     /tmp/ccmrLUMM.s:2733   .text.HAL_ADCEx_RegularStop_DMA:0000000000000000 HAL_ADCEx_RegularStop_DMA
     /tmp/ccmrLUMM.s:2856   .text.HAL_ADCEx_RegularStop_DMA:0000000000000090 $d
     /tmp/ccmrLUMM.s:2861   .text.HAL_ADCEx_RegularMultiModeStop_DMA:0000000000000000 $t
     /tmp/ccmrLUMM.s:2868   .text.HAL_ADCEx_RegularMultiModeStop_DMA:0000000000000000 HAL_ADCEx_RegularMultiModeStop_DMA
     /tmp/ccmrLUMM.s:3127   .text.HAL_ADCEx_RegularMultiModeStop_DMA:0000000000000108 $d
     /tmp/ccmrLUMM.s:3133   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 $t
     /tmp/ccmrLUMM.s:3140   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000000 HAL_ADCEx_InjectedConfigChannel
     /tmp/ccmrLUMM.s:3704   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000318 $d
     /tmp/ccmrLUMM.s:3710   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000324 $t
     /tmp/ccmrLUMM.s:4305   .text.HAL_ADCEx_InjectedConfigChannel:000000000000055c $d
     /tmp/ccmrLUMM.s:4311   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000560 $t
     /tmp/ccmrLUMM.s:4854   .text.HAL_ADCEx_InjectedConfigChannel:0000000000000824 $d
     /tmp/ccmrLUMM.s:4870   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 $t
     /tmp/ccmrLUMM.s:4877   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000000 HAL_ADCEx_MultiModeConfigChannel
     /tmp/ccmrLUMM.s:5222   .text.HAL_ADCEx_MultiModeConfigChannel:0000000000000164 $d
     /tmp/ccmrLUMM.s:5231   .text.HAL_ADCEx_EnableInjectedQueue:0000000000000000 $t
     /tmp/ccmrLUMM.s:5238   .text.HAL_ADCEx_EnableInjectedQueue:0000000000000000 HAL_ADCEx_EnableInjectedQueue
     /tmp/ccmrLUMM.s:5316   .text.HAL_ADCEx_DisableInjectedQueue:0000000000000000 $t
     /tmp/ccmrLUMM.s:5323   .text.HAL_ADCEx_DisableInjectedQueue:0000000000000000 HAL_ADCEx_DisableInjectedQueue
     /tmp/ccmrLUMM.s:5403   .text.HAL_ADCEx_DisableInjectedQueue:0000000000000038 $d
     /tmp/ccmrLUMM.s:5408   .text.HAL_ADCEx_DisableVoltageRegulator:0000000000000000 $t
     /tmp/ccmrLUMM.s:5415   .text.HAL_ADCEx_DisableVoltageRegulator:0000000000000000 HAL_ADCEx_DisableVoltageRegulator
     /tmp/ccmrLUMM.s:5459   .text.HAL_ADCEx_DisableVoltageRegulator:000000000000001c $d
     /tmp/ccmrLUMM.s:5464   .text.HAL_ADCEx_EnterADCDeepPowerDownMode:0000000000000000 $t
     /tmp/ccmrLUMM.s:5471   .text.HAL_ADCEx_EnterADCDeepPowerDownMode:0000000000000000 HAL_ADCEx_EnterADCDeepPowerDownMode
     /tmp/ccmrLUMM.s:5516   .text.HAL_ADCEx_EnterADCDeepPowerDownMode:0000000000000020 $d

UNDEFINED SYMBOLS
ADC_Disable
ADC_Enable
SystemCoreClock
ADC_ConversionStop
HAL_GetTick
HAL_DMA_Start_IT
ADC_DMAConvCplt
ADC_DMAHalfConvCplt
ADC_DMAError
HAL_DMA_Abort
