ARM GAS  /tmp/ccecbe7f.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_adc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_ADC_MspInit,"ax",%progbits
  17              		.align	1
  18              		.weak	HAL_ADC_MspInit
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_ADC_MspInit:
  25              	.LFB345:
  26              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @file    stm32h7xx_hal_adc.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief   This file provides firmware functions to manage the following
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          functionalities of the Analog to Digital Convertor (ADC)
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          peripheral:
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Initialization and Configuration of ADC
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Operation functions
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Start, stop, get result of conversions of regular
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                group, using 3 possible modes: polling, interruption or DMA.
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + Control functions
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Channels configuration on regular group
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Analog Watchdog configuration
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           + State functions
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ ADC state machine management
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *             ++ Interrupts and flags management
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          Other functions (extended functions) are available in file
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          "stm32h7xx_hal_adc_ex.c".
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   @verbatim
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ##### ADC peripheral features #####
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   [..]
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) 16-bit, 14-bit, 12-bit, 10-bit or 8-bit configurable resolution.
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        Note: On devices STM32H72xx and STM32H73xx, these resolution are applicable to instances ADC
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 	   ADC3 is featuring resolutions 12-bit, 10-bit, 8-bit, 6-bit.
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Interrupt generation at the end of regular conversion and in case of
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       analog watchdog or overrun events.
ARM GAS  /tmp/ccecbe7f.s 			page 2


  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Single and continuous conversion modes.
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Scan mode for conversion of several channels sequentially.
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Data alignment with in-built data coherency.
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Programmable sampling time (channel wise)
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) External trigger (timer or EXTI) with configurable polarity
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) DMA request generation for transfer of conversions data of regular group.
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) Configurable delay between conversions in Dual interleaved mode.
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC channels selectable single/differential input.
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC offset shared on 4 offset instances.
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC calibration
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC conversion of regular group.
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC supply requirements: 1.62 V to 3.6 V.
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   (+) ADC input range: from Vref- (connected to Vssa) to Vref+ (connected to
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       Vdda or to an external voltage reference).
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ##### How to use this driver #####
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ==============================================================================
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Configuration of top level parameters related to ADC ***
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ============================================================
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Enable the ADC interface
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) As prerequisite, ADC clock must be configured at RCC top level.
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) Two clock settings are mandatory:
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) ADC clock (core clock, also possibly conversion clock).
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) ADC clock (conversions clock).
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Two possible clock sources: synchronous clock derived from AHB clock
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    or asynchronous clock derived from system clock, the PLL2 or the PLL3 running up
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) Example:
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Into HAL_ADC_MspInit() (recommended code location) or with
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    other device clock parameters configuration:
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_ENABLE();                  (mandatory)
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                RCC_ADCCLKSOURCE_PLL2 enable:                   (optional: if asynchronous clock sel
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_PLL2;
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 3


  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC clock source and clock prescaler are configured at ADC level with
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              parameter "ClockPrescaler" using function HAL_ADC_Init().
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC pins configuration
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Enable the clock for the ADC GPIOs
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_ENABLE()
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure these ADC pins in analog mode
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_GPIO_Init()
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the NVIC for ADC
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               into the function of corresponding ADC interruption vector
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               ADCx_IRQHandler().
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the DMA (DMA channel, mode normal or circular, ...)
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_DMA_Init().
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Configure the NVIC for DMA
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Insert the ADC interruption handler function HAL_ADC_IRQHandler()
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               into the function of corresponding DMA interruption vector
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               DMAx_Channelx_IRQHandler().
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Configuration of ADC, group regular, channels parameters ***
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ================================================================
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Configure the ADC parameters (resolution, data alignment, ...)
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         and regular group parameters (conversion trigger, sequencer, ...)
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_Init().
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Configure the channels for regular group parameters (channel number,
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         channel rank into sequencer, ..., into regular group)
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_ConfigChannel().
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, configure the analog watchdog parameters (channels
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         monitored, thresholds, ...)
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADC_AnalogWDGConfig().
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Execution of ADC conversions ***
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ====================================
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, perform an automatic ADC calibration to improve the
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         conversion accuracy
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         using function HAL_ADCEx_Calibration_Start().
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC driver can be used among three modes: polling, interruption,
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         transfer by DMA.
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion by polling:
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start()
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_PollForConversion()
ARM GAS  /tmp/ccecbe7f.s 			page 4


 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Retrieve conversion results
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop()
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion by interruption:
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start_IT()
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback()
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 (this function must be implemented in user program)
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Retrieve conversion results
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_GetValue()
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop_IT()
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC conversion with transfer by DMA:
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Activate the ADC peripheral and start conversions
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Start_DMA()
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Wait for ADC conversion completion by call of function
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 HAL_ADC_ConvCpltCallback() or HAL_ADC_ConvHalfCpltCallback()
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 (these functions must be implemented in user program)
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Conversion results are automatically transferred by DMA into
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 destination variable address.
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (+++) Stop conversion and disable the ADC peripheral
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 using function HAL_ADC_Stop_DMA()
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (@) Callback functions must be implemented in user program:
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ErrorCallback()
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_LevelOutOfWindowCallback() (callback of analog watchdog)
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ConvCpltCallback()
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+@) HAL_ADC_ConvHalfCpltCallback
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      *** Deinitialization of ADC ***
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ============================================================
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Disable the ADC interface
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (++) ADC clock can be hard reset and disabled at RCC top level.
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) Hard reset of ADC peripherals
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              using macro __HAL_RCC_ADCx_FORCE_RESET(), __HAL_RCC_ADCx_RELEASE_RESET().
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         (++) ADC clock disable
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              using the equivalent macro/functions as configuration step.
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              (+++) Example:
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    Into HAL_ADC_MspDeInit() (recommended code location) or with
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    other device clock parameters configuration:
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) __HAL_RCC_ADC_CLK_DISABLE();                  (if not used anymore)
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                RCC_ADCCLKSOURCE_CLKP restore:                      (optional)
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) RCC_PeriphClkInitTypeDef   RCC_PeriphClkInit;
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) PeriphClkInit.AdcClockSelection    = RCC_ADCCLKSOURCE_CLKP;
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                (+++) HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit);
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) ADC pins configuration
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the clock for the ADC GPIOs
ARM GAS  /tmp/ccecbe7f.s 			page 5


 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using macro __HAL_RCC_GPIOx_CLK_DISABLE()
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of ADC with interruptions:
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the NVIC for ADC
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(ADCx_IRQn)
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     (#) Optionally, in case of usage of DMA:
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Deinitialize the DMA
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_DMA_Init().
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          (++) Disable the NVIC for DMA
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               using function HAL_NVIC_EnableIRQ(DMAx_Channelx_IRQn)
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     *** Callback registration ***
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     =============================================
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      The compilation flag USE_HAL_ADC_REGISTER_CALLBACKS, when set to 1,
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      allows the user to configure dynamically the driver callbacks.
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Use Functions @ref HAL_ADC_RegisterCallback()
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      to register an interrupt callback.
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Function @ref HAL_ADC_RegisterCallback() allows to register following callbacks:
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      This function takes as parameters the HAL peripheral handle, the Callback ID
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      and a pointer to the user callback function.
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Use function @ref HAL_ADC_UnRegisterCallback to reset a callback to the default
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      weak function.
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      @ref HAL_ADC_UnRegisterCallback takes as parameters the HAL peripheral handle,
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      and the Callback ID.
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      This function allows to reset following callbacks:
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvCpltCallback               : ADC conversion complete callback
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ConvHalfCpltCallback           : ADC conversion DMA half-transfer callback
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindowCallback       : ADC analog watchdog 1 callback
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) ErrorCallback                  : ADC error callback
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedConvCpltCallback       : ADC group injected conversion complete callback
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) InjectedQueueOverflowCallback  : ADC group injected context queue overflow callback
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow2Callback      : ADC analog watchdog 2 callback
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) LevelOutOfWindow3Callback      : ADC analog watchdog 3 callback
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) EndOfSamplingCallback          : ADC end of sampling callback
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspInitCallback                : ADC Msp Init callback
ARM GAS  /tmp/ccecbe7f.s 			page 6


 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (+) MspDeInitCallback              : ADC Msp DeInit callback
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      By default, after the @ref HAL_ADC_Init() and when the state is @ref HAL_ADC_STATE_RESET
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      all callbacks are set to the corresponding weak functions:
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      examples @ref HAL_ADC_ConvCpltCallback(), @ref HAL_ADC_ErrorCallback().
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Exception done for MspInit and MspDeInit functions that are
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      reset to the legacy weak functions in the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit() only when
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      these callbacks are null (not registered beforehand).
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      If MspInit or MspDeInit are not null, the @ref HAL_ADC_Init()/ @ref HAL_ADC_DeInit()
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      keep and use the user MspInit/MspDeInit callbacks (registered beforehand) whatever the state.
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Callbacks can be registered/unregistered in @ref HAL_ADC_STATE_READY state only.
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Exception done MspInit/MspDeInit functions that can be registered/unregistered
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      in @ref HAL_ADC_STATE_READY or @ref HAL_ADC_STATE_RESET state,
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Then, the user first registers the MspInit/MspDeInit user callbacks
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      using @ref HAL_ADC_RegisterCallback() before calling @ref HAL_ADC_DeInit()
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      or @ref HAL_ADC_Init() function.
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      [..]
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      When the compilation flag USE_HAL_ADC_REGISTER_CALLBACKS is set to 0 or
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      not defined, the callback registration feature is not available and all callbacks
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      are set to the corresponding weak functions.
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   @endverbatim
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @attention
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * All rights reserved.</center></h2>
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * the "License"; You may not use this file except in compliance with the
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * License. You may obtain a copy of the License at:
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ******************************************************************************
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Includes ------------------------------------------------------------------*/
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #include "stm32h7xx_hal.h"
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC ADC
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief ADC HAL module driver
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 7


 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #ifdef HAL_ADC_MODULE_ENABLED
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private typedef -----------------------------------------------------------*/
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private define ------------------------------------------------------------*/
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Private_Constants ADC Private Constants
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CFGR_FIELDS_1  ((uint32_t)(ADC_CFGR_RES    |\
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL)) /*!< ADC_CFGR fields of 
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                                   when no regular c
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC3_CFGR_FIELDS_1  ((ADC3_CFGR_RES    | ADC3_CFGR_ALIGN   |\
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_CONT   | ADC_CFGR_OVRMOD  |\
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM |\
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                              ADC_CFGR_EXTEN  | ADC_CFGR_EXTSEL))   /*!< ADC_CFGR fields of paramete
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                         when no regular conversion 
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CFGR2_FIELDS  ((uint32_t)(ADC_CFGR2_ROVSE | ADC_CFGR2_OVSR  |\
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR2_OVSS | ADC_CFGR2_TROVS |\
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                        ADC_CFGR2_ROVSM))                     /*!< ADC_CFGR2 fields 
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                                                                  (neither regular n
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout values for ADC operations (enable settling time,                   */
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   disable settling time, ...).                                             */
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   Values defined to be higher than worst cases: low clock frequency,       */
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   maximum prescalers.                                                      */
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_ENABLE_TIMEOUT              (2UL)    /*!< ADC enable time-out value  */
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_DISABLE_TIMEOUT             (2UL)    /*!< ADC disable time-out value */
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout to wait for current conversion on going to be completed.           */
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Timeout fixed to worst case, for 1 channel.                                */
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - maximum sampling time (830.5 adc_clk)                                  */
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - ADC resolution (Tsar 16 bits= 16.5 adc_clk)                            */
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*   - ADC clock with prescaler 256                                           */
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /*     823 * 256 = 210688 clock cycles max                                    */
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Unit: cycles of CPU clock.                                                 */
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #define ADC_CONVERSION_TIME_MAX_CPU_CYCLES (210688UL)  /*!< ADC conversion completion time-out valu
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private macro -------------------------------------------------------------*/
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private variables ---------------------------------------------------------*/
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Private function prototypes -----------------------------------------------*/
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /* Exported functions --------------------------------------------------------*/
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions ADC Exported Functions
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group1 Initialization and de-initialization functions
ARM GAS  /tmp/ccecbe7f.s 			page 8


 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    ADC Initialization and Configuration functions
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               ##### Initialization and de-initialization functions #####
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Initialize and configure the ADC.
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) De-initialize the ADC.
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Initialize the ADC peripheral and regular group according to
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameters specified in structure "ADC_InitTypeDef".
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   As prerequisite, ADC clock must be configured at RCC top level
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (refer to description of RCC configuration for ADC
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in header of this file).
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes the ADC MSP (HAL_ADC_MspInit()) only when
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         coming from ADC state reset. Following calls to this function can
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         be used to reconfigure some parameters of ADC_InitTypeDef
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         structure on the fly, without modifying MSP configuration. If ADC
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         MSP has to be modified again, HAL_ADC_DeInit() must be called
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         before HAL_ADC_Init().
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         "ADC_InitTypeDef".
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function configures the ADC within 2 scopes: scope of entire
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC and scope of regular group. For parameters details, see comments
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         of structure "ADC_InitTypeDef".
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Parameters related to common ADC registers (ADC clock mode) are set
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         only if all ADCs are disabled.
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         If this is not the case, these common parameters setting are
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behaviour in
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of update of a parameter of ADC_InitTypeDef on the fly,
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         without  disabling the other ADCs.
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpCFGR;
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_conversion_on_going;
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0UL;
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check ADC handle */
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc == NULL)
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
ARM GAS  /tmp/ccecbe7f.s 			page 9


 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSIONDATAMGT(hadc->Init.ConversionDataManagement));
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* DISCEN and CONT bits cannot be set at the same time */
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == 
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Actions performed only if ADC is coming from state reset:                */
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* - Initialization of ADC MSP                                              */
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->State == HAL_ADC_STATE_RESET)
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the ADC Callback settings */
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback              = HAL_ADC_ConvCpltCallback;                 /* Legacy weak 
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvHalfCpltCallback          = HAL_ADC_ConvHalfCpltCallback;             /* Legacy weak 
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback      = HAL_ADC_LevelOutOfWindowCallback;         /* Legacy weak 
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCallback                 = HAL_ADC_ErrorCallback;                    /* Legacy weak 
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback      = HAL_ADCEx_InjectedConvCpltCallback;       /* Legacy weak 
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;  /* Legacy weak 
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback     = HAL_ADCEx_LevelOutOfWindow2Callback;      /* Legacy weak 
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback     = HAL_ADCEx_LevelOutOfWindow3Callback;      /* Legacy weak 
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->EndOfSamplingCallback         = HAL_ADCEx_EndOfSamplingCallback;          /* Legacy weak 
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->MspInitCallback == NULL)
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit  */
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the low level hardware */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->MspInitCallback(hadc);
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Init the low level hardware */
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_MspInit(hadc);
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to none */
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_CLEAR_ERRORCODE(hadc);
ARM GAS  /tmp/ccecbe7f.s 			page 10


 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Initialize Lock */
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->Lock = HAL_UNLOCKED;
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC deep power down mode */
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_DisableDeepPowerDown(hadc->Instance);
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* System was in deep power down mode, calibration must
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      be relaunched or a previously saved calibration factor
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      re-applied once the ADC voltage regulator is enabled */
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable ADC internal voltage regulator */
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_EnableInternalRegulator(hadc->Instance);
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: Variable divided by 2 to compensate partially              */
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       CPU processing cycles, scaling in us split to not          */
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       exceed 32 bits register capacity and handle low frequency. */
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL 
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       wait_loop_index--;
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification that ADC voltage regulator is correctly enabled, whether    */
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* or not ADC is coming from state reset (if any potential problem of       */
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* clocking, voltage regulator would not be enabled).                       */
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to ADC peripheral internal error */
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Configuration of ADC parameters if previous preliminary actions are      */
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* correctly completed and if there is no conversion on going on regular    */
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* called to update a parameter on the fly).                                */
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State,
ARM GAS  /tmp/ccecbe7f.s 			page 11


 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_BUSY_INTERNAL);
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of common ADC parameters                                 */
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:              */
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - clock configuration                                                 */
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset configuration of ADC common register CCR:                      */
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*                                                                      */
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - ADC clock mode and ACC prescaler (CKMODE and PRESC bits)are set  */
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     according to adc->Init.ClockPrescaler. It selects the clock      */
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*    source and sets the clock division factor.                        */
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*                                                                      */
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Some parameters of this register are not reset, since they are set   */
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* by other functions and must be kept in case of usage of this         */
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* function on the fly (update of a parameter of ADC_InitTypeDef        */
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* without needing to reconfigure all other ADC groups/channels         */
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* parameters):                                                         */
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - when multimode feature is available, multimode-related           */
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     (set into HAL_ADC_ConfigChannel() or                             */
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*     HAL_ADCEx_InjectedConfigChannel() )                              */
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of ADC:                                                  */
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - resolution                               Init.Resolution            */
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - external trigger to start conversion     Init.ExternalTrigConv      */
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - continuous conversion mode               Init.ContinuousConvMode    */
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - overrun                                  Init.Overrun               */
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - discontinuous mode                       Init.DiscontinuousConvMode */
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_3)
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 hadc->Init.Overrun                                                    |
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 hadc->Init.Resolution                                                 |
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #elif defined(ADC_VER_V5_V90)
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                     |
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.DataAlign                                                   |
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_C
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
ARM GAS  /tmp/ccecbe7f.s 			page 12


 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_3 */
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.DiscontinuousConvMode == ENABLE)
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable external trigger if trigger selection is different of software  */
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* start.                                                                 */
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: This configuration keeps the hardware feature of parameter       */
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       software start.                                                  */
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                  );
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update Configuration Register CFGR */
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC3_CFGR_FIELDS_1, tmpCFGR);
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of sampling mode */
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, hadc->Init.SamplingMo
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /tmp/ccecbe7f.s 			page 13


 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update Configuration Register CFGR */
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update Configuration Register CFGR */
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                            */
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without */
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* conversion on going on regular and injected groups:                    */
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Conversion data management      Init.ConversionDataManagement       */
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Oversampling parameters         Init.Oversampling                   */
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpCFGR = (
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpCFGR = (
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpCFGR = (
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.OversamplingMode == ENABLE)
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC_OVERSAMPLING_RATIO_ADC3(hadc->Init.Oversampling.Ratio));
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
ARM GAS  /tmp/ccecbe7f.s 			page 14


 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (hadc->Init.ExternalTrigConvEdge == ADC_EXTERNALTRIGCONVEDGE_NONE))
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Multi trigger is not applicable to software-triggered conversions */
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param((hadc->Init.Oversampling.TriggeredMode == ADC_TRIGGEREDMODE_SINGLE_TRIGGER))
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Configuration of Oversampler:                                      */
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling Ratio                                              */
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Right bit shift                                                 */
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Triggered mode                                                  */
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling mode (continued/resumed)                           */
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->CFGR2,
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSR  |
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSS  |
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_TROVS |
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSM,
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.Ratio         |
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode |
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.OversamplingStopReset
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     );
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Configuration of Oversampler:                                       */
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling Ratio                                               */
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Right bit shift                                                  */
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Left bit shift                                                   */
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Triggered mode                                                   */
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /*  - Oversampling mode (continued/resumed)                            */
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ((hadc->Init.Oversampling.Ratio - 1UL)  << ADC_CFGR2_OVSR_Pos) |
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.RightBitShift |
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.TriggeredMode |
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      hadc->Init.Oversampling.OversamplingStopReset);
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configuration of Oversampler:                                       */
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Oversampling Ratio                                               */
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Right bit shift                                                  */
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Left bit shift                                                   */
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Triggered mode                                                   */
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  - Oversampling mode (continued/resumed)                            */
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC_CFGR2_ROVSE                       |
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ((hadc->Init.Oversampling.Ratio - 1UL) << ADC_CFGR2_OVSR_Pos) |
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.RightBitShift |
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.TriggeredMode |
ARM GAS  /tmp/ccecbe7f.s 			page 15


 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    hadc->Init.Oversampling.OversamplingStopReset);
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Disable ADC oversampling scope on ADC group regular */
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set the LeftShift parameter: it is applied to the final result with or without oversamplin
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance != ADC3)
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure the BOOST Mode */
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_ConfigureBoostMode(hadc);
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure the BOOST Mode */
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_ConfigureBoostMode(hadc);
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Configuration of regular group sequencer:                              */
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* - if scan mode is disabled, regular channels sequence length is set to */
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   0x00: 1 channel converted (channel on regular rank 1)                */
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   Parameter "NbrOfConversion" is discarded.                            */
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   Note: Scan mode is not present by hardware on this device, but       */
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   emulated by software for alignment over all STM32 devices.           */
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* - if scan mode is enabled, regular channels sequence length is set to  */
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*   parameter "NbrOfConversion".                                         */
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set number of ranks in regular group sequencer */
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Initialize the ADC state */
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
ARM GAS  /tmp/ccecbe7f.s 			page 16


 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Deinitialize the ADC peripheral registers to their default reset
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         values, with deinitialization of the ADC MSP.
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   For devices with several ADCs: reset of ADC common registers is done
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         only if all ADCs sharing the same common group are disabled.
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (function "HAL_ADC_MspDeInit()" is also called under the same conditions:
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         all ADC instances use the same core clock at RCC level, disabling
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the core clock reset all ADC instances).
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         If this is not the case, reset of these common parameters reset is
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         bypassed without error reporting: it can be the intended behavior in
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of reset of a single ADC while the other ADCs sharing the same
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         common group is still running.
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   By default, HAL_ADC_DeInit() set ADC in mode deep power-down:
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         this saves more power by reducing leakage currents
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         and is particularly interesting before entering MCU low-power modes.
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check ADC handle */
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc == NULL)
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Stop potential conversion on going */
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped            */
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Flush register JSQR: reset the queue sequencer when injected             */
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* queue sequencer is enabled and ADC disabled.                             */
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* The software and hardware triggers of the injected sequence are both     */
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* internally disabled just after the completion of the last valid          */
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* injected sequence.                                                       */
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQM);
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable the ADC peripheral */
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Change ADC state */
ARM GAS  /tmp/ccecbe7f.s 			page 17


 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->State = HAL_ADC_STATE_READY;
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: HAL ADC deInit is done independently of ADC conversion stop        */
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       and disable return status. In case of status fail, attempt to      */
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       perform deinitialization anyway and it is up user code in          */
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       system RCC hard reset.                                             */
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Reset ADC registers ========== */
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register IER */
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 | ADC_IT_AWD1 |
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JEOS  | ADC_IT_JEOC |
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_EOS   | ADC_IT_EOC  |
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_EOSMP | ADC_IT_RDY));
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register ISR */
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 | ADC_FLAG_AWD1 |
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JEOS  | ADC_FLAG_JEOC |
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_EOS   | ADC_FLAG_EOC  |
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CR */
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Bits ADC_CR_JADSTP, ADC_CR_ADSTP, ADC_CR_JADSTART, ADC_CR_ADSTART,
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ADC_CR_ADCAL, ADC_CR_ADDIS and ADC_CR_ADEN are in access mode "read-set":
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      no direct reset applicable.
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      Update CR register to reset value where doable by software */
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN | ADC_CR_ADCALDIF);
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CFGR */
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AWD1CH  | ADC_CFGR_JAUTO   | ADC_CFGR_JAWD1EN |
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_JDISCEN | ADC_CFGR_DISCNUM | ADC_CFGR_DISCEN  |
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AUTDLY  | ADC_CFGR_CONT    | ADC_CFGR_OVRMOD  |
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_EXTEN   | ADC_CFGR_EXTSEL  |
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_RES     | ADC_CFGR_DMNGT);
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JQDIS);
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CFGR2 */
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSM  | ADC_CFGR2_TROVS   | ADC_CFGR2_OVSS |
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SMPR1 */
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR1, ADC_SMPR1_FIELDS);
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SMPR2 */
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SMPR2, ADC_SMPR2_SMP18 | ADC_SMPR2_SMP17 | ADC_SMPR2_SMP16 |
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP12 | ADC_SMPR2_SMP11 | ADC_SMPR2_SMP10);
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
ARM GAS  /tmp/ccecbe7f.s 			page 18


 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR1 and HTR1 */
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR1_TR1, ADC3_TR1_HT1 | ADC3_TR1_LT1);
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC3_TR2_HT2 | ADC3_TR2_LT2);
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR3 and HTR3 */
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->RES1_TR3, ADC3_TR3_HT3 | ADC3_TR3_LT3);
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR1_TR1, ADC_LTR_LT);
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC_HTR_HT);
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR2 and HTR2*/
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR2_DIFSEL, ADC_LTR_LT);
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_HTR_HT);
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register LTR3 and HTR3 */
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->LTR3_RES10, ADC_LTR_LT);
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR1 and HTR1 */
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR1, ADC_LTR_LT);
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR1, ADC_HTR_HT);
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR2 and HTR2*/
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR2, ADC_LTR_LT);
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR2, ADC_HTR_HT);
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register LTR3 and HTR3 */
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR3, ADC_LTR_LT);
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR3, ADC_HTR_HT);
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR1 */
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_SQ4 | ADC_SQR1_SQ3 | ADC_SQR1_SQ2 |
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR2 */
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR2, ADC_SQR2_SQ9 | ADC_SQR2_SQ8 | ADC_SQR2_SQ7 |
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR3 */
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR3, ADC_SQR3_SQ14 | ADC_SQR3_SQ13 | ADC_SQR3_SQ12 |
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register SQR4 */
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->SQR4, ADC_SQR4_SQ16 | ADC_SQR4_SQ15);
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Register JSQR was reset when the ADC was disabled */
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DR */
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR1 */
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1);
ARM GAS  /tmp/ccecbe7f.s 			page 19


1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR2 */
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE | ADC_OFR2_OFFSET2_CH | ADC_OFR2_OFFSET2);
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR3 */
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE | ADC_OFR3_OFFSET3_CH | ADC_OFR3_OFFSET3);
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR4 */
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE | ADC_OFR4_OFFSET4_CH | ADC_OFR4_OFFSET4);
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset registers JDR1, JDR2, JDR3, JDR4 */
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* bits in access mode read only, no direct reset applicable*/
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register AWD2CR */
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD2CR, ADC_AWD2CR_AWD2CH);
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register AWD3CR */
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->AWD3CR, ADC_AWD3CR_AWD3CH);
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DIFSEL */
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->LTR2_DIFSEL, ADC_DIFSEL_DIFSEL);
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CALFACT */
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register DIFSEL */
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->DIFSEL_RES12, ADC_DIFSEL_DIFSEL);
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset register CALFACT */
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->CALFACT_RES13, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register DIFSEL */
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_DIFSEL);
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register CALFACT */
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   CLEAR_BIT(hadc->Instance->CALFACT, ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S);
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Reset common ADC registers ========== */
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Software is allowed to change common parameters only when all the other
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ADCs are disabled.   */
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Reset configuration of ADC common register CCR:
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - clock mode: CKMODE, PRESCEN
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - multimode related parameters(when this feature is available): DELAY, DUAL
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        (set into  HAL_ADCEx_MultiModeConfigChannel() API)
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       - internal measurement paths: Vbat, temperature sensor, Vref (set into
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         HAL_ADC_ConfigChannel() or HAL_ADCEx_InjectedConfigChannel() )
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     */
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     ADC_CLEAR_COMMON_CONTROL_REGISTER(hadc);
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 20


1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* DeInit the low level hardware.
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      For example:
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_RCC_ADC_FORCE_RESET();
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_RCC_ADC_RELEASE_RESET();
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_RCC_ADC_CLK_DISABLE();
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     Keep in mind that all ADCs use the same clock: disabling
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     the clock will reset all ADCs.
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->MspDeInitCallback == NULL)
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit  */
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->MspDeInitCallback(hadc);
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* DeInit the low level hardware: RCC clock, NVIC */
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_MspDeInit(hadc);
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC error code to none */
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_CLEAR_ERRORCODE(hadc);
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset injected channel configuration parameters */
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ContextQueue = 0;
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->State = HAL_ADC_STATE_RESET;
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Initialize the ADC MSP.
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
  27              		.loc 1 1106 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 21


1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_MspInit must be implemented in the user file.
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
  33              		.loc 1 1113 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE345:
  38              		.section	.text.HAL_ADC_MspDeInit,"ax",%progbits
  39              		.align	1
  40              		.weak	HAL_ADC_MspDeInit
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv5-d16
  46              	HAL_ADC_MspDeInit:
  47              	.LFB346:
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DeInitialize the ADC MSP.
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   All ADC instances use the same core clock at RCC level, disabling
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the core clock reset all ADC instances).
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
  48              		.loc 1 1123 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.LVL1:
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_MspDeInit must be implemented in the user file.
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
  54              		.loc 1 1130 0
  55 0000 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE346:
  59              		.section	.text.HAL_ADC_PollForConversion,"ax",%progbits
  60              		.align	1
  61              		.global	HAL_ADC_PollForConversion
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv5-d16
  67              	HAL_ADC_PollForConversion:
  68              	.LFB349:
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Register a User ADC Callback
ARM GAS  /tmp/ccecbe7f.s 			page 22


1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To be used instead of the weak predefined callback
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be registered
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This parameter can be one of the following values:
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  pCallback pointer to the Callback function
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_RegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Callb
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (pCallback == NULL)
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     return HAL_ERROR;
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvCpltCallback = pCallback;
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = pCallback;
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = pCallback;
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCallback = pCallback;
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = pCallback;
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = pCallback;
ARM GAS  /tmp/ccecbe7f.s 			page 23


1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = pCallback;
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = pCallback;
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->EndOfSamplingCallback = pCallback;
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status = HAL_ERROR;
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = pCallback;
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = pCallback;
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status = HAL_ERROR;
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 24


1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Return error status */
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     status =  HAL_ERROR;
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return status;
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Unregister a ADC Callback
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC callback is redirected to the weak predefined callback
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc Pointer to a ADC_HandleTypeDef structure that contains
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *                the configuration information for the specified ADC.
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  CallbackID ID of the callback to be unregistered
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This parameter can be one of the following values:
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_COMPLETE_CB_ID      ADC conversion complete callback ID
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_CONVERSION_HALF_CB_ID          ADC conversion DMA half-transfer call
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID    ADC analog watchdog 1 callback ID
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_ERROR_CB_ID                    ADC error callback ID
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID  ADC group injected conversion complet
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID        ADC group injected context queue over
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID    ADC analog watchdog 2 callback ID
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID    ADC analog watchdog 3 callback ID
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_END_OF_SAMPLING_CB_ID          ADC end of sampling callback ID
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPINIT_CB_ID                  ADC Msp Init callback ID
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          @arg @ref HAL_ADC_MSPDEINIT_CB_ID                ADC Msp DeInit callback ID
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_UnRegisterCallback(ADC_HandleTypeDef *hadc, HAL_ADC_CallbackIDTypeDef Cal
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef status = HAL_OK;
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & HAL_ADC_STATE_READY) != 0UL)
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_COMPLETE_CB_ID :
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvCpltCallback = HAL_ADC_ConvCpltCallback;
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_CONVERSION_HALF_CB_ID :
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ConvHalfCpltCallback = HAL_ADC_ConvHalfCpltCallback;
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID :
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindowCallback = HAL_ADC_LevelOutOfWindowCallback;
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_ERROR_CB_ID :
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCallback = HAL_ADC_ErrorCallback;
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID :
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedConvCpltCallback = HAL_ADCEx_InjectedConvCpltCallback;
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_INJ_QUEUE_OVEFLOW_CB_ID :
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->InjectedQueueOverflowCallback = HAL_ADCEx_InjectedQueueOverflowCallback;
ARM GAS  /tmp/ccecbe7f.s 			page 25


1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_2_CB_ID :
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow2Callback = HAL_ADCEx_LevelOutOfWindow2Callback;
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_LEVEL_OUT_OF_WINDOW_3_CB_ID :
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->LevelOutOfWindow3Callback = HAL_ADCEx_LevelOutOfWindow3Callback;
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_END_OF_SAMPLING_CB_ID :
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->EndOfSamplingCallback = HAL_ADCEx_EndOfSamplingCallback;
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit; /* Legacy weak MspInit              */
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit; /* Legacy weak MspDeInit            */
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status =  HAL_ERROR;
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (HAL_ADC_STATE_RESET == hadc->State)
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (CallbackID)
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPINIT_CB_ID :
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspInitCallback = HAL_ADC_MspInit;                   /* Legacy weak MspInit          
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case HAL_ADC_MSPDEINIT_CB_ID :
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->MspDeInitCallback = HAL_ADC_MspDeInit;               /* Legacy weak MspDeInit        
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default :
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update the error code */
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Return error status */
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         status =  HAL_ERROR;
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update the error code */
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ErrorCode |= HAL_ADC_ERROR_INVALID_CALLBACK;
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 26


1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Return error status */
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     status =  HAL_ERROR;
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return status;
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group2 ADC Input and Output operation functions
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    ADC IO operation functions
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       ##### IO operation functions #####
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group.
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group.
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Poll for conversion complete on regular group.
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Poll for conversion event.
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Get result of regular channel conversion.
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group and enable interruptions.
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group and disable interruptions.
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Handle ADC interrupt request
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Start conversion of regular group and enable DMA transfer.
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Stop conversion of regular group and disable ADC DMA transfer.
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group.
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function: None.
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           if ADC is Slave, ADC is enabled but conversion is not started,
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           if ADC is master, ADC is enabled and multimode conversion is started.
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
ARM GAS  /tmp/ccecbe7f.s 			page 27


1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state                                                        */
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code */
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset all ADC error code fields */
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* trigger event.                                                       */
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
ARM GAS  /tmp/ccecbe7f.s 			page 28


1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected channels in
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC peripheral.
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion on injected group. If injected group is under use, it
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
ARM GAS  /tmp/ccecbe7f.s 			page 29


1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Wait for regular group conversion to be completed.
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   ADC conversion flags EOS (end of sequence) and EOC (end of
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion) are cleared by this function, with an exception:
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         if low power feature "LowPowerAutoWait" is enabled, flags are
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         not cleared to not interfere with this feature until data register
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         is read using function HAL_ADC_GetValue().
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function cannot be used in a particular setup: ADC configured
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in DMA mode and polling for end of each conversion (ADC init
1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SINGLE_CONV).
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         In this case, DMA resets the flag EOC and polling cannot be
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         performed on each conversion. Nevertheless, polling can still
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         be performed on the complete sequence (ADC init
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         parameter "EOCSelection" set to ADC_EOC_SEQ_CONV).
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
  69              		.loc 1 1583 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL2:
  74 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  75              	.LCFI0:
ARM GAS  /tmp/ccecbe7f.s 			page 30


  76              		.cfi_def_cfa_offset 24
  77              		.cfi_offset 4, -24
  78              		.cfi_offset 5, -20
  79              		.cfi_offset 6, -16
  80              		.cfi_offset 7, -12
  81              		.cfi_offset 8, -8
  82              		.cfi_offset 14, -4
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_Flag_End;
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_cfgr;
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
  83              		.loc 1 1588 0
  84 0004 0368     		ldr	r3, [r0]
  85 0006 474E     		ldr	r6, .L31
  86 0008 474A     		ldr	r2, .L31+4
  87 000a 9342     		cmp	r3, r2
  88 000c 18BF     		it	ne
  89 000e B342     		cmpne	r3, r6
  90 0010 17D1     		bne	.L19
  91 0012 06F54076 		add	r6, r6, #768
  92              	.L4:
  93              	.LVL3:
  94              	.LBB306:
  95              	.LBB307:
  96              		.file 2 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h"
   1:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @file    stm32h7xx_ll_adc.h
   4:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief   Header file of ADC LL module.
   6:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
   7:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @attention
   8:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
   9:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
  10:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * All rights reserved.</center></h2>
  11:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  12:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * This software component is licensed by ST under BSD 3-Clause license,
  13:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * the "License"; You may not use this file except in compliance with the
  14:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * License. You may obtain a copy of the License at:
  15:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                        opensource.org/licenses/BSD-3-Clause
  16:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
  17:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ******************************************************************************
  18:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  19:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  20:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  21:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifndef STM32H7xx_LL_ADC_H
  22:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define STM32H7xx_LL_ADC_H
  23:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  24:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #ifdef __cplusplus
  25:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** extern "C" {
  26:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
  27:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  28:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Includes ------------------------------------------------------------------*/
  29:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #include "stm32h7xx.h"
  30:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  31:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @addtogroup STM32H7xx_LL_Driver
ARM GAS  /tmp/ccecbe7f.s 			page 31


  32:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  33:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  34:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  35:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC1) || defined (ADC2) || defined (ADC3)
  36:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  37:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL ADC
  38:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  39:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  40:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  41:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private types -------------------------------------------------------------*/
  42:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private variables ---------------------------------------------------------*/
  43:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  44:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private constants ---------------------------------------------------------*/
  45:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Constants ADC Private Constants
  46:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
  47:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
  48:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  49:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC calibration:                                         */
  50:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC calibration factors configuration */
  51:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  52:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_CALIB_OFFSET, LL_ADC_CALIB_LINEARITY, ...   */
  53:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
  54:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
  55:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration configuration: configuration before calibration start    */
  56:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration factors: register offset                                 */
  57:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_OFFSET_REGOFFSET    (0x00000000UL) /* Register CALFACT defined as referenc
  58:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_LINEARITY_REGOFFSET (0x00000001UL) /* Register CALFACT2 offset vs register
  59:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_FACTOR_REGOFFSET_MASK      (ADC_CALIB_FACTOR_OFFSET_REGOFFSET | ADC_CALIB_FACTOR_
  60:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_MASK                  (ADC_CR_ADCALLIN)
  61:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CALIB_MODE_BINARY_MASK           (ADC_CALIB_FACTOR_REGOFFSET_MASK) /* Mask to get binar
  62:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  63:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  64:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular sequencer:                             */
  65:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_RANK_x the relevant bits for:            */
  66:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer register offset                                                */
  67:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
  68:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  69:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group regular sequencer configuration */
  70:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
  71:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR1_REGOFFSET                 (0x00000000UL)
  72:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR2_REGOFFSET                 (0x00000100UL)
  73:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR3_REGOFFSET                 (0x00000200UL)
  74:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQR4_REGOFFSET                 (0x00000300UL)
  75:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  76:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_SQRX_REGOFFSET_MASK        (ADC_SQR1_REGOFFSET | ADC_SQR2_REGOFFSET | ADC_SQR3_REGO
  77:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SQRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_SQRx_REGOFFSET in ADC_REG_
  78:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_ID_SQRX_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
  79:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  80:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular sequencer bits information to be inserted  */
  81:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group regular sequencer ranks literals definition.                */
  82:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_1_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR1_SQ1" po
  83:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_2_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR1_SQ2" po
  84:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_3_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR1_SQ3" po
  85:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_4_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR1_SQ4" po
  86:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_5_SQRX_BITOFFSET_POS  ( 0UL) /* Value equivalent to bitfield "ADC_SQR2_SQ5" po
  87:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_6_SQRX_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_SQR2_SQ6" po
  88:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_7_SQRX_BITOFFSET_POS  (12UL) /* Value equivalent to bitfield "ADC_SQR2_SQ7" po
ARM GAS  /tmp/ccecbe7f.s 			page 32


  89:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_8_SQRX_BITOFFSET_POS  (18UL) /* Value equivalent to bitfield "ADC_SQR2_SQ8" po
  90:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_9_SQRX_BITOFFSET_POS  (24UL) /* Value equivalent to bitfield "ADC_SQR2_SQ9" po
  91:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_10_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR3_SQ10" p
  92:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_11_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR3_SQ11" p
  93:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_12_SQRX_BITOFFSET_POS (12UL) /* Value equivalent to bitfield "ADC_SQR3_SQ12" p
  94:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_13_SQRX_BITOFFSET_POS (18UL) /* Value equivalent to bitfield "ADC_SQR3_SQ13" p
  95:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_14_SQRX_BITOFFSET_POS (24UL) /* Value equivalent to bitfield "ADC_SQR3_SQ14" p
  96:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_15_SQRX_BITOFFSET_POS ( 0UL) /* Value equivalent to bitfield "ADC_SQR4_SQ15" p
  97:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_RANK_16_SQRX_BITOFFSET_POS ( 6UL) /* Value equivalent to bitfield "ADC_SQR4_SQ16" p
  98:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
  99:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected sequencer:                            */
 102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_RANK_x the relevant bits for:            */
 103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - data register offset                                                     */
 104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - sequencer rank bits position into the selected register                  */
 105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC group injected data register */
 107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR1_REGOFFSET                 (0x00000000UL)
 109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR2_REGOFFSET                 (0x00000100UL)
 110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR3_REGOFFSET                 (0x00000200UL)
 111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDR4_REGOFFSET                 (0x00000300UL)
 112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_JDRX_REGOFFSET_MASK        (ADC_JDR1_REGOFFSET | ADC_JDR2_REGOFFSET | ADC_JDR3_REGO
 114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_ID_JSQR_MASK          (ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0)
 115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_JDRX_REGOFFSET_POS             (8UL) /* Position of bits ADC_JDRx_REGOFFSET in ADC_INJ_
 116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected sequencer bits information to be inserted */
 118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* into ADC group injected sequencer ranks literals definition.               */
 119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_1_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ1_Pos)
 120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_2_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ2_Pos)
 121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_3_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ3_Pos)
 122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_RANK_4_JSQR_BITOFFSET_POS  (ADC_JSQR_JSQ4_Pos)
 123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group regular trigger:                               */
 127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_REG_TRIG_x the relevant bits for:            */
 128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger source                                                   */
 129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - regular trigger edge                                                     */
 130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXT_EDGE_DEFAULT       (ADC_CFGR_EXTEN_0) /* Trigger edge set to rising edge (
 131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_SOURCE_MASK            (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTSEL) << (4U *
 136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_CFGR_EXTSEL)                            << (4U *
 139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EDGE_MASK              (((LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN) << (4U * 
 144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
ARM GAS  /tmp/ccecbe7f.s 			page 33


 146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_REG_TRIG_EXT_EDGE_DEFAULT)             << (4U * 
 147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group regular trigger bits information.                  */
 149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTSEL_BITOFFSET_POS  ( 6UL) /* Value equivalent to bitfield "ADC_CFGR_EXTSEL"
 150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_REG_TRIG_EXTEN_BITOFFSET_POS   (10UL) /* Value equivalent to bitfield "ADC_CFGR_EXTEN" 
 151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC group injected trigger:                              */
 155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_INJ_TRIG_x the relevant bits for:            */
 156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger source                                                  */
 157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - injected trigger edge                                                    */
 158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXT_EDGE_DEFAULT      (ADC_JSQR_JEXTEN_0) /* Trigger edge set to rising edge (
 159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger source masks for each of possible                  */
 161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_SOURCE_MASK            (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTSEL) << (4U 
 164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                             ((ADC_JSQR_JEXTSEL)                             << (4U 
 167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Mask containing trigger edge masks for each of possible                    */
 169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* trigger edge selection duplicated with shifts [0; 4; 8; 12]                */
 170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* corresponding to {SW start; ext trigger; ext trigger; ext trigger}.        */
 171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EDGE_MASK              (((LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN) << (4U *
 172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              ((ADC_INJ_TRIG_EXT_EDGE_DEFAULT)              << (4U *
 175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of ADC group injected trigger bits information.                 */
 177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTSEL_BITOFFSET_POS  ( 2UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTSEL
 178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_INJ_TRIG_EXTEN_BITOFFSET_POS   ( 6UL) /* Value equivalent to bitfield "ADC_JSQR_JEXTEN"
 179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC channel:                                             */
 186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literal LL_ADC_CHANNEL_x the relevant bits for:             */
 187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by number                                     */
 188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel identifier defined by bitfield                                   */
 189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel differentiation between external channels (connected to          */
 190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   GPIO pins) and internal channels (connected to internal paths)           */
 191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - channel sampling time defined by SMPRx register offset                   */
 192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   and SMPx bits positions into SMPRx register                              */
 193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK         (ADC_CFGR_AWD1CH)
 194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_BITFIELD_MASK       (ADC_AWD2CR_AWD2CH)
 195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS (26UL)/* Value equivalent to bitfield "ADC_CHANNEL_ID_N
 196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_MASK                (ADC_CHANNEL_ID_NUMBER_MASK | ADC_CHANNEL_ID_BITFIELD_MA
 197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Equivalent mask of ADC_CHANNEL_NUMBER_MASK aligned on register LSB (bit 0) */
 198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 (ADC_SQR2_SQ5) /* Equivalent to shift: (ADC_CHANNEL_NUMB
 199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Channel differentiation between external and internal channels */
 201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH         (0x80000000UL) /* Marker of internal channel */
 202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_ID_INTERNAL_CH_MASK    (ADC_CHANNEL_ID_INTERNAL_CH)
ARM GAS  /tmp/ccecbe7f.s 			page 34


 203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC channel sampling time configuration */
 205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (offset placed into a spare area of literal definition) */
 206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR1_REGOFFSET                (0x00000000UL)
 207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPR2_REGOFFSET                (0x02000000UL)
 208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPRX_REGOFFSET_MASK   (ADC_SMPR1_REGOFFSET | ADC_SMPR2_REGOFFSET)
 209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SMPRX_REGOFFSET_POS            (25UL) /* Position of bits ADC_SMPRx_REGOFFSET in ADC_CH
 210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_MASK    (0x01F00000UL)
 212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_SMPx_BITOFFSET_POS     (20UL)           /* Value equivalent to bitfield "ADC_CH
 213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID number information to be inserted into           */
 215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_NUMBER               (0x00000000UL)
 217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_NUMBER               (                                                       
 218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_NUMBER               (                                                       
 219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_NUMBER               (                                                       
 220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_NUMBER               (                                        ADC_CFGR_AWD1CH
 221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_NUMBER               (                                        ADC_CFGR_AWD1CH
 222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_NUMBER               (                                        ADC_CFGR_AWD1CH
 223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_NUMBER               (                                        ADC_CFGR_AWD1CH
 224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_NUMBER               (                    ADC_CFGR_AWD1CH_3                  
 226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_NUMBER              (                    ADC_CFGR_AWD1CH_3                  
 228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_NUMBER              (                    ADC_CFGR_AWD1CH_3 | ADC_CFGR_AWD1CH
 232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_NUMBER              (ADC_CFGR_AWD1CH_4                                      
 236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels ID bitfield information to be inserted into         */
 238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_BITFIELD             (ADC_AWD2CR_AWD2CH_0)
 240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_BITFIELD             (ADC_AWD2CR_AWD2CH_1)
 241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_BITFIELD             (ADC_AWD2CR_AWD2CH_2)
 242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_BITFIELD             (ADC_AWD2CR_AWD2CH_3)
 243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_BITFIELD             (ADC_AWD2CR_AWD2CH_4)
 244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_BITFIELD             (ADC_AWD2CR_AWD2CH_5)
 245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_BITFIELD             (ADC_AWD2CR_AWD2CH_6)
 246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_BITFIELD             (ADC_AWD2CR_AWD2CH_7)
 247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_BITFIELD             (ADC_AWD2CR_AWD2CH_8)
 248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_BITFIELD             (ADC_AWD2CR_AWD2CH_9)
 249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_BITFIELD            (ADC_AWD2CR_AWD2CH_10)
 250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_BITFIELD            (ADC_AWD2CR_AWD2CH_11)
 251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_BITFIELD            (ADC_AWD2CR_AWD2CH_12)
 252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_BITFIELD            (ADC_AWD2CR_AWD2CH_13)
 253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_BITFIELD            (ADC_AWD2CR_AWD2CH_14)
 254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_BITFIELD            (ADC_AWD2CR_AWD2CH_15)
 255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_BITFIELD            (ADC_AWD2CR_AWD2CH_16)
 256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_BITFIELD            (ADC_AWD2CR_AWD2CH_17)
 257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_BITFIELD            (ADC_AWD2CR_AWD2CH_18)
 258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_BITFIELD            (ADC_AWD2CR_AWD2CH_19)
 259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 35


 260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Definition of channels sampling time information to be inserted into       */
 261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* channels literals definition.                                              */
 262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_0_SMP                  (ADC_SMPR1_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_1_SMP                  (ADC_SMPR1_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_2_SMP                  (ADC_SMPR1_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_3_SMP                  (ADC_SMPR1_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_4_SMP                  (ADC_SMPR1_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_5_SMP                  (ADC_SMPR1_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_6_SMP                  (ADC_SMPR1_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_7_SMP                  (ADC_SMPR1_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_8_SMP                  (ADC_SMPR1_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_9_SMP                  (ADC_SMPR1_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_10_SMP                 (ADC_SMPR2_REGOFFSET | (( 0UL) << ADC_CHANNEL_SMPx_BITOF
 273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_11_SMP                 (ADC_SMPR2_REGOFFSET | (( 3UL) << ADC_CHANNEL_SMPx_BITOF
 274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_12_SMP                 (ADC_SMPR2_REGOFFSET | (( 6UL) << ADC_CHANNEL_SMPx_BITOF
 275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_13_SMP                 (ADC_SMPR2_REGOFFSET | (( 9UL) << ADC_CHANNEL_SMPx_BITOF
 276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_14_SMP                 (ADC_SMPR2_REGOFFSET | ((12UL) << ADC_CHANNEL_SMPx_BITOF
 277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_15_SMP                 (ADC_SMPR2_REGOFFSET | ((15UL) << ADC_CHANNEL_SMPx_BITOF
 278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_16_SMP                 (ADC_SMPR2_REGOFFSET | ((18UL) << ADC_CHANNEL_SMPx_BITOF
 279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_17_SMP                 (ADC_SMPR2_REGOFFSET | ((21UL) << ADC_CHANNEL_SMPx_BITOF
 280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_18_SMP                 (ADC_SMPR2_REGOFFSET | ((24UL) << ADC_CHANNEL_SMPx_BITOF
 281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CHANNEL_19_SMP                 (ADC_SMPR2_REGOFFSET | ((27UL) << ADC_CHANNEL_SMPx_BITOF
 282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC mode single or differential ended:                   */
 285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_SINGLE_ENDED or LL_ADC_SINGLE_DIFFERENTIAL  */
 286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* the relevant bits for:                                                     */
 287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different registers)               */
 288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC calibration: calibration start, calibration factor get or set        */
 289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - ADC channels: set each ADC channel ending mode                           */
 290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_START_MASK    (ADC_CR_ADCALDIF)
 291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_FACTOR_MASK   (ADC_CALFACT_CALFACT_D | ADC_CALFACT_CALFACT_S)
 292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_MASK        (ADC_CHANNEL_ID_BITFIELD_MASK) /* Equivalent to ADC_DIFS
 293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK  (ADC_CALFACT_CALFACT_S_4 | ADC_CALFACT_CALFACT_S_3) /* B
 294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK   (0x00010000UL)                           /* Selection o
 295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_POS    (16UL)                                   /* Selection o
 296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_SINGLEDIFF_CALIB_F_BIT_D_SHIFT4 (ADC_SINGLEDIFF_CALIB_F_BIT_D_POS - 4UL) /* Shift of bi
 297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC analog watchdog:                                     */
 299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* To select into literals LL_ADC_AWD_CHANNELx_xxx the relevant bits for:     */
 300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (concatenation of multiple bits used in different analog watchdogs,        */
 301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (feature of several watchdogs not available on all STM32 families)).       */
 302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 1: monitored channel defined by number,                  */
 303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection of ADC group (ADC groups regular and-or injected).             */
 304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* - analog watchdog 2 and 3: monitored channel defined by bitfield, no       */
 305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*   selection on groups.                                                     */
 306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog channel configuration */
 308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_REGOFFSET              (0x00000000UL)
 309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR2_REGOFFSET              (0x00100000UL)
 310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR3_REGOFFSET              (0x00200000UL)
 311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 configuration registers */
 313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_CRX_REGOFFSET to spare 32 bits space */
 314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR12_REGOFFSETGAP_VAL      (0x00000024UL)
 316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 36


 317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_MASK         (ADC_AWD_CR1_REGOFFSET | ADC_AWD_CR2_REGOFFSET | ADC_AWD
 318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR1_CHANNEL_MASK           (ADC_CFGR_AWD1CH | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | 
 320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR23_CHANNEL_MASK          (ADC_AWD2CR_AWD2CH)
 321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CR_ALL_CHANNEL_MASK        (ADC_AWD_CR1_CHANNEL_MASK | ADC_AWD_CR23_CHANNEL_MASK)
 322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_CRX_REGOFFSET_POS          (20UL) /* Position of bits ADC_AWD_CRx_REGOFFSET in ADC_
 324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC analog watchdog threshold configuration */
 326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR1_REGOFFSET              (ADC_AWD_CR1_REGOFFSET)
 327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR2_REGOFFSET              (ADC_AWD_CR2_REGOFFSET)
 328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR3_REGOFFSET              (ADC_AWD_CR3_REGOFFSET)
 329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_MASK         (ADC_AWD_TR1_REGOFFSET | ADC_AWD_TR2_REGOFFSET | ADC_AWD
 330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_REGOFFSET_POS          (ADC_AWD_CRX_REGOFFSET_POS)     /* Position of bits ADC_
 331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_MASK          (0x00010000UL)                   /* Selection of 1 bit t
 333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_POS           (16UL)                           /* Selection of 1 bit t
 334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TRX_BIT_HIGH_SHIFT4        (ADC_AWD_TRX_BIT_HIGH_POS - 4UL) /* Shift of bit ADC_AWD
 335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Register offset gap between AWD1 and AWD2-AWD3 thresholds registers */
 338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* (Set separately as ADC_AWD_TRX_REGOFFSET to spare 32 bits space */
 339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_MASK     (ADC_AWD2CR_AWD2CH_0)
 340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_AWD_TR12_REGOFFSETGAP_VAL      (0x00000022UL)
 341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Legacy literals */
 343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1_TR                      LL_ADC_AWD1
 344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2_TR                      LL_ADC_AWD2
 345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3_TR                      LL_ADC_AWD3
 346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal mask for ADC offset:                                              */
 348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal register offset for ADC offset number configuration */
 349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR1_REGOFFSET                 (0x00000000UL)
 350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR2_REGOFFSET                 (0x00000001UL)
 351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR3_REGOFFSET                 (0x00000002UL)
 352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFR4_REGOFFSET                 (0x00000003UL)
 353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_OFRx_REGOFFSET_MASK            (ADC_OFR1_REGOFFSET | ADC_OFR2_REGOFFSET | ADC_OFR3_REGO
 354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits positions */
 357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS         (ADC_CFGR_RES_Pos)
 358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1SGL_BITOFFSET_POS     (ADC_CFGR_AWD1SGL_Pos)
 359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_AWD1EN_BITOFFSET_POS      (ADC_CFGR_AWD1EN_Pos)
 360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_JAWD1EN_BITOFFSET_POS     (ADC_CFGR_JAWD1EN_Pos)
 361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CFGR_RES_BITOFFSET_POS_ADC3    (ADC3_CFGR_RES_Pos)
 363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC registers bits groups */
 367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_CR_BITS_PROPERTY_RS            (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JA
 368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* ADC internal channels related definitions */
 371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Internal voltage reference VrefInt */
 372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x8fff810UL))  /* Internal voltage referen
ARM GAS  /tmp/ccecbe7f.s 			page 37


 374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Adress related to STM32H
 375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_ADDR                   ((uint16_t*) (0x1FF1E860UL)) /* Internal voltage referen
 377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define VREFINT_CAL_VREF                   (3300UL)                     /* Analog voltage reference
 379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Temperature sensor */
 380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
 381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x8fff814UL))  /* Internal temperature sen
 382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x8fff818UL))  /* Internal temperature sen
 383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                         /* Adresses related to STM3
 384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_90 || ADC_VER_V5_X */
 385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_ADDR               ((uint16_t*) (0x1FF1E820UL)) /* Internal temperature sen
 386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_ADDR               ((uint16_t*) (0x1FF1E840UL)) /* Internal temperature sen
 387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_3 */
 388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL1_TEMP               (30L)                        /* Internal temperature sen
 390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL2_TEMP               (110L)                       /* Internal temperature sen
 391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define TEMPSENSOR_CAL_VREFANALOG          (3300UL)                     /* Analog voltage reference
 392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Registers addresses with ADC linearity calibration content (programmed during device production,
 394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_1_ADDR ((uint32_t*) (0x1FF1EC00UL))
 395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_2_ADDR ((uint32_t*) (0x1FF1EC04UL))
 396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_3_ADDR ((uint32_t*) (0x1FF1EC08UL))
 397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_4_ADDR ((uint32_t*) (0x1FF1EC0CUL))
 398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_5_ADDR ((uint32_t*) (0x1FF1EC10UL))
 399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_6_ADDR ((uint32_t*) (0x1FF1EC14UL))
 400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEAR_CALIB_REG_COUNT  (6UL)
 401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Private macros ------------------------------------------------------------*/
 407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Private_Macros ADC Private Macros
 408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Driver macro reserved for internal use: set a pointer to
 413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a register from a register basis from which an offset
 414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is applied.
 415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register basis from which the offset is applied.
 416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG_OFFFSET__ Offset to be applied (unit: number of registers).
 417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Pointer to register address
 418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __ADC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
 420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2UL))))
 421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported types ------------------------------------------------------------*/
 428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(USE_FULL_LL_DRIVER)
 429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_ES_INIT ADC Exported Init structure
 430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccecbe7f.s 			page 38


 431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC common parameters
 435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and multimode
 436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (all ADC instances belonging to the same ADC common instance).
 437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_CommonInit()
 438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC instances state (all ADC instances
 439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sharing the same ADC common instance):
 440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances sharing the same ADC common instance must be
 441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         disabled.
 442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t CommonClock;                 /*!< Set parameter common to several ADC: Clock source and 
 446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_COMMON
 447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 serie, if ADC group injected is us
 448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    clock ratio constraints between ADC clock and AH
 449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    must be respected. Refer to reference manual.
 450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Multimode;                   /*!< Set ADC multimode configuration to operate in independ
 454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiDMATransfer;            /*!< Set ADC dual ADC mode DMA transfer data format: Each D
 459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t MultiTwoSamplingDelay;       /*!< Set ADC multimode delay between 2 sampling phases.
 464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_MULTI_
 465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_CommonInitTypeDef;
 469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC instance.
 472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC instance.
 473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Affects both group regular and group injected (availability
 474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of ADC group injected depends on STM32 families).
 475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Instance .
 477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_Init()
 478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
ARM GAS  /tmp/ccecbe7f.s 			page 39


 488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Resolution;                  /*!< Set ADC resolution.
 493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_RESOLU
 494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LeftBitShift;                /*!< Configures the left shifting applied to the final resu
 498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LEFT_B
 499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t LowPowerMode;                /*!< Set ADC low power mode.
 501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_LP_MOD
 502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_InitTypeDef;
 506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group regular.
 509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group regular.
 510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "REG").
 513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_REG_Init()
 514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group regular conversion trigger source: inter
 529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_TR
 530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group regular sequencer length.
 537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group regular sequencer discontinuous mode: se
 542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_SE
 543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group regul
 544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
ARM GAS  /tmp/ccecbe7f.s 			page 40


 545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ContinuousMode;              /*!< Set ADC continuous conversion mode on ADC group regula
 549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_CO
 550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: It is not possible to enable both ADC group regu
 551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t DataTransferMode;            /*!< Set ADC group regular conversion data transfer mode: n
 555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_DA
 556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t Overrun;                     /*!< Set ADC group regular behavior in case of overrun:
 560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              data preserved or overwritten.
 561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_REG_OV
 562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_REG_InitTypeDef;
 566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Structure definition of some features of ADC group injected.
 569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These parameters have an impact on ADC scope: ADC group injected.
 570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to corresponding unitary functions into
 571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref ADC_LL_EF_Configuration_ADC_Group_Regular
 572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions with prefix "INJ").
 573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The setting of these parameters by function @ref LL_ADC_INJ_Init()
 574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is conditioned to ADC state:
 575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance must be disabled.
 576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This condition is applied to all ADC features, for efficiency
 577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and compatibility over all STM32 families. However, the different
 578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         features can be set under different ADC state conditions
 579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (setting possible with ADC enabled without conversion on going,
 580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC enabled with conversion on going, ...)
 581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Each feature can be updated afterwards with a unitary function
 582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and potentially with ADC in a different state than disabled,
 583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         refer to description of each function for setting
 584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         conditioned to ADC state.
 585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** typedef struct
 587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
 588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TriggerSource;               /*!< Set ADC group injected conversion trigger source: inte
 589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note On this STM32 serie, setting trigger source to e
 591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (default setting for compatibility with some ADC
 592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    In case of need to modify trigger edge, use func
 593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerLength;             /*!< Set ADC group injected sequencer length.
 597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t SequencerDiscont;            /*!< Set ADC group injected sequencer discontinuous mode: s
ARM GAS  /tmp/ccecbe7f.s 			page 41


 602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_SE
 603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              @note This parameter has an effect only if group injec
 604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    (scan length of 2 ranks or more).
 605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t TrigAuto;                    /*!< Set ADC group injected conversion trigger: independent
 609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This parameter can be a value of @ref ADC_LL_EC_INJ_TR
 610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              Note: This parameter must be set to set to independent
 611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              This feature can be modified afterwards using unitary 
 613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** } LL_ADC_INJ_InitTypeDef;
 615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* USE_FULL_LL_DRIVER */
 620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported constants --------------------------------------------------------*/
 622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Constants ADC Exported Constants
 623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_FLAG ADC flags
 627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    Flags defines which can be used with LL_ADC_ReadReg function
 628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY                  ADC_ISR_ADRDY      /*!< ADC flag ADC instance ready */
 631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC                    ADC_ISR_EOC        /*!< ADC flag ADC group regular end o
 632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS                    ADC_ISR_EOS        /*!< ADC flag ADC group regular end o
 633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR                    ADC_ISR_OVR        /*!< ADC flag ADC group regular overr
 634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP                  ADC_ISR_EOSMP      /*!< ADC flag ADC group regular end o
 635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC                   ADC_ISR_JEOC       /*!< ADC flag ADC group injected end 
 636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS                   ADC_ISR_JEOS       /*!< ADC flag ADC group injected end 
 637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF                  ADC_ISR_JQOVF      /*!< ADC flag ADC group injected cont
 638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1                   ADC_ISR_AWD1       /*!< ADC flag ADC analog watchdog 1 *
 639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2                   ADC_ISR_AWD2       /*!< ADC flag ADC analog watchdog 2 *
 640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3                   ADC_ISR_AWD3       /*!< ADC flag ADC analog watchdog 3 *
 641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_MST              ADC_CSR_ADRDY_MST  /*!< ADC flag ADC multimode master in
 642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_ADRDY_SLV              ADC_CSR_ADRDY_SLV  /*!< ADC flag ADC multimode slave ins
 643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_MST                ADC_CSR_EOC_MST    /*!< ADC flag ADC multimode master gr
 644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOC_SLV                ADC_CSR_EOC_SLV    /*!< ADC flag ADC multimode slave gro
 645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_MST                ADC_CSR_EOS_MST    /*!< ADC flag ADC multimode master gr
 646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOS_SLV                ADC_CSR_EOS_SLV    /*!< ADC flag ADC multimode slave gro
 647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_MST                ADC_CSR_OVR_MST    /*!< ADC flag ADC multimode master gr
 648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_OVR_SLV                ADC_CSR_OVR_SLV    /*!< ADC flag ADC multimode slave gro
 649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_MST              ADC_CSR_EOSMP_MST  /*!< ADC flag ADC multimode master gr
 650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_EOSMP_SLV              ADC_CSR_EOSMP_SLV  /*!< ADC flag ADC multimode slave gro
 651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_MST               ADC_CSR_JEOC_MST   /*!< ADC flag ADC multimode master gr
 652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOC_SLV               ADC_CSR_JEOC_SLV   /*!< ADC flag ADC multimode slave gro
 653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_MST               ADC_CSR_JEOS_MST   /*!< ADC flag ADC multimode master gr
 654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JEOS_SLV               ADC_CSR_JEOS_SLV   /*!< ADC flag ADC multimode slave gro
 655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_MST              ADC_CSR_JQOVF_MST  /*!< ADC flag ADC multimode master gr
 656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_JQOVF_SLV              ADC_CSR_JQOVF_SLV  /*!< ADC flag ADC multimode slave gro
 657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_MST               ADC_CSR_AWD1_MST   /*!< ADC flag ADC multimode master an
 658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD1_SLV               ADC_CSR_AWD1_SLV   /*!< ADC flag ADC multimode slave ana
ARM GAS  /tmp/ccecbe7f.s 			page 42


 659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_MST               ADC_CSR_AWD2_MST   /*!< ADC flag ADC multimode master an
 660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD2_SLV               ADC_CSR_AWD2_SLV   /*!< ADC flag ADC multimode slave ana
 661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_MST               ADC_CSR_AWD3_MST   /*!< ADC flag ADC multimode master an
 662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_FLAG_AWD3_SLV               ADC_CSR_AWD3_SLV   /*!< ADC flag ADC multimode slave ana
 663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_IT ADC interruptions for configuration (interruption enable or disable)
 668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief    IT defines which can be used with LL_ADC_ReadReg and  LL_ADC_WriteReg functions
 669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_ADRDY                    ADC_IER_ADRDYIE    /*!< ADC interruption ADC instance re
 672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOC                      ADC_IER_EOCIE      /*!< ADC interruption ADC group regul
 673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOS                      ADC_IER_EOSIE      /*!< ADC interruption ADC group regul
 674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_OVR                      ADC_IER_OVRIE      /*!< ADC interruption ADC group regul
 675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_EOSMP                    ADC_IER_EOSMPIE    /*!< ADC interruption ADC group regul
 676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOC                     ADC_IER_JEOCIE     /*!< ADC interruption ADC group injec
 677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JEOS                     ADC_IER_JEOSIE     /*!< ADC interruption ADC group injec
 678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_JQOVF                    ADC_IER_JQOVFIE    /*!< ADC interruption ADC group injec
 679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD1                     ADC_IER_AWD1IE     /*!< ADC interruption ADC analog watc
 680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD2                     ADC_IER_AWD2IE     /*!< ADC interruption ADC analog watc
 681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_IT_AWD3                     ADC_IER_AWD3IE     /*!< ADC interruption ADC analog watc
 682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REGISTERS  ADC registers compliant with specific purpose
 687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* List of ADC registers intended to be used (most commonly) with             */
 690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* DMA transfer.                                                              */
 691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Refer to function @ref LL_ADC_DMA_GetRegAddr().                            */
 692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA          (0x00000000UL) /* ADC group regular conversion data re
 693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DMA_REG_REGULAR_DATA_MULTI    (0x00000001UL) /* ADC group regular conversion data re
 694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_CLOCK_SOURCE  ADC common - Clock source
 699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV1        (ADC_CCR_CKMODE_0)                                    /*
 702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV2        (ADC_CCR_CKMODE_1                   )                 /*
 703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_SYNC_PCLK_DIV4        (ADC_CCR_CKMODE_1 | ADC_CCR_CKMODE_0)                 /*
 704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV1            (0x00000000UL)                                        /*
 705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV2            (ADC_CCR_PRESC_0)                                     /*
 706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV4            (ADC_CCR_PRESC_1                  )                   /*
 707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV6            (ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0)                   /*
 708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV8            (ADC_CCR_PRESC_2                                    ) /*
 709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV10           (ADC_CCR_PRESC_2                   | ADC_CCR_PRESC_0) /*
 710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV12           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1                  ) /*
 711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV16           (ADC_CCR_PRESC_2 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
 712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV32           (ADC_CCR_PRESC_3)                                     /*
 713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV64           (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_0)                   /*
 714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV128          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1)                   /*
 715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CLOCK_ASYNC_DIV256          (ADC_CCR_PRESC_3 | ADC_CCR_PRESC_1 | ADC_CCR_PRESC_0) /*
ARM GAS  /tmp/ccecbe7f.s 			page 43


 716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_COMMON_PATH_INTERNAL  ADC common - Measurement path to internal channels
 721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Other measurement paths to internal channels may be available        */
 724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       (connections to other peripherals).                                  */
 725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       If they are not listed below, they do not require any specific       */
 726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       path enable. In this case, Access to measurement path is done        */
 727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       only by selecting the corresponding ADC internal channel.            */
 728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_NONE          (0x00000000UL)         /*!< ADC measurement pathes all d
 729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VREFINT       (ADC_CCR_VREFEN)       /*!< ADC measurement path to inte
 730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_TEMPSENSOR    (ADC_CCR_TSEN)         /*!< ADC measurement path to inte
 731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_PATH_INTERNAL_VBAT          (ADC_CCR_VBATEN)       /*!< ADC measurement path to inte
 732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_BOOST_MODE ADC instance - Boost mode
 737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_6MHZ25   (0x00000000UL)                                            /*!< B
 740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_12MHZ5   (                                        ADC_CR_BOOST_0)  /*!< B
 741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_20MHZ    (                       ADC_CR_BOOST_1                 )  /*!< B
 742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_25MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1                 )  /*!< B
 743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOOST_MODE_50MHZ    ((ADC_CR_BOOST_0 <<2) | ADC_CR_BOOST_1 | ADC_CR_BOOST_0)  /*!< B
 744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_OFFSET_LINEARITY  ADC instance - Calibration mode for offset an
 749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET                (ADC_CALIB_FACTOR_OFFSET_REGOFFSET)                     
 752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY             (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET)                  
 753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_OFFSET_LINEARITY      (ADC_CALIB_FACTOR_LINEARITY_REGOFFSET | ADC_CR_ADCALLIN)
 754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CALIBRATION_LINEARITY_WORD  ADC instance - Calibration linearity words
 759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD1       (ADC_CR_LINCALRDYW1)    /*!< ADC calibration linearity w
 762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD2       (ADC_CR_LINCALRDYW2)    /*!< ADC calibration linearity w
 763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD3       (ADC_CR_LINCALRDYW3)    /*!< ADC calibration linearity w
 764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD4       (ADC_CR_LINCALRDYW4)    /*!< ADC calibration linearity w
 765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD5       (ADC_CR_LINCALRDYW5)    /*!< ADC calibration linearity w
 766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CALIB_LINEARITY_WORD6       (ADC_CR_LINCALRDYW6)    /*!< ADC calibration linearity w
 767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_RESOLUTION  ADC instance - Resolution
 772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccecbe7f.s 			page 44


 773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_16B              (0x00000000UL)                                      /*!<
 775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B              (                                  ADC_CFGR_RES_0)  /*!<
 776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B              (                 ADC_CFGR_RES_1                 )  /*!<
 777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_10B              (                 ADC_CFGR_RES_1 | ADC_CFGR_RES_0)  /*!<
 778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_X)
 780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_14B_OPT          (ADC_CFGR_RES_2 |                  ADC_CFGR_RES_0)  /*!<
 781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_12B_OPT          (ADC_CFGR_RES_2 | ADC_CFGR_RES_1                 )  /*!<
 782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
 785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0) /*!< AD
 786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_8B               (ADC_CFGR_RES_2                                ) /*!< AD
 788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                             /*!< Th
 789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                                    
 791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_RESOLUTION_6B               (ADC3_CFGR_RES_1 | ADC3_CFGR_RES_0)   /*!< ADC resolutio
 794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_DATA_ALIGN  ADC instance - Data alignment
 801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_RIGHT            (0x00000000UL)         /*!< ADC conversion data alignmen
 804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DATA_ALIGN_LEFT             (ADC3_CFGR_ALIGN)       /*!< ADC conversion data alignme
 805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
 810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LEFT_BIT_SHIFT   ADC left Shift
 812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_NONE  (0x00000000UL)                                                 
 815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_1     (ADC_CFGR2_LSHIFT_0)                                           
 816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_2     (ADC_CFGR2_LSHIFT_1)                                           
 817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_3     (ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0)                      
 818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_4     (ADC_CFGR2_LSHIFT_2)                                           
 819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_5     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0)                      
 820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_6     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1)                      
 821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_7     (ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_8     (ADC_CFGR2_LSHIFT_3)                                           
 823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_9     (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_0)                      
 824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_10    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1)                      
 825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_11    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_1 | ADC_CFGR2_LSHIFT_0) 
 826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_12    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2)                      
 827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_13    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_0) 
 828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_14    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1) 
 829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LEFT_BIT_SHIFT_15    (ADC_CFGR2_LSHIFT_3 | ADC_CFGR2_LSHIFT_2 | ADC_CFGR2_LSHIFT_1 |
ARM GAS  /tmp/ccecbe7f.s 			page 45


 830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_LP_MODE  ADC instance - Low power mode
 835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_MODE_NONE                (0x00000000UL)                      /*!< No ADC low powe
 838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_LP_AUTOWAIT                 (ADC_CFGR_AUTDLY)                   /*!< ADC low power m
 839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_NB  ADC instance - Offset number
 844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_1                    ADC_OFR1_REGOFFSET /*!< ADC offset number 1: ADC channel
 847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_2                    ADC_OFR2_REGOFFSET /*!< ADC offset number 2: ADC channel
 848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_3                    ADC_OFR3_REGOFFSET /*!< ADC offset number 3: ADC channel
 849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_4                    ADC_OFR4_REGOFFSET /*!< ADC offset number 4: ADC channel
 850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGNED_SATURATION ADC instance - Offset signed saturation mode
 855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE   (0x00000000UL)   /*!< ADC offset signed saturatio
 858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE    (ADC_OFR1_SSATE) /*!< ADC offset signed saturatio
 859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_RSHIFT ADC instance - Offset right shift
 864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_DISABLE   (0x00000000UL)      /*!< ADC offset right shift is disabled 
 867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_RSHIFT_ENABLE    (ADC_CFGR2_RSHIFT1) /*!< ADC offset right shif is enabled (a
 868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SATURATION ADC instance - Offset saturation mode
 873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_DISABLE   (0x00000000UL)           /*!< ADC offset saturation is d
 876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SATURATION_ENABLE    (ADC3_OFR1_SATEN)        /*!< ADC offset saturation is e
 877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_STATE ADC instance - Offset state
 882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_DISABLE              (0x00000000UL)         /*!< ADC offset disabled (among A
 885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_ENABLE               (ADC3_OFR1_OFFSET1_EN)  /*!< ADC offset enabled (among A
 886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccecbe7f.s 			page 46


 887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OFFSET_SIGN ADC instance - Offset sign
 891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_NEGATIVE        (0x00000000UL)        /*!< ADC offset is negative (among
 894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OFFSET_SIGN_POSITIVE        (ADC3_OFR1_OFFSETPOS) /*!< ADC offset is positive (among
 895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
 901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_GROUPS  ADC instance - Groups
 903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR               (0x00000001UL) /*!< ADC group regular (available on all 
 906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_INJECTED              (0x00000002UL) /*!< ADC group injected (not available on
 907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_GROUP_REGULAR_INJECTED      (0x00000003UL) /*!< ADC both groups regular and injected
 908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL  ADC instance - Channel number
 913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_0                   (ADC_CHANNEL_0_NUMBER  | ADC_CHANNEL_0_SMP  | ADC_CHANNE
 916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_1                   (ADC_CHANNEL_1_NUMBER  | ADC_CHANNEL_1_SMP  | ADC_CHANNE
 917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_2                   (ADC_CHANNEL_2_NUMBER  | ADC_CHANNEL_2_SMP  | ADC_CHANNE
 918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_3                   (ADC_CHANNEL_3_NUMBER  | ADC_CHANNEL_3_SMP  | ADC_CHANNE
 919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_4                   (ADC_CHANNEL_4_NUMBER  | ADC_CHANNEL_4_SMP  | ADC_CHANNE
 920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_5                   (ADC_CHANNEL_5_NUMBER  | ADC_CHANNEL_5_SMP  | ADC_CHANNE
 921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_6                   (ADC_CHANNEL_6_NUMBER  | ADC_CHANNEL_6_SMP  | ADC_CHANNE
 922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_7                   (ADC_CHANNEL_7_NUMBER  | ADC_CHANNEL_7_SMP  | ADC_CHANNE
 923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_8                   (ADC_CHANNEL_8_NUMBER  | ADC_CHANNEL_8_SMP  | ADC_CHANNE
 924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_9                   (ADC_CHANNEL_9_NUMBER  | ADC_CHANNEL_9_SMP  | ADC_CHANNE
 925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_10                  (ADC_CHANNEL_10_NUMBER | ADC_CHANNEL_10_SMP | ADC_CHANNE
 926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_11                  (ADC_CHANNEL_11_NUMBER | ADC_CHANNEL_11_SMP | ADC_CHANNE
 927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_12                  (ADC_CHANNEL_12_NUMBER | ADC_CHANNEL_12_SMP | ADC_CHANNE
 928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_13                  (ADC_CHANNEL_13_NUMBER | ADC_CHANNEL_13_SMP | ADC_CHANNE
 929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_14                  (ADC_CHANNEL_14_NUMBER | ADC_CHANNEL_14_SMP | ADC_CHANNE
 930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_15                  (ADC_CHANNEL_15_NUMBER | ADC_CHANNEL_15_SMP | ADC_CHANNE
 931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_16                  (ADC_CHANNEL_16_NUMBER | ADC_CHANNEL_16_SMP | ADC_CHANNE
 932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_17                  (ADC_CHANNEL_17_NUMBER | ADC_CHANNEL_17_SMP | ADC_CHANNE
 933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_18                  (ADC_CHANNEL_18_NUMBER | ADC_CHANNEL_18_SMP | ADC_CHANNE
 934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_19                  (ADC_CHANNEL_19_NUMBER | ADC_CHANNEL_19_SMP | ADC_CHANNE
 935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
 936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
ARM GAS  /tmp/ccecbe7f.s 			page 47


 944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
 946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VREFINT             (LL_ADC_CHANNEL_19 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_TEMPSENSOR          (LL_ADC_CHANNEL_18 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_VBAT                (LL_ADC_CHANNEL_14 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH1_ADC2        (LL_ADC_CHANNEL_16 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC1CH2_ADC2        (LL_ADC_CHANNEL_17 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(DAC2)
 954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*!< Specific define for STM32H7A3xx and STM32HB3xx varieties of STM32H7XXX */
 955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_CHANNEL_DAC2CH1_ADC2        (LL_ADC_CHANNEL_15 | ADC_CHANNEL_ID_INTERNAL_CH) /*!< AD
 956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
 957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_SOURCE  ADC group regular - Trigger source
 962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_SOFTWARE          (0x00000000UL)                                           
 965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH1      (ADC_REG_TRIG_EXT_EDGE_DEFAULT)                          
 966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH2      (ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_CH3      (ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_CH2      (ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_CH4      (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_EXTI_LINE11   (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO     (ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM8_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM1_TRGO2    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM2_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM4_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM6_TRGO     (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM15_TRGO    (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM3_CH4      (ADC_CFGR_EXTSEL_3 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG1    (ADC_CFGR_EXTSEL_4 | ADC_REG_TRIG_EXT_EDGE_DEFAULT)      
 982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_HRTIM_TRG3    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_0 | ADC_REG_TRIG_EXT
 983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM1_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_REG_TRIG_EXT
 984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM2_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_1 | ADC_CFGR_EXTSEL_
 985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_LPTIM3_OUT    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_REG_TRIG_EXT
 986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM23)
 987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM23_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM23 */
 989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (TIM24)
 990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_TIM24_TRGO    (ADC_CFGR_EXTSEL_4 | ADC_CFGR_EXTSEL_2 | ADC_CFGR_EXTSEL_
 991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* TIM24 */
 992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
 993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
 994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_TRIGGER_EDGE  ADC group regular - Trigger edge
 997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
 998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
 999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISING         (                   ADC_CFGR_EXTEN_0)   /*!< ADC group r
1000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_FALLING        (ADC_CFGR_EXTEN_1                   )   /*!< ADC group r
ARM GAS  /tmp/ccecbe7f.s 			page 48


1001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_TRIG_EXT_RISINGFALLING  (ADC_CFGR_EXTEN_1 | ADC_CFGR_EXTEN_0)   /*!< ADC group r
1002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  /** @defgroup ADC_LL_EC_REG_SAMPLING_MODE  ADC group regular - Sampling mode
1007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_NORMAL               (0x00000000UL)        /*!< ADC conversions sa
1010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_BULB                 (ADC3_CFGR2_BULB)     /*!< ADC conversions sa
1011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Note: First conver
1012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED    (ADC3_CFGR2_SMPTRIG)  /*!< ADC conversions sa
1013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger rising edg
1014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                                  Trigger falling ed
1015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */ 
1018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_CONTINUOUS_MODE  ADC group regular - Continuous mode
1021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_SINGLE             (0x00000000UL)          /*!< ADC conversions are perform
1024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_CONV_CONTINUOUS         (ADC_CFGR_CONT)         /*!< ADC conversions are perform
1025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DATA_TRANSFER_MODE  ADC group regular - Data transfer mode of ADC conve
1030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DR_TRANSFER             (0x00000000UL)                        /*!< ADC conversio
1033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_LIMITED    (                   ADC_CFGR_DMNGT_0) /*!< ADC conversio
1034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DMA_TRANSFER_UNLIMITED  (ADC_CFGR_DMNGT_1 | ADC_CFGR_DMNGT_0) /*!< ADC conversio
1035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_DFSDM_TRANSFER          (ADC_CFGR_DMNGT_1                   ) /*!< ADC conversio
1036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_DMA_TRANSFER  ADC group regular - DMA transfer of ADC conversion data
1042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_NONE       (0x00000000UL)                        /*!< ADC conversi
1046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_LIMITED    (                  ADC3_CFGR_DMAEN)    /*!< ADC convers
1047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC3_REG_DMA_TRANSFER_UNLIMITED  (ADC3_CFGR_DMACFG | ADC3_CFGR_DMAEN)    /*!< ADC conver
1048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_OVR_DATA_BEHAVIOR  ADC group regular - Overrun behavior on conversion d
1054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_PRESERVED      (0x00000000UL)         /*!< ADC group regular behavior i
1057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_OVR_DATA_OVERWRITTEN    (ADC_CFGR_OVRMOD)      /*!< ADC group regular behavior i
ARM GAS  /tmp/ccecbe7f.s 			page 49


1058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_SCAN_LENGTH  ADC group regular - Sequencer scan length
1063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_DISABLE        (0x00000000UL)                                          
1066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS  (                                             ADC_SQR1_L
1067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS  (                              ADC_SQR1_L_1             
1068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS  (                              ADC_SQR1_L_1 | ADC_SQR1_L
1069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS  (               ADC_SQR1_L_2                            
1070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS  (               ADC_SQR1_L_2                | ADC_SQR1_L
1071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1             
1072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS  (               ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS  (ADC_SQR1_L_3                                           
1074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS (ADC_SQR1_L_3                               | ADC_SQR1_L
1075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1             
1076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS (ADC_SQR1_L_3                | ADC_SQR1_L_1 | ADC_SQR1_L
1077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                            
1078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2                | ADC_SQR1_L
1079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1             
1080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS (ADC_SQR1_L_3 | ADC_SQR1_L_2 | ADC_SQR1_L_1 | ADC_SQR1_L
1081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_DISCONT_MODE  ADC group regular - Sequencer discontinuous mode
1086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_DISABLE     (0x00000000UL)                                          
1089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_1RANK       (                                                       
1090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_2RANKS      (                                          ADC_CFGR_DISC
1091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_3RANKS      (                     ADC_CFGR_DISCNUM_1                
1092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_4RANKS      (                     ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_5RANKS      (ADC_CFGR_DISCNUM_2                                     
1094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_6RANKS      (ADC_CFGR_DISCNUM_2                      | ADC_CFGR_DISC
1095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_7RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1                
1096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_SEQ_DISCONT_8RANKS      (ADC_CFGR_DISCNUM_2 | ADC_CFGR_DISCNUM_1 | ADC_CFGR_DISC
1097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_REG_SEQ_RANKS  ADC group regular - Sequencer ranks
1102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_1                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_1_SQRX_BITOFFSET_POS)
1105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_2                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_2_SQRX_BITOFFSET_POS)
1106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_3                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_3_SQRX_BITOFFSET_POS)
1107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_4                  (ADC_SQR1_REGOFFSET | ADC_REG_RANK_4_SQRX_BITOFFSET_POS)
1108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_5                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_5_SQRX_BITOFFSET_POS)
1109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_6                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_6_SQRX_BITOFFSET_POS)
1110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_7                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_7_SQRX_BITOFFSET_POS)
1111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_8                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_8_SQRX_BITOFFSET_POS)
1112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_9                  (ADC_SQR2_REGOFFSET | ADC_REG_RANK_9_SQRX_BITOFFSET_POS)
1113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_10                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_10_SQRX_BITOFFSET_POS
1114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_11                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_11_SQRX_BITOFFSET_POS
ARM GAS  /tmp/ccecbe7f.s 			page 50


1115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_12                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_12_SQRX_BITOFFSET_POS
1116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_13                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_13_SQRX_BITOFFSET_POS
1117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_14                 (ADC_SQR3_REGOFFSET | ADC_REG_RANK_14_SQRX_BITOFFSET_POS
1118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_15                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_15_SQRX_BITOFFSET_POS
1119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_REG_RANK_16                 (ADC_SQR4_REGOFFSET | ADC_REG_RANK_16_SQRX_BITOFFSET_POS
1120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_SOURCE  ADC group injected - Trigger source
1125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_SOFTWARE           (0x00000000UL)                                          
1128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO      (ADC_INJ_TRIG_EXT_EDGE_DEFAULT)                         
1129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_CH4       (ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_TRGO      (ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM2_CH1       (ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM4_TRGO      (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_EXTI_LINE15    (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_CH4       (ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH3       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM3_CH1       (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM6_TRGO      (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM15_TRGO     (ADC_JSQR_JEXTSEL_3 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2     (ADC_JSQR_JEXTSEL_4 | ADC_INJ_TRIG_EXT_EDGE_DEFAULT)    
1145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_0 | ADC_INJ_TRIG_
1146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_INJ_TRIG_
1147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_1 | ADC_JSQR_JEXT
1148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_INJ_TRIG_
1149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM23_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_TIM24_TRGO     (ADC_JSQR_JEXTSEL_4 | ADC_JSQR_JEXTSEL_2 | ADC_JSQR_JEXT
1151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIGGER_EDGE  ADC group injected - Trigger edge
1156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISING         (                    ADC_JSQR_JEXTEN_0) /*!< ADC group i
1159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_FALLING        (ADC_JSQR_JEXTEN_1                    ) /*!< ADC group i
1160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_EXT_RISINGFALLING  (ADC_JSQR_JEXTEN_1 | ADC_JSQR_JEXTEN_0) /*!< ADC group i
1161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_TRIG_AUTO  ADC group injected - Automatic trigger mode
1166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @{
1167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
1168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_INDEPENDENT        (0x00000000UL)         /*!< ADC group injected conversio
1169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_TRIG_FROM_GRP_REGULAR   (ADC_CFGR_JAUTO)       /*!< ADC group injected conversio
1170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccecbe7f.s 			page 51


1172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_CONTEXT_QUEUE  ADC group injected - Context queue mode
1175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE (0x00000000UL)         /* Group injected sequence co
1178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY   (ADC_CFGR_JQM)         /* Group injected sequence co
1179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_QUEUE_DISABLE               (ADC_CFGR_JQDIS)       /* Group injected sequence co
1180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_SCAN_LENGTH  ADC group injected - Sequencer scan length
1185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_DISABLE        (0x00000000UL)                  /*!< ADC group injected 
1188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS  (                ADC_JSQR_JL_0) /*!< ADC group injected 
1189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS  (ADC_JSQR_JL_1                ) /*!< ADC group injected 
1190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS  (ADC_JSQR_JL_1 | ADC_JSQR_JL_0) /*!< ADC group injected 
1191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_DISCONT_MODE  ADC group injected - Sequencer discontinuous mode
1196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_DISABLE     (0x00000000UL)         /*!< ADC group injected sequencer
1199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_SEQ_DISCONT_1RANK       (ADC_CFGR_JDISCEN)     /*!< ADC group injected sequencer
1200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_INJ_SEQ_RANKS  ADC group injected - Sequencer ranks
1205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_1                  (ADC_JDR1_REGOFFSET | ADC_INJ_RANK_1_JSQR_BITOFFSET_POS)
1208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_2                  (ADC_JDR2_REGOFFSET | ADC_INJ_RANK_2_JSQR_BITOFFSET_POS)
1209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_3                  (ADC_JDR3_REGOFFSET | ADC_INJ_RANK_3_JSQR_BITOFFSET_POS)
1210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_INJ_RANK_4                  (ADC_JDR4_REGOFFSET | ADC_INJ_RANK_4_JSQR_BITOFFSET_POS)
1211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_1CYCLE_5       (0x00000000UL)                                          
1219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_2CYCLES_5      (                                        ADC_SMPR2_SMP10
1220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_8CYCLES_5      (                    ADC_SMPR2_SMP10_1                  
1221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_16CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_32CYCLES_5     (ADC_SMPR2_SMP10_2                                      
1223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_64CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_SMP10
1224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_387CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1                  
1225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_810CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_SMP10
1226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 52


1229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SAMPLINGTIME  Channel - Sampling time
1231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_2CYCLES_5      (0x00000000UL)                                     
1234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_6CYCLES_5      (                                        ADC_SMPR2_
1235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_12CYCLES_5     (                    ADC_SMPR2_SMP10_1             
1236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_24CYCLES_5     (                    ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_47CYCLES_5     (ADC_SMPR2_SMP10_2                                 
1238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_92CYCLES_5     (ADC_SMPR2_SMP10_2                     | ADC_SMPR2_
1239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_247CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1             
1240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SAMPLINGTIME_ADC3_640CYCLES_5    (ADC_SMPR2_SMP10_2 | ADC_SMPR2_SMP10_1 | ADC_SMPR2_
1241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_CHANNEL_SINGLE_DIFF_ENDING  Channel - Single or differential ending
1247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_SINGLE_ENDED                (                  ADC_CALFACT_CALFACT_S)         /*!< A
1250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DIFFERENTIAL_ENDED          (ADC_CR_ADCALDIF | ADC_CALFACT_CALFACT_D)         /*!< A
1251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_BOTH_SINGLE_DIFF_ENDED      (LL_ADC_SINGLE_ENDED | LL_ADC_DIFFERENTIAL_ENDED) /*!< A
1252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_NUMBER Analog watchdog - Analog watchdog number
1257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD1                        (ADC_AWD_CR1_CHANNEL_MASK  | ADC_AWD_CR1_REGOFFSET) /*!<
1260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD2                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR2_REGOFFSET) /*!<
1261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD3                        (ADC_AWD_CR23_CHANNEL_MASK | ADC_AWD_CR3_REGOFFSET) /*!<
1262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_CHANNELS  Analog watchdog - Monitored channels
1267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_DISABLE                 (0x00000000UL)                                          
1270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG        (ADC_AWD_CR23_CHANNEL_MASK                              
1271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_INJ        (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_ALL_CHANNELS_REG_INJ    (ADC_AWD_CR23_CHANNEL_MASK                 | ADC_CFGR_JA
1273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK)              
1274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_INJ           ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_0_REG_INJ       ((LL_ADC_CHANNEL_0  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK)              
1277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_INJ           ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_1_REG_INJ       ((LL_ADC_CHANNEL_1  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK)              
1280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_INJ           ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_2_REG_INJ       ((LL_ADC_CHANNEL_2  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK)              
1283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_INJ           ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_3_REG_INJ       ((LL_ADC_CHANNEL_3  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK)              
ARM GAS  /tmp/ccecbe7f.s 			page 53


1286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_INJ           ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_4_REG_INJ       ((LL_ADC_CHANNEL_4  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK)              
1289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_INJ           ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_5_REG_INJ       ((LL_ADC_CHANNEL_5  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK)              
1292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_INJ           ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_6_REG_INJ       ((LL_ADC_CHANNEL_6  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK)              
1295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_INJ           ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_7_REG_INJ       ((LL_ADC_CHANNEL_7  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK)              
1298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_INJ           ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_8_REG_INJ       ((LL_ADC_CHANNEL_8  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK)              
1301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_INJ           ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_9_REG_INJ       ((LL_ADC_CHANNEL_9  & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK)              
1304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_INJ          ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_10_REG_INJ      ((LL_ADC_CHANNEL_10 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK)              
1307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_INJ          ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_11_REG_INJ      ((LL_ADC_CHANNEL_11 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK)              
1310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_INJ          ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_12_REG_INJ      ((LL_ADC_CHANNEL_12 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK)              
1313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_INJ          ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_13_REG_INJ      ((LL_ADC_CHANNEL_13 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK)              
1316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_INJ          ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_14_REG_INJ      ((LL_ADC_CHANNEL_14 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK)              
1319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_INJ          ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_15_REG_INJ      ((LL_ADC_CHANNEL_15 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK)              
1322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_INJ          ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_16_REG_INJ      ((LL_ADC_CHANNEL_16 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK)              
1325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_INJ          ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_17_REG_INJ      ((LL_ADC_CHANNEL_17 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK)              
1328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_INJ          ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_18_REG_INJ      ((LL_ADC_CHANNEL_18 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK)              
1331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_INJ          ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CHANNEL_19_REG_INJ      ((LL_ADC_CHANNEL_19 & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JA
1333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK)   
1334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_INJ          ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VREFINT_REG_INJ      ((LL_ADC_CHANNEL_VREFINT       & ADC_CHANNEL_ID_MASK) | 
1336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK)   
1337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_INJ       ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ   ((LL_ADC_CHANNEL_TEMPSENSOR    & ADC_CHANNEL_ID_MASK) | 
1339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK)   
1340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_INJ             ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_VBAT_REG_INJ         ((LL_ADC_CHANNEL_VBAT          & ADC_CHANNEL_ID_MASK) | 
1342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK)   
ARM GAS  /tmp/ccecbe7f.s 			page 54


1343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH1_ADC2  & ADC_CHANNEL_ID_MASK) | 
1345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK)   
1346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ ((LL_ADC_CHANNEL_DAC1CH2_ADC2  & ADC_CHANNEL_ID_MASK) | 
1348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_THRESHOLDS  Analog watchdog - Thresholds
1353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_HIGH          (0x1UL)                     /*!< ADC analog watchdog thr
1356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_THRESHOLD_LOW           (0x0UL)                     /*!< ADC analog watchdog thr
1357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_AWD_FILTERING_CONFIG  Analog watchdog - filtering config
1362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_NONE          (0x00000000UL)                                          
1365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_2SAMPLES      (                                          ADC3_TR1_AWDF
1366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_3SAMPLES      (                     ADC3_TR1_AWDFILT_1                
1367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_4SAMPLES      (                     ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_5SAMPLES      (ADC3_TR1_AWDFILT_2                                     
1369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_6SAMPLES      (ADC3_TR1_AWDFILT_2 |                      ADC3_TR1_AWDF
1370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_7SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1                
1371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_AWD_FILTERING_8SAMPLES      (ADC3_TR1_AWDFILT_2 | ADC3_TR1_AWDFILT_1 | ADC3_TR1_AWDF
1372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SCOPE  Oversampling - Oversampling scope
1378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_DISABLE                 (0x00000000UL)                                        /*
1381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_CONTINUED   (                                    ADC_CFGR2_ROVSE) /*
1382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_REGULAR_RESUMED     (ADC_CFGR2_ROVSM |                   ADC_CFGR2_ROVSE) /*
1383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJECTED            (                  ADC_CFGR2_JOVSE                  ) /*
1384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_GRP_INJ_REG_RESUMED     (                  ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE) /*
1385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_DISCONT_MODE  Oversampling - Discontinuous mode
1390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_CONT                (0x00000000UL)         /*!< ADC oversampling discontinuo
1393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_REG_DISCONT             (ADC_CFGR2_TROVS)      /*!< ADC oversampling discontinuo
1394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_RATIO  Oversampling - Ratio
1399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
ARM GAS  /tmp/ccecbe7f.s 			page 55


1400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_2                 (0x00000000UL)                                          
1402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_4                 (                                        ADC3_CFGR2_OVSR
1403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_8                 (                    ADC3_CFGR2_OVSR_1                  
1404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_16                (                    ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_32                (ADC3_CFGR2_OVSR_2                                      
1406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_64                (ADC3_CFGR2_OVSR_2                     | ADC3_CFGR2_OVSR
1407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_128               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1                  
1408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_RATIO_256               (ADC3_CFGR2_OVSR_2 | ADC3_CFGR2_OVSR_1 | ADC3_CFGR2_OVSR
1409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
1413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_OVS_SHIFT  Oversampling - Data shift
1415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_NONE              (0x00000000UL)                                          
1418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_1           (                                                       
1419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_2           (                                      ADC_CFGR2_OVSS_1 
1420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_3           (                                      ADC_CFGR2_OVSS_1 
1421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_4           (                   ADC_CFGR2_OVSS_2                    
1422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_5           (                   ADC_CFGR2_OVSS_2                    
1423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_6           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_7           (                   ADC_CFGR2_OVSS_2 | ADC_CFGR2_OVSS_1 
1425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_8           (ADC_CFGR2_OVSS_3                                       
1426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_9           (ADC_CFGR2_OVSS_3                                       
1427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_10          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_OVS_SHIFT_RIGHT_11          (ADC_CFGR2_OVSS_3                    | ADC_CFGR2_OVSS_1 
1429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MODE  Multimode - Mode
1434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_INDEPENDENT           (0x00000000UL)                                          
1437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIMULT       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1       
1438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INTERL       (                 ADC_CCR_DUAL_2 | ADC_CCR_DUAL_1 | ADC_
1439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_SIMULT       (                 ADC_CCR_DUAL_2                  | ADC_
1440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_INJ_ALTERN       (ADC_CCR_DUAL_3                                   | ADC_
1441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM  (                                                   ADC_
1442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT  (                                  ADC_CCR_DUAL_1       
1443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM  (                                  ADC_CCR_DUAL_1 | ADC_
1444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_DMA_TRANSFER  Multimode - DMA transfer
1449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_EACH_ADC        (0x00000000UL)                      /*!< ADC multimode
1452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_32_10B      (ADC_CCR_DAMDF_1                  ) /*!< ADC multimode
1453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_REG_DMA_RES_8B          (ADC_CCR_DAMDF_1 | ADC_CCR_DAMDF_0) /*!< ADC multimode
1454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 56


1457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_TWOSMP_DELAY  Multimode - Delay between two sampling phases
1459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5           (0x00000000UL)                                
1462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5          (                                             
1463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5          (                                    ADC_CCR_D
1464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5          (                                    ADC_CCR_D
1465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS   (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5          (                  ADC_CCR_DELAY_2            
1467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES            (ADC_CCR_DELAY_3                              
1469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5          (                  ADC_CCR_DELAY_2            
1470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS  (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5          (                  ADC_CCR_DELAY_2 | ADC_CCR_D
1472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES            (ADC_CCR_DELAY_3                              
1473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES            (ADC_CCR_DELAY_3                              
1474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_MULTI_MASTER_SLAVE  Multimode - ADC master or slave
1479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER                (                    ADC_CDR_RDATA_MST) /*!< In multimod
1482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_SLAVE                 (ADC_CDR_RDATA_SLV                    ) /*!< In multimod
1483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_MULTI_MASTER_SLAVE          (ADC_CDR_RDATA_SLV | ADC_CDR_RDATA_MST) /*!< In multimod
1484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EC_HW_DELAYS  Definitions of ADC hardware constraints delays
1491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Only ADC peripheral HW delays are defined in ADC LL driver driver,
1492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not timeout values.
1493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For details on delays values, refer to descriptions in source code
1494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         above each literal definition.
1495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: Only ADC peripheral HW delays are defined in ADC LL driver driver,   */
1499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       not timeout values.                                                  */
1500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Timeout values for ADC operations are dependent to device clock      */
1501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       configuration (system clock versus ADC clock),                       */
1502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       and therefore must be defined in user application.                   */
1503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Indications for estimation of ADC timeout delays, for this           */
1504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       STM32 serie:                                                         */
1505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC calibration time: maximum delay is 16384/fADC.                   */
1506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tCAL")                      */
1507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC enable time: maximum delay is 1 conversion cycle.              */
1508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device datasheet, parameter "tSTAB")                     */
1509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC disable time: maximum delay should be a few ADC clock cycles   */
1510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC stop conversion time: maximum delay should be a few ADC clock  */
1511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         cycles                                                             */
1512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       - ADC conversion time: duration depending on ADC clock and ADC       */
1513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         configuration.                                                     */
ARM GAS  /tmp/ccecbe7f.s 			page 57


1514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*         (refer to device reference manual, section "Timing")               */
1515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for ADC stabilization time (ADC voltage regulator start-up time)     */
1517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tADCVREG_STUP").                                                */
1519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_INTERNAL_REGUL_STAB_US ( 10UL)  /*!< Delay for ADC stabilization time (ADC vol
1521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for internal voltage reference stabilization time.                   */
1523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay set to maximum value (refer to device datasheet,                     */
1524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "ts_vrefint").                                                   */
1525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_VREFINT_STAB_US       (5UL)  /*!< Delay for internal voltage reference stabili
1527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay for temperature sensor stabilization time.                           */
1529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Literal set to maximum value (refer to device datasheet,                   */
1530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* parameter "tSTART_RUN").                                                   */
1531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: us                                                                   */
1532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_TEMPSENSOR_STAB_US    ( 26UL)  /*!< Delay for temperature sensor stabilization
1533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Delay required between ADC end of calibration and ADC enable.              */
1535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Note: On this STM32 serie, a minimum number of ADC clock cycles            */
1536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       are required between ADC end of calibration and ADC enable.          */
1537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       Wait time can be computed in user application by waiting for the     */
1538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       equivalent number of CPU cycles, by taking into account              */
1539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*       ratio of CPU clock versus ADC clock prescalers.                      */
1540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Unit: ADC clock cycles.                                                    */
1541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES (  4UL)  /*!< Delay required between ADC end of calibr
1542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Fixed timeout value for ADC linearity word bit set/clear delay.                         */
1544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Values defined to be higher than worst cases: low clock frequency,                      */
1545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* maximum prescalers.                                                                     */
1546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Ex of profile low frequency : f_ADC at 4,577 Khz (minimum value                         */
1547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* according to Data sheet), linearity set/clear bit delay MAX = 6 / f_ADC + 3 cycles AHB  */
1548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*           6 / 4577 = 1,311ms                                                            */
1549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* At maximum CPU speed (400 MHz), this means                                              */
1550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /*    3.58 * 400 MHz = 524400 CPU cycles                                                   */
1551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define ADC_LINEARITY_BIT_TOGGLE_TIMEOUT         (524400UL)      /*!< ADC linearity set/clear bit d
1552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported macro ------------------------------------------------------------*/
1563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Macros ADC Exported Macros
1564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_WRITE_READ Common write and read registers Macros
1568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 58


1571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Write a value in ADC register
1573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be written
1575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VALUE__ Value to be written in the register
1576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
1577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE
1579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Read a value in ADC register
1582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __INSTANCE__ ADC Instance
1583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __REG__ Register to be read
1584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Register value
1585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
1587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
1589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EM_HELPER_MACRO ADC helper macro
1592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
1593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
1596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the resolution defines to STM32H73x/2x ADC3 registers values
1598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the ADC3 resolution according to the STM32H73x/2x RefMan.
1599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from ADC3 resolution (12b, 10b, 8b,6b)
1600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
1601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
1602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
1603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
1604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
1605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x00000000UL (value correspodning to ADC3 12 bits)
1607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_0 = 0x00000004  (value corresponding to ADC3 10 bits)
1608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg ADC_CFGR_RES_1 = 0x00000008 (value corresponding to ADC3 8 bits)
1609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg 0x0000001C (value corresponding to ADC3 6 bits)
1610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This helper macro is applicable for STM32H73x/2x devices only
1611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC12_RESOLUTION_TO_ADC3(__ADC_RESOLUTION__)                      \
1613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (                                                                     \
1614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_12B)                     \
1615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             ?(0x00000000UL)                                                    \
1616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              :                                                                 \
1617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_10B)                   \
1618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ?(ADC_CFGR_RES_0)                                               \
1619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 :                                                              \
1620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                 ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_8B)                 \
1621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   ?(ADC_CFGR_RES_1)                                            \
1622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    :                                                           \
1623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    ((__ADC_RESOLUTION__) == LL_ADC_RESOLUTION_6B)              \
1624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      ?((ADC_CFGR_RES_2|ADC_CFGR_RES_1 | ADC_CFGR_RES_0))       \
1625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                        :(0x00000000UL)                                         \
1626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          )
1627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 59


1628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
1629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel number in decimal format
1632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from literals LL_ADC_CHANNEL_x.
1633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_CHANNEL_4)
1635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return decimal number "4".
1636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The input can be a value from functions where a channel
1637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number is returned, either defined with number
1638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or with bitfield (only one bit must be set).
1639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0 and Max_Data=18
1671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                        \
1673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0UL)                                 \
1674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                    \
1675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS \
1676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                    \
1678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                    \
1679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (uint32_t)POSITION_VAL((__CHANNEL__))                                               \
1680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                    \
1681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get ADC channel in literal format LL_ADC_CHANNEL_x
ARM GAS  /tmp/ccecbe7f.s 			page 60


1685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from number in decimal format.
1686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Example:
1687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           __LL_ADC_DECIMAL_NB_TO_CHANNEL(4)
1688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will return a data equivalent to "LL_ADC_CHANNEL_4".
1689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DECIMAL_NB__ Value between Min_Data=0 and Max_Data=18
1690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                                             
1726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DECIMAL_NB__) <= 9UL)                                                                       
1727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                                            
1728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                             |     
1729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                             |     
1730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR1_REGOFFSET | (((3UL * (__DECIMAL_NB__))) << ADC_CHANNEL_SMPx_BITOFFSET_POS))      
1731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
1733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                                            
1734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)                                   
1735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_AWD2CR_AWD2CH_0 << (__DECIMAL_NB__))                                                   
1736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC_SMPR2_REGOFFSET | (((3UL * ((__DECIMAL_NB__) - 10UL))) << ADC_CHANNEL_SMPx_BITOFFSET_PO
1737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                                            
1738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the selected channel
ARM GAS  /tmp/ccecbe7f.s 			page 61


1742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to literal definitions of driver.
1743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The different literal definitions of ADC channels are:
1744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC internal channel:
1745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...
1746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC external channel (channel connected to a GPIO pin):
1747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...
1748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from literal
1749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...),
1752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value from functions where a channel number is
1753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the channel corresponds to a parameter definition of a ADC external channe
1789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the channel corresponds to a parameter definition of a ADC internal channe
1790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
1792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0UL)
1793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert a channel defined from parameter
1796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to its equivalent parameter definition of a ADC external channel
ARM GAS  /tmp/ccecbe7f.s 			page 62


1799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...).
1800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter can be, additionally to a value
1801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined from parameter definition of a ADC internal channel
1802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (LL_ADC_CHANNEL_VREFINT, LL_ADC_CHANNEL_TEMPSENSOR, ...),
1803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a value defined from parameter definition of
1804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is returned
1806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC registers.
1807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
1838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0
1840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
1841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
1842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
1843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
1844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
1845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
ARM GAS  /tmp/ccecbe7f.s 			page 63


1856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
1861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
1862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to determine whether the internal channel
1865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         selected is available on the ADC instance selected.
1866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The channel parameter must be a value defined from parameter
1867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         definition of a ADC internal channel (LL_ADC_CHANNEL_VREFINT,
1868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         LL_ADC_CHANNEL_TEMPSENSOR, ...),
1869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must not be a value defined from parameter definition of
1870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC external channel (LL_ADC_CHANNEL_1, LL_ADC_CHANNEL_2, ...)
1871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or a value from functions where a channel number is
1872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned from ADC registers,
1873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because internal and external channels share the same channel
1874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number in ADC registers. The differentiation is made only with
1875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         parameters definitions of driver.
1876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_INSTANCE__ ADC instance
1877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
1886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if the internal channel selected is not available on the ADC instance selecte
1887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if the internal channel selected is available on the ADC instance selected.
1888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
1889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3)
1890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2)                          \
1895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ||                                                                          \
1898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (((__ADC_INSTANCE__) == ADC3)                                               \
1899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
1901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
1907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
1908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADC_INSTANCE__) == ADC2)                                               \
1909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     &&(                                                                        \
1910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH1_ADC2) ||                       \
1911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_DAC1CH2_ADC2) ||                       \
1912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)   ||                       \
ARM GAS  /tmp/ccecbe7f.s 			page 64


1913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VBAT)         ||                       \
1914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)                               \
1915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
1916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                           \
1917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
1918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
1919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
1920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
1921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define ADC analog watchdog parameter:
1922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         define a single channel to monitor with analog watchdog
1923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from sequencer channel and groups definition.
1924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDMonitChannels().
1925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
1926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDMonitChannels(
1927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1, LL_ADC_AWD1,
1928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_CHANNEL_GROUP(LL_ADC_CHANNEL4, LL_ADC_GROUP_REGULAR))
1929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CHANNEL__ This parameter can be one of the following values:
1930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
1931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
1932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
1933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
1934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
1935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
1936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
1937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
1938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
1939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
1940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
1941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
1942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
1943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
1944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
1945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
1946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
1947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
1948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
1949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
1950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
1951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
1952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
1953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
1954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
1955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
1956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
1957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
1958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
1959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
1960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
1961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
1962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
1963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __GROUP__ This parameter can be one of the following values:
1964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR
1965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_INJECTED
1966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_GROUP_REGULAR_INJECTED
1967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
1968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
1969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
ARM GAS  /tmp/ccecbe7f.s 			page 65


1970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
1971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
1972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
1973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
1974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
1975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
1976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
1977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
1978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
1979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
1980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
1981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
1982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
1983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
1984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
1985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
1986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
1987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
1988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
1989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
1990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
1991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
1992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
1993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
1994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
1995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
1996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
1997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
1998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
1999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
2000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
2001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
2002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
2003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
2004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
2005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
2006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
2007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
2008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
2009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
2010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
2011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
2012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
2013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
2014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
2015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
2016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
2017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
2018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
2019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
2020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
2021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
2022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
2023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
2024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
2025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
2026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
ARM GAS  /tmp/ccecbe7f.s 			page 66


2027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
2028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
2029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
2030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
2031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
2032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
2033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
2034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
2035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
2036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
2037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
2038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
2039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
2040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
2041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
2042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
2043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
2044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
2045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
2046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
2047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
2049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
2050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
2051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                    
2053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__GROUP__) == LL_ADC_GROUP_REGULAR)                                                           
2054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)                 
2055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                                            
2056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ((__GROUP__) == LL_ADC_GROUP_INJECTED)                                                       
2057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1SGL)             
2058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :                                                                                         
2059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD
2060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the value of ADC analog watchdog threshold high
2064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetAnalogWDThresholds().
2067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to set the value of
2068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetAnalogWDThresholds
2070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (< ADCx param >,
2071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(LL_ADC_RESOLUTION_8B, <threshold_value_1
2072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
2083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
ARM GAS  /tmp/ccecbe7f.s 			page 67


2084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the value of ADC analog watchdog threshold high
2087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or low in function of ADC resolution, when ADC resolution is
2088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         different of 16 bits.
2089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_GetAnalogWDThresholds().
2090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, with a ADC resolution of 8 bits, to get the value of
2091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog threshold high (on 18 bits):
2092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           < threshold_value_18_bits > = __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION
2093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            (LL_ADC_RESOLUTION_8B,
2094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_GetAnalogWDThresholds(<ADCx param>, LL_ADC_AWD_THRESHOLD_HIGH)
2095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            );
2096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __AWD_THRESHOLD_16_BITS__ Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000000 and Max_Data=0xFFFFFF
2104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_16_BITS__) \
2106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__AWD_THRESHOLD_16_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1U )))
2107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to set the ADC calibration value with both single ended
2110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential modes calibration factors concatenated.
2111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To be used with function @ref LL_ADC_SetCalibrationOffsetFactor().
2112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example, to set calibration factors single ended to 0x55
2113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential ended to 0x2A:
2114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_ADC_SetCalibrationOffsetFactor(
2115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC1,
2116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(0x55, 0x2A))
2117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_SINGLE_ENDED__ Value between Min_Data=0x00 and Max_Data=0x7F
2118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __CALIB_FACTOR_DIFFERENTIAL__ Value between Min_Data=0x00 and Max_Data=0x7F
2119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
2120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALIB_FACTOR_SINGLE_DIFF(__CALIB_FACTOR_SINGLE_ENDED__, __CALIB_FACTOR_DIFFERENTIA
2122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__CALIB_FACTOR_DIFFERENTIAL__) << ADC_CALFACT_CALFACT_D_Pos) | (__CALIB_FACTOR_SINGLE_ENDED__)
2123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to get the ADC multimode conversion data of ADC master
2126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or ADC slave from raw value with both ADC conversion data concatenated.
2127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used when multimode transfer by DMA
2128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled: refer to function @ref LL_ADC_SetMultiDMATransfer().
2129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In this case the transferred data need to processed with this macro
2130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to separate the conversion data of ADC master and ADC slave.
2131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_MASTER_SLAVE__ This parameter can be one of the following values:
2132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
2133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
2134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_MULTI_CONV_DATA__ Value between Min_Data=0x000 and Max_Data=0xFFF
2135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
2136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE(__ADC_MULTI_MASTER_SLAVE__, __ADC_MULTI_CONV_DATA__) 
2138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADC_MULTI_CONV_DATA__) >> ((ADC_CDR_RDATA_SLV_Pos) & ~(__ADC_MULTI_MASTER_SLAVE__))) & ADC_C
2139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccecbe7f.s 			page 68


2141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select, from a ADC instance, to which ADC instance
2142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         it has a dependence in multimode (ADC master of the corresponding
2143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance).
2144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of device with multimode available and a mix of
2145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances compliant and not compliant with multimode feature,
2146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instances not compliant with multimode feature are
2147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         considered as master instances (do not depend to
2148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         any other ADC instance).
2149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval __ADCx__ ADC instance master of the corresponding ADC common instance
2151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_MULTI_INSTANCE_MASTER(__ADCx__) \
2153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ( ( ((__ADCx__) == ADC2)                                                     \
2154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     )?                                                                         \
2155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (ADC1)                                                                    \
2156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      :                                                                         \
2157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADCx__)                                                                \
2158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to select the ADC common instance
2162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to which is belonging the selected ADC instance.
2163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC common register instance can be used for:
2164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Set parameters common to several ADC instances
2165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Multimode (for devices with several ADC instances)
2166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCx__ ADC instance
2168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC common register instance
2169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
2172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((((__ADCx__) == ADC1) || ((__ADCx__) == ADC2))                              \
2173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC12_COMMON)                                                          \
2175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (ADC3_COMMON)                                                           \
2179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_COMMON_INSTANCE(__ADCx__)   (ADC12_COMMON)
2183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to check if all ADC instances sharing the same
2187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC common instance are disabled.
2188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This check is required by functions with setting conditioned to
2189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to functions having argument "ADCxy_COMMON" as parameter.
2192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On devices with only 1 ADC common instance, parameter of this macro
2193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is useless and can be ignored (parameter kept for compatibility
2194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with devices featuring several ADC common instances).
2195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADCXY_COMMON__ ADC common instance
2196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if all ADC instances sharing the same ADC common instance
ARM GAS  /tmp/ccecbe7f.s 			page 69


2198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are disabled.
2199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if at least one ADC instance sharing the same ADC common instance
2200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
2201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC3_COMMON)
2203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__ADCXY_COMMON__) == ADC12_COMMON)                                        \
2205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ? (                                                                        \
2206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC1) |                                               \
2207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         LL_ADC_IsEnabled(ADC2)  )                                              \
2208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       :                                                                        \
2210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       (                                                                        \
2211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (LL_ADC_IsEnabled(ADC3))                                                \
2212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
2216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                         (LL_ADC_IsEnabled(ADC1) | LL_ADC_IsEnabled(ADC2))
2217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data full-scale digital value (unit: digital value of ADC conversion dat
2232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (0xFFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))
2235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to define the ADC conversion data full-scale digital
2239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         value corresponding to the selected ADC resolution.
2240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC conversion data full-scale corresponds to voltage range
2241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         determined by analog voltage references Vref+ and Vref-
2242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to reference manual).
2243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_6B
2248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: digital value of ADC conversion bit
2249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC3_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
2251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (0xFFFUL >> ((__ADC_RESOLUTION__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))
2252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to convert the ADC conversion data from
ARM GAS  /tmp/ccecbe7f.s 			page 70


2255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a resolution to another resolution.
2256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __DATA__ ADC conversion data to be converted
2257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data to the requested resolution
2272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_X) || defined(ADC_VER_V5_V90)
2274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
2284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* defined(ADC_VER_V5_3) */
2302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__,\
2303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__) \
2305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** ( (__ADC_RESOLUTION_CURRENT__ == LL_ADC_RESOLUTION_8B)                                             
2306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ?(                                                                                               
2307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << (((__ADC_RESOLUTION_CURRENT__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES_BITOF
2309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                          
2310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )                                                                                               
2311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   :                                                                                                
ARM GAS  /tmp/ccecbe7f.s 			page 71


2312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    (                                                                                               
2313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      (__ADC_RESOLUTION_TARGET__ == LL_ADC_RESOLUTION_8B) \
2314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        ? ( \
2315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            ((__DATA__)                                                                             
2316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))               
2317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            >> (((__ADC_RESOLUTION_TARGET__) & ~(ADC_CFGR_RES_1 | ADC_CFGR_RES_0) ) >> (ADC_CFGR_RES
2318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            )                                                                                       
2319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          :\
2320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           (\
2321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ((__DATA__)                                                                                    
2322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL)))                       
2323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS - 1UL))                         
2324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      )                                                                                             
2325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    )\
2326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****  )
2327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @brief  Helper macro to convert the ADC conversion data from
2333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         a resolution to another resolution.
2334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __DATA__ ADC conversion data to be converted
2335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_CURRENT__ Resolution of the data to be converted
2336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @param  __ADC_RESOLUTION_TARGET__ Resolution of the data after conversion
2342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         This parameter can be one of the following values:
2343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_12B
2344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_10B
2345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_8B
2346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** *         @arg @ref LL_ADC_RESOLUTION_6B
2347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** * @retval ADC conversion data to the requested resolution
2348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
2349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CONVERT_DATA_RESOLUTION_ADC3(__DATA__,\
2350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_CURRENT__,\
2351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION_TARGET__)            \
2352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((__DATA__)                                                                 \
2353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL)))  \
2354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR_RES_BITOFFSET_POS_ADC3 - 1UL))     \
2355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
2357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the voltage (unit: mVolt)
2359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponding to a ADC conversion data (unit: digital value).
2360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__ Analog reference voltage (unit: mV)
2364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_DATA__ ADC conversion data (resolution 16 bits)
2365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                       (unit: digital value).
2366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
ARM GAS  /tmp/ccecbe7f.s 			page 72


2369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC conversion data equivalent voltage value (unit: mVolt)
2373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
2375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_DATA__,\
2376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                       __ADC_RESOLUTION__)                      \
2377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
2378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
2379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate analog reference voltage (Vref+)
2383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (unit: mVolt) from ADC conversion data of internal voltage
2384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         reference VrefInt.
2385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using VrefInt calibration value
2386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This voltage depends on user board environment: voltage level
2388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         connected to pin Vref+.
2389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On devices with small package, the pin Vref+ is not present
2390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and internally bonded to pin Vdda.
2391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of internal voltage reference
2392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         VrefInt corresponds to a resolution of 16 bits,
2393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal voltage reference VrefInt.
2395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFINT_ADC_DATA__ ADC conversion data (resolution 16 bits)
2398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of internal voltage reference VrefInt (unit: digital value).
2399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__ This parameter can be one of the following values:
2400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Analog reference voltage (unit: mV)
2406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
2408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                          __ADC_RESOLUTION__)                   \
2409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
2410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
2411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        (__ADC_RESOLUTION__),                   \
2412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                        LL_ADC_RESOLUTION_16B)                  \
2413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor calibration values
2419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         stored in system memory for each device during production.
2420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = ((TS_ADC_DATA - TS_CAL1)
2422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                           * (TS_CAL2_TEMP - TS_CAL1_TEMP))
2423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / (TS_CAL2 - TS_CAL1) + TS_CAL1_TEMP
2424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA = temperature sensor raw data measured by ADC
2425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope = (TS_CAL2 - TS_CAL1)
ARM GAS  /tmp/ccecbe7f.s 			page 73


2426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            / (TS_CAL2_TEMP - TS_CAL1_TEMP)
2427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL1   = equivalent TS_ADC_DATA at temperature
2428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL1 (calibrated in factory)
2429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_CAL2   = equivalent TS_ADC_DATA at temperature
2430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                            TEMP_DEGC_CAL2 (calibrated in factory)
2431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve that calibration
2432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  parameters are correct (address and data).
2433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  To calculate temperature using temperature sensor
2434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values (generic values less, therefore
2435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  less accurate than calibrated values),
2436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  use helper macro @ref __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS().
2437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, calibration data of temperature sensor
2443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         corresponds to a resolution of 16 bits,
2444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         this is the recommended ADC resolution to convert voltage of
2445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor.
2446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Otherwise, this macro performs the processing to scale
2447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion data to 16 bits.
2448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__  Analog reference voltage (unit: mV)
2449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__ ADC conversion data of internal
2450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 temperature sensor (unit: digital value).
2451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__      ADC resolution at which internal temperature
2452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                 sensor voltage has been measured.
2453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
2462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __TEMPSENSOR_ADC_DATA__,\
2463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   __ADC_RESOLUTION__)                              \
2464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
2465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     (__ADC_RESOLUTION__),          \
2466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                     LL_ADC_RESOLUTION_16B)         \
2467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    * (__VREFANALOG_VOLTAGE__))                                     \
2468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / TEMPSENSOR_CAL_VREFANALOG)                                     \
2469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
2470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****      ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
2471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
2472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + TEMPSENSOR_CAL1_TEMP                                                        \
2473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Helper macro to calculate the temperature (unit: degree Celsius)
2477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC conversion data of internal temperature sensor.
2478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Computation is using temperature sensor typical values
2479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (refer to device datasheet).
2480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calculation formula:
2481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Temperature = (TS_TYP_CALx_VOLT(uV) - TS_ADC_DATA * Conversion_uV)
2482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                         / Avg_Slope + CALx_TEMP
ARM GAS  /tmp/ccecbe7f.s 			page 74


2483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with TS_ADC_DATA      = temperature sensor raw data measured by ADC
2484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: digital value)
2485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                Avg_Slope        = temperature sensor slope
2486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   (unit: uV/Degree Celsius)
2487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                TS_TYP_CALx_VOLT = temperature sensor digital value at
2488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                   temperature CALx_TEMP (unit: mV)
2489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Caution: Calculation relevancy under reserve the temperature sensor
2490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  of the current device has characteristics in line with
2491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  datasheet typical values.
2492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  If temperature sensor calibration values are available on
2493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  on this device (presence of macro __LL_ADC_CALC_TEMPERATURE()),
2494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  temperature calculation will be more accurate using
2495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                  helper macro @ref __LL_ADC_CALC_TEMPERATURE().
2496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   As calculation input, the analog reference voltage (Vref+) must be
2497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         defined as it impacts the ADC LSB equivalent voltage.
2498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Analog reference voltage (Vref+) must be either known from
2499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         user board environment or can be calculated using ADC measurement
2500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC helper macro @ref __LL_ADC_CALC_VREFANALOG_VOLTAGE().
2501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC measurement data must correspond to a resolution of 16 bits
2502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (full scale digital value 4095). If not the case, the data must be
2503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         preliminarily rescaled to an equivalent resolution of 16 bits.
2504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_AVGSLOPE__   Device datasheet data: Temperature sensor slope typical v
2505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "Avg_Slop
2506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_TYP_CALX_V__     Device datasheet data: Temperature sensor voltage typical
2507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                       On STM32H7, refer to device datasheet parameter "V30" (co
2508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_CALX_TEMP__      Device datasheet data: Temperature at which temperature s
2509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __VREFANALOG_VOLTAGE__        Analog voltage reference (Vref+) voltage (unit: mV)
2510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __TEMPSENSOR_ADC_DATA__       ADC conversion data of internal temperature sensor (unit:
2511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  __ADC_RESOLUTION__            ADC resolution at which internal temperature sensor volta
2512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This parameter can be one of the following values:
2513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Temperature (unit: degree Celsius)
2519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
2521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_TYP_CALX_V__,\
2522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_CALX_TEMP__,\
2523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __VREFANALOG_VOLTAGE__,\
2524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __TEMPSENSOR_ADC_DATA__,\
2525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                              __ADC_RESOLUTION__)               \
2526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   ((( (                                                                        \
2527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
2528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
2529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        -                                                                       \
2531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****        (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
2532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                  * 1000UL)                                                     \
2533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       )                                                                        \
2534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ) / (int32_t)(__TEMPSENSOR_TYP_AVGSLOPE__)                                 \
2535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    ) + (int32_t)(__TEMPSENSOR_CALX_TEMP__)                                     \
2536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   )
2537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccecbe7f.s 			page 75


2540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /* Exported functions --------------------------------------------------------*/
2548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_Exported_Functions ADC Exported Functions
2549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_DMA_Management ADC DMA management
2553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Function to help to configure DMA transfer from ADC: retrieve the
2558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC register address from ADC instance and a list of ADC registers
2559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         intended to be used (most commonly) with DMA transfer.
2560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   These ADC registers are data registers:
2561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when ADC conversion data is available in ADC data registers,
2562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC generates a DMA transfer request.
2563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This macro is intended to be used with LL DMA driver, refer to
2564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function "LL_DMA_ConfigAddresses()".
2565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example:
2566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           LL_DMA_ConfigAddresses(DMA1,
2567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_CHANNEL_1,
2568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_ADC_DMA_GetRegAddr(ADC1, LL_ADC_DMA_REG_REGULAR_DATA),
2569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  (uint32_t)&< array or variable >,
2570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                                  LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
2571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC: in multimode, some devices
2572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use a different data register outside of ADC instance scope
2573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (common data register). This macro manages this register difference,
2574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         only ADC instance has to be set as parameter.
2575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_DMA_GetRegAddr\n
2576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_MST      LL_ADC_DMA_GetRegAddr\n
2577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_DMA_GetRegAddr
2578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Register This parameter can be one of the following values:
2580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA
2581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DMA_REG_REGULAR_DATA_MULTI (1)
2582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
2583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Available on devices with several ADC instances.
2584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval ADC register address
2585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(ADC_TypeDef *ADCx, uint32_t Register)
2587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t data_reg_addr;
2589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
2591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register DR */
2593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & (ADCx->DR);
2594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
2596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
ARM GAS  /tmp/ccecbe7f.s 			page 76


2597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Retrieve address of register CDR */
2598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     data_reg_addr = (uint32_t) & ((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
2599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return data_reg_addr;
2602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Common Configuration of ADC hierarchical scope: common to
2609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: Clock source and prescaler.
2614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, if ADC group injected is used, some
2615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         clock ratio constraints between ADC clock and AHB clock
2616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         must be respected.
2617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
2618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_SetCommonClock\n
2625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_SetCommonClock
2626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CommonClock This parameter can be one of the following values:
2629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
2647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
2649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: Clock source and prescaler.
2653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      CKMODE         LL_ADC_GetCommonClock\n
ARM GAS  /tmp/ccecbe7f.s 			page 77


2654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      PRESC          LL_ADC_GetCommonClock
2655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV1
2659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV2
2660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_SYNC_PCLK_DIV4
2661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV1
2662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV2
2663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV4
2664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV6
2665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV8
2666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV10
2667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV12
2668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV16
2669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV32
2670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV64
2671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
2672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
2673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON)
2675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC));
2677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set parameter common to several ADC: measurement path to internal
2681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Stabilization time of measurement path to internal channel:
2686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         After enabling internal paths, before starting ADC conversion,
2687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay is required for internal voltage reference and
2688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor stabilization time.
2689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_VREFINT_STAB_US.
2691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_TEMPSENSOR_STAB_US.
2692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   ADC internal channel sampling time constraint:
2693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For ADC conversion of internal channels,
2694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a sampling time minimum value is required.
2695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
2696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
2699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
2700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
2701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
2702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_SetCommonPathInternalCh\n
2703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_SetCommonPathInternalCh\n
2704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_SetCommonPathInternalCh
2705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  PathInternal This parameter can be a combination of the following values:
2708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
ARM GAS  /tmp/ccecbe7f.s 			page 78


2711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Path
2715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
2717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get parameter common to several ADC: measurement path to internal
2721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channels (VrefInt, temperature sensor, ...).
2722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
2723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_PATH_INTERNAL_VREFINT |
2724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                   LL_ADC_PATH_INTERNAL_TEMPSENSOR)
2725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      VREFEN         LL_ADC_GetCommonPathInternalCh\n
2726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      TSEN           LL_ADC_GetCommonPathInternalCh\n
2727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CCR      VBATEN         LL_ADC_GetCommonPathInternalCh
2728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
2729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
2730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be a combination of the following values:
2731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
2732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
2733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
2734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
2735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
2737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
2739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
2743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Instance Configuration of ADC hierarchical scope: ADC ins
2746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
2747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC calibration factor in the mode single-ended
2751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set calibration parameters
2753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor must be specified for each of these
2759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
2760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
2761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration factor can be specified only once).
2764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of setting calibration factors of both modes single ended
2765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and differential (parameter LL_ADC_BOTH_SINGLE_DIFF_ENDED):
2766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         both calibration factors must be concatenated.
2767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         To perform this processing, use helper macro
ARM GAS  /tmp/ccecbe7f.s 			page 79


2768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_CALIB_FACTOR_SINGLE_DIFF().
2769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_SetCalibrationOffsetFactor\n
2774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_SetCalibrationOffsetFactor
2775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOTH_SINGLE_DIFF_ENDED
2780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x7F
2781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff, uint
2784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
2786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT_RES13,
2787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT,
2791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK,
2792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              CalibrationFactor << (((SingleDiff & ADC_SINGLEDIFF_CALIB_F_BIT_D_MASK) >> ADC_SINGLED
2793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration factor in the mode single-ended
2798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
2799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
2802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
2803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
2805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
2806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT  CALFACT_S      LL_ADC_GetCalibrationOffsetFactor\n
2807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT  CALFACT_D      LL_ADC_GetCalibrationOffsetFactor
2808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
2810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
2811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
2812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x7F
2813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationOffsetFactor(ADC_TypeDef *ADCx, uint32_t SingleDiff)
2815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Retrieve bits with position in register depending on parameter           */
2817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "SingleDiff".                                                            */
2818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter used with mask "ADC_SINGLEDIFF_CALIB_FACTOR_MASK" because      */
2819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
2820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT_RES13, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) 
2822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT, (SingleDiff & ADC_SINGLEDIFF_CALIB_FACTOR_MASK)) >> ((S
2824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
ARM GAS  /tmp/ccecbe7f.s 			page 80


2825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC Linear calibration factor in the mode single-ended.
2829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function is intended to set linear calibration parameters
2830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without having to perform a new calibration using
2831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_StartCalibration().
2832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled, without calibration on going, without conversion
2835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
2836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor\n
2837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_SetCalibrationLinearFactor
2838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
2841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationFactor Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWord, u
2850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
2853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       timeout_cpu_cycles--;
2860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT, CalibrationFactor);
2865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR, ADC_CR_ADCALLIN, LinearityWord);
2866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) == 0UL) && (timeout_cpu_cycles > 0UL))
2867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC Linear calibration factor in the mode single-ended.
2875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration factors are set by hardware after performing
2876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a calibration run using function @ref LL_ADC_StartCalibration().
2877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor\n
2878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CALFACT2  LINCALFACT      LL_ADC_GetCalibrationLinearFactor
2879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LinearityWord This parameter can be one of the following values:
2881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD1
ARM GAS  /tmp/ccecbe7f.s 			page 81


2882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD2
2883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD3
2884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD4
2885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD5
2886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_LINEARITY_WORD6
2887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FFFFFFF
2888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetCalibrationLinearFactor(ADC_TypeDef *ADCx, uint32_t LinearityWor
2890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t timeout_cpu_cycles = ADC_LINEARITY_BIT_TOGGLE_TIMEOUT;
2892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, LinearityWord);
2893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   while ((READ_BIT(ADCx->CR, LinearityWord) != 0UL) && (timeout_cpu_cycles > 0UL))
2894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     timeout_cpu_cycles--;
2896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
2898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2_RES14, ADC_CALFACT2_LINCALFACT));
2899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
2900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CALFACT2, ADC_CALFACT2_LINCALFACT));
2901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
2902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC resolution.
2905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
2908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
2909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
2910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
2911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_SetResolution
2912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Resolution This parameter can be one of the following values:
2914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
2920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
2922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_3)
2924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_RES, (((Resolution & 0x10UL) | 0x08UL | (Resolution & 0x04UL))
2931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
2933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else /* Rev.V */
ARM GAS  /tmp/ccecbe7f.s 			page 82


2939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if (LL_ADC_RESOLUTION_8B == Resolution)
2941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
2945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
2946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
2948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else /* ADC_VER_V5_V90 */
2951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
2952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
2956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (LL_ADC_RESOLUTION_8B == Resolution)
2958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution | 0x0000000CUL);
2960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
2962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       MODIFY_REG(ADCx->CFGR, ADC_CFGR_RES, Resolution);
2964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
2965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X*/
2968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
2969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
2971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC resolution.
2972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual for alignments formats
2973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         dependencies to ADC resolutions.
2974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     RES            LL_ADC_GetResolution
2975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
2976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
2977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_16B
2978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_14B
2979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_12B
2980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_10B
2981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_RESOLUTION_8B
2982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    *         @arg @ref LL_ADC_RESOLUTION_6B   **Value available for ADC3 on STM32H72x/3x devices on
2983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
2984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetResolution(ADC_TypeDef *ADCx)
2985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
2986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined (ADC_VER_V5_3)
2987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
2989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
2990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #elif defined(ADC_VER_V5_V90)
2991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
2992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_RES));
2994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
2995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
ARM GAS  /tmp/ccecbe7f.s 			page 83


2996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
2997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
2998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
2999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
3008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Rev.Y */
3009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Rev.V */
3013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if ((uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES)) == 0x0000001CUL)
3015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (LL_ADC_RESOLUTION_8B);
3017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
3019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
3021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
3022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_X */
3025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC low power mode.
3029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             IRQ vector sequencer.
3047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
ARM GAS  /tmp/ccecbe7f.s 			page 84


3053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
3057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_SetLowPowerMode
3069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  LowPowerMode This parameter can be one of the following values:
3071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetLowPowerMode(ADC_TypeDef *ADCx, uint32_t LowPowerMode)
3076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_AUTDLY, LowPowerMode);
3078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC low power mode:
3082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC low power modes:
3083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto wait": Dynamic low power mode,
3084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions occurrences are limited to the minimum necessary
3085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           in order to reduce power consumption.
3086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           New ADC conversion starts only when the previous
3087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           unitary conversion data (for ADC group regular)
3088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or previous sequence conversions data (for ADC group injected)
3089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           has been retrieved by user software.
3090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           In the meantime, ADC remains idle: does not performs any
3091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           other conversion.
3092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This mode allows to automatically adapt the ADC conversions
3093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           triggers to the speed of the software that reads the data.
3094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Moreover, this avoids risk of overrun for low frequency
3095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           applications.
3096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           How to use this low power mode:
3097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do not use with interruption or DMA since these modes
3098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             have to clear immediately the EOC flag to free the
3099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             IRQ vector sequencer.
3100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Do use with polling: 1. Start conversion,
3101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             2. Later on, when conversion data is needed: poll for end of
3102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             conversion  to ensure that conversion is completed and
3103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             retrieve ADC conversion data. This will trig another
3104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC conversion start.
3105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC low power mode "auto power-off" (feature available on
3106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           this device if parameter LL_ADC_LP_AUTOPOWEROFF is available):
3107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the ADC automatically powers-off after a conversion and
3108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           automatically wakes up when a new conversion is triggered
3109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (with startup time between trigger and start of sampling).
ARM GAS  /tmp/ccecbe7f.s 			page 85


3110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This feature can be combined with low power mode "auto wait".
3111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   With ADC low power mode "auto wait", the ADC conversion data read
3112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is corresponding to previous ADC conversion start, independently
3113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of delay during which ADC was idle.
3114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, the ADC conversion data may be outdated: does not
3115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         correspond to the current voltage level on the selected
3116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
3117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AUTDLY         LL_ADC_GetLowPowerMode
3118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_MODE_NONE
3121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_LP_AUTOWAIT
3122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetLowPowerMode(ADC_TypeDef *ADCx)
3124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_AUTDLY));
3126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected Channel.
3130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the pre-selection of channel configuration.
3131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Channel selections is dependent to ADC instance and IP version:
3132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For STM32H72x/3x This is applicable only for ADC1/ADC2
3133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For Rest of STM32H7xxx This is applicable only all the ADCs instances.
3134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * 
3135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           
3138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           
3139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           
3140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           
3141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           
3142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           
3143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelPreSelection(ADC_TypeDef *ADCx, uint32_t Channel)
3160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (ADCx != ADC3)
3163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
3164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       /* ADC channels preselection */
3165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
ARM GAS  /tmp/ccecbe7f.s 			page 86


3167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
3168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* ADC channels preselection */
3169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
3170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC selected offset number 1, 2, 3 or 4.
3175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of offset configuration:
3176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC channel to which the offset programmed will be applied
3177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (independently of channel mapped on ADC group regular
3178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or group injected)
3179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Offset level (offset to be subtracted from the raw
3180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           converted data).
3181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function enables the offset, by default. It can be forced
3185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to disable state using function LL_ADC_SetOffsetState().
3186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If a channel is mapped on several offsets numbers, only the offset
3187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with the lowest value is considered for the subtraction.
3188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_SetOffset\n
3195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1        LL_ADC_SetOffset\n
3196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR1     OFFSET1_EN     LL_ADC_SetOffset\n
3197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_SetOffset\n
3198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_SetOffset\n
3199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffset\n
3200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_SetOffset\n
3201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_SetOffset\n
3202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffset\n
3203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_SetOffset\n
3204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_SetOffset\n
3205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffset
3206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
3213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
ARM GAS  /tmp/ccecbe7f.s 			page 87


3224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
3243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32
3247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
3258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
3261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
3262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Channel to which the offset programmed will be applied
3268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (independently of channel mapped on ADC group regular
3269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or group injected)
3270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
3271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
3272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
3273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
3274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
3275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
3276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
3277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
3278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
3279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
3280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
ARM GAS  /tmp/ccecbe7f.s 			page 88


3281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
3282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
3283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_CH     LL_ADC_GetOffsetChannel\n
3284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_CH     LL_ADC_GetOffsetChannel\n
3285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_CH     LL_ADC_GetOffsetChannel\n
3286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_CH     LL_ADC_GetOffsetChannel
3287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
3295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
3296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
3297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
3298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
3299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
3300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
3301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
3302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
3303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
3304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
3305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
3306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
3307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
3308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
3309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
3310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
3311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
3312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
3313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
3314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
3315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
3316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
3317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
3318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
3319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
3320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
3321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
3322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
3323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
3324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
3325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
3326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
3327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
3329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
3333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Offset level (offset to be subtracted from the raw
ARM GAS  /tmp/ccecbe7f.s 			page 89


3338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted data).
3339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Caution: Offset format is dependent to ADC resolution:
3340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset has to be left-aligned on bit 11, the LSB (right bits)
3341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are set to 0.
3342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1        LL_ADC_GetOffsetLevel\n
3343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2        LL_ADC_GetOffsetLevel\n
3344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3        LL_ADC_GetOffsetLevel\n
3345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4        LL_ADC_GetOffsetLevel
3346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
3353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetLevel(ADC_TypeDef *ADCx, uint32_t Offsety)
3355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1);
3359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set data right shift for the ADC selected offset number 1, 2, 3 or 4:
3364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_SetDataRightShift\n
3366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  RigthShift This parameter can be one of the following values:
3373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
3375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthSh
3378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RS
3380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get data right shift for the ADC selected offset number 1, 2, 3 or 4:
3384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    RSHIFT          LL_ADC_GetDataRightShift\n
3386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
3394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
ARM GAS  /tmp/ccecbe7f.s 			page 90


3395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety)
3397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 << (Offsety & 0x1FUL)))) >> (Offsety 
3399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_SetOffsetSignedSaturation\n
3407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_SetOffsetSignedSaturation
3408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSignedSaturation This parameter can be one of the following values:
3415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned None
3418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t
3420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
3431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get signed saturation for the ADC selected offset number 1, 2, 3 or 4:
3436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         signed offset saturation if enabled or disabled.
3437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SSATE          LL_ADC_GetOffsetSignedSaturation\n
3440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SSATE          LL_ADC_GetOffsetSignedSaturation
3441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
3449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
3450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
ARM GAS  /tmp/ccecbe7f.s 			page 91


3452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset saturation mode.
3471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_SetOffsetSaturation\n
3476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_SetOffsetSaturation\n
3477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_SetOffsetSaturation\n
3478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_SetOffsetSaturation
3479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSaturation This parameter can be one of the following values:
3486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Offse
3491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
3498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSaturation);
3499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset saturation if enabled or disabled.
3505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     SATEN          LL_ADC_GetOffsetSaturation\n
3506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     SATEN          LL_ADC_GetOffsetSaturation\n
3507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     SATEN          LL_ADC_GetOffsetSaturation\n
3508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     SATEN          LL_ADC_GetOffsetSaturation
ARM GAS  /tmp/ccecbe7f.s 			page 92


3509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
3517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
3518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety)
3520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_SATEN);
3526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }else
3527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         choose offset sign.
3535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_SetOffsetSign\n
3540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_SetOffsetSign\n
3541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_SetOffsetSign\n
3542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_SetOffsetSign
3543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetSign This parameter can be one of the following values:
3550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
3555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
3562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetSign);
3563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 93


3566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset sign if positive or negative.
3569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSETPOS      LL_ADC_GetOffsetSign\n
3570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSETPOS      LL_ADC_GetOffsetSign\n
3571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSETPOS      LL_ADC_GetOffsetSign\n
3572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSETPOS      LL_ADC_GetOffsetSign
3573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
3581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
3582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety)
3584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSETPOS);
3590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
3593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
3594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set for the ADC selected offset number 1, 2, 3 or 4:
3599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         force offset state disable or enable
3600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without modifying offset channel or offset value.
3601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function should be needed only in case of offset to be
3602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled-disabled dynamically, and should not be needed in other cases:
3603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function LL_ADC_SetOffset() automatically enables the offset.
3604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
3608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_SetOffsetState\n
3609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_SetOffsetState\n
3610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_SetOffsetState\n
3611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_SetOffsetState
3612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OffsetState This parameter can be one of the following values:
3619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 94


3623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetStat
3624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
3630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
3635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
3636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                OffsetState);
3637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get for the ADC selected offset number 1, 2, 3 or 4:
3642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         offset state disabled or enabled.
3643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll OFR1     OFFSET1_EN     LL_ADC_GetOffsetState\n
3644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR2     OFFSET2_EN     LL_ADC_GetOffsetState\n
3645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR3     OFFSET3_EN     LL_ADC_GetOffsetState\n
3646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         OFR4     OFFSET4_EN     LL_ADC_GetOffsetState
3647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Offsety This parameter can be one of the following values:
3649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_1
3650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_2
3651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_3
3652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_4
3653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_DISABLE
3655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OFFSET_ENABLE
3656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety)
3658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
3660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
3661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC3_OFR1_OFFSET1_EN);
3663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t) READ_BIT(*preg, ADC_OFR1_SSATE);
3667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
3674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Regular Configuration of ADC hierarchical scope: gr
3677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
3678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 95


3680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger source:
3682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
3685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
3686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
3687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
3688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
3689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_REG_SetTriggerEdge().
3690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_SetTriggerSource\n
3697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_SetTriggerSource
3698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
3700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
3725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN | ADC_CFGR_EXTSEL, TriggerSource);
3727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source:
3731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
3732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
3733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group regular trigger source is
3734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
3735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
3736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
ARM GAS  /tmp/ccecbe7f.s 			page 96


3737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_REG_GetTriggerSource(ADC1) == LL_ADC_REG_TRIG_SOFTWARE)")
3738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_IsTriggerSourceSWStart.
3739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
3740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
3741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTSEL         LL_ADC_REG_GetTriggerSource\n
3742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     EXTEN          LL_ADC_REG_GetTriggerSource
3743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_SOFTWARE
3746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH1
3747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH2
3748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_CH3
3749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_CH2
3750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_TRGO
3751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_CH4
3752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_EXTI_LINE11
3753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO
3754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM8_TRGO2
3755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO
3756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM1_TRGO2
3757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM2_TRGO
3758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM4_TRGO
3759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM6_TRGO
3760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM15_TRGO
3761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_TIM3_CH4
3762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG1
3763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_HRTIM_TRG3
3764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM1_OUT
3765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM2_OUT
3766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_LPTIM3_OUT
3767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerSource(ADC_TypeDef *ADCx)
3769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->CFGR, ADC_CFGR_EXTSEL | ADC_CFGR_EXTEN);
3771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
3773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_CFGR_EXTEN {0; 1; 2; 3}.                            */
3774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftExten = ((TriggerSource & ADC_CFGR_EXTEN) >> (ADC_REG_TRIG_EXTEN_BITOFFSET_POS - 2U
3775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_CFGR_EXTEN and ADC_CFGR_EXTSEL         */
3777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
3778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
3779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_REG_TRIG_SOURCE_MASK >> ShiftExten) & ADC_CFGR_EXTSEL)
3780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_REG_TRIG_EDGE_MASK >> ShiftExten) & ADC_CFGR_EXTEN)
3781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
3782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger source internal (SW start)
3786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or external.
3787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group regular trigger source set to external trigger,
3788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
3789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_REG_GetTriggerSource().
3790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_IsTriggerSourceSWStart
3791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
3793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
ARM GAS  /tmp/ccecbe7f.s 			page 97


3794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
3796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1
3798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion trigger polarity.
3802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_SetTriggerEdge
3808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
3810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
3816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_EXTEN, ExternalTriggerEdge);
3818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion trigger polarity.
3822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Applicable only for trigger source set to external trigger.
3823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     EXTEN          LL_ADC_REG_GetTriggerEdge
3824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISING
3827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_FALLING
3828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_TRIG_EXT_RISINGFALLING
3829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetTriggerEdge(ADC_TypeDef *ADCx)
3831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN));
3833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
3836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC sampling mode.
3838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the ADC conversion sampling mode
3839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode applies to regular group only.
3840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Set sampling mode is appied to all conversion of regular group.
3841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    BULB           LL_ADC_REG_SetSamplingMode\n
3846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    SMPTRIG        LL_ADC_REG_SetSamplingMode
3847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingMode This parameter can be one of the following values:
3849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_NORMAL
3850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_BULB
ARM GAS  /tmp/ccecbe7f.s 			page 98


3851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SAMPLING_MODE_TRIGGER_CONTROLED
3852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSamplingMode(ADC_TypeDef *ADCx, uint32_t SamplingMode)
3855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
3857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance */
3859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
3861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
3862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR2, ADC3_CFGR2_BULB | ADC3_CFGR2_SMPTRIG, SamplingMode);
3863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
3864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
3866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer length and scan direction.
3869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function performs configuration of:
3885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_SetSequencerLength
3901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
3903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
ARM GAS  /tmp/ccecbe7f.s 			page 99


3908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
3910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
3920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
3922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
3924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer length and scan direction.
3928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC group regular sequencer features:
3929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer fully configurable
3930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerRanks()" available):
3931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are configurable.
3933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence.
3935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from rank 1 to rank n).
3937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerRanks()".
3939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - For devices with sequencer not fully configurable
3940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (function "LL_ADC_REG_SetSequencerChannels()" available):
3941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer length and each rank affectation to a channel
3942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are defined by channel number.
3943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This function retrieves:
3944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence length: Number of ranks in the scan sequence is
3945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             defined by number of channels set in the sequence,
3946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             rank of each channel is fixed by channel HW number.
3947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (channel 0 fixed on rank 0, channel 1 fixed on rank1, ...).
3948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - Sequence direction: Unless specified in parameters, sequencer
3949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             scan direction is forward (from lowest channel number to
3950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             highest channel number).
3951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Sequencer ranks are selected using
3952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           function "LL_ADC_REG_SetSequencerChannels()".
3953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
3954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
3955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     L              LL_ADC_REG_GetSequencerLength
3956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
3958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_DISABLE
3959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS
3960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_3RANKS
3961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_4RANKS
3962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_5RANKS
3963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_6RANKS
3964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_7RANKS
ARM GAS  /tmp/ccecbe7f.s 			page 100


3965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_8RANKS
3966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_9RANKS
3967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_10RANKS
3968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_11RANKS
3969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_12RANKS
3970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_13RANKS
3971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_14RANKS
3972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_15RANKS
3973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_SCAN_ENABLE_16RANKS
3974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
3975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerLength(ADC_TypeDef *ADCx)
3976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
3977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->SQR1, ADC_SQR1_L));
3978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
3979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
3980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
3981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequencer discontinuous mode:
3982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
3983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
3984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
3985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
3986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC auto-injected mode
3987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         and ADC group regular sequencer discontinuous mode.
3988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
3989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
3990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
3991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
3992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_SetSequencerDiscont\n
3993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_SetSequencerDiscont
3994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
3995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
3996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
3997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
3998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
3999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM, SeqDiscont);
4010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequencer discontinuous mode:
4014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DISCEN         LL_ADC_REG_GetSequencerDiscont\n
4017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DISCNUM        LL_ADC_REG_GetSequencerDiscont
4018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_DISABLE
4021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_1RANK
ARM GAS  /tmp/ccecbe7f.s 			page 101


4022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_2RANKS
4023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_3RANKS
4024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_4RANKS
4025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_5RANKS
4026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_6RANKS
4027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_7RANKS
4028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_SEQ_DISCONT_8RANKS
4029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerDiscont(ADC_TypeDef *ADCx)
4031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DISCEN | ADC_CFGR_DISCNUM));
4033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular sequence: channel on the selected
4037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Channels ordering into each rank of scan sequence:
4040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever channel can be placed into whatever rank.
4041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_SetSequencerRanks\n
4056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_SetSequencerRanks\n
4057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_SetSequencerRanks\n
4058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_SetSequencerRanks\n
4059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_SetSequencerRanks\n
4060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_SetSequencerRanks\n
4061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_SetSequencerRanks\n
4062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_SetSequencerRanks\n
4063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_SetSequencerRanks\n
4064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_SetSequencerRanks\n
4065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_SetSequencerRanks\n
4066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_SetSequencerRanks\n
4067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_SetSequencerRanks\n
4068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_SetSequencerRanks\n
4069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_SetSequencerRanks\n
4070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_SetSequencerRanks
4071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
ARM GAS  /tmp/ccecbe7f.s 			page 102


4079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
4125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Rank".         */
4126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> A
4129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
4131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
4132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccecbe7f.s 			page 103


4136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular sequence: channel on the selected
4137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         scan sequence rank.
4138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, ADC group regular sequencer is
4139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         fully configurable: sequencer length and each rank
4140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         affectation to a channel are configurable.
4141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to description of function @ref LL_ADC_REG_SetSequencerLength().
4142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SQR1     SQ1            LL_ADC_REG_GetSequencerRanks\n
4156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ2            LL_ADC_REG_GetSequencerRanks\n
4157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ3            LL_ADC_REG_GetSequencerRanks\n
4158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR1     SQ4            LL_ADC_REG_GetSequencerRanks\n
4159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ5            LL_ADC_REG_GetSequencerRanks\n
4160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ6            LL_ADC_REG_GetSequencerRanks\n
4161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ7            LL_ADC_REG_GetSequencerRanks\n
4162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ8            LL_ADC_REG_GetSequencerRanks\n
4163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR2     SQ9            LL_ADC_REG_GetSequencerRanks\n
4164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ10           LL_ADC_REG_GetSequencerRanks\n
4165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ11           LL_ADC_REG_GetSequencerRanks\n
4166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ12           LL_ADC_REG_GetSequencerRanks\n
4167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ13           LL_ADC_REG_GetSequencerRanks\n
4168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR3     SQ14           LL_ADC_REG_GetSequencerRanks\n
4169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ15           LL_ADC_REG_GetSequencerRanks\n
4170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SQR4     SQ16           LL_ADC_REG_GetSequencerRanks
4171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_1
4174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_2
4175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_3
4176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_4
4177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_5
4178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_6
4179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_7
4180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_8
4181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_9
4182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_10
4183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_11
4184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_12
4185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_13
4186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_14
4187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_15
4188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_RANK_16
4189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
ARM GAS  /tmp/ccecbe7f.s 			page 104


4193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK
4227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(*preg,
4229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                               ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MA
4230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                      >> (Rank & ADC_REG_RANK_ID_SQRX_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC continuous conversion mode on ADC group regular.
4236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group regular
4241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         continuous mode and sequencer discontinuous mode.
4242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_SetContinuousMode
4247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Continuous This parameter can be one of the following values:
4249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
ARM GAS  /tmp/ccecbe7f.s 			page 105


4250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetContinuousMode(ADC_TypeDef *ADCx, uint32_t Continuous)
4254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_CONT, Continuous);
4256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC continuous conversion mode on ADC group regular.
4260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Description of ADC continuous conversion mode:
4261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - single mode: one conversion per trigger
4262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode: after the first trigger, following
4263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           conversions launched successively automatically.
4264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     CONT           LL_ADC_REG_GetContinuousMode
4265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_SINGLE
4268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_CONV_CONTINUOUS
4269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetContinuousMode(ADC_TypeDef *ADCx)
4271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_CONT));
4273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC data transfer mode
4276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in one shot mode
4279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in circular mode
4280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered to DFSDM data register
4281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_SetDataTransferMode
4282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DataTransferMode Select Data Management configuration
4284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
4287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
4289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
4292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable DMA requests for ADC3.
4294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransfer\n
4295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDMAReq (ADC_TypeDef *ADCx)
4299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN);
4301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDMAReq(ADC_TypeDef *ADCx)
4304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT (ADCx->CFGR, ADC3_CFGR_DMAEN);
4306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccecbe7f.s 			page 106


4307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabledDMAReq (ADC_TypeDef *ADCx)
4309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN) == (ADC3_CFGR_DMAEN)) ? 1UL : 0UL);
4311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular conversion data transfer: no transfer or
4314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
4321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (overrun flag and interruption if enabled).
4330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_SetMultiDMATransfer().
4332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_SetDMATransferMode\n
4339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_SetDMATransferMode
4340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  DMATransfer This parameter can be one of the following values:
4342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetDMATransferMode(ADC_TypeDef *ADCx, uint32_t DMATransfer)
4348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG, DMATransfer);
4352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data transfer: no transfer or
4357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, and DMA requests mode.
4358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If transfer by DMA selected, specifies the DMA requests
4359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode:
4360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
4361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
4362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
4363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
ARM GAS  /tmp/ccecbe7f.s 			page 107


4364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
4365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
4366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
4367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
4368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
4369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
4370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
4371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
4372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
4373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with several ADC instances: ADC multimode DMA
4374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         settings are available using function @ref LL_ADC_GetMultiDMATransfer().
4375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To configure DMA source address (peripheral address),
4376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_DMA_GetRegAddr().
4377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMAEN          LL_ADC_REG_GetDMATransfer\n
4378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     DMACFG         LL_ADC_REG_GetDMATransfer
4379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_NONE
4382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_LIMITED
4383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC3_REG_DMA_TRANSFER_UNLIMITED
4384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransferMode(ADC_TypeDef *ADCx)
4386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
4388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
4389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->CFGR, ADC3_CFGR_DMAEN | ADC3_CFGR_DMACFG));
4390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    else
4392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   { 
4393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
4394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
4395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
4398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC data transfer mode
4401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion data can be either:
4402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Available in Data Register
4403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in one shot mode
4404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered by DMA in circular mode
4405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *            - Transfered to DFSDM data register
4406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     DMNGT           LL_ADC_REG_GetDataTransferMode
4407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DR_TRANSFER
4410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
4411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
4412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_DFSDM_TRANSFER
4413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetDataTransferMode(ADC_TypeDef *ADCx)
4415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMNGT));
4417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccecbe7f.s 			page 108


4421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group regular behavior in case of overrun:
4422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Compatibility with devices without feature overrun:
4424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         other devices without this feature have a behavior
4425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         equivalent to data overwritten.
4426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The default setting of overrun is data preserved.
4427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, for compatibility with all devices, parameter
4428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         overrun should be set to data overwritten.
4429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
4433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_SetOverrun
4434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Overrun This parameter can be one of the following values:
4436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_SetOverrun(ADC_TypeDef *ADCx, uint32_t Overrun)
4441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_OVRMOD, Overrun);
4443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular behavior in case of overrun:
4447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         data preserved or overwritten.
4448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     OVRMOD         LL_ADC_REG_GetOverrun
4449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_PRESERVED
4452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_REG_OVR_DATA_OVERWRITTEN
4453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_GetOverrun(ADC_TypeDef *ADCx)
4455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_OVRMOD));
4457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
4461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Group_Injected Configuration of ADC hierarchical scope: g
4464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
4465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger source:
4469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting trigger source to external trigger
4472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         also set trigger polarity to rising edge
4473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (default setting for compatibility with some ADC on other
4474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         STM32 families having this setting set by HW default value).
4475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In case of need to modify trigger edge, use
4476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         function @ref LL_ADC_INJ_SetTriggerEdge().
4477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
ARM GAS  /tmp/ccecbe7f.s 			page 109


4478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_SetTriggerSource\n
4484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_SetTriggerSource
4485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerSource(ADC_TypeDef *ADCx, uint32_t TriggerSource)
4512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN, TriggerSource);
4514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source:
4518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or from external peripheral (timer event,
4519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external interrupt line).
4520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   To determine whether group injected trigger source is
4521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal (SW start) or external, without detail
4522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of which peripheral is selected as external trigger,
4523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (equivalent to
4524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         "if(LL_ADC_INJ_GetTriggerSource(ADC1) == LL_ADC_INJ_TRIG_SOFTWARE)")
4525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_IsTriggerSourceSWStart.
4526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Availability of parameters of trigger sources from timer
4527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         depends on timers availability on the selected device.
4528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_GetTriggerSource\n
4529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_GetTriggerSource
4530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
ARM GAS  /tmp/ccecbe7f.s 			page 110


4535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
4537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
4546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
4547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
4548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
4549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
4550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
4551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
4552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
4553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
4554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerSource(ADC_TypeDef *ADCx)
4556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t TriggerSource = READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTSEL | ADC_JSQR_JEXTEN);
4558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Value for shift of {0; 4; 8; 12} depending on value of bitfield          */
4560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* corresponding to ADC_JSQR_JEXTEN {0; 1; 2; 3}.                           */
4561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t ShiftJexten = ((TriggerSource & ADC_JSQR_JEXTEN) >> (ADC_INJ_TRIG_EXTEN_BITOFFSET_POS - 
4562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bitfield corresponding to ADC_JSQR_JEXTEN and ADC_JSQR_JEXTSEL       */
4564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* to match with triggers literals definition.                              */
4565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((TriggerSource
4566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****            & (ADC_INJ_TRIG_SOURCE_MASK >> ShiftJexten) & ADC_JSQR_JEXTSEL)
4567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****           | ((ADC_INJ_TRIG_EDGE_MASK >> ShiftJexten) & ADC_JSQR_JEXTEN)
4568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****          );
4569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger source internal (SW start)
4573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             or external
4574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of group injected trigger source set to external trigger,
4575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         to determine which peripheral is selected as external trigger,
4576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_INJ_GetTriggerSource.
4577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_IsTriggerSourceSWStart
4578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value "0" if trigger source external trigger
4580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Value "1" if trigger source SW start.
4581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
4583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ?
4585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger polarity.
4589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
ARM GAS  /tmp/ccecbe7f.s 			page 111


4592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_SetTriggerEdge
4595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
4597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTriggerEdge(ADC_TypeDef *ADCx, uint32_t ExternalTriggerEdge)
4603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
4605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger polarity.
4609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable only for trigger source set to external trigger.
4610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTEN         LL_ADC_INJ_GetTriggerEdge
4611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
4614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
4615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
4616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTriggerEdge(ADC_TypeDef *ADCx)
4618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN));
4620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer length and scan direction.
4624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function performs configuration of:
4625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_SetSequencerLength
4635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
4637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerLength(ADC_TypeDef *ADCx, uint32_t SequencerNbRanks)
4644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
4646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
ARM GAS  /tmp/ccecbe7f.s 			page 112


4649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer length and scan direction.
4650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function retrieves:
4651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence length: Number of ranks in the scan sequence.
4652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Sequence direction: Unless specified in parameters, sequencer
4653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           scan direction is forward (from rank 1 to rank n).
4654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Sequencer disabled is equivalent to sequencer of 1 rank:
4655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion on only 1 channel.
4656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JL             LL_ADC_INJ_GetSequencerLength
4657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
4660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
4661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
4662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
4663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerLength(ADC_TypeDef *ADCx)
4665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->JSQR, ADC_JSQR_JL));
4667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequencer discontinuous mode:
4671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_SetSequencerDiscont
4676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SeqDiscont This parameter can be one of the following values:
4678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerDiscont(ADC_TypeDef *ADCx, uint32_t SeqDiscont)
4683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
4685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequencer discontinuous mode:
4689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence subdivided and scan conversions interrupted every selected
4690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         number of ranks.
4691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JDISCEN        LL_ADC_INJ_GetSequencerDiscont
4692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_DISABLE
4695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_DISCONT_1RANK
4696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerDiscont(ADC_TypeDef *ADCx)
4698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JDISCEN));
4700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected sequence: channel on the selected
4704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
ARM GAS  /tmp/ccecbe7f.s 			page 113


4706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_SetSequencerRanks\n
4718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_SetSequencerRanks\n
4719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_SetSequencerRanks\n
4720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_SetSequencerRanks
4721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
4728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
4750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
4758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channe
4761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Channel" with bits position          */
ARM GAS  /tmp/ccecbe7f.s 			page 114


4763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on parameter "Rank".                               */
4764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rank" and "Channel" are used with masks because containing   */
4765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
4766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
4767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_INJ
4768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Ra
4769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected sequence: channel on the selected
4773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sequence rank.
4774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Depending on devices and packages, some channels may not be available.
4775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for channels availability.
4776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
4777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
4778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
4779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
4780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
4781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
4783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
4784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
4785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
4786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
4787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JSQ1           LL_ADC_INJ_GetSequencerRanks\n
4788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_GetSequencerRanks\n
4789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_GetSequencerRanks\n
4790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_GetSequencerRanks
4791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
4793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
4794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
4795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
4796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
4797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
4799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
4800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
4801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
4802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
4803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
4804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
4805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
4806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
4807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
4808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
4809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
4810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
4811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
4812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
4813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
4814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
4815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
4816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
4817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
4818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
4819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
ARM GAS  /tmp/ccecbe7f.s 			page 115


4820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
4821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
4822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
4823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
4824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
4825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
4826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
4827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).\n
4828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1, 2) For ADC channel read back from ADC register,
4829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                comparison with internal channel parameter to be done
4830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *                using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
4831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank)
4833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)((READ_BIT(ADCx->JSQR,
4835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              (ADC_CHANNEL_ID_NUMBER_MASK >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) <<
4836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (Rank & ADC_INJ_RANK_ID_JSQR_MASK)) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS
4837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
4838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected conversion trigger:
4842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This mode can be used to extend number of data registers
4844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         updated after one ADC conversion trigger and with data
4845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         permanently kept (not erased by successive conversions of scan of
4846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC sequencer ranks), up to 5 data registers:
4847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         1 data register on ADC group regular, 4 data registers
4848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group injected.
4849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC group injected injected trigger source is set to an
4850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         external trigger, this feature must be must be set to
4851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent trigger.
4852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC group injected automatic trigger is compliant only with
4853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group injected trigger source set to SW start, without any
4854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         further action on  ADC group injected conversion start or stop:
4855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         in this case, ADC group injected is controlled only
4856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         from ADC group regular.
4857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   It is not possible to enable both ADC group injected
4858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         auto-injected mode and sequencer discontinuous mode.
4859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_SetTrigAuto
4864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TrigAuto This parameter can be one of the following values:
4866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetTrigAuto(ADC_TypeDef *ADCx, uint32_t TrigAuto)
4871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JAUTO, TrigAuto);
4873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion trigger:
ARM GAS  /tmp/ccecbe7f.s 			page 116


4877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         independent or from ADC group regular.
4878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JAUTO          LL_ADC_INJ_GetTrigAuto
4879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_INDEPENDENT
4882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_FROM_GRP_REGULAR
4883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetTrigAuto(ADC_TypeDef *ADCx)
4885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JAUTO));
4887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC group injected contexts queue mode.
4891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is disabled:
4896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - only 1 sequence can be configured
4897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and is active perpetually.
4898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If contexts queue is enabled:
4899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - up to 2 contexts can be queued
4900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           and are checked in and out as a FIFO stack (first-in, first-out).
4901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If a new context is set when queues is full, error is triggered
4902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           by interruption "Injected Queue Overflow".
4903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Two behaviors are possible when all contexts have been processed:
4904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the contexts queue can maintain the last context active perpetually
4905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           or can be empty and injected group triggers are disabled.
4906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Triggers can be only external (not internal SW start)
4907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Caution: The sequence must be fully configured in one time
4908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           (one write of register JSQR makes a check-in of a new context
4909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           into the queue).
4910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Therefore functions to set separately injected trigger and
4911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           sequencer channels cannot be used, register JSQR must be set
4912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           using function @ref LL_ADC_INJ_ConfigQueueContext().
4913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This parameter can be modified only when no conversion is on going
4914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A modification of the context mode (bit JQDIS) causes the contexts
4916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         queue to be flushed and the register JSQR is cleared.
4917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
4920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
4921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_SetQueueMode\n
4922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_SetQueueMode
4923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  QueueMode This parameter can be one of the following values:
4925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
4929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_SetQueueMode(ADC_TypeDef *ADCx, uint32_t QueueMode)
4931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
4933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccecbe7f.s 			page 117


4934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected context queue mode.
4937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     JQM            LL_ADC_INJ_GetQueueMode\n
4938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JQDIS          LL_ADC_INJ_GetQueueMode
4939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
4941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_DISABLE
4942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_LAST_ACTIVE
4943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_QUEUE_2CONTEXTS_END_EMPTY
4944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
4945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_GetQueueMode(ADC_TypeDef *ADCx)
4946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
4947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS));
4948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
4949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
4950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
4951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set one context on ADC group injected that will be checked in
4952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         contexts queue.
4953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   A context is a setting of group injected sequencer:
4954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - group injected trigger
4955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer length
4956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - sequencer ranks
4957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This function is intended to be used when contexts queue is enabled,
4958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         because the sequence must be fully configured in one time
4959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (functions to set separately injected trigger and sequencer channels
4960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         cannot be used):
4961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to function @ref LL_ADC_INJ_SetQueueMode().
4962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In the contexts queue, only the active context can be read.
4963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         The parameters of this function can be read using functions:
4964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerSource()
4965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetTriggerEdge()
4966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_GetSequencerRanks()
4967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, to measure internal channels (VrefInt,
4968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TempSensor, ...), measurement paths to internal channels must be
4969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         enabled separately.
4970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This can be done using function @ref LL_ADC_SetCommonPathInternalCh().
4971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some fast channels are available: fast analog inputs
4972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         coming from GPIO pads (ADC_IN0..5).
4973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
4974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
4975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must not be disabled. Can be enabled with or without conversion
4976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on either groups regular or injected.
4977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JSQR     JEXTSEL        LL_ADC_INJ_ConfigQueueContext\n
4978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JEXTEN         LL_ADC_INJ_ConfigQueueContext\n
4979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JL             LL_ADC_INJ_ConfigQueueContext\n
4980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ1           LL_ADC_INJ_ConfigQueueContext\n
4981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ2           LL_ADC_INJ_ConfigQueueContext\n
4982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ3           LL_ADC_INJ_ConfigQueueContext\n
4983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JSQR     JSQ4           LL_ADC_INJ_ConfigQueueContext
4984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
4985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  TriggerSource This parameter can be one of the following values:
4986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_SOFTWARE
4987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO
4988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_CH4
4989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_TRGO
4990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM2_CH1
ARM GAS  /tmp/ccecbe7f.s 			page 118


4991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH4
4992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM4_TRGO
4993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_EXTI_LINE15
4994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_CH4
4995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM1_TRGO2
4996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO
4997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM8_TRGO2
4998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH3
4999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_TRGO
5000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM3_CH1
5001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM6_TRGO
5002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_TIM15_TRGO
5003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG2
5004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_HRTIM_TRG4
5005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM1_OUT
5006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM2_OUT
5007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_LPTIM3_OUT
5008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ExternalTriggerEdge This parameter can be one of the following values:
5009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISING
5010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_FALLING
5011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_TRIG_EXT_RISINGFALLING
5012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Note: This parameter is discarded in case of SW start:
5014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *               parameter "TriggerSource" set to "LL_ADC_INJ_TRIG_SOFTWARE".
5015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SequencerNbRanks This parameter can be one of the following values:
5016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_DISABLE
5017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_2RANKS
5018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_3RANKS
5019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_SEQ_SCAN_ENABLE_4RANKS
5020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank1_Channel This parameter can be one of the following values:
5021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
ARM GAS  /tmp/ccecbe7f.s 			page 119


5048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank2_Channel This parameter can be one of the following values:
5052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank3_Channel This parameter can be one of the following values:
5083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
ARM GAS  /tmp/ccecbe7f.s 			page 120


5105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank4_Channel This parameter can be one of the following values:
5114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_ConfigQueueContext(ADC_TypeDef *ADCx,
5147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t TriggerSource,
5148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t ExternalTriggerEdge,
5149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t SequencerNbRanks,
5150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank1_Channel,
5151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank2_Channel,
5152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank3_Channel,
5153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                    uint32_t Rank4_Channel)
5154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "Rankx_Channel" with bits position    */
5156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register depending on literal "LL_ADC_INJ_RANK_x".                    */
5157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "Rankx_Channel" and "LL_ADC_INJ_RANK_x" are used with masks   */
5158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* because containing other bits reserved for other purpose.                */
5159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If parameter "TriggerSource" is set to SW start, then parameter          */
5160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "ExternalTriggerEdge" is discarded.                                      */
5161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t is_trigger_not_sw = (uint32_t)((TriggerSource != LL_ADC_INJ_TRIG_SOFTWARE) ? 1UL : 0UL);
ARM GAS  /tmp/ccecbe7f.s 			page 121


5162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->JSQR,
5163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTSEL |
5164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JEXTEN  |
5165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ4    |
5166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ3    |
5167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ2    |
5168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JSQ1    |
5169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_JSQR_JL,
5170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (TriggerSource & ADC_JSQR_JEXTSEL)        |
5171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (ExternalTriggerEdge * (is_trigger_not_sw)) |
5172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank4_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank3_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank2_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (((Rank1_Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
5176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SequencerNbRanks
5177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****             );
5178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
5182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_Channels Configuration of ADC hierarchical scope: channels
5185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set sampling time of the selected ADC channel
5190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of internal channel (VrefInt, TempSensor, ...) to be
5194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         converted:
5195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         sampling time constraints must be respected (sampling time can be
5196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         adjusted in function of ADC clock frequency and sampling time
5197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         setting).
5198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet for timings values (parameters TS_vrefint,
5199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TS_temp, ...).
5200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC conversion of internal channel (VrefInt,
5207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temperature sensor, ...), a sampling time minimum value
5208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required.
5209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet.
5210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_SetChannelSamplingTime\n
5215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_SetChannelSamplingTime\n
5216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_SetChannelSamplingTime\n
5217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_SetChannelSamplingTime\n
5218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_SetChannelSamplingTime\n
ARM GAS  /tmp/ccecbe7f.s 			page 122


5219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_SetChannelSamplingTime\n
5220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_SetChannelSamplingTime\n
5221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_SetChannelSamplingTime\n
5222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_SetChannelSamplingTime\n
5223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_SetChannelSamplingTime\n
5224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_SetChannelSamplingTime\n
5225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_SetChannelSamplingTime\n
5226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_SetChannelSamplingTime\n
5227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_SetChannelSamplingTime\n
5228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_SetChannelSamplingTime\n
5229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_SetChannelSamplingTime\n
5230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_SetChannelSamplingTime\n
5231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_SetChannelSamplingTime\n
5232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_SetChannelSamplingTime
5233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SamplingTime This parameter can be one of the following values:
5266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 123


5276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sa
5277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "SamplingTime" with bits position     */
5279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "Channel".      */
5280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameter "Channel" is used with masks because containing                */
5281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* other bits reserved for other purpose.                                   */
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_M
5283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
5285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
5287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get sampling time of the selected ADC channel
5291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Unit: ADC clock cycles.
5292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this device, sampling time is on channel scope: independently
5293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         of channel mapped on ADC group regular or injected.
5294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Conversion time is the addition of sampling time and processing time.
5295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         On this STM32 serie, ADC processing time is:
5296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 12.5 ADC clock cycles at ADC resolution 12 bits
5297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 10.5 ADC clock cycles at ADC resolution 10 bits
5298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 8.5 ADC clock cycles at ADC resolution 8 bits
5299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - 6.5 ADC clock cycles at ADC resolution 6 bits
5300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll SMPR1    SMP0           LL_ADC_GetChannelSamplingTime\n
5301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP1           LL_ADC_GetChannelSamplingTime\n
5302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP2           LL_ADC_GetChannelSamplingTime\n
5303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP3           LL_ADC_GetChannelSamplingTime\n
5304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP4           LL_ADC_GetChannelSamplingTime\n
5305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP5           LL_ADC_GetChannelSamplingTime\n
5306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP6           LL_ADC_GetChannelSamplingTime\n
5307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP7           LL_ADC_GetChannelSamplingTime\n
5308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP8           LL_ADC_GetChannelSamplingTime\n
5309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR1    SMP9           LL_ADC_GetChannelSamplingTime\n
5310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP10          LL_ADC_GetChannelSamplingTime\n
5311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP11          LL_ADC_GetChannelSamplingTime\n
5312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP12          LL_ADC_GetChannelSamplingTime\n
5313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP13          LL_ADC_GetChannelSamplingTime\n
5314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP14          LL_ADC_GetChannelSamplingTime\n
5315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP15          LL_ADC_GetChannelSamplingTime\n
5316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP16          LL_ADC_GetChannelSamplingTime\n
5317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP17          LL_ADC_GetChannelSamplingTime\n
5318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         SMPR2    SMP18          LL_ADC_GetChannelSamplingTime
5319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_0           (3)
5322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1           (3)
5323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2           (3)
5324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3           (3)
5325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4           (3)
5326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5           (3)
5327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_6
5328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_7
5329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_8
5330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_9
5331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
ARM GAS  /tmp/ccecbe7f.s 			page 124


5333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VREFINT      (1)
5342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_TEMPSENSOR   (1)
5343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_VBAT         (1)
5344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH1_ADC2 (2)
5345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_DAC1CH2_ADC2 (2)
5346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.\n
5349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to
5350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Other channels are slow channels (conversion rate: refer to reference manual).
5351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_1CYCLE_5
5353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_2CYCLES_5
5354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_8CYCLES_5
5355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_16CYCLES_5
5356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_32CYCLES_5
5357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_64CYCLES_5
5358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
5359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
5360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel)
5362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOF
5364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
5366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_
5367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_P
5368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
5369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set mode single-ended or differential input of the selected
5373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Channel ending is on channel scope: independently of channel mapped
5375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC group regular or injected.
5376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         In differential mode: Differential measurement is carried out
5377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         between the selected channel 'i' (positive input) and
5378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         channel 'i+1' (negative input). Only channel 'i' has to be
5379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured, channel 'i+1' is configured automatically.
5380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
ARM GAS  /tmp/ccecbe7f.s 			page 125


5390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For ADC channels configured in differential mode, both inputs
5392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         should be biased at (Vref+)/2 +/-200mV.
5393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (Vref+ is the analog voltage reference)
5394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
5397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected.
5398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_SetChannelSingleDiff
5400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be one of the following values:
5402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be a combination of the following values:
5418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
5419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
5420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t Sing
5423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR2_DIFSEL,
5431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->DIFSEL_RES12,
5437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SI
5439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  /* ADC_VER_V5_V90 */
5441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Bits of channels in single or differential mode are set only for         */
5442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* differential mode (for single mode, mask of bits allowed to be set is    */
5443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* shifted out of range of bits of channels in single or differential mode. */
5444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->DIFSEL,
5445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
5446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SING
ARM GAS  /tmp/ccecbe7f.s 			page 126


5447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get mode single-ended or differential input of the selected
5452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC channel.
5453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Therefore, to ensure a channel is configured in single-ended mode,
5456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the configuration of channel itself and the channel 'i-1' must be
5457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         read back (to ensure that the selected channel channel has not been
5458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configured in differential mode by the previous channel).
5459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Refer to Reference Manual to ensure the selected channel is
5460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         available in differential mode.
5461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         For example, internal channels (VrefInt, TempSensor, ...) are
5462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         not available in differential mode.
5463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   When configuring a channel 'i' in differential mode,
5464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the channel 'i+1' is not usable separately.
5465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On STM32H7, some channels are internally fixed to single-ended inputs
5466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         configuration:
5467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC1: Channels 0, 6, 7, 8, 9, 13, 14, 15, 17, and 19
5468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC2: Channels 0, 6, 7, 8, 9, 13, 14, 15 and 19
5469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC3: Channels 0, 6, 7, 8, 9, 12, 16, 17, and 19
5470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   One or several values can be selected. In this case, the value
5471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         returned is null if all channels are in single ended-mode.
5472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Example: (LL_ADC_CHANNEL_4 | LL_ADC_CHANNEL_12 | ...)
5473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DIFSEL   DIFSEL         LL_ADC_GetChannelSingleDiff
5474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Channel This parameter can be a combination of the following values:
5476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_1
5477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_2
5478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_3
5479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_4
5480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_5
5481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_10
5482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_11
5483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_12
5484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_13
5485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_14
5486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_15
5487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_16
5488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_17
5489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_18
5490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CHANNEL_19
5491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: channel in single-ended mode, else: channel in differential mode
5492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel)
5494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)  
5496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL_RES12, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else  
5498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DIFSEL, (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)));
5499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
ARM GAS  /tmp/ccecbe7f.s 			page 127


5504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_AnalogWatchdog Configuration of ADC transversal scope: an
5507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
5508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog monitored channels:
5512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a single channel, multiple channels or all channels,
5513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on ADC groups regular and-or injected.
5514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Once monitored channels are selected, analog watchdog
5515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled.
5516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of need to define a single channel to monitor
5517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with analog watchdog from sequencer channel definition,
5518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use helper macro @ref __LL_ADC_ANALOGWD_CHANNEL_GROUP().
5519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_SetAnalogWDMonitChannels\n
5545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_SetAnalogWDMonitChannels\n
5546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_SetAnalogWDMonitChannels\n
5547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_SetAnalogWDMonitChannels\n
5548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_SetAnalogWDMonitChannels\n
5549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_SetAnalogWDMonitChannels
5550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDChannelGroup This parameter can be one of the following values:
5556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
ARM GAS  /tmp/ccecbe7f.s 			page 128


5561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
5575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
ARM GAS  /tmp/ccecbe7f.s 			page 129


5618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG          (0)(1)
5621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_INJ          (0)(1)
5622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VREFINT_REG_INJ         (1)
5623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG       (0)(1)
5624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_INJ       (0)(1)
5625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_TEMPSENSOR_REG_INJ      (1)
5626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG             (0)(1)
5627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_INJ             (0)(1)
5628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_VBAT_REG_INJ            (1)
5629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG     (0)(2)
5630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_INJ     (0)(2)
5631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH1_ADC2_REG_INJ    (2)
5632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG     (0)(2)
5633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_INJ     (0)(2)
5634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CH_DAC1CH2_ADC2_REG_INJ    (2)
5635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.\n
5637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On STM32H7, parameter available only on ADC instance: ADC3.\n
5638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) On STM32H7, parameter available only on ADC instance: ADC2.
5639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
5642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDChannelGroup" with bits position  */
5644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* in register and register position depending on parameter "AWDy".         */
5645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDChannelGroup" and "AWDy" are used with masks because      */
5646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK) >> AD
5648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
5649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg,
5651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
5652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              AWDChannelGroup & AWDy);
5653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog monitored channel.
5657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Usage of the returned channel number:
5658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To reinject this channel into another function LL_ADC_xxx:
5659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           the returned channel number is only partly formatted on definition
5660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           of literals LL_ADC_CHANNEL_x. Therefore, it has to be compared
5661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           with parts of literals LL_ADC_CHANNEL_x or using
5662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           helper macro @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Then the selected literal LL_ADC_CHANNEL_x can be used
5664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           as parameter for another function.
5665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - To get the channel number in decimal format:
5666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           process the returned value with the helper macro
5667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           @ref __LL_ADC_CHANNEL_TO_DECIMAL_NB().
5668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           Applicable only when the analog watchdog is set to monitor
5669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           one channel.
5670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
ARM GAS  /tmp/ccecbe7f.s 			page 130


5675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
5695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR     AWD1CH         LL_ADC_GetAnalogWDMonitChannels\n
5696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1SGL        LL_ADC_GetAnalogWDMonitChannels\n
5697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     AWD1EN         LL_ADC_GetAnalogWDMonitChannels\n
5698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR     JAWD1EN        LL_ADC_GetAnalogWDMonitChannels\n
5699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD2CR   AWD2CH         LL_ADC_GetAnalogWDMonitChannels\n
5700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         AWD3CR   AWD3CH         LL_ADC_GetAnalogWDMonitChannels
5701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2 (1)
5705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3 (1)
5706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) On this AWD number, monitored channel can be retrieved
5708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             if only 1 channel is programmed (or none or all channels).
5709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             This function cannot retrieve monitored channel if
5710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             multiple channels are programmed simultaneously
5711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             by bitfield.
5712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
5713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_DISABLE
5714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG        (0)
5715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_INJ        (0)
5716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_ALL_CHANNELS_REG_INJ
5717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG           (0)
5718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_INJ           (0)
5719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_0_REG_INJ
5720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG           (0)
5721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_INJ           (0)
5722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_1_REG_INJ
5723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG           (0)
5724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_INJ           (0)
5725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_2_REG_INJ
5726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG           (0)
5727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_INJ           (0)
5728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_3_REG_INJ
5729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG           (0)
5730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_INJ           (0)
5731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_4_REG_INJ
ARM GAS  /tmp/ccecbe7f.s 			page 131


5732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG           (0)
5733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_INJ           (0)
5734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_5_REG_INJ
5735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG           (0)
5736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_INJ           (0)
5737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_6_REG_INJ
5738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG           (0)
5739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_INJ           (0)
5740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_7_REG_INJ
5741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG           (0)
5742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_INJ           (0)
5743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_8_REG_INJ
5744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG           (0)
5745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_INJ           (0)
5746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_9_REG_INJ
5747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG          (0)
5748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_INJ          (0)
5749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_10_REG_INJ
5750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG          (0)
5751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_INJ          (0)
5752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_11_REG_INJ
5753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG          (0)
5754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_INJ          (0)
5755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_12_REG_INJ
5756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG          (0)
5757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_INJ          (0)
5758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_13_REG_INJ
5759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG          (0)
5760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_INJ          (0)
5761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_14_REG_INJ
5762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG          (0)
5763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_INJ          (0)
5764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_15_REG_INJ
5765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG          (0)
5766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_INJ          (0)
5767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_16_REG_INJ
5768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG          (0)
5769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_INJ          (0)
5770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_17_REG_INJ
5771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG          (0)
5772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_INJ          (0)
5773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_18_REG_INJ
5774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG          (0)
5775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_INJ          (0)
5776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_CHANNEL_19_REG_INJ
5777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
5778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (0) On STM32H7, parameter available only on analog watchdog number: AWD1.
5779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDMonitChannels(ADC_TypeDef *ADCx, uint32_t AWDy)
5781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->CFGR, ((AWDy & ADC_AWD_CRX_REGOFFSET_MASK)
5783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MA
5784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   uint32_t AnalogWDMonitChannels = (READ_BIT(*preg, AWDy) & AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK);
5786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* If "AnalogWDMonitChannels" == 0, then the selected AWD is disabled       */
5788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* (parameter value LL_ADC_AWD_DISABLE).                                    */
ARM GAS  /tmp/ccecbe7f.s 			page 132


5789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Else, the selected AWD is enabled and is monitoring a group of channels  */
5790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* or a single channel.                                                     */
5791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (AnalogWDMonitChannels != 0UL)
5792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     if (AWDy == LL_ADC_AWD1)
5794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_CFGR_AWD1SGL) == 0UL)
5796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = ((AnalogWDMonitChannels
5799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                   | (ADC_AWD_CR23_CHANNEL_MASK)
5800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  )
5801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  & (~(ADC_CFGR_AWD1CH))
5802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_AWD2CR_AWD2CH_0 << (AnalogWDMonitChannels >> ADC_CFGR_AWD1C
5809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     else
5813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     {
5814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       if ((AnalogWDMonitChannels & ADC_AWD_CR23_CHANNEL_MASK) == ADC_AWD_CR23_CHANNEL_MASK)
5815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (ADC_AWD_CR23_CHANNEL_MASK
5818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | ((ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN))
5819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       else
5822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       {
5823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a single channel */
5824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         /* AWD monitoring a group of channels */
5825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****         AnalogWDMonitChannels = (AnalogWDMonitChannels
5826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (ADC_CFGR_JAWD1EN | ADC_CFGR_AWD1EN | ADC_CFGR_AWD1SGL)
5827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                  | (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDMonitChannels) << ADC_CF
5828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                 );
5829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****       }
5830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     }
5831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return AnalogWDMonitChannels;
5834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog threshold value of threshold
5838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high or low.
5839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
ARM GAS  /tmp/ccecbe7f.s 			page 133


5846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
5860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
5861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
5862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
5863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC oversampling is enabled, ADC analog watchdog thresholds are
5864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         impacted: the comparison of analog watchdog thresholds is done
5865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on oversampling intermediate computation (after ratio, before shift
5866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         application): intermediate register bitfield [32:7]
5867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (26 most significant bits).
5868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
5869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
5870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
5871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either ADC groups regular or injected.
5872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_SetAnalogWDThresholds\n
5873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_SetAnalogWDThresholds\n
5874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_SetAnalogWDThresholds\n
5875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_SetAnalogWDThresholds\n
5876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_SetAnalogWDThresholds\n
5877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_SetAnalogWDThresholds
5878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdValue Value between Min_Data=0x000 and Max_Data=0xFFF
5887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
5888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
5889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWDThr
5890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
5893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
5900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
5902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdsHighLow,
ARM GAS  /tmp/ccecbe7f.s 			page 134


5903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                AWDThresholdValue << ((AWDThresholdsHighLow & ADC_AWD_TRX_BIT_HIGH_MASK) >> ADC_AWD_
5904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
5906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
5907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* position in register and register position depending on parameters       */
5909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* "AWDThresholdsHighLow" and "AWDy".                                       */
5910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* containing other bits reserved for other purpose.                        */
5912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
5913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
5914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (AWDThresholdsHighLow));
5915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
5918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdValue" with bits         */
5920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameters       */
5921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDThresholdsHighLow" and "AWDy".                                       */
5922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdValue" are used with masks because    */
5923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
5924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK) >> A
5925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) * 
5926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + (AWDThresholdsHighLow));
5927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdValue);
5929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif  /* ADC_VER_V5_V90 */
5930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog threshold value of threshold high,
5934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         threshold low or raw data with ADC thresholds high and low
5935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         concatenated.
5936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION().
5939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_GetAnalogWDThresholds\n
5940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_GetAnalogWDThresholds\n
5941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_GetAnalogWDThresholds\n
5942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_GetAnalogWDThresholds\n
5943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_GetAnalogWDThresholds\n
5944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_GetAnalogWDThresholds
5945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
5946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
5947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
5948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
5949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
5950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdsHighLow This parameter can be one of the following values:
5951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_HIGH
5952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_THRESHOLD_LOW
5953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
5954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
5955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AW
5956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
5957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_
5959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MA
ARM GAS  /tmp/ccecbe7f.s 			page 135


5960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                             + (AWDThresholdsHighLow));
5961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else
5964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****    const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
5965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + ((AWDy & ADC_AWD_TR12_REGOFFSE
5966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                                    + (AWDThresholdsHighLow));
5967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg, ADC_LTR_LT));
5969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
5970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
5971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
5973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
5974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
5975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog thresholds value of both thresholds
5976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         high and low. Applicable for devices STM32H72xx and STM32H73xx.
5977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If value of only one threshold high or low must be set,
5978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         use function @ref LL_ADC_SetAnalogWDThresholds().
5979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC resolution different of 12 bits,
5980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog thresholds data require a specific shift.
5981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Use helper macro @ref __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION().
5982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, there are 2 kinds of analog watchdog
5983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         instance:
5984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD standard (instance AWD1):
5985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: can monitor 1 channel or all channels.
5986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: ADC groups regular and-or injected.
5987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is not limited (corresponds to
5988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             ADC resolution configured).
5989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - AWD flexible (instances AWD2, AWD3):
5990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - channels monitored: flexible on channels monitored, selection is
5991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             channel wise, from from 1 to all channels.
5992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Specificity of this analog watchdog: Multiple channels can
5993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             be selected. For example:
5994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             (LL_ADC_AWD_CHANNEL4_REG_INJ | LL_ADC_AWD_CHANNEL5_REG_INJ | ...)
5995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - groups monitored: not selection possible (monitoring on both
5996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             groups regular and injected).
5997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             Channels selected are monitored on groups regular and injected:
5998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG_INJ (do not use parameters
5999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             LL_ADC_AWD_CHANNELxx_REG and LL_ADC_AWD_CHANNELxx_INJ)
6000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           - resolution: resolution is limited to 8 bits: if ADC resolution is
6001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             12 bits the 4 LSB are ignored, if ADC resolution is 10 bits
6002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *             the 2 LSB are ignored.
6003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      HT1            LL_ADC_ConfigAnalogWDThresholds\n
6004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      HT2            LL_ADC_ConfigAnalogWDThresholds\n
6005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      HT3            LL_ADC_ConfigAnalogWDThresholds\n
6006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR1      LT1            LL_ADC_ConfigAnalogWDThresholds\n
6007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR2      LT2            LL_ADC_ConfigAnalogWDThresholds\n
6008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         TR3      LT3            LL_ADC_ConfigAnalogWDThresholds
6009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD2
6013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD3
6014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdHighValue Value between Min_Data=0x000 and Max_Data=0xFFF
6015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDThresholdLowValue Value between Min_Data=0x000 and Max_Data=0xFFF
6016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccecbe7f.s 			page 136


6017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigAnalogWDThresholds(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t AWD
6019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Set bits with content of parameter "AWDThresholdxxxValue" with bits      */
6021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* position in register and register position depending on parameter        */
6022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* "AWDy".                                                                  */
6023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Parameters "AWDy" and "AWDThresholdxxxValue" are used with masks because */
6024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* containing other bits reserved for other purpose.                        */
6025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     uint32_t __IO *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, ((AWDy & ADC_AWD_TRX_REGOFFSET_MASK)
6028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg,
6030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_TR1_HT1 | ADC3_TR1_LT1,
6031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                (AWDThresholdHighValue << ADC3_TR1_HT1_Pos) | AWDThresholdLowValue);
6032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MASK
6036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
6037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + (LL_ADC_AWD_THRESHOLD_LOW));
6038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     __IO uint32_t *preg2 = __ADC_PTR_REG_OFFSET(ADCx->LTR1_TR1, (((AWDy & ADC_AWD_TRX_REGOFFSET_MAS
6039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK)
6040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + (LL_ADC_AWD_THRESHOLD_HIGH));
6041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_LTR_LT, AWDThresholdLowValue);
6043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
6044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC analog watchdog filtering configuration
6050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_SetAWDFilteringConfiguration
6058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  FilteringConfig This parameter can be one of the following values:
6062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy, uint32_t
6073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccecbe7f.s 			page 137


6074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT, FilteringConfig);
6079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC analog watchdog filtering configuration
6084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *  @note  On this STM32 serie, this feature is only available on first
6085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         analog watchdog (AWD1)
6086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Applicable on ADC3 of devices STM32H72xx and STM32H73xx.
6087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll TR1      AWDFILT        LL_ADC_GetAWDFilteringConfiguration
6088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  AWDy This parameter can be one of the following values:
6090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD1
6091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be:
6092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_NONE
6093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_2SAMPLES
6094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_3SAMPLES
6095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_4SAMPLES
6096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_5SAMPLES
6097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_6SAMPLES
6098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_7SAMPLES
6099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_AWD_FILTERING_8SAMPLES
6100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetAWDFilteringConfiguration(ADC_TypeDef *ADCx, uint32_t AWDy)
6102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx == ADC3)
6104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Prevent unused argument(s) compilation warning */
6106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     (void)(AWDy);
6107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)(READ_BIT(ADCx->LTR1_TR1, ADC3_TR1_AWDFILT));
6108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else
6110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     /* Function not available on this instance, return 0 */
6112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return 0UL;
6113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif /* ADC_VER_V5_V90 */
6116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_oversampling Configuration of ADC transversal scope: over
6121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling scope: ADC groups regular and-or injected
6126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
ARM GAS  /tmp/ccecbe7f.s 			page 138


6131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_SetOverSamplingScope\n
6138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_SetOverSamplingScope\n
6139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_SetOverSamplingScope
6140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OvsScope This parameter can be one of the following values:
6142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
6150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
6152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling scope: ADC groups regular and-or injected
6156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (availability of ADC group injected depends on STM32 families).
6157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If both groups regular and injected are selected,
6158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         specify behavior of ADC group injected interrupting
6159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         group regular: when ADC group injected is triggered,
6160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         the oversampling on ADC group regular is either
6161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         temporary stopped and continued, or resumed from start
6162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (oversampler buffer reset).
6163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    ROVSE          LL_ADC_GetOverSamplingScope\n
6164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    JOVSE          LL_ADC_GetOverSamplingScope\n
6165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    ROVSM          LL_ADC_GetOverSamplingScope
6166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_DISABLE
6169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_CONTINUED
6170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_REGULAR_RESUMED
6171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJECTED
6172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
6173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingScope(ADC_TypeDef *ADCx)
6175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM));
6177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling discontinuous mode (triggered mode)
6181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
ARM GAS  /tmp/ccecbe7f.s 			page 139


6188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on group regular.
6191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, oversampling discontinuous mode
6192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (triggered mode) can be used only when oversampling is
6193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         set on group regular only and in resumed mode.
6194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_SetOverSamplingDiscont
6195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  OverSamplingDiscont This parameter can be one of the following values:
6197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetOverSamplingDiscont(ADC_TypeDef *ADCx, uint32_t OverSamplingDiscont)
6202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_TROVS, OverSamplingDiscont);
6204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling discontinuous mode (triggered mode)
6208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on the selected ADC group.
6209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Number of oversampled conversions are done either in:
6210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - continuous mode (all conversions of oversampling ratio
6211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           are done from 1 trigger)
6212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - discontinuous mode (each conversion of oversampling ratio
6213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           needs a trigger)
6214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    TROVS          LL_ADC_GetOverSamplingDiscont
6215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_CONT
6218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_REG_DISCONT
6219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingDiscont(ADC_TypeDef *ADCx)
6221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_TROVS));
6223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC oversampling
6227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (impacting both ADC groups regular and injected)
6228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   This function set the 2 items of oversampling configuration:
6229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ratio
6230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - shift
6231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be disabled or enabled without conversion on going
6234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_ConfigOverSamplingRatioShift\n
6236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CFGR2    OVSR           LL_ADC_ConfigOverSamplingRatioShift
6237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Ratio This parameter can be in the range from 1 to 1024.
6239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Shift This parameter can be one of the following values:
6240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
ARM GAS  /tmp/ccecbe7f.s 			page 140


6245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ConfigOverSamplingRatioShift(ADC_TypeDef *ADCx, uint32_t Ratio, uint32_
6255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_OVSS | ADC_CFGR2_OVSR), (Shift | (((Ratio - 1UL) << ADC_CFGR2_
6257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling ratio
6261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSR           LL_ADC_GetOverSamplingRatio
6263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Ratio This parameter can be in the from 1 to 1024.
6265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingRatio(ADC_TypeDef *ADCx)
6267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (((uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSR)) + (1UL << ADC_CFGR2_OVSR_Pos)) >> ADC_
6269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC oversampling shift
6273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *        (impacting both ADC groups regular and injected)
6274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CFGR2    OVSS           LL_ADC_GetOverSamplingShift
6275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Shift This parameter can be one of the following values:
6277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_NONE
6278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_1
6279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_2
6280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_3
6281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_4
6282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_5
6283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_6
6284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_7
6285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_8
6286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_9
6287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_10
6288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_OVS_SHIFT_RIGHT_11
6289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** */
6290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetOverSamplingShift(ADC_TypeDef *ADCx)
6291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_OVSS));
6293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Configuration_ADC_Multimode Configuration of ADC hierarchical scope: multim
6300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 141


6302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC boost mode.
6304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_SetBoostMode
6309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  BoostMode This parameter can be one of the following values:
6311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_6MHZ25
6312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_12MHZ5
6313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_20MHZ
6314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_25MHZ
6315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_BOOST_MODE_50MHZ
6316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetBoostMode(ADC_TypeDef *ADCx, uint32_t BoostMode)
6319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
6321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if (ADCx != ADC3)
6322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #else   /* ADC_VER_V5_V90 */
6326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST_0, (BoostMode >> 2UL));
6329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(ADCx->CR, ADC_CR_BOOST, (BoostMode & ADC_CR_BOOST));
6333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #endif
6335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC boost mode.
6340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC boost must be configured, without calibration on going, without conversion
6343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on going on group regular.
6344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR  BOOST      LL_ADC_GetBoostMode
6345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: Boost disabled 1: Boost enabled
6347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetBoostMode(ADC_TypeDef *ADCx)
6349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   if ((DBGMCU->IDCODE & 0x30000000UL) == 0x10000000UL) /* Cut 1.x */
6351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return (uint32_t)READ_BIT(ADCx->CR, ADC_CR_BOOST_0);
6353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   else /* Cut 2.x */
6355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
6356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     return ((READ_BIT(ADCx->CR, ADC_CR_BOOST) == (ADC_CR_BOOST)) ? 1UL : 0UL);
6357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
6358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
ARM GAS  /tmp/ccecbe7f.s 			page 142


6359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode configuration to operate in independent mode
6362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro
6371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_SetMultimode
6373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Multimode This parameter can be one of the following values:
6376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultimode(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Multimode)
6387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DUAL, Multimode);
6389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode configuration to operate in independent mode
6393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or multimode (for devices with several ADC instances).
6394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If multimode configuration: the selected ADC instance is
6395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         either master or slave depending on hardware.
6396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to reference manual.
6397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DUAL           LL_ADC_GetMultimode
6398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_INDEPENDENT
6402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIMULT
6403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INTERL
6404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_SIMULT
6405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_INJ_ALTERN
6406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
6407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
6408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
6409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
6411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
  97              		.loc 2 6412 0 discriminator 4
  98 0016 B768     		ldr	r7, [r6, #8]
  99 0018 07F01F07 		and	r7, r7, #31
ARM GAS  /tmp/ccecbe7f.s 			page 143


 100              	.LVL4:
 101              	.LBE307:
 102              	.LBE306:
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If end of conversion selected to end of sequence conversions */
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 103              		.loc 1 1594 0 discriminator 4
 104 001c 4269     		ldr	r2, [r0, #20]
 105 001e 082A     		cmp	r2, #8
 106 0020 40D0     		beq	.L20
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_Flag_End = ADC_FLAG_EOS;
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If end of conversion selected to end of unitary conversion */
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* ADC_EOC_SINGLE_CONV */
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verification that ADC configuration is compliant with polling for      */
1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* each conversion:                                                       */
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* several ranks and polling for end of each conversion.                  */
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* For code simplicity sake, this particular case is generalized to       */
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC configured in DMA mode and and polling for end of each conversion. */
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 107              		.loc 1 1608 0
 108 0022 052F     		cmp	r7, #5
 109 0024 14BF     		ite	ne
 110 0026 0022     		movne	r2, #0
 111 0028 0122     		moveq	r2, #1
 112 002a 002F     		cmp	r7, #0
 113 002c 08BF     		it	eq
 114 002e 0122     		moveq	r2, #1
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 115              		.loc 1 1607 0
 116 0030 4AB9     		cbnz	r2, .L6
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 117              		.loc 1 1609 0
 118 0032 092F     		cmp	r7, #9
 119 0034 07D0     		beq	.L6
 120              	.LVL5:
 121              	.LBB308:
 122              	.LBB309:
6413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode conversion data transfer: no transfer
6417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
ARM GAS  /tmp/ccecbe7f.s 			page 144


6425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
6434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled
6448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or enabled without conversion on going on group regular.
6449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiDMATransfer This parameter can be one of the following values:
6453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t MultiDMA
6459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DAMDF, MultiDMATransfer);
6461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data transfer: no transfer
6465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or transfer by DMA.
6466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC multimode transfer by DMA is not selected:
6467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         each ADC uses its own DMA channel, with its individual
6468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         DMA transfer settings.
6469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected:
6470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         One DMA channel is used for both ADC (DMA of ADC master)
6471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Specifies the DMA requests mode:
6472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Limited mode (One shot mode): DMA transfer requests are stopped
6473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           when number of DMA data transfers (number of
6474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions) is reached.
6475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode non-circular.
6476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Unlimited mode: DMA transfer requests are unlimited,
6477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           whatever number of DMA data transfers (number of
6478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           ADC conversions).
6479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           This ADC mode is intended to be used with DMA mode circular.
6480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If ADC DMA requests mode is set to unlimited and DMA is set to
6481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         mode non-circular:
ARM GAS  /tmp/ccecbe7f.s 			page 145


6482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         when DMA transfers size will be reached, DMA will stop transfers of
6483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversions data ADC will raise an overrun error
6484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (overrun flag and interruption if enabled).
6485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   How to retrieve multimode conversion data:
6486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Whatever multimode transfer by DMA setting: using function
6487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref LL_ADC_REG_ReadMultiConversionData32().
6488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         If ADC multimode transfer by DMA is selected: conversion data
6489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is a raw data with ADC master and slave concatenated.
6490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         A macro is available to get the conversion data of
6491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DAMDF          LL_ADC_GetMultiDMATransfer\n
6494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
6498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
6499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
6500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
6502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 123              		.loc 2 6503 0 discriminator 4
 124 0036 B368     		ldr	r3, [r6, #8]
 125              	.LVL6:
 126              	.LBE309:
 127              	.LBE308:
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check DMNGT bit in handle ADC CFGR register */
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check ADC DMA mode in multimode on ADC group regular */
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_
 128              		.loc 1 1626 0 discriminator 4
 129 0038 13F4404F 		tst	r3, #49152
 130 003c 2CD1     		bne	.L26
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_Flag_End = (ADC_FLAG_EOC);
 131              		.loc 1 1633 0
 132 003e 0426     		movs	r6, #4
 133 0040 06E0     		b	.L5
ARM GAS  /tmp/ccecbe7f.s 			page 146


 134              	.L19:
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 135              		.loc 1 1588 0
 136 0042 3A4E     		ldr	r6, .L31+8
 137 0044 E7E7     		b	.L4
 138              	.L6:
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 139              		.loc 1 1613 0
 140 0046 DB68     		ldr	r3, [r3, #12]
 141 0048 13F0010F 		tst	r3, #1
 142 004c 1DD1     		bne	.L27
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 143              		.loc 1 1620 0
 144 004e 0426     		movs	r6, #4
 145              	.L5:
 146 0050 0D46     		mov	r5, r1
 147 0052 0446     		mov	r4, r0
 148              	.LVL7:
1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get tick count */
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 149              		.loc 1 1639 0
 150 0054 FFF7FEFF 		bl	HAL_GetTick
 151              	.LVL8:
 152 0058 8046     		mov	r8, r0
 153              	.LVL9:
 154              	.L10:
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Wait until End of unitary conversion or sequence conversions flag is raised */
1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 155              		.loc 1 1642 0
 156 005a 2368     		ldr	r3, [r4]
 157 005c 1A68     		ldr	r2, [r3]
 158 005e 3242     		tst	r2, r6
 159 0060 22D1     		bne	.L28
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 160              		.loc 1 1645 0
 161 0062 B5F1FF3F 		cmp	r5, #-1
 162 0066 F8D0     		beq	.L10
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 163              		.loc 1 1647 0
 164 0068 FFF7FEFF 		bl	HAL_GetTick
 165              	.LVL10:
 166 006c A0EB0800 		sub	r0, r0, r8
 167 0070 A842     		cmp	r0, r5
 168 0072 01D8     		bhi	.L11
 169              		.loc 1 1647 0 is_stmt 0 discriminator 1
 170 0074 002D     		cmp	r5, #0
 171 0076 F0D1     		bne	.L10
 172              	.L11:
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
ARM GAS  /tmp/ccecbe7f.s 			page 147


1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 173              		.loc 1 1650 0 is_stmt 1
 174 0078 236E     		ldr	r3, [r4, #96]
 175 007a 43F00403 		orr	r3, r3, #4
 176 007e 2366     		str	r3, [r4, #96]
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 177              		.loc 1 1653 0
 178 0080 0023     		movs	r3, #0
 179 0082 84F85C30 		strb	r3, [r4, #92]
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_TIMEOUT;
 180              		.loc 1 1655 0
 181 0086 0320     		movs	r0, #3
 182 0088 04E0     		b	.L8
 183              	.LVL11:
 184              	.L27:
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
 185              		.loc 1 1615 0
 186 008a 036E     		ldr	r3, [r0, #96]
 187 008c 43F02003 		orr	r3, r3, #32
 188 0090 0366     		str	r3, [r0, #96]
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 189              		.loc 1 1616 0
 190 0092 0120     		movs	r0, #1
 191              	.LVL12:
 192              	.L8:
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Update ADC state machine */
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Determine whether any further conversion upcoming on group regular       */
1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* by external trigger, continuous mode or scan sequence on going.          */
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (hadc->Init.ContinuousConvMode == DISABLE)
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check whether end of sequence is reached */
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_READY);
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get relevant register CFGR in ADC instance of ADC master or slave        */
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* in function of multimode state (for devices with multimode               */
ARM GAS  /tmp/ccecbe7f.s 			page 148


1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* available).                                                              */
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve handle ADC CFGR register */
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_cfgr = READ_REG(hadc->Instance->CFGR);
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve Master ADC CFGR register */
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Clear polled flag */
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_Flag_End == ADC_FLAG_EOS)
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear end of conversion EOC flag of regular group if low power feature */
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* until data register is read using function HAL_ADC_GetValue().         */
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 193              		.loc 1 1719 0
 194 0094 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 195              	.LVL13:
 196              	.L26:
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
 197              		.loc 1 1628 0
 198 0098 036E     		ldr	r3, [r0, #96]
 199 009a 43F02003 		orr	r3, r3, #32
 200 009e 0366     		str	r3, [r0, #96]
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 201              		.loc 1 1629 0
 202 00a0 0120     		movs	r0, #1
 203              	.LVL14:
 204 00a2 F7E7     		b	.L8
 205              	.LVL15:
 206              	.L20:
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 207              		.loc 1 1596 0
 208 00a4 0826     		movs	r6, #8
 209 00a6 D3E7     		b	.L5
 210              	.LVL16:
ARM GAS  /tmp/ccecbe7f.s 			page 149


 211              	.L28:
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 212              		.loc 1 1661 0
 213 00a8 226E     		ldr	r2, [r4, #96]
 214 00aa 42F40072 		orr	r2, r2, #512
 215 00ae 2266     		str	r2, [r4, #96]
 216              	.LVL17:
 217              	.LBB310:
 218              	.LBB311:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 219              		.loc 2 3797 0
 220 00b0 DA68     		ldr	r2, [r3, #12]
 221 00b2 12F4406F 		tst	r2, #3072
 222 00b6 11D1     		bne	.L13
 223              	.LVL18:
 224              	.LBE311:
 225              	.LBE310:
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 226              		.loc 1 1666 0
 227 00b8 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2
 228 00ba 7AB9     		cbnz	r2, .L13
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 229              		.loc 1 1670 0
 230 00bc 1A68     		ldr	r2, [r3]
 231 00be 12F0080F 		tst	r2, #8
 232 00c2 0BD0     		beq	.L13
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 233              		.loc 1 1673 0
 234 00c4 226E     		ldr	r2, [r4, #96]
 235 00c6 22F48072 		bic	r2, r2, #256
 236 00ca 2266     		str	r2, [r4, #96]
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 237              		.loc 1 1675 0
 238 00cc 226E     		ldr	r2, [r4, #96]
 239 00ce 12F4805F 		tst	r2, #4096
 240 00d2 03D1     		bne	.L13
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 241              		.loc 1 1677 0
 242 00d4 226E     		ldr	r2, [r4, #96]
 243 00d6 42F00102 		orr	r2, r2, #1
 244 00da 2266     		str	r2, [r4, #96]
 245              	.L13:
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 246              		.loc 1 1685 0
 247 00dc 124A     		ldr	r2, .L31+4
 248 00de 9342     		cmp	r3, r2
 249 00e0 0CD0     		beq	.L29
 250 00e2 1A46     		mov	r2, r3
 251              	.L14:
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 252              		.loc 1 1685 0 is_stmt 0 discriminator 4
 253 00e4 9342     		cmp	r3, r2
 254 00e6 0CD0     		beq	.L15
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 255              		.loc 1 1687 0 is_stmt 1
 256 00e8 052F     		cmp	r7, #5
 257 00ea 14BF     		ite	ne
ARM GAS  /tmp/ccecbe7f.s 			page 150


 258 00ec 0021     		movne	r1, #0
 259 00ee 0121     		moveq	r1, #1
 260 00f0 3FB1     		cbz	r7, .L15
 261 00f2 31B9     		cbnz	r1, .L15
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 262              		.loc 1 1688 0
 263 00f4 092F     		cmp	r7, #9
 264 00f6 04D0     		beq	.L15
 265              	.LVL19:
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 266              		.loc 1 1698 0 discriminator 4
 267 00f8 D268     		ldr	r2, [r2, #12]
 268              	.LVL20:
 269 00fa 03E0     		b	.L17
 270              	.LVL21:
 271              	.L29:
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 272              		.loc 1 1685 0
 273 00fc A2F58072 		sub	r2, r2, #256
 274 0100 F0E7     		b	.L14
 275              	.L15:
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 276              		.loc 1 1692 0
 277 0102 DA68     		ldr	r2, [r3, #12]
 278              	.LVL22:
 279              	.L17:
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 280              		.loc 1 1702 0
 281 0104 082E     		cmp	r6, #8
 282 0106 06D0     		beq	.L30
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 283              		.loc 1 1711 0
 284 0108 12F4804F 		tst	r2, #16384
 285 010c 07D1     		bne	.L24
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 286              		.loc 1 1713 0
 287 010e 0C22     		movs	r2, #12
 288              	.LVL23:
 289 0110 1A60     		str	r2, [r3]
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 290              		.loc 1 1718 0
 291 0112 0020     		movs	r0, #0
 292 0114 BEE7     		b	.L8
 293              	.LVL24:
 294              	.L30:
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 295              		.loc 1 1704 0
 296 0116 0822     		movs	r2, #8
 297              	.LVL25:
 298 0118 1A60     		str	r2, [r3]
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 299              		.loc 1 1718 0
 300 011a 0020     		movs	r0, #0
 301 011c BAE7     		b	.L8
 302              	.LVL26:
 303              	.L24:
 304 011e 0020     		movs	r0, #0
ARM GAS  /tmp/ccecbe7f.s 			page 151


 305 0120 B8E7     		b	.L8
 306              	.L32:
 307 0122 00BF     		.align	2
 308              	.L31:
 309 0124 00200240 		.word	1073881088
 310 0128 00210240 		.word	1073881344
 311 012c 00630258 		.word	1476551424
 312              		.cfi_endproc
 313              	.LFE349:
 315              		.section	.text.HAL_ADC_PollForEvent,"ax",%progbits
 316              		.align	1
 317              		.global	HAL_ADC_PollForEvent
 318              		.syntax unified
 319              		.thumb
 320              		.thumb_func
 321              		.fpu fpv5-d16
 323              	HAL_ADC_PollForEvent:
 324              	.LFB350:
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Poll for ADC event.
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param EventType the ADC event type.
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          This parameter can be one of the following values:
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_EOSMP_EVENT  ADC End of Sampling event
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD1_EVENT   ADC Analog watchdog 1 event (main analog watchdog, presen
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD2_EVENT   ADC Analog watchdog 2 event (additional analog watchdog, 
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_AWD3_EVENT   ADC Analog watchdog 3 event (additional analog watchdog, 
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_OVR_EVENT    ADC Overrun event
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_JQOVF_EVENT  ADC Injected context queue overflow event
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Timeout Timeout value in millisecond.
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   The relevant flag is cleared if found to be set, except for ADC_FLAG_OVR.
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Indeed, the latter is reset only if hadc->Init.Overrun field is set
1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         to ADC_OVR_DATA_OVERWRITTEN. Otherwise, data register may be potentially overwritten
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         by a new converted data as soon as OVR is cleared.
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To reset OVR flag once the preserved data is retrieved, the user can resort
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         to macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef *hadc, uint32_t EventType, uint32_t Timeou
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 325              		.loc 1 1742 0
 326              		.cfi_startproc
 327              		@ args = 0, pretend = 0, frame = 0
 328              		@ frame_needed = 0, uses_anonymous_args = 0
 329              	.LVL27:
 330 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 331              	.LCFI1:
 332              		.cfi_def_cfa_offset 24
 333              		.cfi_offset 3, -24
 334              		.cfi_offset 4, -20
 335              		.cfi_offset 5, -16
 336              		.cfi_offset 6, -12
 337              		.cfi_offset 7, -8
 338              		.cfi_offset 14, -4
 339 0002 0546     		mov	r5, r0
 340 0004 0C46     		mov	r4, r1
ARM GAS  /tmp/ccecbe7f.s 			page 152


 341 0006 1646     		mov	r6, r2
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EVENT_TYPE(EventType));
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Get tick count */
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tickstart = HAL_GetTick();
 342              		.loc 1 1750 0
 343 0008 FFF7FEFF 		bl	HAL_GetTick
 344              	.LVL28:
 345 000c 0746     		mov	r7, r0
 346              	.LVL29:
 347              	.L35:
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check selected event flag */
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   while (__HAL_ADC_GET_FLAG(hadc, EventType) == 0UL)
 348              		.loc 1 1753 0
 349 000e 2B68     		ldr	r3, [r5]
 350 0010 1A68     		ldr	r2, [r3]
 351 0012 34EA0202 		bics	r2, r4, r2
 352 0016 12D0     		beq	.L48
1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if timeout is disabled (set to infinite wait) */
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (Timeout != HAL_MAX_DELAY)
 353              		.loc 1 1756 0
 354 0018 B6F1FF3F 		cmp	r6, #-1
 355 001c F7D0     		beq	.L35
1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 356              		.loc 1 1758 0
 357 001e FFF7FEFF 		bl	HAL_GetTick
 358              	.LVL30:
 359 0022 C01B     		subs	r0, r0, r7
 360 0024 B042     		cmp	r0, r6
 361 0026 01D8     		bhi	.L36
 362              		.loc 1 1758 0 is_stmt 0 discriminator 1
 363 0028 002E     		cmp	r6, #0
 364 002a F0D1     		bne	.L35
 365              	.L36:
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to timeout */
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 366              		.loc 1 1761 0 is_stmt 1
 367 002c 2B6E     		ldr	r3, [r5, #96]
 368 002e 43F00403 		orr	r3, r3, #4
 369 0032 2B66     		str	r3, [r5, #96]
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
 370              		.loc 1 1764 0
 371 0034 0023     		movs	r3, #0
 372 0036 85F85C30 		strb	r3, [r5, #92]
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_TIMEOUT;
 373              		.loc 1 1766 0
ARM GAS  /tmp/ccecbe7f.s 			page 153


 374 003a 0320     		movs	r0, #3
 375 003c 29E0     		b	.L37
 376              	.L48:
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   switch (EventType)
 377              		.loc 1 1771 0
 378 003e B4F5807F 		cmp	r4, #256
 379 0042 27D0     		beq	.L40
 380 0044 0BD8     		bhi	.L41
 381 0046 022C     		cmp	r4, #2
 382 0048 1CD0     		beq	.L42
 383 004a 802C     		cmp	r4, #128
 384 004c 34D1     		bne	.L39
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* End Of Sampling event */
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_EOSMP_EVENT:
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear the End Of Sampling flag */
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Analog watchdog (level out of window) event */
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: In case of several analog watchdog enabled, if needed to know      */
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* which one triggered and on which ADCx, test ADC state of analog watchdog */
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* flags HAL_ADC_STATE_AWD1/2/3 using function "HAL_ADC_GetState()".        */
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* For example:                                                             */
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "          */
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD2) != 0UL) "          */
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD3) != 0UL) "          */
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 1 flag */
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD_EVENT:
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 385              		.loc 1 1795 0
 386 004e 2A6E     		ldr	r2, [r5, #96]
 387 0050 42F48032 		orr	r2, r2, #65536
 388 0054 2A66     		str	r2, [r5, #96]
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 389              		.loc 1 1798 0
 390 0056 8022     		movs	r2, #128
 391 0058 1A60     		str	r2, [r3]
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 2 flag */
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD2_EVENT:
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
ARM GAS  /tmp/ccecbe7f.s 			page 154


1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check analog watchdog 3 flag */
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_AWD3_EVENT:
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC analog watchdog flag */
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected context queue overflow event */
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     case ADC_JQOVF_EVENT:
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to Injected context queue overflow */
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC Injected context queue overflow flag */
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Overrun event */
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     default: /* Case ADC_OVR_EVENT */
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If overrun is set to overwrite previous data, overrun event is not     */
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* considered as an error.                                                */
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (cf ref manual "Managing conversions without using the DMA and without */
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* overrun ")                                                             */
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC state */
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC error code to overrun */
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear ADC Overrun flag only if Overrun is set to ADC_OVR_DATA_OVERWRITTEN
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            otherwise, data register is potentially overwritten by new converted data as soon
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            as OVR is cleared. */
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       break;
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
 392              		.loc 1 1860 0
 393 005a 0020     		movs	r0, #0
ARM GAS  /tmp/ccecbe7f.s 			page 155


1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 394              		.loc 1 1800 0
 395 005c 19E0     		b	.L37
 396              	.L41:
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 397              		.loc 1 1771 0
 398 005e B4F5007F 		cmp	r4, #512
 399 0062 20D0     		beq	.L44
 400 0064 B4F5806F 		cmp	r4, #1024
 401 0068 26D1     		bne	.L39
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 402              		.loc 1 1825 0
 403 006a 2A6E     		ldr	r2, [r5, #96]
 404 006c 42F48042 		orr	r2, r2, #16384
 405 0070 2A66     		str	r2, [r5, #96]
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 406              		.loc 1 1828 0
 407 0072 6A6E     		ldr	r2, [r5, #100]
 408 0074 42F00802 		orr	r2, r2, #8
 409 0078 6A66     		str	r2, [r5, #100]
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 410              		.loc 1 1831 0
 411 007a 4FF48062 		mov	r2, #1024
 412 007e 1A60     		str	r2, [r3]
 413              		.loc 1 1860 0
 414 0080 0020     		movs	r0, #0
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 415              		.loc 1 1833 0
 416 0082 06E0     		b	.L37
 417              	.L42:
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 418              		.loc 1 1776 0
 419 0084 2A6E     		ldr	r2, [r5, #96]
 420 0086 42F40062 		orr	r2, r2, #2048
 421 008a 2A66     		str	r2, [r5, #96]
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 422              		.loc 1 1779 0
 423 008c 0222     		movs	r2, #2
 424 008e 1A60     		str	r2, [r3]
 425              		.loc 1 1860 0
 426 0090 0020     		movs	r0, #0
 427              	.L37:
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 428              		.loc 1 1861 0
 429 0092 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 430              	.LVL31:
 431              	.L40:
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 432              		.loc 1 1805 0
 433 0094 2A6E     		ldr	r2, [r5, #96]
 434 0096 42F40032 		orr	r2, r2, #131072
 435 009a 2A66     		str	r2, [r5, #96]
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 436              		.loc 1 1808 0
 437 009c 4FF48072 		mov	r2, #256
 438 00a0 1A60     		str	r2, [r3]
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
ARM GAS  /tmp/ccecbe7f.s 			page 156


 439              		.loc 1 1860 0
 440 00a2 0020     		movs	r0, #0
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 441              		.loc 1 1810 0
 442 00a4 F5E7     		b	.L37
 443              	.L44:
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 444              		.loc 1 1815 0
 445 00a6 2A6E     		ldr	r2, [r5, #96]
 446 00a8 42F48022 		orr	r2, r2, #262144
 447 00ac 2A66     		str	r2, [r5, #96]
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 448              		.loc 1 1818 0
 449 00ae 4FF40072 		mov	r2, #512
 450 00b2 1A60     		str	r2, [r3]
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 451              		.loc 1 1860 0
 452 00b4 0020     		movs	r0, #0
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 453              		.loc 1 1820 0
 454 00b6 ECE7     		b	.L37
 455              	.L39:
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 456              		.loc 1 1841 0
 457 00b8 EA6B     		ldr	r2, [r5, #60]
 458 00ba 1AB1     		cbz	r2, .L49
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 459              		.loc 1 1854 0
 460 00bc 1022     		movs	r2, #16
 461 00be 1A60     		str	r2, [r3]
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 462              		.loc 1 1860 0
 463 00c0 0020     		movs	r0, #0
 464 00c2 E6E7     		b	.L37
 465              	.L49:
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 466              		.loc 1 1844 0
 467 00c4 2B6E     		ldr	r3, [r5, #96]
 468 00c6 43F48063 		orr	r3, r3, #1024
 469 00ca 2B66     		str	r3, [r5, #96]
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 470              		.loc 1 1847 0
 471 00cc 6B6E     		ldr	r3, [r5, #100]
 472 00ce 43F00203 		orr	r3, r3, #2
 473 00d2 6B66     		str	r3, [r5, #100]
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 474              		.loc 1 1860 0
 475 00d4 0020     		movs	r0, #0
 476 00d6 DCE7     		b	.L37
 477              		.cfi_endproc
 478              	.LFE350:
 480              		.section	.text.HAL_ADC_GetValue,"ax",%progbits
 481              		.align	1
 482              		.global	HAL_ADC_GetValue
 483              		.syntax unified
 484              		.thumb
 485              		.thumb_func
ARM GAS  /tmp/ccecbe7f.s 			page 157


 486              		.fpu fpv5-d16
 488              	HAL_ADC_GetValue:
 489              	.LFB355:
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group with interruption.
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function according to initialization
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         setting : EOC (end of conversion), EOS (end of sequence),
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         OVR overrun.
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_Start_IT() must be called for ADC Slave first, then for
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC Master.
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For ADC Slave, ADC is enabled only (conversion is not started).
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For ADC Master, ADC is enabled and multimode conversion is started.
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   To guarantee a proper reset of all interruptions once all the needed
1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversions are obtained, HAL_ADC_Stop_IT() must be called to ensure
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         a correct stop of the IT-based conversions.
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   By default, HAL_ADC_Start_IT() does not enable the End Of Sampling
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         interruption. If required (e.g. in case of oversampling with trigger
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         mode), the user must:
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          1. first clear the EOSMP flag if set with macro __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EO
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          2. then enable the EOSMP interrupt with macro __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOSMP)
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          before calling HAL_ADC_Start_IT().
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
1893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
1894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
1898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
1900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Enable(hadc);
1903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Start conversion if ADC is effectively enabled */
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state                                                        */
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Clear state bitfield related to regular group conversion results   */
1909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* - Set state bitfield related to regular operation                    */
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
1911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
1912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY);
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if ADC instance is master or if multimode feature is not available
ARM GAS  /tmp/ccecbe7f.s 			page 158


1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         - if multimode setting is disabled (ADC instance slave in independent mode) */
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
1922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code */
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if a conversion is on going on ADC group injected */
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset ADC error code fields related to regular conversions only */
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
1932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset all ADC error code fields */
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_CLEAR_ERRORCODE(hadc);
1935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear ADC group regular conversion flag and overrun flag               */
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (To ensure of no unknown state from potential previous ADC operations) */
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
1940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
1942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Unlock before starting ADC conversions: in case of potential         */
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* interruption, to let the process to ADC IRQ Handler.                 */
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
1945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Disable all interruptions before enabling the desired ones */
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
1948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable ADC end of conversion interrupt */
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (hadc->Init.EOCSelection)
1951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_EOC_SEQ_CONV:
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
1954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
1955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* case ADC_EOC_SINGLE_CONV */
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default:
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
1959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable ADC overrun interrupt */
1962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
1964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          behavior and no CPU time is lost for a non-processed interruption */
1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable conversion of regular group.                                  */
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If software start has been selected, conversion starts immediately.  */
1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If external trigger has been selected, conversion will start at next */
ARM GAS  /tmp/ccecbe7f.s 			page 159


1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* trigger event.                                                       */
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of multimode enabled (when multimode feature is available):     */
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    enabled only (conversion is not started),                         */
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - if ADC is master, ADC is enabled and conversion is started.       */
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
1979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
1983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is not a multimode slave instance with multimode regular conversions enable
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Enable as well injected interruptions in case
1990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
1991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            allows to start regular and injected conversions when JAUTO is
1992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            set with a single call to HAL_ADC_Start_IT() */
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
1994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
1995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
1998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
1999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
2000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             default:
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
2004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
2015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            are enabled nevertheless (for same reason as above) */
2016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
2018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
2020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              and in resetting HAL_ADC_STATE_INJ_EOC bit */
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
2022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           switch (hadc->Init.EOCSelection)
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             case ADC_EOC_SEQ_CONV:
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
2029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
ARM GAS  /tmp/ccecbe7f.s 			page 160


2030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             default:
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
2034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
2042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
2048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable interrution of
2057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         end-of-conversion, disable ADC peripheral.
2058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef *hadc)
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
2070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential conversion on going, on ADC groups regular and injected */
2072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
2073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
2076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC end of conversion interrupt for regular group */
2078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
2080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = ADC_Disable(hadc);
2083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
2086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /tmp/ccecbe7f.s 			page 161


2087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
2089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
2090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
2095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable ADC, start conversion of regular group and transfer result through DMA.
2103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Interruptions enabled in this function:
2104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         overrun (if applicable), DMA half transfer, DMA transfer complete.
2105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Each of these interruptions has its dedicated callback function.
2106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available): HAL_ADC_Start_DMA()
2107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         is designed for single-ADC mode only. For multimode, the dedicated
2108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADCEx_MultiModeStart_DMA() function must be used.
2109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param pData Destination Buffer address.
2111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param Length Number of data to be transferred from ADC peripheral to memory
2112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
2115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Perform ADC enable and conversion start if no conversion is on going */
2123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Process locked */
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_LOCK(hadc);
2127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Ensure that multimode regular conversions are not enabled.   */
2129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
2130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Enable the ADC peripheral */
2136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = ADC_Enable(hadc);
2137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Start conversion if ADC is effectively enabled */
2139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_hal_status == HAL_OK)
2140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC state                                                        */
2142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* - Clear state bitfield related to regular group conversion results   */
2143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* - Set state bitfield related to regular operation                    */
ARM GAS  /tmp/ccecbe7f.s 			page 162


2144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ADC_STATE_CLR_SET(hadc->State,
2145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
2146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_REG_BUSY);
2147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           - if ADC instance is master or if multimode feature is not available
2150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           - if multimode setting is disabled (ADC instance slave in independent mode) */
2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            )
2154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
2156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Check if a conversion is on going on ADC group injected */
2159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
2160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Reset ADC error code fields related to regular conversions only */
2162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
2163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Reset all ADC error code fields */
2167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           ADC_CLEAR_ERRORCODE(hadc);
2168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA transfer complete callback */
2171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
2172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA half transfer complete callback */
2174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
2175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set the DMA error callback */
2177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
2178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Manage ADC and DMA start: ADC overrun interruption, DMA start,     */
2181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* ADC start (in case of SW start):                                   */
2182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear regular group conversion flag and overrun flag               */
2184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (To ensure of no unknown state from potential previous ADC         */
2185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* operations)                                                        */
2186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
2187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
2189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Unlock before starting ADC conversions: in case of potential         */
2190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* interruption, to let the process to ADC IRQ Handler.                 */
2191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
2192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* With DMA, overrun event is always considered as an error even if
2194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
2195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            ADC_IT_OVR is enabled. */
2196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
2197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Enable ADC DMA  mode*/
2199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
ARM GAS  /tmp/ccecbe7f.s 			page 163


2201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_SetDMATransferMode(hadc->Instance, ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.D
2203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableDMAReq(hadc->Instance);
2204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.C
2208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagemen
2212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
2213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start the DMA channel */
2216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_
2217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Enable conversion of regular group.                                  */
2219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If software start has been selected, conversion starts immediately.  */
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If external trigger has been selected, conversion will start at next */
2221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* trigger event.                                                       */
2222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Start ADC group regular conversion */
2223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_REG_StartConversion(hadc->Instance);
2224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Process unlocked */
2228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         __HAL_UNLOCK(hadc);
2229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = HAL_ERROR;
2235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_UNLOCK(hadc);
2237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_BUSY;
2242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
2246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion of regular group (and injected group in
2250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         case of auto_injection mode), disable ADC DMA transfer, disable
2251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         ADC peripheral.
2252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note:  ADC peripheral disable is forcing stop of potential
2253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         conversion on ADC group injected. If ADC group injected is under use, it
2254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
2255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Case of multimode enabled (when multimode feature is available):
2256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_Stop_DMA() function is dedicated to single-ADC mode only.
2257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
ARM GAS  /tmp/ccecbe7f.s 			page 164


2258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
2260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
2262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
2264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
2270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* 1. Stop potential ADC group regular conversion on going */
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
2273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Disable ADC peripheral if conversions are effectively stopped */
2275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (tmp_hal_status == HAL_OK)
2276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
2278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
2279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable the DMA channel (in case of DMA in circular mode or stop       */
2281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* while DMA transfer is on going)                                        */
2282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
2283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
2285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check if DMA channel effectively disabled */
2287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_hal_status != HAL_OK)
2288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to error */
2290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
2291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable ADC overrun interrupt */
2295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
2296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* 2. Disable the ADC peripheral */
2298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
2299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to keep in memory a potential failing status.                          */
2300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
2301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_hal_status = ADC_Disable(hadc);
2303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (void)ADC_Disable(hadc);
2307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if ADC is effectively disabled */
2310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (tmp_hal_status == HAL_OK)
2311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       ADC_STATE_CLR_SET(hadc->State,
2314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
ARM GAS  /tmp/ccecbe7f.s 			page 165


2315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY);
2316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
2321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
2322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
2324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
2325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Get ADC regular group conversion result.
2329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Reading register DR automatically clears ADC flag EOC
2330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC group regular end of unitary conversion).
2331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   This function does not clear ADC flag EOS
2332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC group regular end of sequence conversion).
2333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Occurrence of flag EOS rising:
2334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          - If sequencer is composed of 1 rank, flag EOS is equivalent
2335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            to flag EOC.
2336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          - If sequencer is composed of several ranks, during the scan
2337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            sequence flag EOC only is raised, at the end of the scan sequence
2338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            both flags EOC and EOS are raised.
2339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         To clear this flag, either use function:
2340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         in programming model IT: @ref HAL_ADC_IRQHandler(), in programming
2341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         model polling: @ref HAL_ADC_PollForConversion()
2342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
2343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC group regular conversion data
2345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
2347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 490              		.loc 1 2347 0
 491              		.cfi_startproc
 492              		@ args = 0, pretend = 0, frame = 0
 493              		@ frame_needed = 0, uses_anonymous_args = 0
 494              		@ link register save eliminated.
 495              	.LVL32:
2348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: EOC flag is not cleared here by software because automatically     */
2352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       cleared by hardware when reading register DR.                      */
2353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return ADC converted value */
2355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->Instance->DR;
 496              		.loc 1 2355 0
 497 0000 0368     		ldr	r3, [r0]
 498 0002 186C     		ldr	r0, [r3, #64]
 499              	.LVL33:
2356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 500              		.loc 1 2356 0
 501 0004 7047     		bx	lr
 502              		.cfi_endproc
 503              	.LFE355:
 505              		.section	.text.HAL_ADC_ConvCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccecbe7f.s 			page 166


 506              		.align	1
 507              		.weak	HAL_ADC_ConvCpltCallback
 508              		.syntax unified
 509              		.thumb
 510              		.thumb_func
 511              		.fpu fpv5-d16
 513              	HAL_ADC_ConvCpltCallback:
 514              	.LFB357:
2357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Handle ADC interrupt request.
2360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
2364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
2366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_isr = hadc->Instance->ISR;
2367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
2368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
2369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_reg_is_trigger_source_sw_start;
2370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_cfgr;
2371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const ADC_TypeDef *tmpADC_Master;
2372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
2373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
2377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check End of Sampling flag for ADC group regular ========== */
2379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
2380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on end of sampling status if not in error state */
2382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
2386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* End Of Sampling callback */
2389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->EndOfSamplingCallback(hadc);
2391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_EndOfSamplingCallback(hadc);
2393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear regular group conversion flag */
2396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
2397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
2401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
2402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
ARM GAS  /tmp/ccecbe7f.s 			page 167


2406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
2408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
2411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
2412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to disable interruption.                                               */
2413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
2414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Get relevant register CFGR in ADC instance of ADC master or slave    */
2416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* in function of multimode state (for devices with multimode           */
2417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* available).                                                          */
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
2421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
2422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
2423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* check CONT bit directly in handle ADC CFGR register */
2425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* else need to check Master ADC CONT bit */
2430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Carry on if continuous mode is disabled */
2435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
2436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If End of Sequence is reached, disable interrupts */
2438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
2439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
2441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* ADSTART==0 (no conversion on going)                              */
2442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt */
2445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Note: Overrun interrupt was enabled with EOC interrupt in      */
2446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* HAL_Start_IT(), but is not disabled here because can be used   */
2447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* by overrun IRQ process below.                                  */
2448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
2449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC state */
2451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
2452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
2454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
2456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
2459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Change ADC state to error state */
2461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 168


2463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Conversion complete callback */
2471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: Into callback function "HAL_ADC_ConvCpltCallback()",             */
2472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       to determine if conversion has been triggered from EOC or EOS,   */
2473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       possibility to use:                                              */
2474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
2475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
2477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
2479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear regular group conversion flag */
2482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
2483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       conversion flags clear induces the release of the preserved data.*/
2484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       Therefore, if the preserved data value is needed, it must be     */
2485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
2486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
2487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
2491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
2492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update state machine on conversion status if not in error state */
2494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
2495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC state */
2497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
2498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Retrieve ADC configuration */
2501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
2502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
2503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Get relevant register CFGR in ADC instance of ADC master or slave  */
2504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* in function of multimode state (for devices with multimode         */
2505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* available).                                                        */
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
2507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
2508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
2509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
2510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_cfgr = READ_REG(hadc->Instance->CFGR);
2513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
2517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
2518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 169


2520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Disable interruption if no further conversion upcoming by injected     */
2521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* external trigger or by automatic injected conversion with regular      */
2522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* group having no further conversion upcoming (same conditions as        */
2523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* regular group interruption disabling above),                           */
2524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* and if injected scan sequence is completed.                            */
2525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
2526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
2527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
2528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
2529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If End of Sequence is reached, disable interrupts */
2531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
2532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Particular case if injected contexts queue is enabled:             */
2534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* when the last context has been fully processed, JSQR is reset      */
2535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* by the hardware. Even if no injected conversion is planned to come */
2536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (queue empty, triggers are ignored), it can start again            */
2537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* immediately after setting a new context (JADSTART is still set).   */
2538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Therefore, state of HAL ADC injected group is kept to busy.        */
2539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
2540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
2542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* JADSTART==0 (no conversion on going)                             */
2543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
2544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Disable ADC end of sequence conversion interrupt  */
2546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
2547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC state */
2549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
2550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
2552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
2553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->State, HAL_ADC_STATE_READY);
2554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
2555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
2557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update ADC state machine to error */
2559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
2560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Set ADC error code to ADC peripheral internal error */
2562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
2563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected Conversion complete callback */
2569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Note:  HAL_ADCEx_InjectedConvCpltCallback can resort to
2570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) or
2571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOC)) to determine whether
2572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               interruption has been triggered by end of conversion or end of
2573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               sequence.    */
2574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedConvCpltCallback(hadc);
2576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
ARM GAS  /tmp/ccecbe7f.s 			page 170


2577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_InjectedConvCpltCallback(hadc);
2578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear injected group conversion flag */
2581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
2582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Analog watchdog 1 flag ========== */
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
2586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
2589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 1 callback */
2591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindowCallback(hadc);
2593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_LevelOutOfWindowCallback(hadc);
2595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
2599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check analog watchdog 2 flag ========== */
2602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
2603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
2606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 2 callback */
2608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow2Callback(hadc);
2610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
2612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
2616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check analog watchdog 3 flag ========== */
2619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
2620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
2622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
2623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Level out of window 3 callback */
2625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->LevelOutOfWindow3Callback(hadc);
2627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
2629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC analog watchdog flag */
2632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
2633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
ARM GAS  /tmp/ccecbe7f.s 			page 171


2634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Overrun flag ========== */
2636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
2637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* If overrun is set to overwrite previous data (default setting),        */
2639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* overrun event is not considered as an error.                           */
2640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (cf ref manual "Managing conversions without using the DMA and without */
2641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* overrun ")                                                             */
2642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Exception for usage with DMA overrun event always considered as an     */
2643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* error.                                                                 */
2644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
2645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       overrun_error = 1UL;
2647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Check DMA configuration */
2651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
2652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Multimode (when feature is available) is enabled,
2654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            Common Control Register MDMA bits must be checked. */
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_RE
2656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           overrun_error = 1UL;
2658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Multimode not set or feature not available or ADC independent */
2663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
2664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           overrun_error = 1UL;
2666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (overrun_error == 1UL)
2671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Change ADC state to error state */
2673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
2674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to overrun */
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
2677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Error callback */
2679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: In case of overrun, ADC conversion data is preserved until     */
2680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       flag OVR is reset.                                             */
2681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       Therefore, old ADC conversion data can be retrieved in         */
2682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*       function "HAL_ADC_ErrorCallback()".                            */
2683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
2685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
2687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear ADC overrun flag */
ARM GAS  /tmp/ccecbe7f.s 			page 172


2691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
2692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ========== Check Injected context queue overflow flag ========== */
2695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
2696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Change ADC state to overrun state */
2698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
2699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC error code to Injected context queue overflow */
2701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
2702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Clear the Injected context queue overflow flag */
2704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
2705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Injected context queue overflow callback */
2707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
2708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->InjectedQueueOverflowCallback(hadc);
2709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
2711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
2712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Conversion complete callback in non-blocking mode.
2718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
2722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 515              		.loc 1 2722 0
 516              		.cfi_startproc
 517              		@ args = 0, pretend = 0, frame = 0
 518              		@ frame_needed = 0, uses_anonymous_args = 0
 519              		@ link register save eliminated.
 520              	.LVL34:
2723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ConvCpltCallback must be implemented in the user file.
2728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****    */
2729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 521              		.loc 1 2729 0
 522 0000 7047     		bx	lr
 523              		.cfi_endproc
 524              	.LFE357:
 526              		.section	.text.HAL_ADC_ConvHalfCpltCallback,"ax",%progbits
 527              		.align	1
 528              		.weak	HAL_ADC_ConvHalfCpltCallback
 529              		.syntax unified
 530              		.thumb
 531              		.thumb_func
 532              		.fpu fpv5-d16
 534              	HAL_ADC_ConvHalfCpltCallback:
ARM GAS  /tmp/ccecbe7f.s 			page 173


 535              	.LFB358:
2730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Conversion DMA half-transfer callback in non-blocking mode.
2733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
2737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 536              		.loc 1 2737 0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 541              	.LVL35:
2738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
2743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 542              		.loc 1 2744 0
 543 0000 7047     		bx	lr
 544              		.cfi_endproc
 545              	.LFE358:
 547              		.section	.text.ADC_DMAHalfConvCplt,"ax",%progbits
 548              		.align	1
 549              		.global	ADC_DMAHalfConvCplt
 550              		.syntax unified
 551              		.thumb
 552              		.thumb_func
 553              		.fpu fpv5-d16
 555              	ADC_DMAHalfConvCplt:
 556              	.LFB369:
2745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Analog watchdog 1 callback in non-blocking mode.
2748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
2752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
2758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  ADC error callback in non-blocking mode
2763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (ADC conversion with interruption or transfer by DMA).
2764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   In case of error due to overrun when using ADC with DMA transfer
2765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         (HAL ADC handle parameter "ErrorCode" to state "HAL_ADC_ERROR_OVR"):
2766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         - Reinitialize the DMA using function "HAL_ADC_Stop_DMA()".
ARM GAS  /tmp/ccecbe7f.s 			page 174


2767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         - If needed, restart a new ADC conversion using function
2768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           "HAL_ADC_Start_DMA()"
2769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           (this function is also clearing overrun flag)
2770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
2772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** __weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
2774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
2776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   UNUSED(hadc);
2777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* NOTE : This function should not be modified. When the callback is needed,
2779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             function HAL_ADC_ErrorCallback must be implemented in the user file.
2780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
2782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
2785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group3 Peripheral Control functions
2788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief    Peripheral Control functions
2789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
2790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
2791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
2792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****              ##### Peripheral Control functions #####
2793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
2794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]  This section provides functions allowing to:
2795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Configure channels on regular group
2796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Configure the analog watchdog
2797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
2799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
2800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
2803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure a channel to be assigned to ADC group regular.
2804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   In case of usage of internal measurement channels:
2805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Vbat/VrefInt/TempSensor.
2806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         These internal paths can be disabled using function
2807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         HAL_ADC_DeInit().
2808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
2809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes channel into ADC group regular,
2810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         following calls to this function can be used to reconfigure
2811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         some parameters of structure "ADC_ChannelConfTypeDef" on the fly,
2812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         without resetting the ADC.
2813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state:
2814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         Refer to comments of structure "ADC_ChannelConfTypeDef".
2815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
2816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param sConfig Structure of ADC channel assigned to ADC group regular.
2817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
2818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
2819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
2820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
2822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
2823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_config_internal_channel;
ARM GAS  /tmp/ccecbe7f.s 			page 175


2824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __IO uint32_t wait_loop_index = 0;
2825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
2826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
2827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
2829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
2830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
2831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
2832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_SINGLE_DIFFERENTIAL(sConfig->SingleDiff));
2833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_OFFSET_NUMBER(sConfig->OffsetNumber));
2834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check offset range according to oversampling setting */
2835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Init.OversamplingMode == ENABLE)
2836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset / (hadc->Init.Oversampling.
2838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
2843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
2847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), sConfig->Offset));
2850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
2854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      ignored (considered as reset) */
2855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENAB
2856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification of channel number */
2858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
2859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(sConfig->Channel));
2861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
2863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC1)
2865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC1_DIFF_CHANNEL(sConfig->Channel));
2867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC2)
2869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC2_DIFF_CHANNEL(sConfig->Channel));
2871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC3)
2873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC3 is not available on some STM32H7 products */
2874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance == ADC3)
2875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_DIFF_CHANNEL(sConfig->Channel));
2877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
2879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
2880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 176


2881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
2882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
2883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
2885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
2886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* conversion on going on regular group:                                    */
2887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Channel number                                                        */
2888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Channel rank                                                          */
2889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
2890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
2891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Instance != ADC3)
2894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* ADC channels preselection */
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Chan
2897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
2898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
2899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* ADC channels preselection */
2900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 
2901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC group regular sequence: channel on the selected scan sequence rank */
2904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
2905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
2907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated when ADC is disabled or enabled without   */
2908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* conversion on going on regular group:                                    */
2909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Channel sampling time                                                 */
2910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Channel offset                                                        */
2911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
2912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
2913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((tmp_adc_is_conversion_on_going_regular == 0UL)
2914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
2915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
2916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
2917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set sampling time of the selected ADC channel */
2918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
2919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure the offset: offset enable/disable, channel, offset value */
2921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the offset with respect to the selected ADC resolution. */
2923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
2926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
2928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
2933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       
2935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
2936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC selected offset number */
ARM GAS  /tmp/ccecbe7f.s 			page 177


2938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted)
2939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_ADC3_OFFSET_SIGN(sConfig->OffsetSign));
2944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
2945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset sign & saturation */
2946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
2947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturat
2948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
2953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset signed saturation */
2954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetS
2955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
2957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC selected offset right shift */
2958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShif
2959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
2961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
2962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
2963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
2964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is enabled.
2965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           If this is the case, offset OFRx is disabled since
2966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           sConfig->OffsetNumber = ADC_OFFSET_NONE. */
2967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
2968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (hadc->Instance == ADC3)
2969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
2973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
2977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
2981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_
2983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
2985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
2987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
2988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
2989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
2990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
2991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
2993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
ARM GAS  /tmp/ccecbe7f.s 			page 178


2995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
2996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
2997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
2998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
2999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
3001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
3003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
3005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         
3008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      }
3009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters update conditioned to ADC state:                              */
3012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Parameters that can be updated only when ADC is disabled:                */
3013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Single or differential mode                                           */
3014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
3015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
3016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set mode single-ended or differential input of the selected ADC channel */
3018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
3019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of differential mode */
3021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
3022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set sampling time of the selected ADC channel */
3024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits r
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_SetChannelSamplingTime(hadc->Instance,
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
3027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
3028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
3031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* If internal channel selected, enable dedicated internal buffers and    */
3032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* paths.                                                                 */
3033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: these internal measurement paths can be disabled using           */
3034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* HAL_ADC_DeInit().                                                      */
3035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
3037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configuration of common ADC parameters                                 */
3039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc-
3041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Software is allowed to change common parameters only when all ADCs   */
3043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* of the common group are disabled.                                    */
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0U
3045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* If the requested internal measurement path has already been enabled, */
3047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* bypass the configuration processing.                                 */
3048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_AD
3049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
3051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
ARM GAS  /tmp/ccecbe7f.s 			page 179


3052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
3053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Delay for temperature sensor stabilization time */
3055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Wait loop initialization and execution */
3056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /* Note: Variable divided by 2 to compensate partially              */
3057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /*       CPU processing cycles, scaling in us split to not          */
3058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               /*       exceed 32 bits register capacity and handle low frequency. */
3059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
3061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               {
3062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                 wait_loop_index--;
3063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               }
3064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC
3067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
3069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
3071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_
3074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (ADC_VREFINT_INSTANCE(hadc))
3076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_
3078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* nothing to do */
3083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* If the requested internal measurement path has already been          */
3086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* enabled and other ADC of the common group are enabled, internal      */
3087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* measurement paths cannot be enabled.                                 */
3088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
3092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmp_hal_status = HAL_ERROR;
3094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If a conversion is on going on regular group, no update on regular       */
3100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* channel could be done on neither of the channel configuration structure  */
3101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* parameters.                                                              */
3102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
3105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
3106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
3108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
ARM GAS  /tmp/ccecbe7f.s 			page 180


3109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
3111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
3112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
3114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
3115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure the analog watchdog.
3119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Possibility to update parameters on the fly:
3120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         This function initializes the selected analog watchdog, successive
3121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         calls to this function can be used to reconfigure some parameters
3122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         of structure "ADC_AnalogWDGConfTypeDef" on the fly, without resetting
3123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         the ADC.
3124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         The setting of these parameters is conditioned to ADC state.
3125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For parameters constraints, see comments of structure
3126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         "ADC_AnalogWDGConfTypeDef".
3127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   On this STM32 serie, analog watchdog thresholds cannot be modified
3128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         while ADC conversion is on going.
3129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param AnalogWDGConfig Structure of ADC analog watchdog configuration
3131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status
3132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef *hadc, ADC_AnalogWDGConfTypeDef *Analog
3134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
3136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
3137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDLowThresholdShifted;
3138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_NUMBER(AnalogWDGConfig->WatchdogNumber));
3144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ANALOG_WATCHDOG_MODE(AnalogWDGConfig->WatchdogMode));
3145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_FUNCTIONAL_STATE(AnalogWDGConfig->ITMode));
3146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REG)     ||
3148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_INJEC)   ||
3149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (AnalogWDGConfig->WatchdogMode == ADC_ANALOGWATCHDOG_SINGLE_REGINJEC))
3150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
3152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (hadc->Instance == ADC3)
3157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verify thresholds range */
3159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.OversamplingMode == ENABLE)
3160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of oversampling enabled: thresholds are compared to oversampling
3162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          intermediate computation (after ratio, before shift application) */
3163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold / (hadc->
3164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold / (hadc->I
3165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
ARM GAS  /tmp/ccecbe7f.s 			page 181


3166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Verify if thresholds are within the selected ADC resolution */
3169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC3_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_V90 */
3175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Verify thresholds range */
3177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (hadc->Init.OversamplingMode == ENABLE)
3178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case of oversampling enabled: thresholds are compared to oversampling
3180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          intermediate computation (after ratio, before shift application) */
3181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold / (hadc->I
3182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold / (hadc->In
3183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Verify if thresholds are within the selected ADC resolution */
3187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->HighThreshold));
3188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), AnalogWDGConfig->LowThreshold));
3189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process locked */
3193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_LOCK(hadc);
3194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters update conditioned to ADC state:                              */
3196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Parameters that can be updated when ADC is disabled or enabled without   */
3197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* conversion on going on ADC groups regular and injected:                  */
3198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Analog watchdog channels                                              */
3199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*  - Analog watchdog thresholds                                            */
3200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
3201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
3202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular == 0UL)
3203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
3204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Analog watchdog configuration */
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_1)
3208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of analog watchdog:                                    */
3210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*  - Set the analog watchdog enable mode: one or overall group of      */
3211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /*    channels, on groups regular and-or injected.                      */
3212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
3213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
3216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
3217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
3221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
3222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
ARM GAS  /tmp/ccecbe7f.s 			page 182


3223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, __LL_ADC_ANALOGWD_CHANNEL_GR
3226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
3227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG)
3231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_INJ)
3235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_ALL_CHANNELS_REG_
3239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, LL_ADC_AWD1, LL_ADC_AWD_DISABLE);
3243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the offset in function of the selected ADC resolution:         */
3247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Thresholds have to be left-aligned on bit 11, the LSB (right bits)   */
3248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* are set to 0                                                         */
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighTh
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
3251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set the high and low thresholds */
3253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
3255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,
3257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC3_TR1_AWDFILT,
3258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    AnalogWDGConfig->FilteringConfig);
3259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_LT1, tmpAWDLowThresholdShifted);
3260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1
3261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->LTR1,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->HTR1,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
3272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update state, clear previous result related to AWD1 */
3274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD1);
3275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear flag ADC analog watchdog */
3277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (in case left enabled by previous ADC operations).                 */
ARM GAS  /tmp/ccecbe7f.s 			page 183


3280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_ClearFlag_AWD1(hadc->Instance);
3281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configure ADC analog watchdog interrupt */
3283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->ITMode == ENABLE)
3284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_EnableIT_AWD1(hadc->Instance);
3286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_DisableIT_AWD1(hadc->Instance);
3290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Case of ADC_ANALOGWATCHDOG_2 or ADC_ANALOGWATCHDOG_3 */
3293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       switch (AnalogWDGConfig->WatchdogMode)
3296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REG:
3298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_INJEC:
3299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_SINGLE_REGINJEC:
3300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update AWD by bitfield to keep the possibility to monitor        */
3301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* several channels by successive calls of this function.           */
3302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConfig
3309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REG:
3313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_INJEC:
3314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         case ADC_ANALOGWATCHDOG_ALL_REGINJEC:
3315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if (hadc->Instance == ADC3)
3318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC
3321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           else
3324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif  /*ADC_VER_V5_V90*/
3326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* Update AWD by bitfield to keep the possibility to monitor        */
3327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* several channels by successive calls of this function.           */
3328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->Instance->AWD2CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConf
3331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             else
3333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               SET_BIT(hadc->Instance->AWD3CR, (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(AnalogWDGConf
3335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
3336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
ARM GAS  /tmp/ccecbe7f.s 			page 184


3337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif  /*ADC_VER_V5_V90*/
3339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         default: /* ADC_ANALOGWATCHDOG_NONE */
3342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetAnalogWDMonitChannels(hadc->Instance, AnalogWDGConfig->WatchdogNumber, LL_ADC_A
3343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
3344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Shift the thresholds in function of the selected ADC resolution      */
3347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* have to be left-aligned on bit 15, the LSB (right bits) are set to 0 */
3348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighT
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
3350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
3352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (hadc->Instance == ADC3)
3353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Analog watchdog thresholds configuration */
3356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->WatchdogNumber != ADC_ANALOGWATCHDOG_1)
3357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Shift the offset with respect to the selected ADC resolution:        */
3359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Thresholds have to be left-aligned on bit 7, the LSB (right bits)    */
3360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* are set to 0.                                                        */
3361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDHighThresholdShifted = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->H
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->L
3363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ConfigAnalogWDThresholds(hadc->Instance, AnalogWDGConfig->WatchdogNumber, tmpAWDHigh
3367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->LTR2_DIFSEL,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->LTR3_RES10,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR2,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
ARM GAS  /tmp/ccecbe7f.s 			page 185


3394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC analog watchdog thresholds value of both thresholds high and low */
3396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR3,  ADC_LTR_LT, tmpAWDLowThresholdShifted);
3397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR3,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
3398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif
3401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_2)
3402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update state, clear previous result related to AWD2 */
3404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD2);
3405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD2(hadc->Instance);
3411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
3414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableIT_AWD2(hadc->Instance);
3416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_DisableIT_AWD2(hadc->Instance);
3420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* (AnalogWDGConfig->WatchdogNumber == ADC_ANALOGWATCHDOG_3) */
3423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       else
3424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update state, clear previous result related to AWD3 */
3426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_AWD3);
3427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Clear flag ADC analog watchdog */
3429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Flag cleared Clear the ADC Analog watchdog flag to be ready  */
3430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* to use for HAL_ADC_IRQHandler() or HAL_ADC_PollForEvent()          */
3431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* (in case left enabled by previous ADC operations).                 */
3432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         LL_ADC_ClearFlag_AWD3(hadc->Instance);
3433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Configure ADC analog watchdog interrupt */
3435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (AnalogWDGConfig->ITMode == ENABLE)
3436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableIT_AWD3(hadc->Instance);
3438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         else
3440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_DisableIT_AWD3(hadc->Instance);
3442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* If a conversion is on going on ADC group regular or injected, no update  */
3448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* could be done on neither of the AWD configuration structure parameters.  */
3449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
ARM GAS  /tmp/ccecbe7f.s 			page 186


3451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Update ADC state machine to error */
3452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
3453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_hal_status = HAL_ERROR;
3455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Process unlocked */
3457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   __HAL_UNLOCK(hadc);
3458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return function status */
3460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return tmp_hal_status;
3461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Exported_Functions_Group4 Peripheral State functions
3469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *  @brief    ADC Peripheral State functions
3470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *
3471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @verbatim
3472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
3473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ##### Peripheral state and errors functions #####
3474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****  ===============================================================================
3475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     [..]
3476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     This subsection provides functions to get in run-time the status of the
3477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     peripheral.
3478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Check the ADC state
3479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (+) Check the ADC error code
3480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** @endverbatim
3482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
3483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Return the ADC handle state.
3487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   ADC state machine is managed by bitfields, ADC status must be
3488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         compared with states bits.
3489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         For example:
3490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_REG_BUSY) != 0UL) "
3491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
3492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC handle state (bitfield on 32 bits)
3494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
3496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return ADC handle state */
3501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->State;
3502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Return the ADC error code.
3506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval ADC error code (bitfield on 32 bits)
ARM GAS  /tmp/ccecbe7f.s 			page 187


3508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
3510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return hadc->ErrorCode;
3515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @}
3523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /** @defgroup ADC_Private_Functions ADC Private Functions
3526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @{
3527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Stop ADC conversion.
3531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param ConversionGroup ADC group regular and/or injected.
3533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *          This parameter can be one of the following values:
3534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_GROUP           ADC regular conversion type.
3535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
3536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
3537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
3540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t Conversion_Timeout_CPU_cycles = 0UL;
3543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
3544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ADC_CR_ADSTART_JADSTART;
3545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
3546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_injected;
3547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
3549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
3550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
3551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification if ADC is not already stopped (on regular and injected      */
3553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* groups) to bypass this function if not needed.                           */
3554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
3555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
3556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((tmp_adc_is_conversion_on_going_regular != 0UL)
3557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_adc_is_conversion_on_going_injected != 0UL)
3558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Particular case of continuous auto-injection mode combined with        */
3561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* auto-delay mode.                                                       */
3562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
3563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* injected group stop ADC_CR_JADSTP).                                    */
3564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
ARM GAS  /tmp/ccecbe7f.s 			page 188


3565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* (see reference manual).                                                */
3566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
3567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
3568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.LowPowerAutoWait == ENABLE)
3569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
3570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Use stop of regular group */
3572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       conversion_group_reassigned = ADC_REGULAR_GROUP;
3573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
3575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
3576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
3578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
3586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         Conversion_Timeout_CPU_cycles ++;
3588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Clear JEOS */
3591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
3592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group regular */
3595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_INJECTED_GROUP)
3596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
3598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
3599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
3601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Stop ADC group regular conversion */
3603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_REG_StopConversion(hadc->Instance);
3604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Stop potential conversion on going on ADC group injected */
3609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (conversion_group_reassigned != ADC_REGULAR_GROUP)
3610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
3612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
3613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
3615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Stop ADC group injected conversion */
3617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_INJ_StopConversion(hadc->Instance);
3618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 189


3622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Selection of start and stop bits with respect to the regular or injected group */
3623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (conversion_group_reassigned)
3624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_REGULAR_INJECTED_GROUP:
3626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
3627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_INJECTED_GROUP:
3629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
3630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Case ADC_REGULAR_GROUP only*/
3632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
3634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for conversion effectively stopped */
3638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
3639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
3641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
3643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to error */
3645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
3651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
3658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Enable the selected ADC.
3664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC must be disabled
3665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
3666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
3670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
3674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* enabling phase not yet completed: flag ADC ready not yet set).           */
3675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
3676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* causes: ADC clock not running, ...).                                     */
3677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
3678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
ARM GAS  /tmp/ccecbe7f.s 			page 190


3679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if conditions to enable the ADC are fulfilled */
3680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_
3681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update ADC state machine to error */
3683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       return HAL_ERROR;
3689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Enable the ADC peripheral */
3692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     LL_ADC_Enable(hadc->Instance);
3693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for ADC effectively enabled */
3695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
3696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Poll for ADC ready flag raised except case of multimode enabled
3698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        and ADC slave selected. */
3699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
3701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
3702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
3703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
3705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*  If ADEN bit is set less than 4 ADC clock cycles after the ADCAL bit
3707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             has been cleared (after a calibration), ADEN bit is reset by the
3708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             calibration logic.
3709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             The workaround is to continue setting ADEN until ADRDY is becomes 1.
3710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
3711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             4 ADC clock cycle duration */
3712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Note: Test of ADC enabled required due to hardware constraint to     */
3713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /*       not enable ADC if already enabled.                             */
3714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
3715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_Enable(hadc->Instance);
3717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
3720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Update ADC state machine to error */
3722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Set ADC error code to ADC peripheral internal error */
3725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           return HAL_ERROR;
3728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
3735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
ARM GAS  /tmp/ccecbe7f.s 			page 191


3736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Disable the selected ADC.
3739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         stopped.
3741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hadc ADC handle
3742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval HAL status.
3743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
3745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
3747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
3748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Verification if ADC is not already disabled:                             */
3750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
3751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /*       disabled.                                                          */
3752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
3753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_disable_on_going == 0UL)
3754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
3755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Check if conditions to disable the ADC are fulfilled */
3757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
3758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Disable the ADC peripheral */
3760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       LL_ADC_Disable(hadc->Instance);
3761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
3762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Update ADC state machine to error */
3766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Set ADC error code to ADC peripheral internal error */
3769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       return HAL_ERROR;
3772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Wait for ADC effectively disabled */
3775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Get tick count */
3776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tickstart = HAL_GetTick();
3777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
3779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
3781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Update ADC state machine to error */
3783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
3784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Set ADC error code to ADC peripheral internal error */
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
3787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         return HAL_ERROR;
3789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 192


3793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Return HAL status */
3794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   return HAL_OK;
3795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA transfer complete callback.
3799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
3803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
3804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Update state machine on conversion status if not in error state */
3808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
3809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Set ADC state */
3811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
3812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Determine whether any further conversion upcoming on group regular     */
3814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* by external trigger, continuous mode or scan sequence on going         */
3815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* to disable interruption.                                               */
3816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Is it the end of the regular sequence ? */
3817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
3818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Are conversions software-triggered ? */
3820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
3821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* Is CONT bit set ? */
3823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
3824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* CONT bit is not set, no more conversions expected */
3826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
3827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
3828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
3829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
3831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* DMA End of Transfer interrupt was triggered but conversions sequence
3837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          is not over. If DMACFG is set to 0, conversions are stopped. */
3838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
3839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
3840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* DMACFG bit is not set, conversions are stopped. */
3841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
3842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
3843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
3844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
3845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
3846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
3847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     /* Conversion complete callback */
ARM GAS  /tmp/ccecbe7f.s 			page 193


3850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     hadc->ConvCpltCallback(hadc);
3852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     HAL_ADC_ConvCpltCallback(hadc);
3854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* DMA and-or internal error occurred */
3857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
3859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Call HAL ADC Error Callback function */
3861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->ErrorCallback(hadc);
3863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       HAL_ADC_ErrorCallback(hadc);
3865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
3868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Call ADC DMA error callback */
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       hadc->DMA_Handle->XferErrorCallback(hdma);
3871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
3874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA half transfer complete callback.
3877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
3881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 557              		.loc 1 3881 0
 558              		.cfi_startproc
 559              		@ args = 0, pretend = 0, frame = 0
 560              		@ frame_needed = 0, uses_anonymous_args = 0
 561              	.LVL36:
 562 0000 08B5     		push	{r3, lr}
 563              	.LCFI2:
 564              		.cfi_def_cfa_offset 8
 565              		.cfi_offset 3, -8
 566              		.cfi_offset 14, -4
 567              	.LVL37:
3882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Half conversion callback */
3886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->ConvHalfCpltCallback(hadc);
3888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_ConvHalfCpltCallback(hadc);
 568              		.loc 1 3889 0
 569 0002 806B     		ldr	r0, [r0, #56]
 570              	.LVL38:
 571 0004 FFF7FEFF 		bl	HAL_ADC_ConvHalfCpltCallback
 572              	.LVL39:
3890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccecbe7f.s 			page 194


3891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 573              		.loc 1 3891 0
 574 0008 08BD     		pop	{r3, pc}
 575              		.cfi_endproc
 576              	.LFE369:
 578              		.section	.text.HAL_ADC_LevelOutOfWindowCallback,"ax",%progbits
 579              		.align	1
 580              		.weak	HAL_ADC_LevelOutOfWindowCallback
 581              		.syntax unified
 582              		.thumb
 583              		.thumb_func
 584              		.fpu fpv5-d16
 586              	HAL_ADC_LevelOutOfWindowCallback:
 587              	.LFB359:
2752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 588              		.loc 1 2752 0
 589              		.cfi_startproc
 590              		@ args = 0, pretend = 0, frame = 0
 591              		@ frame_needed = 0, uses_anonymous_args = 0
 592              		@ link register save eliminated.
 593              	.LVL40:
2759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 594              		.loc 1 2759 0
 595 0000 7047     		bx	lr
 596              		.cfi_endproc
 597              	.LFE359:
 599              		.section	.text.HAL_ADC_ErrorCallback,"ax",%progbits
 600              		.align	1
 601              		.weak	HAL_ADC_ErrorCallback
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 605              		.fpu fpv5-d16
 607              	HAL_ADC_ErrorCallback:
 608              	.LFB360:
2774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Prevent unused argument(s) compilation warning */
 609              		.loc 1 2774 0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 0
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 613              		@ link register save eliminated.
 614              	.LVL41:
2781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 615              		.loc 1 2781 0
 616 0000 7047     		bx	lr
 617              		.cfi_endproc
 618              	.LFE360:
 620              		.section	.text.HAL_ADC_IRQHandler,"ax",%progbits
 621              		.align	1
 622              		.global	HAL_ADC_IRQHandler
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 626              		.fpu fpv5-d16
 628              	HAL_ADC_IRQHandler:
 629              	.LFB356:
2364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error 
ARM GAS  /tmp/ccecbe7f.s 			page 195


 630              		.loc 1 2364 0
 631              		.cfi_startproc
 632              		@ args = 0, pretend = 0, frame = 0
 633              		@ frame_needed = 0, uses_anonymous_args = 0
 634              	.LVL42:
 635 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 636              	.LCFI3:
 637              		.cfi_def_cfa_offset 24
 638              		.cfi_offset 3, -24
 639              		.cfi_offset 4, -20
 640              		.cfi_offset 5, -16
 641              		.cfi_offset 6, -12
 642              		.cfi_offset 7, -8
 643              		.cfi_offset 14, -4
 644 0002 0446     		mov	r4, r0
 645              	.LVL43:
2366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_ier = hadc->Instance->IER;
 646              		.loc 1 2366 0
 647 0004 0368     		ldr	r3, [r0]
 648 0006 1D68     		ldr	r5, [r3]
 649              	.LVL44:
2367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_inj_is_trigger_source_sw_start;
 650              		.loc 1 2367 0
 651 0008 5E68     		ldr	r6, [r3, #4]
 652              	.LVL45:
2372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 653              		.loc 1 2372 0
 654 000a A649     		ldr	r1, .L108
 655 000c A64A     		ldr	r2, .L108+4
 656 000e 9342     		cmp	r3, r2
 657 0010 18BF     		it	ne
 658 0012 8B42     		cmpne	r3, r1
 659 0014 40D1     		bne	.L95
 660 0016 A54B     		ldr	r3, .L108+8
 661              	.L58:
 662              	.LVL46:
 663              	.LBB312:
 664              	.LBB313:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 665              		.loc 2 6412 0 discriminator 4
 666 0018 9F68     		ldr	r7, [r3, #8]
 667 001a 07F01F07 		and	r7, r7, #31
 668              	.LVL47:
 669              	.LBE313:
 670              	.LBE312:
2379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 671              		.loc 1 2379 0 discriminator 4
 672 001e 15F0020F 		tst	r5, #2
 673 0022 10D0     		beq	.L59
2379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 674              		.loc 1 2379 0 is_stmt 0 discriminator 1
 675 0024 16F0020F 		tst	r6, #2
 676 0028 0DD0     		beq	.L59
2382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 677              		.loc 1 2382 0 is_stmt 1
 678 002a 236E     		ldr	r3, [r4, #96]
 679 002c 13F0100F 		tst	r3, #16
ARM GAS  /tmp/ccecbe7f.s 			page 196


 680 0030 03D1     		bne	.L60
2385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 681              		.loc 1 2385 0
 682 0032 236E     		ldr	r3, [r4, #96]
 683 0034 43F40063 		orr	r3, r3, #2048
 684 0038 2366     		str	r3, [r4, #96]
 685              	.L60:
2392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 686              		.loc 1 2392 0
 687 003a 2046     		mov	r0, r4
 688              	.LVL48:
 689 003c FFF7FEFF 		bl	HAL_ADCEx_EndOfSamplingCallback
 690              	.LVL49:
2396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 691              		.loc 1 2396 0
 692 0040 2368     		ldr	r3, [r4]
 693 0042 0222     		movs	r2, #2
 694 0044 1A60     		str	r2, [r3]
 695              	.L59:
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 696              		.loc 1 2400 0
 697 0046 15F0040F 		tst	r5, #4
 698 004a 02D0     		beq	.L61
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 699              		.loc 1 2400 0 is_stmt 0 discriminator 1
 700 004c 16F0040F 		tst	r6, #4
 701 0050 05D1     		bne	.L62
 702              	.L61:
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 703              		.loc 1 2400 0 discriminator 3
 704 0052 15F0080F 		tst	r5, #8
 705 0056 4FD0     		beq	.L63
2401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 706              		.loc 1 2401 0 is_stmt 1
 707 0058 16F0080F 		tst	r6, #8
 708 005c 4CD0     		beq	.L63
 709              	.L62:
2404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 710              		.loc 1 2404 0
 711 005e 236E     		ldr	r3, [r4, #96]
 712 0060 13F0100F 		tst	r3, #16
 713 0064 03D1     		bne	.L64
2407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 714              		.loc 1 2407 0
 715 0066 236E     		ldr	r3, [r4, #96]
 716 0068 43F40073 		orr	r3, r3, #512
 717 006c 2366     		str	r3, [r4, #96]
 718              	.L64:
2413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 719              		.loc 1 2413 0
 720 006e 2368     		ldr	r3, [r4]
 721              	.LVL50:
 722              	.LBB314:
 723              	.LBB315:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 724              		.loc 2 3797 0
 725 0070 DA68     		ldr	r2, [r3, #12]
ARM GAS  /tmp/ccecbe7f.s 			page 197


 726 0072 12F4406F 		tst	r2, #3072
 727 0076 39D1     		bne	.L65
 728              	.LVL51:
 729              	.LBE315:
 730              	.LBE314:
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 731              		.loc 1 2418 0
 732 0078 8B4A     		ldr	r2, .L108+4
 733 007a 9342     		cmp	r3, r2
 734 007c 0ED0     		beq	.L102
 735 007e 1A46     		mov	r2, r3
 736              	.L66:
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 737              		.loc 1 2418 0 is_stmt 0 discriminator 4
 738 0080 9342     		cmp	r3, r2
 739 0082 0ED0     		beq	.L67
2420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 740              		.loc 1 2420 0 is_stmt 1
 741 0084 052F     		cmp	r7, #5
 742 0086 14BF     		ite	ne
 743 0088 0021     		movne	r1, #0
 744 008a 0121     		moveq	r1, #1
 745 008c 4FB1     		cbz	r7, .L67
 746 008e 41B9     		cbnz	r1, .L67
2421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
 747              		.loc 1 2421 0
 748 0090 092F     		cmp	r7, #9
 749 0092 06D0     		beq	.L67
 750              	.LVL52:
2431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 751              		.loc 1 2431 0 discriminator 4
 752 0094 D268     		ldr	r2, [r2, #12]
 753              	.LVL53:
 754 0096 05E0     		b	.L69
 755              	.LVL54:
 756              	.L95:
2372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 757              		.loc 1 2372 0
 758 0098 854B     		ldr	r3, .L108+12
 759 009a BDE7     		b	.L58
 760              	.LVL55:
 761              	.L102:
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 762              		.loc 1 2418 0
 763 009c A2F58072 		sub	r2, r2, #256
 764 00a0 EEE7     		b	.L66
 765              	.L67:
2425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 766              		.loc 1 2425 0
 767 00a2 DA68     		ldr	r2, [r3, #12]
 768              	.LVL56:
 769              	.L69:
2435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 770              		.loc 1 2435 0
 771 00a4 12F4005F 		tst	r2, #8192
 772 00a8 20D1     		bne	.L65
2438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
ARM GAS  /tmp/ccecbe7f.s 			page 198


 773              		.loc 1 2438 0
 774 00aa 1A68     		ldr	r2, [r3]
 775              	.LVL57:
 776 00ac 12F0080F 		tst	r2, #8
 777 00b0 1CD0     		beq	.L65
 778              	.LVL58:
 779              	.LBB316:
 780              	.LBB317:
6504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Set ADC multimode delay between 2 sampling phases.
6508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   The sampling delay range depends on ADC resolution:
6509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 12 bits can have maximum delay of 12 cycles.
6510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution 10 bits can have maximum delay of 10 cycles.
6511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  8 bits can have maximum delay of  8 cycles.
6512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - ADC resolution  6 bits can have maximum delay of  6 cycles.
6513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         All ADC instances of the ADC common group must be disabled.
6516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         This check can be done with function @ref LL_ADC_IsEnabled() for each
6517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC instance or by using helper macro helper macro
6518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE().
6519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_SetMultiTwoSamplingDelay
6520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  MultiTwoSamplingDelay This parameter can be one of the following values:
6523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_SetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t Mul
6547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_DELAY, MultiTwoSamplingDelay);
6549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode delay between 2 sampling phases.
ARM GAS  /tmp/ccecbe7f.s 			page 199


6553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CCR      DELAY          LL_ADC_GetMultiTwoSamplingDelay
6554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
6555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
6556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Returned value can be one of the following values:
6557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_1CYCLE_5
6558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_2CYCLES_5
6559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_3CYCLES_5
6560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5 (1)
6561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_4CYCLES_5_8_BITS
6562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5 (2)
6563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_5CYCLES_5_10_BITS
6564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES  (3)
6565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5 (4)
6566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_6CYCLES_5_12_BITS
6567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_7CYCLES_5 (5)
6568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_8CYCLES  (6)
6569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_TWOSMP_DELAY_9CYCLES  (7)
6570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *
6571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (1) Parameter available only if ADC resolution is 16, 14, 12 or 10 bits.
6572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (2) Parameter available only if ADC resolution is 16, 14 or 12  bits.
6573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (3) Parameter available only if ADC resolution is 10 or 8 bits.
6574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (4) Parameter available only if ADC resolution is 16 or 14 bits.
6575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (5) Parameter available only if ADC resolution is 16 bits.
6576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (6) Parameter available only if ADC resolution is 12 bits.
6577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (7) Parameter available only if ADC resolution is 16 or 14 bits.
6578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_GetMultiTwoSamplingDelay(ADC_Common_TypeDef *ADCxy_COMMON)
6580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DELAY));
6582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Instance Operation on ADC hierarchical scope: ADC instance
6588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Put ADC instance in deep power down state.
6593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_EnableDeepPowerDown
6601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableDeepPowerDown(ADC_TypeDef *ADCx)
6605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
ARM GAS  /tmp/ccecbe7f.s 			page 200


6610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_DEEPPWD);
6612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC deep power down mode.
6616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   In case of ADC calibration necessary: When ADC is in deep-power-down
6617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         state, the internal analog calibration is lost. After exiting from
6618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         deep power down, calibration must be relaunched or calibration factor
6619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (preliminarily saved) must be set back into calibration register.
6620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
6624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
6628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
6633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance deep power down state.
6637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
6638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: deep power down is disabled, 1: deep power down is enabled.
6640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
6642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
6644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC instance internal voltage regulator.
6648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC internal voltage regulator enable,
6649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a delay for ADC internal voltage regulator stabilization
6650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is required before performing a ADC calibration or ADC enable.
6651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tADCVREG_STUP.
6652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_INTERNAL_REGUL_STAB_US.
6653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
6657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
6661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
ARM GAS  /tmp/ccecbe7f.s 			page 201


6667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADVREGEN);
6668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable ADC internal voltage regulator.
6672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
6676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
6680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
6682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance internal voltage regulator state.
6686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
6687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
6689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
6691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
6693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable the selected ADC instance.
6697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, after ADC enable, a delay for
6698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC internal analog stabilization is required before performing a
6699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC conversion start.
6700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to device datasheet, parameter tSTAB.
6701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled and ADC internal voltage regulator enabled.
6707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_Enable
6708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
6712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADEN);
6719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable the selected ADC instance.
6723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
ARM GAS  /tmp/ccecbe7f.s 			page 202


6724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be not disabled. Must be enabled without conversion on going
6726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         on either groups regular or injected.
6727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_Disable
6728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
6732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADDIS);
6739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance enable state.
6743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
6744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
6745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
6746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADEN           LL_ADC_IsEnabled
6747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: ADC is disabled, 1: ADC is enabled.
6749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
6751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
6753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get the selected ADC instance disable state.
6757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
6758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no ADC disable command on going.
6760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
6762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
6764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC calibration in the mode single-ended
6768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or differential (for devices with differential mode available).
6769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, a minimum number of ADC clock cycles
6770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         are required between ADC end of calibration and ADC enable.
6771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Refer to literal @ref LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES.
6772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   Calibration duration:
6773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of offset: 520 ADC clock cycles
6774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - Calibration of linearity: 131072 ADC clock cycles
6775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with differential mode available:
6776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of offset is specific to each of
6777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run must be performed for each of these
6779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         differential modes, if used afterwards and if the application
6780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         requires their calibration).
ARM GAS  /tmp/ccecbe7f.s 			page 203


6781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         Calibration of linearity is common to both
6782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         single-ended and differential modes
6783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (calibration run can be performed only once).
6784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be ADC disabled.
6787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_StartCalibration\n
6788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALDIF       LL_ADC_StartCalibration\n
6789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CR       ADCALLIN       LL_ADC_StartCalibration
6790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  CalibrationMode This parameter can be one of the following values:
6792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET
6793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_CALIB_OFFSET_LINEARITY
6794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  SingleDiff This parameter can be one of the following values:
6795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_SINGLE_ENDED
6796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
6797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t 
6800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCALLIN | ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
6806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADCAL | (CalibrationMode & ADC_CALIB_MODE_MASK) | (SingleDiff & ADC_SINGLEDIFF_
6807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC calibration state.
6811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
6812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: calibration complete, 1: calibration in progress.
6814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
6816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
6818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
6822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Regular Operation on ADC hierarchical scope: group regu
6825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
6826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group regular conversion.
6830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
6831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
6832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
6833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
6834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
6835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
6836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
6837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
ARM GAS  /tmp/ccecbe7f.s 			page 204


6838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group regular,
6840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group regular,
6841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
6843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
6847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTART);
6854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group regular conversion.
6858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
6859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
6860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group regular,
6861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
6862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
6863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
6865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
6867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
6869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
6870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
6871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
6872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
6873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_ADSTP);
6874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion state.
6878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
6879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group regular.
6881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
6883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 781              		.loc 2 6884 0
 782 00b2 9A68     		ldr	r2, [r3, #8]
 783 00b4 12F0040F 		tst	r2, #4
 784 00b8 10D1     		bne	.L70
 785              	.LVL59:
 786              	.LBE317:
 787              	.LBE316:
2448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 788              		.loc 1 2448 0
 789 00ba 5A68     		ldr	r2, [r3, #4]
ARM GAS  /tmp/ccecbe7f.s 			page 205


 790 00bc 22F00C02 		bic	r2, r2, #12
 791 00c0 5A60     		str	r2, [r3, #4]
2451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 792              		.loc 1 2451 0
 793 00c2 236E     		ldr	r3, [r4, #96]
 794 00c4 23F48073 		bic	r3, r3, #256
 795 00c8 2366     		str	r3, [r4, #96]
2453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 796              		.loc 1 2453 0
 797 00ca 236E     		ldr	r3, [r4, #96]
 798 00cc 13F4805F 		tst	r3, #4096
 799 00d0 0CD1     		bne	.L65
2455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 800              		.loc 1 2455 0
 801 00d2 236E     		ldr	r3, [r4, #96]
 802 00d4 43F00103 		orr	r3, r3, #1
 803 00d8 2366     		str	r3, [r4, #96]
 804 00da 07E0     		b	.L65
 805              	.LVL60:
 806              	.L70:
2461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 807              		.loc 1 2461 0
 808 00dc 236E     		ldr	r3, [r4, #96]
 809 00de 43F01003 		orr	r3, r3, #16
 810 00e2 2366     		str	r3, [r4, #96]
2464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 811              		.loc 1 2464 0
 812 00e4 636E     		ldr	r3, [r4, #100]
 813 00e6 43F00103 		orr	r3, r3, #1
 814 00ea 6366     		str	r3, [r4, #100]
 815              	.L65:
2478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 816              		.loc 1 2478 0
 817 00ec 2046     		mov	r0, r4
 818 00ee FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 819              	.LVL61:
2486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 820              		.loc 1 2486 0
 821 00f2 2368     		ldr	r3, [r4]
 822 00f4 0C22     		movs	r2, #12
 823 00f6 1A60     		str	r2, [r3]
 824              	.L63:
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 825              		.loc 1 2490 0
 826 00f8 15F0200F 		tst	r5, #32
 827 00fc 02D0     		beq	.L72
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 828              		.loc 1 2490 0 is_stmt 0 discriminator 1
 829 00fe 16F0200F 		tst	r6, #32
 830 0102 05D1     		bne	.L73
 831              	.L72:
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 832              		.loc 1 2490 0 discriminator 3
 833 0104 15F0400F 		tst	r5, #64
 834 0108 63D0     		beq	.L74
2491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 835              		.loc 1 2491 0 is_stmt 1
ARM GAS  /tmp/ccecbe7f.s 			page 206


 836 010a 16F0400F 		tst	r6, #64
 837 010e 60D0     		beq	.L74
 838              	.L73:
2494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 839              		.loc 1 2494 0
 840 0110 236E     		ldr	r3, [r4, #96]
 841 0112 13F0100F 		tst	r3, #16
 842 0116 03D1     		bne	.L75
2497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 843              		.loc 1 2497 0
 844 0118 236E     		ldr	r3, [r4, #96]
 845 011a 43F40053 		orr	r3, r3, #8192
 846 011e 2366     		str	r3, [r4, #96]
 847              	.L75:
2501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 848              		.loc 1 2501 0
 849 0120 2368     		ldr	r3, [r4]
 850              	.LVL62:
 851              	.LBB318:
 852              	.LBB319:
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 853              		.loc 2 4584 0
 854 0122 DA6C     		ldr	r2, [r3, #76]
 855 0124 12F4C07F 		tst	r2, #384
 856 0128 19D1     		bne	.L97
 857 012a 0121     		movs	r1, #1
 858              	.L76:
 859              	.LVL63:
 860              	.LBE319:
 861              	.LBE318:
 862              	.LBB321:
 863              	.LBB322:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 864              		.loc 2 3797 0
 865 012c DA68     		ldr	r2, [r3, #12]
 866 012e 12F4406F 		tst	r2, #3072
 867 0132 16D1     		bne	.L98
 868 0134 0120     		movs	r0, #1
 869              	.L77:
 870              	.LVL64:
 871              	.LBE322:
 872              	.LBE321:
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 873              		.loc 1 2506 0
 874 0136 5C4A     		ldr	r2, .L108+4
 875 0138 9342     		cmp	r3, r2
 876 013a 14D0     		beq	.L103
 877 013c 1A46     		mov	r2, r3
 878              	.L78:
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 879              		.loc 1 2506 0 is_stmt 0 discriminator 4
 880 013e 9342     		cmp	r3, r2
 881 0140 14D0     		beq	.L79
2508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 882              		.loc 1 2508 0 is_stmt 1
 883 0142 062F     		cmp	r7, #6
 884 0144 14BF     		ite	ne
ARM GAS  /tmp/ccecbe7f.s 			page 207


 885 0146 4FF0000C 		movne	ip, #0
 886 014a 4FF0010C 		moveq	ip, #1
 887 014e 6FB1     		cbz	r7, .L79
 888 0150 BCF1000F 		cmp	ip, #0
 889 0154 0AD1     		bne	.L79
2509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 890              		.loc 1 2509 0
 891 0156 072F     		cmp	r7, #7
 892 0158 08D0     		beq	.L79
 893              	.LVL65:
2517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 894              		.loc 1 2517 0 discriminator 4
 895 015a D268     		ldr	r2, [r2, #12]
 896              	.LVL66:
 897 015c 07E0     		b	.L81
 898              	.LVL67:
 899              	.L97:
 900              	.LBB324:
 901              	.LBB320:
4584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 902              		.loc 2 4584 0
 903 015e 0021     		movs	r1, #0
 904 0160 E4E7     		b	.L76
 905              	.LVL68:
 906              	.L98:
 907              	.LBE320:
 908              	.LBE324:
 909              	.LBB325:
 910              	.LBB323:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 911              		.loc 2 3797 0
 912 0162 0020     		movs	r0, #0
 913 0164 E7E7     		b	.L77
 914              	.LVL69:
 915              	.L103:
 916              	.LBE323:
 917              	.LBE325:
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 918              		.loc 1 2506 0
 919 0166 A2F58072 		sub	r2, r2, #256
 920 016a E8E7     		b	.L78
 921              	.L79:
2512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 922              		.loc 1 2512 0
 923 016c DA68     		ldr	r2, [r3, #12]
 924              	.LVL70:
 925              	.L81:
2525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 926              		.loc 1 2525 0
 927 016e 31B9     		cbnz	r1, .L82
2525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 928              		.loc 1 2525 0 is_stmt 0 discriminator 1
 929 0170 12F0007F 		tst	r2, #33554432
 930 0174 27D1     		bne	.L83
2526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 931              		.loc 1 2526 0 is_stmt 1
 932 0176 30B3     		cbz	r0, .L83
ARM GAS  /tmp/ccecbe7f.s 			page 208


2527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 933              		.loc 1 2527 0
 934 0178 12F4005F 		tst	r2, #8192
 935 017c 23D1     		bne	.L83
 936              	.L82:
2531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 937              		.loc 1 2531 0
 938 017e 1968     		ldr	r1, [r3]
 939 0180 11F0400F 		tst	r1, #64
 940 0184 1FD0     		beq	.L83
2539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 941              		.loc 1 2539 0
 942 0186 12F4001F 		tst	r2, #2097152
 943 018a 1CD1     		bne	.L83
 944              	.LVL71:
 945              	.LBB326:
 946              	.LBB327:
6885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular command of conversion stop state
6889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       ADSTP          LL_ADC_REG_IsStopConversionOngoing
6890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group regular.
6892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_IsStopConversionOngoing(ADC_TypeDef *ADCx)
6894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_ADSTP) == (ADC_CR_ADSTP)) ? 1UL : 0UL);
6896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
6901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
6902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
6903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData32
6904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
6906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadConversionData32(ADC_TypeDef *ADCx)
6908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
6915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData16
6919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFFFF
6921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData16(ADC_TypeDef *ADCx)
6923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
ARM GAS  /tmp/ccecbe7f.s 			page 209


6925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
6930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData14
6934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x3FF
6936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData14(ADC_TypeDef *ADCx)
6938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
6945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData12
6949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
6951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12(ADC_TypeDef *ADCx)
6953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
6960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData10
6964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
6966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
6967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData10(ADC_TypeDef *ADCx)
6968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
6972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group regular conversion data, range fit for
6974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
6975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
6976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
6977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_REG_ReadConversionData32.
6978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll DR       RDATA          LL_ADC_REG_ReadConversionData8
6979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
6980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
6981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 210


6982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_REG_ReadConversionData8(ADC_TypeDef *ADCx)
6983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
6984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
6985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
6986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
6987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC multimode conversion data of ADC master, ADC slave
6988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         or raw data with ADC master and slave concatenated.
6989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   If raw data with ADC master and slave concatenated is retrieved,
6990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         a macro is available to get the conversion data of
6991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC master or ADC slave: see helper macro
6992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @ref __LL_ADC_MULTI_CONV_DATA_MASTER_SLAVE().
6993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (however this macro is mainly intended for multimode
6994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         transfer by DMA, because this function can do the same
6995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         by getting multimode conversion data of ADC master or ADC slave
6996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         separately).
6997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CDR      RDATA_MST      LL_ADC_REG_ReadMultiConversionData32\n
6998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         CDR      RDATA_SLV      LL_ADC_REG_ReadMultiConversionData32
6999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ConversionData This parameter can be one of the following values:
7002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER
7003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_SLAVE
7004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_MULTI_MASTER_SLAVE
7005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_REG_ReadMultiConversionData32(ADC_Common_TypeDef *ADCxy_COMMON, uin
7008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(ADCxy_COMMON->CDR,
7010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ConversionData)
7011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                     >> (POSITION_VAL(ConversionData) & 0x1FUL)
7012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_Operation_ADC_Group_Injected Operation on ADC hierarchical scope: group inj
7020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7022:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7023:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7024:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Start ADC group injected conversion.
7025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, this function is relevant for both
7026:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         internal trigger (SW start) and external trigger:
7027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to software start, ADC conversion
7028:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           starts immediately.
7029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         - If ADC trigger has been set to external trigger, ADC conversion
7030:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           will start at next trigger event (on the selected trigger edge)
7031:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *           following the ADC start conversion command.
7032:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
7033:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7034:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled without conversion on going on group injected,
7035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without conversion stop command on going on group injected,
7036:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7037:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_StartConversion
7038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccecbe7f.s 			page 211


7039:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7040:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7041:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StartConversion(ADC_TypeDef *ADCx)
7042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7044:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7045:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7046:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7047:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7048:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTART);
7049:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7050:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7051:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7052:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Stop ADC group injected conversion.
7053:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, setting of this feature is conditioned to
7054:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC state:
7055:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC must be enabled with conversion on going on group injected,
7056:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         without ADC disable command on going.
7057:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
7058:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7059:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7060:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7061:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
7062:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7063:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /* Note: Write register with some additional bits forced to state reset     */
7064:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       instead of modifying only the selected bit for this function,      */
7065:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   /*       to not interfere with bits with HW property "rs".                  */
7066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   MODIFY_REG(ADCx->CR,
7067:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
7068:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_JADSTP);
7069:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7070:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7071:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7072:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion state.
7073:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
7074:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7075:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no conversion is on going on ADC group injected.
7076:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7077:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
7078:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 947              		.loc 2 7079 0
 948 018c 9A68     		ldr	r2, [r3, #8]
 949              	.LVL72:
 950 018e 12F0080F 		tst	r2, #8
 951 0192 10D1     		bne	.L84
 952              	.LVL73:
 953              	.LBE327:
 954              	.LBE326:
2546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 955              		.loc 1 2546 0
 956 0194 5A68     		ldr	r2, [r3, #4]
 957 0196 22F06002 		bic	r2, r2, #96
 958 019a 5A60     		str	r2, [r3, #4]
2549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 959              		.loc 1 2549 0
 960 019c 236E     		ldr	r3, [r4, #96]
ARM GAS  /tmp/ccecbe7f.s 			page 212


 961 019e 23F48053 		bic	r3, r3, #4096
 962 01a2 2366     		str	r3, [r4, #96]
2551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 963              		.loc 1 2551 0
 964 01a4 236E     		ldr	r3, [r4, #96]
 965 01a6 13F4807F 		tst	r3, #256
 966 01aa 0CD1     		bne	.L83
2553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 967              		.loc 1 2553 0
 968 01ac 236E     		ldr	r3, [r4, #96]
 969 01ae 43F00103 		orr	r3, r3, #1
 970 01b2 2366     		str	r3, [r4, #96]
 971 01b4 07E0     		b	.L83
 972              	.LVL74:
 973              	.L84:
2559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 974              		.loc 1 2559 0
 975 01b6 236E     		ldr	r3, [r4, #96]
 976 01b8 43F01003 		orr	r3, r3, #16
 977 01bc 2366     		str	r3, [r4, #96]
2562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 978              		.loc 1 2562 0
 979 01be 636E     		ldr	r3, [r4, #100]
 980 01c0 43F00103 		orr	r3, r3, #1
 981 01c4 6366     		str	r3, [r4, #100]
 982              	.L83:
2577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 983              		.loc 1 2577 0
 984 01c6 2046     		mov	r0, r4
 985 01c8 FFF7FEFF 		bl	HAL_ADCEx_InjectedConvCpltCallback
 986              	.LVL75:
2581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 987              		.loc 1 2581 0
 988 01cc 2368     		ldr	r3, [r4]
 989 01ce 6022     		movs	r2, #96
 990 01d0 1A60     		str	r2, [r3]
 991              	.L74:
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 992              		.loc 1 2585 0
 993 01d2 15F0800F 		tst	r5, #128
 994 01d6 02D0     		beq	.L86
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 995              		.loc 1 2585 0 is_stmt 0 discriminator 1
 996 01d8 16F0800F 		tst	r6, #128
 997 01dc 36D1     		bne	.L104
 998              	.L86:
2602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 999              		.loc 1 2602 0 is_stmt 1
 1000 01de 15F4807F 		tst	r5, #256
 1001 01e2 02D0     		beq	.L87
2602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1002              		.loc 1 2602 0 is_stmt 0 discriminator 1
 1003 01e4 16F4807F 		tst	r6, #256
 1004 01e8 3BD1     		bne	.L105
 1005              	.L87:
2619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1006              		.loc 1 2619 0 is_stmt 1
ARM GAS  /tmp/ccecbe7f.s 			page 213


 1007 01ea 15F4007F 		tst	r5, #512
 1008 01ee 02D0     		beq	.L88
2619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1009              		.loc 1 2619 0 is_stmt 0 discriminator 1
 1010 01f0 16F4007F 		tst	r6, #512
 1011 01f4 41D1     		bne	.L106
 1012              	.L88:
2636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1013              		.loc 1 2636 0 is_stmt 1
 1014 01f6 15F0100F 		tst	r5, #16
 1015 01fa 20D0     		beq	.L89
2636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1016              		.loc 1 2636 0 is_stmt 0 discriminator 1
 1017 01fc 16F0100F 		tst	r6, #16
 1018 0200 1DD0     		beq	.L89
2644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 1019              		.loc 1 2644 0 is_stmt 1
 1020 0202 E36B     		ldr	r3, [r4, #60]
 1021 0204 6BB1     		cbz	r3, .L90
2651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 1022              		.loc 1 2651 0
 1023 0206 002F     		cmp	r7, #0
 1024 0208 45D0     		beq	.L91
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1025              		.loc 1 2655 0
 1026 020a 2368     		ldr	r3, [r4]
 1027 020c 2549     		ldr	r1, .L108
 1028 020e 264A     		ldr	r2, .L108+4
 1029 0210 9342     		cmp	r3, r2
 1030 0212 18BF     		it	ne
 1031 0214 8B42     		cmpne	r3, r1
 1032 0216 3CD1     		bne	.L100
 1033 0218 244B     		ldr	r3, .L108+8
 1034              	.L92:
 1035              	.LVL76:
 1036              	.LBB328:
 1037              	.LBB329:
6503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1038              		.loc 2 6503 0 discriminator 4
 1039 021a 9B68     		ldr	r3, [r3, #8]
 1040              	.LVL77:
 1041              	.LBE329:
 1042              	.LBE328:
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1043              		.loc 1 2655 0 discriminator 4
 1044 021c 13F4404F 		tst	r3, #49152
 1045 0220 0AD0     		beq	.L93
 1046              	.L90:
2673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1047              		.loc 1 2673 0
 1048 0222 236E     		ldr	r3, [r4, #96]
 1049 0224 43F48063 		orr	r3, r3, #1024
 1050 0228 2366     		str	r3, [r4, #96]
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1051              		.loc 1 2676 0
 1052 022a 636E     		ldr	r3, [r4, #100]
 1053 022c 43F00203 		orr	r3, r3, #2
ARM GAS  /tmp/ccecbe7f.s 			page 214


 1054 0230 6366     		str	r3, [r4, #100]
2686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1055              		.loc 1 2686 0
 1056 0232 2046     		mov	r0, r4
 1057 0234 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1058              	.LVL78:
 1059              	.L93:
2691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 1060              		.loc 1 2691 0
 1061 0238 2368     		ldr	r3, [r4]
 1062 023a 1022     		movs	r2, #16
 1063 023c 1A60     		str	r2, [r3]
 1064              	.L89:
2695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1065              		.loc 1 2695 0
 1066 023e 15F4806F 		tst	r5, #1024
 1067 0242 02D0     		beq	.L57
2695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1068              		.loc 1 2695 0 is_stmt 0 discriminator 1
 1069 0244 16F4806F 		tst	r6, #1024
 1070 0248 34D1     		bne	.L107
 1071              	.L57:
2714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1072              		.loc 1 2714 0 is_stmt 1
 1073 024a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1074              	.LVL79:
 1075              	.L104:
2588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1076              		.loc 1 2588 0
 1077 024c 236E     		ldr	r3, [r4, #96]
 1078 024e 43F48033 		orr	r3, r3, #65536
 1079 0252 2366     		str	r3, [r4, #96]
2594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1080              		.loc 1 2594 0
 1081 0254 2046     		mov	r0, r4
 1082 0256 FFF7FEFF 		bl	HAL_ADC_LevelOutOfWindowCallback
 1083              	.LVL80:
2598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 1084              		.loc 1 2598 0
 1085 025a 2368     		ldr	r3, [r4]
 1086 025c 8022     		movs	r2, #128
 1087 025e 1A60     		str	r2, [r3]
 1088 0260 BDE7     		b	.L86
 1089              	.L105:
2605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1090              		.loc 1 2605 0
 1091 0262 236E     		ldr	r3, [r4, #96]
 1092 0264 43F40033 		orr	r3, r3, #131072
 1093 0268 2366     		str	r3, [r4, #96]
2611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1094              		.loc 1 2611 0
 1095 026a 2046     		mov	r0, r4
 1096 026c FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow2Callback
 1097              	.LVL81:
2615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 1098              		.loc 1 2615 0
 1099 0270 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccecbe7f.s 			page 215


 1100 0272 4FF48072 		mov	r2, #256
 1101 0276 1A60     		str	r2, [r3]
 1102 0278 B7E7     		b	.L87
 1103              	.L106:
2622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1104              		.loc 1 2622 0
 1105 027a 236E     		ldr	r3, [r4, #96]
 1106 027c 43F48023 		orr	r3, r3, #262144
 1107 0280 2366     		str	r3, [r4, #96]
2628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1108              		.loc 1 2628 0
 1109 0282 2046     		mov	r0, r4
 1110 0284 FFF7FEFF 		bl	HAL_ADCEx_LevelOutOfWindow3Callback
 1111              	.LVL82:
2632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 1112              		.loc 1 2632 0
 1113 0288 2368     		ldr	r3, [r4]
 1114 028a 4FF40072 		mov	r2, #512
 1115 028e 1A60     		str	r2, [r3]
 1116 0290 B1E7     		b	.L88
 1117              	.L100:
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1118              		.loc 1 2655 0
 1119 0292 074B     		ldr	r3, .L108+12
 1120 0294 C1E7     		b	.L92
 1121              	.L91:
2663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1122              		.loc 1 2663 0
 1123 0296 2368     		ldr	r3, [r4]
 1124 0298 DB68     		ldr	r3, [r3, #12]
 1125 029a 13F0030F 		tst	r3, #3
 1126 029e CBD0     		beq	.L93
 1127 02a0 BFE7     		b	.L90
 1128              	.L109:
 1129 02a2 00BF     		.align	2
 1130              	.L108:
 1131 02a4 00200240 		.word	1073881088
 1132 02a8 00210240 		.word	1073881344
 1133 02ac 00230240 		.word	1073881856
 1134 02b0 00630258 		.word	1476551424
 1135              	.L107:
2698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1136              		.loc 1 2698 0
 1137 02b4 236E     		ldr	r3, [r4, #96]
 1138 02b6 43F48043 		orr	r3, r3, #16384
 1139 02ba 2366     		str	r3, [r4, #96]
2701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1140              		.loc 1 2701 0
 1141 02bc 636E     		ldr	r3, [r4, #100]
 1142 02be 43F00803 		orr	r3, r3, #8
 1143 02c2 6366     		str	r3, [r4, #100]
2704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1144              		.loc 1 2704 0
 1145 02c4 2368     		ldr	r3, [r4]
 1146 02c6 4FF48062 		mov	r2, #1024
 1147 02ca 1A60     		str	r2, [r3]
2710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccecbe7f.s 			page 216


 1148              		.loc 1 2710 0
 1149 02cc 2046     		mov	r0, r4
 1150 02ce FFF7FEFF 		bl	HAL_ADCEx_InjectedQueueOverflowCallback
 1151              	.LVL83:
2714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1152              		.loc 1 2714 0
 1153 02d2 BAE7     		b	.L57
 1154              		.cfi_endproc
 1155              	.LFE356:
 1157              		.section	.text.ADC_DMAConvCplt,"ax",%progbits
 1158              		.align	1
 1159              		.global	ADC_DMAConvCplt
 1160              		.syntax unified
 1161              		.thumb
 1162              		.thumb_func
 1163              		.fpu fpv5-d16
 1165              	ADC_DMAConvCplt:
 1166              	.LFB368:
3803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
 1167              		.loc 1 3803 0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 0
 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171              	.LVL84:
 1172 0000 08B5     		push	{r3, lr}
 1173              	.LCFI4:
 1174              		.cfi_def_cfa_offset 8
 1175              		.cfi_offset 3, -8
 1176              		.cfi_offset 14, -4
3805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1177              		.loc 1 3805 0
 1178 0002 836B     		ldr	r3, [r0, #56]
 1179              	.LVL85:
3808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1180              		.loc 1 3808 0
 1181 0004 1A6E     		ldr	r2, [r3, #96]
 1182 0006 12F0500F 		tst	r2, #80
 1183 000a 31D1     		bne	.L111
3811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1184              		.loc 1 3811 0
 1185 000c 1A6E     		ldr	r2, [r3, #96]
 1186 000e 42F40072 		orr	r2, r2, #512
 1187 0012 1A66     		str	r2, [r3, #96]
3817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 1188              		.loc 1 3817 0
 1189 0014 1A68     		ldr	r2, [r3]
 1190 0016 1168     		ldr	r1, [r2]
 1191 0018 11F0080F 		tst	r1, #8
 1192 001c 14D0     		beq	.L112
 1193              	.LVL86:
 1194              	.LBB330:
 1195              	.LBB331:
3797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1196              		.loc 2 3797 0
 1197 001e D168     		ldr	r1, [r2, #12]
 1198 0020 11F4406F 		tst	r1, #3072
 1199 0024 20D1     		bne	.L113
ARM GAS  /tmp/ccecbe7f.s 			page 217


 1200              	.LVL87:
 1201              	.LBE331:
 1202              	.LBE330:
3823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1203              		.loc 1 3823 0
 1204 0026 D268     		ldr	r2, [r2, #12]
 1205 0028 12F4005F 		tst	r2, #8192
 1206 002c 1CD1     		bne	.L113
3826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 1207              		.loc 1 3826 0
 1208 002e 1A6E     		ldr	r2, [r3, #96]
 1209 0030 22F48072 		bic	r2, r2, #256
 1210 0034 1A66     		str	r2, [r3, #96]
3827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1211              		.loc 1 3827 0
 1212 0036 1A6E     		ldr	r2, [r3, #96]
 1213 0038 12F4805F 		tst	r2, #4096
 1214 003c 14D1     		bne	.L113
3829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 1215              		.loc 1 3829 0
 1216 003e 1A6E     		ldr	r2, [r3, #96]
 1217 0040 42F00102 		orr	r2, r2, #1
 1218 0044 1A66     		str	r2, [r3, #96]
 1219 0046 0FE0     		b	.L113
 1220              	.L112:
3838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 1221              		.loc 1 3838 0
 1222 0048 D268     		ldr	r2, [r2, #12]
 1223 004a 12F0030F 		tst	r2, #3
 1224 004e 0BD1     		bne	.L113
3841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 1225              		.loc 1 3841 0
 1226 0050 1A6E     		ldr	r2, [r3, #96]
 1227 0052 22F48072 		bic	r2, r2, #256
 1228 0056 1A66     		str	r2, [r3, #96]
3842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1229              		.loc 1 3842 0
 1230 0058 1A6E     		ldr	r2, [r3, #96]
 1231 005a 12F4805F 		tst	r2, #4096
 1232 005e 03D1     		bne	.L113
3844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 1233              		.loc 1 3844 0
 1234 0060 1A6E     		ldr	r2, [r3, #96]
 1235 0062 42F00102 		orr	r2, r2, #1
 1236 0066 1A66     		str	r2, [r3, #96]
 1237              	.L113:
3853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1238              		.loc 1 3853 0
 1239 0068 1846     		mov	r0, r3
 1240              	.LVL88:
 1241 006a FFF7FEFF 		bl	HAL_ADC_ConvCpltCallback
 1242              	.LVL89:
 1243              	.L110:
3873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1244              		.loc 1 3873 0
 1245 006e 08BD     		pop	{r3, pc}
 1246              	.LVL90:
ARM GAS  /tmp/ccecbe7f.s 			page 218


 1247              	.L111:
3858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 1248              		.loc 1 3858 0
 1249 0070 1A6E     		ldr	r2, [r3, #96]
 1250 0072 12F0100F 		tst	r2, #16
 1251 0076 03D1     		bne	.L117
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 1252              		.loc 1 3870 0
 1253 0078 9B6D     		ldr	r3, [r3, #88]
 1254              	.LVL91:
 1255 007a DB6C     		ldr	r3, [r3, #76]
 1256 007c 9847     		blx	r3
 1257              	.LVL92:
3873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1258              		.loc 1 3873 0
 1259 007e F6E7     		b	.L110
 1260              	.LVL93:
 1261              	.L117:
3864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 1262              		.loc 1 3864 0
 1263 0080 1846     		mov	r0, r3
 1264              	.LVL94:
 1265 0082 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1266              	.LVL95:
 1267 0086 F2E7     		b	.L110
 1268              		.cfi_endproc
 1269              	.LFE368:
 1271              		.section	.text.ADC_DMAError,"ax",%progbits
 1272              		.align	1
 1273              		.global	ADC_DMAError
 1274              		.syntax unified
 1275              		.thumb
 1276              		.thumb_func
 1277              		.fpu fpv5-d16
 1279              	ADC_DMAError:
 1280              	.LFB370:
3892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  DMA error callback.
3895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param hdma pointer to DMA handle.
3896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None
3897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_DMAError(DMA_HandleTypeDef *hdma)
3899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 1281              		.loc 1 3899 0
 1282              		.cfi_startproc
 1283              		@ args = 0, pretend = 0, frame = 0
 1284              		@ frame_needed = 0, uses_anonymous_args = 0
 1285              	.LVL96:
 1286 0000 08B5     		push	{r3, lr}
 1287              	.LCFI5:
 1288              		.cfi_def_cfa_offset 8
 1289              		.cfi_offset 3, -8
 1290              		.cfi_offset 14, -4
3900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Retrieve ADC handle corresponding to current DMA handle */
3901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 1291              		.loc 1 3901 0
ARM GAS  /tmp/ccecbe7f.s 			page 219


 1292 0002 806B     		ldr	r0, [r0, #56]
 1293              	.LVL97:
3902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC state */
3904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 1294              		.loc 1 3904 0
 1295 0004 036E     		ldr	r3, [r0, #96]
 1296 0006 43F04003 		orr	r3, r3, #64
 1297 000a 0366     		str	r3, [r0, #96]
3905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Set ADC error code to DMA error */
3907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 1298              		.loc 1 3907 0
 1299 000c 436E     		ldr	r3, [r0, #100]
 1300 000e 43F00403 		orr	r3, r3, #4
 1301 0012 4366     		str	r3, [r0, #100]
3908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Error callback */
3910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
3911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->ErrorCallback(hadc);
3912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_ADC_ErrorCallback(hadc);
 1302              		.loc 1 3913 0
 1303 0014 FFF7FEFF 		bl	HAL_ADC_ErrorCallback
 1304              	.LVL98:
3914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
3915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 1305              		.loc 1 3915 0
 1306 0018 08BD     		pop	{r3, pc}
 1307              		.cfi_endproc
 1308              	.LFE370:
 1310              		.section	.text.HAL_ADC_ConfigChannel,"ax",%progbits
 1311              		.align	1
 1312              		.global	HAL_ADC_ConfigChannel
 1313              		.syntax unified
 1314              		.thumb
 1315              		.thumb_func
 1316              		.fpu fpv5-d16
 1318              	HAL_ADC_ConfigChannel:
 1319              	.LFB361:
2820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 1320              		.loc 1 2820 0
 1321              		.cfi_startproc
 1322              		@ args = 0, pretend = 0, frame = 8
 1323              		@ frame_needed = 0, uses_anonymous_args = 0
 1324              		@ link register save eliminated.
 1325              	.LVL99:
 1326 0000 F0B4     		push	{r4, r5, r6, r7}
 1327              	.LCFI6:
 1328              		.cfi_def_cfa_offset 16
 1329              		.cfi_offset 4, -16
 1330              		.cfi_offset 5, -12
 1331              		.cfi_offset 6, -8
 1332              		.cfi_offset 7, -4
 1333 0002 82B0     		sub	sp, sp, #8
 1334              	.LCFI7:
 1335              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/ccecbe7f.s 			page 220


 1336              	.LVL100:
2824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 1337              		.loc 1 2824 0
 1338 0004 0022     		movs	r2, #0
 1339 0006 0192     		str	r2, [sp, #4]
2882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1340              		.loc 1 2882 0
 1341 0008 90F85C20 		ldrb	r2, [r0, #92]	@ zero_extendqisi2
 1342 000c 012A     		cmp	r2, #1
 1343 000e 00F02483 		beq	.L189
 1344 0012 0346     		mov	r3, r0
2882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1345              		.loc 1 2882 0 is_stmt 0 discriminator 2
 1346 0014 0122     		movs	r2, #1
 1347 0016 80F85C20 		strb	r2, [r0, #92]
2889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 1348              		.loc 1 2889 0 is_stmt 1 discriminator 2
 1349 001a 0268     		ldr	r2, [r0]
 1350              	.LVL101:
 1351              	.LBB421:
 1352              	.LBB422:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1353              		.loc 2 6884 0 discriminator 2
 1354 001c 9668     		ldr	r6, [r2, #8]
 1355 001e 16F00406 		ands	r6, r6, #4
 1356 0022 0AD0     		beq	.L122
 1357              	.LVL102:
 1358              	.LBE422:
 1359              	.LBE421:
3105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1360              		.loc 1 3105 0
 1361 0024 026E     		ldr	r2, [r0, #96]
 1362 0026 42F02002 		orr	r2, r2, #32
 1363 002a 0266     		str	r2, [r0, #96]
 1364              	.LVL103:
3107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 1365              		.loc 1 3107 0
 1366 002c 0120     		movs	r0, #1
 1367              	.LVL104:
 1368              	.L123:
3111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1369              		.loc 1 3111 0
 1370 002e 0022     		movs	r2, #0
 1371 0030 83F85C20 		strb	r2, [r3, #92]
 1372              	.LVL105:
 1373              	.L121:
3115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1374              		.loc 1 3115 0
 1375 0034 02B0     		add	sp, sp, #8
 1376              	.LCFI8:
 1377              		.cfi_remember_state
 1378              		.cfi_def_cfa_offset 16
 1379              		@ sp needed
 1380 0036 F0BC     		pop	{r4, r5, r6, r7}
 1381              	.LCFI9:
 1382              		.cfi_restore 7
 1383              		.cfi_restore 6
ARM GAS  /tmp/ccecbe7f.s 			page 221


 1384              		.cfi_restore 5
 1385              		.cfi_restore 4
 1386              		.cfi_def_cfa_offset 0
 1387 0038 7047     		bx	lr
 1388              	.LVL106:
 1389              	.L122:
 1390              	.LCFI10:
 1391              		.cfi_restore_state
2893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 1392              		.loc 1 2893 0
 1393 003a B748     		ldr	r0, .L232
 1394              	.LVL107:
 1395 003c 8242     		cmp	r2, r0
 1396 003e 0BD0     		beq	.L124
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 1397              		.loc 1 2896 0
 1398 0040 0868     		ldr	r0, [r1]
 1399 0042 C0F31304 		ubfx	r4, r0, #0, #20
 1400 0046 002C     		cmp	r4, #0
 1401 0048 53D1     		bne	.L125
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 1402              		.loc 1 2896 0 is_stmt 0 discriminator 1
 1403 004a C0F38460 		ubfx	r0, r0, #26, #5
 1404 004e 0124     		movs	r4, #1
 1405 0050 8440     		lsls	r4, r4, r0
 1406              	.L126:
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 1407              		.loc 1 2896 0 discriminator 4
 1408 0052 D069     		ldr	r0, [r2, #28]
 1409 0054 2043     		orrs	r0, r0, r4
 1410 0056 D061     		str	r0, [r2, #28]
 1411              	.L124:
2904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1412              		.loc 1 2904 0 is_stmt 1
 1413 0058 1F68     		ldr	r7, [r3]
 1414 005a 4D68     		ldr	r5, [r1, #4]
 1415 005c 0C68     		ldr	r4, [r1]
 1416              	.LVL108:
 1417              	.LBB423:
 1418              	.LBB424:
4128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 1419              		.loc 2 4128 0
 1420 005e 3037     		adds	r7, r7, #48
 1421              	.LVL109:
 1422 0060 2A0A     		lsrs	r2, r5, #8
 1423 0062 9200     		lsls	r2, r2, #2
 1424 0064 02F00C02 		and	r2, r2, #12
 1425              	.LVL110:
4130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
 1426              		.loc 2 4130 0
 1427 0068 B858     		ldr	r0, [r7, r2]
 1428 006a 05F01F05 		and	r5, r5, #31
 1429              	.LVL111:
 1430 006e 4FF01F0C 		mov	ip, #31
 1431 0072 0CFA05FC 		lsl	ip, ip, r5
 1432 0076 20EA0C00 		bic	r0, r0, ip
 1433 007a C4F38464 		ubfx	r4, r4, #26, #5
ARM GAS  /tmp/ccecbe7f.s 			page 222


 1434              	.LVL112:
 1435 007e AC40     		lsls	r4, r4, r5
 1436 0080 2043     		orrs	r0, r0, r4
 1437 0082 B850     		str	r0, [r7, r2]
 1438              	.LVL113:
 1439              	.LBE424:
 1440              	.LBE423:
2911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 1441              		.loc 1 2911 0
 1442 0084 1A68     		ldr	r2, [r3]
 1443              	.LVL114:
 1444              	.LBB425:
 1445              	.LBB426:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1446              		.loc 2 6884 0
 1447 0086 9068     		ldr	r0, [r2, #8]
 1448 0088 10F0040F 		tst	r0, #4
 1449 008c 3AD0     		beq	.L190
 1450 008e 0120     		movs	r0, #1
 1451              	.L127:
 1452              	.LVL115:
 1453              	.LBE426:
 1454              	.LBE425:
 1455              	.LBB428:
 1456              	.LBB429:
 1457              		.loc 2 7079 0
 1458 0090 9468     		ldr	r4, [r2, #8]
 1459 0092 14F0080F 		tst	r4, #8
 1460 0096 37D0     		beq	.L191
 1461 0098 0124     		movs	r4, #1
 1462              	.L128:
 1463              	.LVL116:
 1464              	.LBE429:
 1465              	.LBE428:
2913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 1466              		.loc 1 2913 0
 1467 009a 2043     		orrs	r0, r4, r0
 1468 009c 70D1     		bne	.L129
2918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1469              		.loc 1 2918 0
 1470 009e 0F68     		ldr	r7, [r1]
 1471 00a0 8868     		ldr	r0, [r1, #8]
 1472              	.LVL117:
 1473              	.LBB431:
 1474              	.LBB432:
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 1475              		.loc 2 5282 0
 1476 00a2 02F11404 		add	r4, r2, #20
 1477 00a6 7A0E     		lsrs	r2, r7, #25
 1478              	.LVL118:
 1479 00a8 9200     		lsls	r2, r2, #2
 1480 00aa 02F00402 		and	r2, r2, #4
 1481              	.LVL119:
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
 1482              		.loc 2 5284 0
 1483 00ae A558     		ldr	r5, [r4, r2]
 1484 00b0 C7F30457 		ubfx	r7, r7, #20, #5
ARM GAS  /tmp/ccecbe7f.s 			page 223


 1485              	.LVL120:
 1486 00b4 4FF0070C 		mov	ip, #7
 1487 00b8 0CFA07FC 		lsl	ip, ip, r7
 1488 00bc 25EA0C05 		bic	r5, r5, ip
 1489 00c0 B840     		lsls	r0, r0, r7
 1490              	.LVL121:
 1491 00c2 2843     		orrs	r0, r0, r5
 1492 00c4 A050     		str	r0, [r4, r2]
 1493              	.LVL122:
 1494              	.LBE432:
 1495              	.LBE431:
2925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 1496              		.loc 1 2925 0
 1497 00c6 1A68     		ldr	r2, [r3]
 1498 00c8 9348     		ldr	r0, .L232
 1499 00ca 8242     		cmp	r2, r0
 1500 00cc 1ED0     		beq	.L205
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 1501              		.loc 1 2932 0
 1502 00ce 9348     		ldr	r0, .L232+4
 1503 00d0 0068     		ldr	r0, [r0]
 1504 00d2 00F07040 		and	r0, r0, #-268435456
 1505 00d6 B0F1805F 		cmp	r0, #268435456
 1506 00da 59D0     		beq	.L206
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 1507              		.loc 1 2932 0 is_stmt 0 discriminator 2
 1508 00dc D068     		ldr	r0, [r2, #12]
 1509 00de 10F0100F 		tst	r0, #16
 1510 00e2 5CD1     		bne	.L133
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 1511              		.loc 1 2932 0 discriminator 4
 1512 00e4 4869     		ldr	r0, [r1, #20]
 1513 00e6 D468     		ldr	r4, [r2, #12]
 1514 00e8 C4F38204 		ubfx	r4, r4, #2, #3
 1515 00ec 6400     		lsls	r4, r4, #1
 1516 00ee A040     		lsls	r0, r0, r4
 1517 00f0 12E0     		b	.L131
 1518              	.L125:
 1519              	.LVL123:
 1520              	.LBB433:
 1521              	.LBB434:
 1522              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  /tmp/ccecbe7f.s 			page 224


  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
ARM GAS  /tmp/ccecbe7f.s 			page 225


  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
ARM GAS  /tmp/ccecbe7f.s 			page 226


 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 227


 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
ARM GAS  /tmp/ccecbe7f.s 			page 228


 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccecbe7f.s 			page 229


 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccecbe7f.s 			page 230


 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
ARM GAS  /tmp/ccecbe7f.s 			page 231


 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
ARM GAS  /tmp/ccecbe7f.s 			page 232


 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccecbe7f.s 			page 233


 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp/ccecbe7f.s 			page 234


 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
ARM GAS  /tmp/ccecbe7f.s 			page 235


 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
ARM GAS  /tmp/ccecbe7f.s 			page 236


 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 237


 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
ARM GAS  /tmp/ccecbe7f.s 			page 238


 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 239


 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 240


 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 241


 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 1523              		.loc 3 988 0 is_stmt 1 discriminator 2
 1524              		.syntax unified
 1525              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1526 00f2 90FAA0F0 		rbit r0, r0
 1527              	@ 0 "" 2
 1528              	.LVL124:
 1529              		.thumb
 1530              		.syntax unified
 1531              	.LBE434:
 1532              	.LBE433:
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 1533              		.loc 1 2896 0 discriminator 2
 1534 00f6 B0FA80F0 		clz	r0, r0
 1535 00fa 00F01F00 		and	r0, r0, #31
 1536 00fe 0124     		movs	r4, #1
 1537 0100 8440     		lsls	r4, r4, r0
 1538 0102 A6E7     		b	.L126
 1539              	.LVL125:
 1540              	.L190:
 1541              	.LBB435:
 1542              	.LBB427:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1543              		.loc 2 6884 0
 1544 0104 0020     		movs	r0, #0
 1545 0106 C3E7     		b	.L127
 1546              	.LVL126:
 1547              	.L191:
 1548              	.LBE427:
 1549              	.LBE435:
 1550              	.LBB436:
 1551              	.LBB430:
 1552              		.loc 2 7079 0
 1553 0108 0024     		movs	r4, #0
 1554 010a C6E7     		b	.L128
 1555              	.LVL127:
 1556              	.L205:
 1557              	.LBE430:
 1558              	.LBE436:
2927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 1559              		.loc 1 2927 0
 1560 010c 4869     		ldr	r0, [r1, #20]
 1561 010e D468     		ldr	r4, [r2, #12]
 1562 0110 C4F3C104 		ubfx	r4, r4, #3, #2
 1563 0114 6400     		lsls	r4, r4, #1
 1564 0116 A040     		lsls	r0, r0, r4
 1565              	.LVL128:
 1566              	.L131:
2935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 1567              		.loc 1 2935 0
 1568 0118 0C69     		ldr	r4, [r1, #16]
 1569 011a 042C     		cmp	r4, #4
 1570 011c 76D0     		beq	.L134
2938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 242


 1571              		.loc 1 2938 0
 1572 011e 0D68     		ldr	r5, [r1]
 1573              	.LVL129:
 1574              	.LBB437:
 1575              	.LBB438:
3248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** #if defined(ADC_VER_V5_V90)
 1576              		.loc 2 3248 0
 1577 0120 02F16007 		add	r7, r2, #96
 1578              	.LVL130:
3250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 1579              		.loc 2 3250 0
 1580 0124 DFF8F0C1 		ldr	ip, .L232
 1581 0128 6245     		cmp	r2, ip
 1582 012a 40D0     		beq	.L207
3259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 1583              		.loc 2 3259 0
 1584 012c 57F82420 		ldr	r2, [r7, r4, lsl #2]
 1585              	.LVL131:
 1586 0130 02F00042 		and	r2, r2, #-2147483648
 1587 0134 05F0F845 		and	r5, r5, #2080374784
 1588              	.LVL132:
 1589 0138 2843     		orrs	r0, r0, r5
 1590              	.LVL133:
 1591 013a 1043     		orrs	r0, r0, r2
 1592 013c 47F82400 		str	r0, [r7, r4, lsl #2]
 1593              	.LVL134:
 1594              	.L136:
 1595              	.LBE438:
 1596              	.LBE437:
2941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1597              		.loc 1 2941 0
 1598 0140 1A68     		ldr	r2, [r3]
 1599 0142 7548     		ldr	r0, .L232
 1600 0144 8242     		cmp	r2, r0
 1601 0146 3CD0     		beq	.L208
2954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1602              		.loc 1 2954 0
 1603 0148 0D69     		ldr	r5, [r1, #16]
 1604 014a 91F82100 		ldrb	r0, [r1, #33]	@ zero_extendqisi2
 1605 014e 0128     		cmp	r0, #1
 1606 0150 56D0     		beq	.L209
 1607 0152 3446     		mov	r4, r6
 1608              	.L139:
 1609              	.LVL135:
 1610              	.LBB440:
 1611              	.LBB441:
3429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 1612              		.loc 2 3429 0 discriminator 4
 1613 0154 6032     		adds	r2, r2, #96
 1614              	.LVL136:
3430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
 1615              		.loc 2 3430 0 discriminator 4
 1616 0156 52F82500 		ldr	r0, [r2, r5, lsl #2]
 1617 015a 20F00040 		bic	r0, r0, #-2147483648
 1618 015e 2043     		orrs	r0, r0, r4
 1619 0160 42F82500 		str	r0, [r2, r5, lsl #2]
 1620              	.LVL137:
ARM GAS  /tmp/ccecbe7f.s 			page 243


 1621              	.LBE441:
 1622              	.LBE440:
2958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 1623              		.loc 1 2958 0 discriminator 4
 1624 0164 1D68     		ldr	r5, [r3]
 1625 0166 0C69     		ldr	r4, [r1, #16]
 1626 0168 0A7E     		ldrb	r2, [r1, #24]	@ zero_extendqisi2
 1627 016a 012A     		cmp	r2, #1
 1628 016c 4BD0     		beq	.L210
 1629              	.L140:
 1630              	.LVL138:
 1631              	.LBB442:
 1632              	.LBB443:
3379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1633              		.loc 2 3379 0 discriminator 4
 1634 016e 2A69     		ldr	r2, [r5, #16]
 1635 0170 22F4F042 		bic	r2, r2, #30720
 1636 0174 04F01F00 		and	r0, r4, #31
 1637 0178 06FA00F0 		lsl	r0, r6, r0
 1638 017c 1043     		orrs	r0, r0, r2
 1639 017e 2861     		str	r0, [r5, #16]
 1640              	.LVL139:
 1641              	.L129:
 1642              	.LBE443:
 1643              	.LBE442:
3015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 1644              		.loc 1 3015 0
 1645 0180 1A68     		ldr	r2, [r3]
 1646              	.LVL140:
 1647              	.LBB444:
 1648              	.LBB445:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1649              		.loc 2 6752 0
 1650 0182 9068     		ldr	r0, [r2, #8]
 1651 0184 10F0010F 		tst	r0, #1
 1652 0188 00F0F580 		beq	.L211
 1653              	.LBE445:
 1654              	.LBE444:
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 1655              		.loc 1 2821 0
 1656 018c 0020     		movs	r0, #0
 1657 018e 4EE7     		b	.L123
 1658              	.LVL141:
 1659              	.L206:
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 1660              		.loc 1 2932 0 discriminator 1
 1661 0190 4869     		ldr	r0, [r1, #20]
 1662 0192 D468     		ldr	r4, [r2, #12]
 1663 0194 C4F38204 		ubfx	r4, r4, #2, #3
 1664 0198 6400     		lsls	r4, r4, #1
 1665 019a A040     		lsls	r0, r0, r4
 1666 019c BCE7     		b	.L131
 1667              	.L133:
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 1668              		.loc 1 2932 0 is_stmt 0 discriminator 5
 1669 019e 4869     		ldr	r0, [r1, #20]
 1670 01a0 D468     		ldr	r4, [r2, #12]
ARM GAS  /tmp/ccecbe7f.s 			page 244


 1671 01a2 A408     		lsrs	r4, r4, #2
 1672 01a4 04F00404 		and	r4, r4, #4
 1673 01a8 6400     		lsls	r4, r4, #1
 1674 01aa A040     		lsls	r0, r0, r4
 1675 01ac B4E7     		b	.L131
 1676              	.LVL142:
 1677              	.L207:
 1678              	.LBB446:
 1679              	.LBB439:
3252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
 1680              		.loc 2 3252 0 is_stmt 1
 1681 01ae 57F82420 		ldr	r2, [r7, r4, lsl #2]
 1682              	.LVL143:
 1683 01b2 05F0F845 		and	r5, r5, #2080374784
 1684              	.LVL144:
 1685 01b6 2843     		orrs	r0, r0, r5
 1686              	.LVL145:
 1687 01b8 40F00040 		orr	r0, r0, #-2147483648
 1688 01bc 47F82400 		str	r0, [r7, r4, lsl #2]
 1689              	.LVL146:
 1690 01c0 BEE7     		b	.L136
 1691              	.LVL147:
 1692              	.L208:
 1693              	.LBE439:
 1694              	.LBE446:
2946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturat
 1695              		.loc 1 2946 0
 1696 01c2 0D69     		ldr	r5, [r1, #16]
 1697 01c4 C869     		ldr	r0, [r1, #28]
 1698              	.LVL148:
 1699              	.LBB447:
 1700              	.LBB448:
3558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 1701              		.loc 2 3558 0
 1702 01c6 6032     		adds	r2, r2, #96
 1703              	.LVL149:
3560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSETPOS,
 1704              		.loc 2 3560 0
 1705 01c8 52F82540 		ldr	r4, [r2, r5, lsl #2]
 1706 01cc 24F08074 		bic	r4, r4, #16777216
 1707 01d0 2043     		orrs	r0, r0, r4
 1708              	.LVL150:
 1709 01d2 42F82500 		str	r0, [r2, r5, lsl #2]
 1710              	.LVL151:
 1711              	.LBE448:
 1712              	.LBE447:
2947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 1713              		.loc 1 2947 0
 1714 01d6 1A68     		ldr	r2, [r3]
 1715 01d8 0C69     		ldr	r4, [r1, #16]
 1716 01da 91F82000 		ldrb	r0, [r1, #32]	@ zero_extendqisi2
 1717 01de 0128     		cmp	r0, #1
 1718 01e0 0BD0     		beq	.L212
 1719              	.L138:
 1720              	.LVL152:
 1721              	.LBB449:
 1722              	.LBB450:
ARM GAS  /tmp/ccecbe7f.s 			page 245


3492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 1723              		.loc 2 3492 0 discriminator 4
 1724 01e2 4D48     		ldr	r0, .L232
 1725 01e4 8242     		cmp	r2, r0
 1726 01e6 CBD1     		bne	.L129
 1727              	.LBB451:
3494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 1728              		.loc 2 3494 0
 1729 01e8 6032     		adds	r2, r2, #96
 1730              	.LVL153:
3496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_SATEN,
 1731              		.loc 2 3496 0
 1732 01ea 52F82400 		ldr	r0, [r2, r4, lsl #2]
 1733 01ee 20F00070 		bic	r0, r0, #33554432
 1734 01f2 3043     		orrs	r0, r0, r6
 1735 01f4 42F82400 		str	r0, [r2, r4, lsl #2]
 1736              	.LVL154:
 1737 01f8 C2E7     		b	.L129
 1738              	.LVL155:
 1739              	.L212:
 1740              	.LBE451:
 1741              	.LBE450:
 1742              	.LBE449:
2947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 1743              		.loc 1 2947 0
 1744 01fa 4FF00076 		mov	r6, #33554432
 1745 01fe F0E7     		b	.L138
 1746              	.L209:
2954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 1747              		.loc 1 2954 0
 1748 0200 4FF00044 		mov	r4, #-2147483648
 1749 0204 A6E7     		b	.L139
 1750              	.L210:
2958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 1751              		.loc 1 2958 0
 1752 0206 4FF40066 		mov	r6, #2048
 1753 020a B0E7     		b	.L140
 1754              	.LVL156:
 1755              	.L134:
2968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 1756              		.loc 1 2968 0
 1757 020c 4248     		ldr	r0, .L232
 1758              	.LVL157:
 1759 020e 8242     		cmp	r2, r0
 1760 0210 26D0     		beq	.L213
2990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1761              		.loc 1 2990 0
 1762 0212 106E     		ldr	r0, [r2, #96]
 1763 0214 00F0F840 		and	r0, r0, #2080374784
 1764 0218 0C68     		ldr	r4, [r1]
 1765 021a B0EB846F 		cmp	r0, r4, lsl #26
 1766 021e 00F09B80 		beq	.L214
 1767              	.L156:
2994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1768              		.loc 1 2994 0
 1769 0222 1868     		ldr	r0, [r3]
 1770 0224 426E     		ldr	r2, [r0, #100]
ARM GAS  /tmp/ccecbe7f.s 			page 246


 1771 0226 02F0F842 		and	r2, r2, #2080374784
 1772 022a 0C68     		ldr	r4, [r1]
 1773 022c B2EB846F 		cmp	r2, r4, lsl #26
 1774 0230 00F09780 		beq	.L215
 1775              	.L157:
2998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1776              		.loc 1 2998 0
 1777 0234 1868     		ldr	r0, [r3]
 1778 0236 826E     		ldr	r2, [r0, #104]
 1779 0238 02F0F842 		and	r2, r2, #2080374784
 1780 023c 0C68     		ldr	r4, [r1]
 1781 023e B2EB846F 		cmp	r2, r4, lsl #26
 1782 0242 00F09380 		beq	.L216
 1783              	.L158:
3002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1784              		.loc 1 3002 0
 1785 0246 1868     		ldr	r0, [r3]
 1786 0248 C26E     		ldr	r2, [r0, #108]
 1787 024a 02F0F842 		and	r2, r2, #2080374784
 1788 024e 0C68     		ldr	r4, [r1]
 1789 0250 B2EB846F 		cmp	r2, r4, lsl #26
 1790 0254 94D1     		bne	.L129
3004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 1791              		.loc 1 3004 0
 1792 0256 C26E     		ldr	r2, [r0, #108]
 1793 0258 22F00042 		bic	r2, r2, #-2147483648
 1794 025c C266     		str	r2, [r0, #108]
 1795 025e 8FE7     		b	.L129
 1796              	.L213:
 1797              	.LVL158:
 1798              	.LBB452:
 1799              	.LBB453:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1800              		.loc 2 3332 0
 1801 0260 106E     		ldr	r0, [r2, #96]
 1802              	.LVL159:
 1803              	.LBE453:
 1804              	.LBE452:
 1805              	.LBB454:
 1806              	.LBB455:
 1807 0262 146E     		ldr	r4, [r2, #96]
 1808              	.LVL160:
 1809              	.LBE455:
 1810              	.LBE454:
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1811              		.loc 1 2970 0
 1812 0264 C4F38464 		ubfx	r4, r4, #26, #5
 1813 0268 0868     		ldr	r0, [r1]
 1814 026a C0F31305 		ubfx	r5, r0, #0, #20
 1815 026e 002D     		cmp	r5, #0
 1816 0270 36D1     		bne	.L142
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1817              		.loc 1 2970 0 is_stmt 0 discriminator 5
 1818 0272 C0F38460 		ubfx	r0, r0, #26, #5
 1819              	.L143:
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1820              		.loc 1 2970 0 discriminator 8
ARM GAS  /tmp/ccecbe7f.s 			page 247


 1821 0276 8442     		cmp	r4, r0
 1822 0278 37D0     		beq	.L217
 1823              	.L144:
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1824              		.loc 1 2974 0 is_stmt 1
 1825 027a 1C68     		ldr	r4, [r3]
 1826              	.LVL161:
 1827              	.LBB456:
 1828              	.LBB457:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1829              		.loc 2 3332 0
 1830 027c 626E     		ldr	r2, [r4, #100]
 1831              	.LVL162:
 1832              	.LBE457:
 1833              	.LBE456:
 1834              	.LBB458:
 1835              	.LBB459:
 1836 027e 606E     		ldr	r0, [r4, #100]
 1837              	.LVL163:
 1838              	.LBE459:
 1839              	.LBE458:
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1840              		.loc 1 2974 0
 1841 0280 C0F38460 		ubfx	r0, r0, #26, #5
 1842 0284 0A68     		ldr	r2, [r1]
 1843 0286 C2F31305 		ubfx	r5, r2, #0, #20
 1844 028a 002D     		cmp	r5, #0
 1845 028c 32D1     		bne	.L145
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1846              		.loc 1 2974 0 is_stmt 0 discriminator 5
 1847 028e C2F38462 		ubfx	r2, r2, #26, #5
 1848              	.L146:
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1849              		.loc 1 2974 0 discriminator 8
 1850 0292 9042     		cmp	r0, r2
 1851 0294 33D0     		beq	.L218
 1852              	.L147:
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1853              		.loc 1 2978 0 is_stmt 1
 1854 0296 1C68     		ldr	r4, [r3]
 1855              	.LVL164:
 1856              	.LBB460:
 1857              	.LBB461:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1858              		.loc 2 3332 0
 1859 0298 A26E     		ldr	r2, [r4, #104]
 1860              	.LVL165:
 1861              	.LBE461:
 1862              	.LBE460:
 1863              	.LBB462:
 1864              	.LBB463:
 1865 029a A06E     		ldr	r0, [r4, #104]
 1866              	.LVL166:
 1867              	.LBE463:
 1868              	.LBE462:
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1869              		.loc 1 2978 0
ARM GAS  /tmp/ccecbe7f.s 			page 248


 1870 029c C0F38460 		ubfx	r0, r0, #26, #5
 1871 02a0 0A68     		ldr	r2, [r1]
 1872 02a2 C2F31305 		ubfx	r5, r2, #0, #20
 1873 02a6 002D     		cmp	r5, #0
 1874 02a8 3AD1     		bne	.L149
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1875              		.loc 1 2978 0 is_stmt 0 discriminator 5
 1876 02aa C2F38462 		ubfx	r2, r2, #26, #5
 1877              	.L150:
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1878              		.loc 1 2978 0 discriminator 8
 1879 02ae 9042     		cmp	r0, r2
 1880 02b0 3BD0     		beq	.L219
 1881              	.L151:
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1882              		.loc 1 2982 0 is_stmt 1
 1883 02b2 1C68     		ldr	r4, [r3]
 1884              	.LVL167:
 1885              	.LBB464:
 1886              	.LBB465:
3332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 1887              		.loc 2 3332 0
 1888 02b4 E26E     		ldr	r2, [r4, #108]
 1889              	.LVL168:
 1890              	.LBE465:
 1891              	.LBE464:
 1892              	.LBB466:
 1893              	.LBB467:
 1894 02b6 E06E     		ldr	r0, [r4, #108]
 1895              	.LVL169:
 1896              	.LBE467:
 1897              	.LBE466:
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1898              		.loc 1 2982 0
 1899 02b8 C0F38460 		ubfx	r0, r0, #26, #5
 1900 02bc 0A68     		ldr	r2, [r1]
 1901 02be C2F31305 		ubfx	r5, r2, #0, #20
 1902 02c2 002D     		cmp	r5, #0
 1903 02c4 3ED1     		bne	.L153
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1904              		.loc 1 2982 0 is_stmt 0 discriminator 5
 1905 02c6 C2F38462 		ubfx	r2, r2, #26, #5
 1906              	.L154:
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1907              		.loc 1 2982 0 discriminator 8
 1908 02ca 9042     		cmp	r0, r2
 1909 02cc 7FF458AF 		bne	.L129
 1910              	.LVL170:
 1911              	.LBB468:
 1912              	.LBB469:
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 1913              		.loc 2 3626 0 is_stmt 1
 1914 02d0 114A     		ldr	r2, .L232
 1915 02d2 9442     		cmp	r4, r2
 1916 02d4 3BD0     		beq	.L220
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
 1917              		.loc 2 3634 0
ARM GAS  /tmp/ccecbe7f.s 			page 249


 1918 02d6 E26E     		ldr	r2, [r4, #108]
 1919 02d8 22F00042 		bic	r2, r2, #-2147483648
 1920 02dc E266     		str	r2, [r4, #108]
 1921 02de 4FE7     		b	.L129
 1922              	.LVL171:
 1923              	.L142:
 1924              	.LBE469:
 1925              	.LBE468:
 1926              	.LBB471:
 1927              	.LBB472:
 1928              		.loc 3 988 0 discriminator 6
 1929              		.syntax unified
 1930              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1931 02e0 90FAA0F0 		rbit r0, r0
 1932              	@ 0 "" 2
 1933              	.LVL172:
 1934              		.thumb
 1935              		.syntax unified
 1936              	.LBE472:
 1937              	.LBE471:
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1938              		.loc 1 2970 0 discriminator 6
 1939 02e4 B0FA80F0 		clz	r0, r0
 1940 02e8 C5E7     		b	.L143
 1941              	.L217:
 1942              	.LVL173:
 1943              	.LBB473:
 1944              	.LBB474:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 1945              		.loc 2 3628 0
 1946 02ea 106E     		ldr	r0, [r2, #96]
 1947 02ec 20F00040 		bic	r0, r0, #-2147483648
 1948 02f0 1066     		str	r0, [r2, #96]
 1949 02f2 C2E7     		b	.L144
 1950              	.LVL174:
 1951              	.L145:
 1952              	.LBE474:
 1953              	.LBE473:
 1954              	.LBB475:
 1955              	.LBB476:
 1956              		.loc 3 988 0 discriminator 6
 1957              		.syntax unified
 1958              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1959 02f4 92FAA2F2 		rbit r2, r2
 1960              	@ 0 "" 2
 1961              	.LVL175:
 1962              		.thumb
 1963              		.syntax unified
 1964              	.LBE476:
 1965              	.LBE475:
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 1966              		.loc 1 2974 0 discriminator 6
 1967 02f8 B2FA82F2 		clz	r2, r2
 1968 02fc C9E7     		b	.L146
 1969              	.L218:
 1970              	.LVL176:
 1971              	.LBB477:
ARM GAS  /tmp/ccecbe7f.s 			page 250


 1972              	.LBB478:
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 1973              		.loc 2 3626 0
 1974 02fe 064A     		ldr	r2, .L232
 1975 0300 9442     		cmp	r4, r2
 1976 0302 04D0     		beq	.L221
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
 1977              		.loc 2 3634 0
 1978 0304 626E     		ldr	r2, [r4, #100]
 1979 0306 22F00042 		bic	r2, r2, #-2147483648
 1980 030a 6266     		str	r2, [r4, #100]
 1981 030c C3E7     		b	.L147
 1982              	.L221:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 1983              		.loc 2 3628 0
 1984 030e 626E     		ldr	r2, [r4, #100]
 1985 0310 22F00042 		bic	r2, r2, #-2147483648
 1986 0314 6266     		str	r2, [r4, #100]
 1987 0316 BEE7     		b	.L147
 1988              	.L233:
 1989              		.align	2
 1990              	.L232:
 1991 0318 00600258 		.word	1476550656
 1992 031c 0010005C 		.word	1543507968
 1993              	.LVL177:
 1994              	.L149:
 1995              	.LBE478:
 1996              	.LBE477:
 1997              	.LBB479:
 1998              	.LBB480:
 1999              		.loc 3 988 0 discriminator 6
 2000              		.syntax unified
 2001              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2002 0320 92FAA2F2 		rbit r2, r2
 2003              	@ 0 "" 2
 2004              	.LVL178:
 2005              		.thumb
 2006              		.syntax unified
 2007              	.LBE480:
 2008              	.LBE479:
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2009              		.loc 1 2978 0 discriminator 6
 2010 0324 B2FA82F2 		clz	r2, r2
 2011 0328 C1E7     		b	.L150
 2012              	.L219:
 2013              	.LVL179:
 2014              	.LBB481:
 2015              	.LBB482:
3626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 2016              		.loc 2 3626 0
 2017 032a B34A     		ldr	r2, .L234
 2018 032c 9442     		cmp	r4, r2
 2019 032e 04D0     		beq	.L222
3634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC_OFR1_SSATE,
 2020              		.loc 2 3634 0
 2021 0330 A26E     		ldr	r2, [r4, #104]
 2022 0332 22F00042 		bic	r2, r2, #-2147483648
ARM GAS  /tmp/ccecbe7f.s 			page 251


 2023 0336 A266     		str	r2, [r4, #104]
 2024 0338 BBE7     		b	.L151
 2025              	.L222:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 2026              		.loc 2 3628 0
 2027 033a A26E     		ldr	r2, [r4, #104]
 2028 033c 22F00042 		bic	r2, r2, #-2147483648
 2029 0340 A266     		str	r2, [r4, #104]
 2030 0342 B6E7     		b	.L151
 2031              	.LVL180:
 2032              	.L153:
 2033              	.LBE482:
 2034              	.LBE481:
 2035              	.LBB483:
 2036              	.LBB484:
 2037              		.loc 3 988 0 discriminator 6
 2038              		.syntax unified
 2039              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2040 0344 92FAA2F2 		rbit r2, r2
 2041              	@ 0 "" 2
 2042              	.LVL181:
 2043              		.thumb
 2044              		.syntax unified
 2045              	.LBE484:
 2046              	.LBE483:
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2047              		.loc 1 2982 0 discriminator 6
 2048 0348 B2FA82F2 		clz	r2, r2
 2049 034c BDE7     		b	.L154
 2050              	.LVL182:
 2051              	.L220:
 2052              	.LBB485:
 2053              	.LBB470:
3628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_OFR1_OFFSET1_EN,
 2054              		.loc 2 3628 0
 2055 034e E26E     		ldr	r2, [r4, #108]
 2056 0350 22F00042 		bic	r2, r2, #-2147483648
 2057 0354 E266     		str	r2, [r4, #108]
 2058 0356 13E7     		b	.L129
 2059              	.LVL183:
 2060              	.L214:
 2061              	.LBE470:
 2062              	.LBE485:
2992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 2063              		.loc 1 2992 0
 2064 0358 106E     		ldr	r0, [r2, #96]
 2065 035a 20F00040 		bic	r0, r0, #-2147483648
 2066 035e 1066     		str	r0, [r2, #96]
 2067 0360 5FE7     		b	.L156
 2068              	.L215:
2996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 2069              		.loc 1 2996 0
 2070 0362 426E     		ldr	r2, [r0, #100]
 2071 0364 22F00042 		bic	r2, r2, #-2147483648
 2072 0368 4266     		str	r2, [r0, #100]
 2073 036a 63E7     		b	.L157
 2074              	.L216:
ARM GAS  /tmp/ccecbe7f.s 			page 252


3000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 2075              		.loc 1 3000 0
 2076 036c 826E     		ldr	r2, [r0, #104]
 2077 036e 22F00042 		bic	r2, r2, #-2147483648
 2078 0372 8266     		str	r2, [r0, #104]
 2079 0374 67E7     		b	.L158
 2080              	.LVL184:
 2081              	.L211:
3018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2082              		.loc 1 3018 0
 2083 0376 0868     		ldr	r0, [r1]
 2084 0378 CD68     		ldr	r5, [r1, #12]
 2085              	.LVL185:
 2086              	.LBB486:
 2087              	.LBB487:
5428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 2088              		.loc 2 5428 0
 2089 037a 9F4C     		ldr	r4, .L234
 2090 037c A242     		cmp	r2, r4
 2091 037e 1AD0     		beq	.L223
5436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 2092              		.loc 2 5436 0
 2093 0380 D2F8C040 		ldr	r4, [r2, #192]
 2094 0384 C0F31306 		ubfx	r6, r0, #0, #20
 2095 0388 24EA0604 		bic	r4, r4, r6
 2096 038c 05F01805 		and	r5, r5, #24
 2097              	.LVL186:
 2098 0390 9A4E     		ldr	r6, .L234+4
 2099 0392 26FA05F5 		lsr	r5, r6, r5
 2100 0396 2840     		ands	r0, r0, r5
 2101              	.LVL187:
 2102 0398 C0F31300 		ubfx	r0, r0, #0, #20
 2103 039c 2043     		orrs	r0, r0, r4
 2104 039e C2F8C000 		str	r0, [r2, #192]
 2105              	.LVL188:
 2106              	.L160:
 2107              	.LBE487:
 2108              	.LBE486:
3021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2109              		.loc 1 3021 0
 2110 03a2 C868     		ldr	r0, [r1, #12]
 2111 03a4 964A     		ldr	r2, .L234+8
 2112 03a6 9042     		cmp	r0, r2
 2113 03a8 17D0     		beq	.L224
 2114              	.L161:
3036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2115              		.loc 1 3036 0
 2116 03aa 0A68     		ldr	r2, [r1]
 2117 03ac 002A     		cmp	r2, #0
 2118 03ae C0F2B380 		blt	.L225
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2119              		.loc 1 2821 0
 2120 03b2 0020     		movs	r0, #0
 2121 03b4 3BE6     		b	.L123
 2122              	.LVL189:
 2123              	.L223:
 2124              	.LBB489:
ARM GAS  /tmp/ccecbe7f.s 			page 253


 2125              	.LBB488:
5430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
 2126              		.loc 2 5430 0
 2127 03b6 D2F8B060 		ldr	r6, [r2, #176]
 2128 03ba C0F31304 		ubfx	r4, r0, #0, #20
 2129 03be 26EA0406 		bic	r6, r6, r4
 2130 03c2 05F01805 		and	r5, r5, #24
 2131              	.LVL190:
 2132 03c6 8D4C     		ldr	r4, .L234+4
 2133 03c8 24FA05F5 		lsr	r5, r4, r5
 2134 03cc 2840     		ands	r0, r0, r5
 2135              	.LVL191:
 2136 03ce C0F31300 		ubfx	r0, r0, #0, #20
 2137 03d2 3043     		orrs	r0, r0, r6
 2138 03d4 C2F8B000 		str	r0, [r2, #176]
 2139              	.LVL192:
 2140 03d8 E3E7     		b	.L160
 2141              	.LVL193:
 2142              	.L224:
 2143              	.LBE488:
 2144              	.LBE489:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2145              		.loc 1 3025 0
 2146 03da 1D68     		ldr	r5, [r3]
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2147              		.loc 1 3026 0
 2148 03dc 0A68     		ldr	r2, [r1]
 2149 03de C2F31306 		ubfx	r6, r2, #0, #20
 2150 03e2 96BB     		cbnz	r6, .L162
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2151              		.loc 1 3026 0 is_stmt 0 discriminator 1
 2152 03e4 900E     		lsrs	r0, r2, #26
 2153 03e6 0130     		adds	r0, r0, #1
 2154 03e8 00F01F00 		and	r0, r0, #31
 2155 03ec 0928     		cmp	r0, #9
 2156 03ee 8CBF     		ite	hi
 2157 03f0 0020     		movhi	r0, #0
 2158 03f2 0120     		movls	r0, #1
 2159              	.L163:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2160              		.loc 1 3025 0 is_stmt 1
 2161 03f4 0028     		cmp	r0, #0
 2162 03f6 52D0     		beq	.L164
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2163              		.loc 1 3026 0
 2164 03f8 9EBB     		cbnz	r6, .L165
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2165              		.loc 1 3026 0 is_stmt 0 discriminator 3
 2166 03fa 940E     		lsrs	r4, r2, #26
 2167 03fc 0134     		adds	r4, r4, #1
 2168 03fe A406     		lsls	r4, r4, #26
 2169 0400 04F0F844 		and	r4, r4, #2080374784
 2170              	.L166:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2171              		.loc 1 3026 0 discriminator 6
 2172 0404 B6BB     		cbnz	r6, .L167
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
ARM GAS  /tmp/ccecbe7f.s 			page 254


 2173              		.loc 1 3026 0 discriminator 7
 2174 0406 900E     		lsrs	r0, r2, #26
 2175 0408 0130     		adds	r0, r0, #1
 2176 040a 00F01F07 		and	r7, r0, #31
 2177 040e 0120     		movs	r0, #1
 2178 0410 B840     		lsls	r0, r0, r7
 2179              	.L168:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2180              		.loc 1 3026 0 discriminator 10
 2181 0412 0443     		orrs	r4, r4, r0
 2182 0414 C6BB     		cbnz	r6, .L169
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2183              		.loc 1 3026 0 discriminator 11
 2184 0416 920E     		lsrs	r2, r2, #26
 2185 0418 0132     		adds	r2, r2, #1
 2186 041a 02F01F02 		and	r2, r2, #31
 2187 041e 02EB4202 		add	r2, r2, r2, lsl #1
 2188 0422 1205     		lsls	r2, r2, #20
 2189              	.L170:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2190              		.loc 1 3025 0 is_stmt 1
 2191 0424 2243     		orrs	r2, r2, r4
 2192              	.L171:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2193              		.loc 1 3025 0 is_stmt 0 discriminator 1
 2194 0426 8C68     		ldr	r4, [r1, #8]
 2195              	.LVL194:
 2196              	.LBB490:
 2197              	.LBB491:
5282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 2198              		.loc 2 5282 0 is_stmt 1 discriminator 1
 2199 0428 1435     		adds	r5, r5, #20
 2200              	.LVL195:
 2201 042a 500E     		lsrs	r0, r2, #25
 2202 042c 8000     		lsls	r0, r0, #2
 2203 042e 00F00400 		and	r0, r0, #4
 2204              	.LVL196:
5284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BIT
 2205              		.loc 2 5284 0 discriminator 1
 2206 0432 2E58     		ldr	r6, [r5, r0]
 2207 0434 C2F30452 		ubfx	r2, r2, #20, #5
 2208              	.LVL197:
 2209 0438 0727     		movs	r7, #7
 2210 043a 9740     		lsls	r7, r7, r2
 2211 043c 26EA0706 		bic	r6, r6, r7
 2212 0440 04FA02F2 		lsl	r2, r4, r2
 2213 0444 3243     		orrs	r2, r2, r6
 2214 0446 2A50     		str	r2, [r5, r0]
 2215              	.LVL198:
 2216 0448 AFE7     		b	.L161
 2217              	.LVL199:
 2218              	.L162:
 2219              	.LBE491:
 2220              	.LBE490:
 2221              	.LBB492:
 2222              	.LBB493:
 2223              		.loc 3 988 0 discriminator 2
ARM GAS  /tmp/ccecbe7f.s 			page 255


 2224              		.syntax unified
 2225              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2226 044a 92FAA2F0 		rbit r0, r2
 2227              	@ 0 "" 2
 2228              	.LVL200:
 2229              		.thumb
 2230              		.syntax unified
 2231              	.LBE493:
 2232              	.LBE492:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2233              		.loc 1 3026 0 discriminator 2
 2234 044e B0FA80F0 		clz	r0, r0
 2235 0452 0130     		adds	r0, r0, #1
 2236 0454 00F01F00 		and	r0, r0, #31
 2237 0458 0928     		cmp	r0, #9
 2238 045a 8CBF     		ite	hi
 2239 045c 0020     		movhi	r0, #0
 2240 045e 0120     		movls	r0, #1
 2241 0460 C8E7     		b	.L163
 2242              	.L165:
 2243              	.LVL201:
 2244              	.LBB494:
 2245              	.LBB495:
 2246              		.loc 3 988 0 discriminator 4
 2247              		.syntax unified
 2248              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2249 0462 92FAA2F4 		rbit r4, r2
 2250              	@ 0 "" 2
 2251              	.LVL202:
 2252              		.thumb
 2253              		.syntax unified
 2254              	.LBE495:
 2255              	.LBE494:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2256              		.loc 1 3026 0 discriminator 4
 2257 0466 B4FA84F4 		clz	r4, r4
 2258 046a 0134     		adds	r4, r4, #1
 2259 046c A406     		lsls	r4, r4, #26
 2260 046e 04F0F844 		and	r4, r4, #2080374784
 2261 0472 C7E7     		b	.L166
 2262              	.L167:
 2263              	.LVL203:
 2264              	.LBB496:
 2265              	.LBB497:
 2266              		.loc 3 988 0 discriminator 8
 2267              		.syntax unified
 2268              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2269 0474 92FAA2F0 		rbit r0, r2
 2270              	@ 0 "" 2
 2271              	.LVL204:
 2272              		.thumb
 2273              		.syntax unified
 2274              	.LBE497:
 2275              	.LBE496:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2276              		.loc 1 3026 0 discriminator 8
 2277 0478 B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccecbe7f.s 			page 256


 2278 047c 0130     		adds	r0, r0, #1
 2279 047e 00F01F07 		and	r7, r0, #31
 2280 0482 0120     		movs	r0, #1
 2281 0484 B840     		lsls	r0, r0, r7
 2282 0486 C4E7     		b	.L168
 2283              	.L169:
 2284              	.LVL205:
 2285              	.LBB498:
 2286              	.LBB499:
 2287              		.loc 3 988 0 discriminator 12
 2288              		.syntax unified
 2289              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2290 0488 92FAA2F2 		rbit r2, r2
 2291              	@ 0 "" 2
 2292              	.LVL206:
 2293              		.thumb
 2294              		.syntax unified
 2295              	.LBE499:
 2296              	.LBE498:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2297              		.loc 1 3026 0 discriminator 12
 2298 048c B2FA82F2 		clz	r2, r2
 2299 0490 0132     		adds	r2, r2, #1
 2300 0492 02F01F02 		and	r2, r2, #31
 2301 0496 02EB4202 		add	r2, r2, r2, lsl #1
 2302 049a 1205     		lsls	r2, r2, #20
 2303 049c C2E7     		b	.L170
 2304              	.L164:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2305              		.loc 1 3026 0 is_stmt 0
 2306 049e CEB9     		cbnz	r6, .L172
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2307              		.loc 1 3026 0 discriminator 13
 2308 04a0 940E     		lsrs	r4, r2, #26
 2309 04a2 0134     		adds	r4, r4, #1
 2310 04a4 A406     		lsls	r4, r4, #26
 2311 04a6 04F0F844 		and	r4, r4, #2080374784
 2312              	.L173:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2313              		.loc 1 3026 0 discriminator 16
 2314 04aa E6B9     		cbnz	r6, .L174
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2315              		.loc 1 3026 0 discriminator 17
 2316 04ac 900E     		lsrs	r0, r2, #26
 2317 04ae 0130     		adds	r0, r0, #1
 2318 04b0 00F01F07 		and	r7, r0, #31
 2319 04b4 0120     		movs	r0, #1
 2320 04b6 B840     		lsls	r0, r0, r7
 2321              	.L175:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2322              		.loc 1 3026 0 discriminator 20
 2323 04b8 0443     		orrs	r4, r4, r0
 2324 04ba F6B9     		cbnz	r6, .L176
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2325              		.loc 1 3026 0 discriminator 21
 2326 04bc 900E     		lsrs	r0, r2, #26
 2327 04be 0130     		adds	r0, r0, #1
ARM GAS  /tmp/ccecbe7f.s 			page 257


 2328 04c0 00F01F00 		and	r0, r0, #31
 2329 04c4 00EB4002 		add	r2, r0, r0, lsl #1
 2330 04c8 1E3A     		subs	r2, r2, #30
 2331 04ca 1205     		lsls	r2, r2, #20
 2332 04cc 42F00072 		orr	r2, r2, #33554432
 2333              	.L177:
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_T
 2334              		.loc 1 3025 0 is_stmt 1 discriminator 2
 2335 04d0 2243     		orrs	r2, r2, r4
 2336 04d2 A8E7     		b	.L171
 2337              	.L172:
 2338              	.LVL207:
 2339              	.LBB500:
 2340              	.LBB501:
 2341              		.loc 3 988 0 discriminator 14
 2342              		.syntax unified
 2343              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2344 04d4 92FAA2F4 		rbit r4, r2
 2345              	@ 0 "" 2
 2346              	.LVL208:
 2347              		.thumb
 2348              		.syntax unified
 2349              	.LBE501:
 2350              	.LBE500:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2351              		.loc 1 3026 0 discriminator 14
 2352 04d8 B4FA84F4 		clz	r4, r4
 2353 04dc 0134     		adds	r4, r4, #1
 2354 04de A406     		lsls	r4, r4, #26
 2355 04e0 04F0F844 		and	r4, r4, #2080374784
 2356 04e4 E1E7     		b	.L173
 2357              	.L174:
 2358              	.LVL209:
 2359              	.LBB502:
 2360              	.LBB503:
 2361              		.loc 3 988 0 discriminator 18
 2362              		.syntax unified
 2363              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2364 04e6 92FAA2F0 		rbit r0, r2
 2365              	@ 0 "" 2
 2366              	.LVL210:
 2367              		.thumb
 2368              		.syntax unified
 2369              	.LBE503:
 2370              	.LBE502:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2371              		.loc 1 3026 0 discriminator 18
 2372 04ea B0FA80F0 		clz	r0, r0
 2373 04ee 0130     		adds	r0, r0, #1
 2374 04f0 00F01F07 		and	r7, r0, #31
 2375 04f4 0120     		movs	r0, #1
 2376 04f6 B840     		lsls	r0, r0, r7
 2377 04f8 DEE7     		b	.L175
 2378              	.L176:
 2379              	.LVL211:
 2380              	.LBB504:
 2381              	.LBB505:
ARM GAS  /tmp/ccecbe7f.s 			page 258


 2382              		.loc 3 988 0 discriminator 22
 2383              		.syntax unified
 2384              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 2385 04fa 92FAA2F0 		rbit r0, r2
 2386              	@ 0 "" 2
 2387              	.LVL212:
 2388              		.thumb
 2389              		.syntax unified
 2390              	.LBE505:
 2391              	.LBE504:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                       sConfig->SamplingTime);
 2392              		.loc 1 3026 0 discriminator 22
 2393 04fe B0FA80F0 		clz	r0, r0
 2394 0502 0130     		adds	r0, r0, #1
 2395 0504 00F01F00 		and	r0, r0, #31
 2396 0508 00EB4000 		add	r0, r0, r0, lsl #1
 2397 050c A0F11E02 		sub	r2, r0, #30
 2398 0510 1205     		lsls	r2, r2, #20
 2399 0512 42F00072 		orr	r2, r2, #33554432
 2400 0516 DBE7     		b	.L177
 2401              	.L225:
3040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2402              		.loc 1 3040 0
 2403 0518 1968     		ldr	r1, [r3]
 2404              	.LVL213:
 2405 051a 3A48     		ldr	r0, .L234+12
 2406 051c 3A4C     		ldr	r4, .L234+16
 2407 051e A142     		cmp	r1, r4
 2408 0520 18BF     		it	ne
 2409 0522 8142     		cmpne	r1, r0
 2410 0524 0CBF     		ite	eq
 2411 0526 0120     		moveq	r0, #1
 2412 0528 0020     		movne	r0, #0
 2413 052a 21D1     		bne	.L195
 2414 052c 374D     		ldr	r5, .L234+20
 2415              	.L178:
 2416              	.LVL214:
 2417              	.LBB506:
 2418              	.LBB507:
2738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2419              		.loc 2 2738 0 discriminator 4
 2420 052e AC68     		ldr	r4, [r5, #8]
 2421 0530 04F0E076 		and	r6, r4, #29360128
 2422              	.LVL215:
 2423              	.LBE507:
 2424              	.LBE506:
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 2425              		.loc 1 3044 0 discriminator 4
 2426 0534 10B3     		cbz	r0, .L179
 2427              	.LVL216:
 2428              	.LBB508:
 2429              	.LBB509:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2430              		.loc 2 6752 0
 2431 0536 3348     		ldr	r0, .L234+12
 2432 0538 8068     		ldr	r0, [r0, #8]
 2433 053a 10F0010F 		tst	r0, #1
ARM GAS  /tmp/ccecbe7f.s 			page 259


 2434 053e 19D0     		beq	.L196
 2435 0540 0120     		movs	r0, #1
 2436              	.L180:
 2437              	.LVL217:
 2438              	.LBE509:
 2439              	.LBE508:
 2440              	.LBB511:
 2441              	.LBB512:
 2442 0542 314F     		ldr	r7, .L234+16
 2443 0544 BF68     		ldr	r7, [r7, #8]
 2444 0546 17F0010F 		tst	r7, #1
 2445 054a 15D0     		beq	.L197
 2446 054c 0127     		movs	r7, #1
 2447              	.L181:
 2448              	.LVL218:
 2449              	.LBE512:
 2450              	.LBE511:
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 2451              		.loc 1 3044 0
 2452 054e 3843     		orrs	r0, r7, r0
 2453 0550 0CBF     		ite	eq
 2454 0552 0120     		moveq	r0, #1
 2455 0554 0020     		movne	r0, #0
 2456              	.L182:
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 2457              		.loc 1 3044 0 is_stmt 0 discriminator 4
 2458 0556 0028     		cmp	r0, #0
 2459 0558 77D0     		beq	.L184
3048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2460              		.loc 1 3048 0 is_stmt 1
 2461 055a 2D48     		ldr	r0, .L234+24
 2462 055c 8242     		cmp	r2, r0
 2463 055e 18D0     		beq	.L226
 2464              	.L185:
3066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2465              		.loc 1 3066 0
 2466 0560 2C48     		ldr	r0, .L234+28
 2467 0562 8242     		cmp	r2, r0
 2468 0564 36D0     		beq	.L227
 2469              	.L188:
3073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2470              		.loc 1 3073 0
 2471 0566 2C48     		ldr	r0, .L234+32
 2472 0568 8242     		cmp	r2, r0
 2473 056a 5DD0     		beq	.L228
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2474              		.loc 1 2821 0
 2475 056c 0020     		movs	r0, #0
 2476 056e 5EE5     		b	.L123
 2477              	.L195:
3040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2478              		.loc 1 3040 0
 2479 0570 2A4D     		ldr	r5, .L234+36
 2480 0572 DCE7     		b	.L178
 2481              	.LVL219:
 2482              	.L196:
 2483              	.LBB514:
ARM GAS  /tmp/ccecbe7f.s 			page 260


 2484              	.LBB510:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2485              		.loc 2 6752 0
 2486 0574 0020     		movs	r0, #0
 2487 0576 E4E7     		b	.L180
 2488              	.LVL220:
 2489              	.L197:
 2490              	.LBE510:
 2491              	.LBE514:
 2492              	.LBB515:
 2493              	.LBB513:
 2494 0578 0027     		movs	r7, #0
 2495 057a E8E7     		b	.L181
 2496              	.LVL221:
 2497              	.L179:
 2498              	.LBE513:
 2499              	.LBE515:
 2500              	.LBB516:
 2501              	.LBB517:
 2502 057c 1E48     		ldr	r0, .L234
 2503 057e 8068     		ldr	r0, [r0, #8]
 2504 0580 10F0010F 		tst	r0, #1
 2505 0584 03D0     		beq	.L198
 2506 0586 0120     		movs	r0, #1
 2507              	.L183:
 2508              	.LVL222:
 2509              	.LBE517:
 2510              	.LBE516:
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 2511              		.loc 1 3044 0
 2512 0588 80F00100 		eor	r0, r0, #1
 2513 058c E3E7     		b	.L182
 2514              	.LVL223:
 2515              	.L198:
 2516              	.LBB519:
 2517              	.LBB518:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2518              		.loc 2 6752 0
 2519 058e 0020     		movs	r0, #0
 2520 0590 FAE7     		b	.L183
 2521              	.LVL224:
 2522              	.L226:
 2523              	.LBE518:
 2524              	.LBE519:
3048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2525              		.loc 1 3048 0 discriminator 1
 2526 0592 14F4000F 		tst	r4, #8388608
 2527 0596 E3D1     		bne	.L185
3050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 2528              		.loc 1 3050 0
 2529 0598 174A     		ldr	r2, .L234
 2530 059a 9142     		cmp	r1, r2
 2531 059c 01D0     		beq	.L229
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2532              		.loc 1 2821 0
 2533 059e 0020     		movs	r0, #0
 2534 05a0 45E5     		b	.L123
ARM GAS  /tmp/ccecbe7f.s 			page 261


 2535              	.L229:
3052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2536              		.loc 1 3052 0 discriminator 4
 2537 05a2 46F40002 		orr	r2, r6, #8388608
 2538              	.LVL225:
 2539              	.LBB520:
 2540              	.LBB521:
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2541              		.loc 2 2716 0 discriminator 4
 2542 05a6 A968     		ldr	r1, [r5, #8]
 2543 05a8 21F0E071 		bic	r1, r1, #29360128
 2544 05ac 0A43     		orrs	r2, r2, r1
 2545              	.LVL226:
 2546 05ae AA60     		str	r2, [r5, #8]
 2547              	.LVL227:
 2548              	.LBE521:
 2549              	.LBE520:
3059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               while (wait_loop_index != 0UL)
 2550              		.loc 1 3059 0 discriminator 4
 2551 05b0 1B4A     		ldr	r2, .L234+40
 2552 05b2 1268     		ldr	r2, [r2]
 2553 05b4 9209     		lsrs	r2, r2, #6
 2554 05b6 1B49     		ldr	r1, .L234+44
 2555 05b8 A1FB0212 		umull	r1, r2, r1, r2
 2556 05bc 9209     		lsrs	r2, r2, #6
 2557 05be 5200     		lsls	r2, r2, #1
 2558 05c0 0192     		str	r2, [sp, #4]
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               {
 2559              		.loc 1 3060 0 discriminator 4
 2560 05c2 02E0     		b	.L186
 2561              	.L187:
3062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               }
 2562              		.loc 1 3062 0
 2563 05c4 019A     		ldr	r2, [sp, #4]
 2564 05c6 013A     		subs	r2, r2, #1
 2565 05c8 0192     		str	r2, [sp, #4]
 2566              	.L186:
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               {
 2567              		.loc 1 3060 0
 2568 05ca 019A     		ldr	r2, [sp, #4]
 2569 05cc 002A     		cmp	r2, #0
 2570 05ce F9D1     		bne	.L187
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2571              		.loc 1 2821 0
 2572 05d0 0020     		movs	r0, #0
 2573 05d2 2CE5     		b	.L123
 2574              	.L227:
3066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2575              		.loc 1 3066 0 discriminator 1
 2576 05d4 14F0807F 		tst	r4, #16777216
 2577 05d8 C5D1     		bne	.L188
3068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 2578              		.loc 1 3068 0
 2579 05da 074A     		ldr	r2, .L234
 2580 05dc 9142     		cmp	r1, r2
 2581 05de 01D0     		beq	.L230
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
ARM GAS  /tmp/ccecbe7f.s 			page 262


 2582              		.loc 1 2821 0
 2583 05e0 0020     		movs	r0, #0
 2584 05e2 24E5     		b	.L123
 2585              	.L230:
3070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 2586              		.loc 1 3070 0 discriminator 4
 2587 05e4 46F08072 		orr	r2, r6, #16777216
 2588              	.LVL228:
 2589              	.LBB522:
 2590              	.LBB523:
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2591              		.loc 2 2716 0 discriminator 4
 2592 05e8 A968     		ldr	r1, [r5, #8]
 2593 05ea 21F0E071 		bic	r1, r1, #29360128
 2594 05ee 0A43     		orrs	r2, r2, r1
 2595              	.LVL229:
 2596 05f0 AA60     		str	r2, [r5, #8]
 2597              	.LBE523:
 2598              	.LBE522:
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2599              		.loc 1 2821 0 discriminator 4
 2600 05f2 0020     		movs	r0, #0
 2601 05f4 1BE5     		b	.L123
 2602              	.L235:
 2603 05f6 00BF     		.align	2
 2604              	.L234:
 2605 05f8 00600258 		.word	1476550656
 2606 05fc FFFF0F00 		.word	1048575
 2607 0600 0000FF47 		.word	1207894016
 2608 0604 00200240 		.word	1073881088
 2609 0608 00210240 		.word	1073881344
 2610 060c 00230240 		.word	1073881856
 2611 0610 000052C7 		.word	-950927360
 2612 0614 000021C3 		.word	-1021247488
 2613 0618 000084CB 		.word	-880541696
 2614 061c 00630258 		.word	1476551424
 2615 0620 00000000 		.word	SystemCoreClock
 2616 0624 632D3E05 		.word	87960931
 2617              	.LVL230:
 2618              	.L228:
3073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 2619              		.loc 1 3073 0 discriminator 1
 2620 0628 14F4800F 		tst	r4, #4194304
 2621 062c 13D1     		bne	.L202
3075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 2622              		.loc 1 3075 0
 2623 062e 0C4A     		ldr	r2, .L236
 2624 0630 9142     		cmp	r1, r2
 2625 0632 01D0     		beq	.L231
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2626              		.loc 1 2821 0
 2627 0634 0020     		movs	r0, #0
 2628 0636 FAE4     		b	.L123
 2629              	.L231:
3077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 2630              		.loc 1 3077 0 discriminator 4
 2631 0638 46F48002 		orr	r2, r6, #4194304
ARM GAS  /tmp/ccecbe7f.s 			page 263


 2632              	.LVL231:
 2633              	.LBB524:
 2634              	.LBB525:
2716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2635              		.loc 2 2716 0 discriminator 4
 2636 063c A968     		ldr	r1, [r5, #8]
 2637 063e 21F0E071 		bic	r1, r1, #29360128
 2638 0642 0A43     		orrs	r2, r2, r1
 2639              	.LVL232:
 2640 0644 AA60     		str	r2, [r5, #8]
 2641              	.LBE525:
 2642              	.LBE524:
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2643              		.loc 1 2821 0 discriminator 4
 2644 0646 0020     		movs	r0, #0
 2645 0648 F1E4     		b	.L123
 2646              	.LVL233:
 2647              	.L184:
3091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2648              		.loc 1 3091 0
 2649 064a 1A6E     		ldr	r2, [r3, #96]
 2650 064c 42F02002 		orr	r2, r2, #32
 2651 0650 1A66     		str	r2, [r3, #96]
 2652              	.LVL234:
3093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 2653              		.loc 1 3093 0
 2654 0652 0120     		movs	r0, #1
 2655 0654 EBE4     		b	.L123
 2656              	.LVL235:
 2657              	.L202:
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpOffsetShifted;
 2658              		.loc 1 2821 0
 2659 0656 0020     		movs	r0, #0
 2660 0658 E9E4     		b	.L123
 2661              	.LVL236:
 2662              	.L189:
2882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2663              		.loc 1 2882 0
 2664 065a 0220     		movs	r0, #2
 2665              	.LVL237:
 2666 065c EAE4     		b	.L121
 2667              	.L237:
 2668 065e 00BF     		.align	2
 2669              	.L236:
 2670 0660 00600258 		.word	1476550656
 2671              		.cfi_endproc
 2672              	.LFE361:
 2674              		.section	.text.HAL_ADC_AnalogWDGConfig,"ax",%progbits
 2675              		.align	1
 2676              		.global	HAL_ADC_AnalogWDGConfig
 2677              		.syntax unified
 2678              		.thumb
 2679              		.thumb_func
 2680              		.fpu fpv5-d16
 2682              	HAL_ADC_AnalogWDGConfig:
 2683              	.LFB362:
3134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
ARM GAS  /tmp/ccecbe7f.s 			page 264


 2684              		.loc 1 3134 0
 2685              		.cfi_startproc
 2686              		@ args = 0, pretend = 0, frame = 0
 2687              		@ frame_needed = 0, uses_anonymous_args = 0
 2688              		@ link register save eliminated.
 2689              	.LVL238:
 2690 0000 0346     		mov	r3, r0
 2691              	.LVL239:
3156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 2692              		.loc 1 3156 0
 2693 0002 0268     		ldr	r2, [r0]
3193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2694              		.loc 1 3193 0
 2695 0004 90F85C00 		ldrb	r0, [r0, #92]	@ zero_extendqisi2
 2696              	.LVL240:
 2697 0008 0128     		cmp	r0, #1
 2698 000a 00F08282 		beq	.L294
3134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 2699              		.loc 1 3134 0 discriminator 2
 2700 000e F0B4     		push	{r4, r5, r6, r7}
 2701              	.LCFI11:
 2702              		.cfi_def_cfa_offset 16
 2703              		.cfi_offset 4, -16
 2704              		.cfi_offset 5, -12
 2705              		.cfi_offset 6, -8
 2706              		.cfi_offset 7, -4
3193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2707              		.loc 1 3193 0 discriminator 2
 2708 0010 0120     		movs	r0, #1
 2709 0012 83F85C00 		strb	r0, [r3, #92]
 2710              	.LVL241:
 2711              	.LBB578:
 2712              	.LBB579:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2713              		.loc 2 6884 0 discriminator 2
 2714 0016 9068     		ldr	r0, [r2, #8]
 2715 0018 10F0040F 		tst	r0, #4
 2716 001c 78D0     		beq	.L295
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2717              		.loc 2 6884 0 is_stmt 0
 2718 001e 0120     		movs	r0, #1
 2719              	.L240:
 2720              	.LVL242:
 2721              	.LBE579:
 2722              	.LBE578:
 2723              	.LBB581:
 2724              	.LBB582:
 2725              		.loc 2 7079 0 is_stmt 1
 2726 0020 9468     		ldr	r4, [r2, #8]
 2727 0022 14F0080F 		tst	r4, #8
 2728 0026 75D0     		beq	.L296
 2729 0028 0124     		movs	r4, #1
 2730              	.L241:
 2731              	.LVL243:
 2732              	.LBE582:
 2733              	.LBE581:
3202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_is_conversion_on_going_injected == 0UL)
ARM GAS  /tmp/ccecbe7f.s 			page 265


 2734              		.loc 1 3202 0
 2735 002a 2043     		orrs	r0, r4, r0
 2736 002c 40F06782 		bne	.L242
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 2737              		.loc 1 3207 0
 2738 0030 0868     		ldr	r0, [r1]
 2739 0032 B44C     		ldr	r4, .L318
 2740 0034 A042     		cmp	r0, r4
 2741 0036 6FD0     		beq	.L301
3295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2742              		.loc 1 3295 0
 2743 0038 4C68     		ldr	r4, [r1, #4]
 2744 003a B4F1807F 		cmp	r4, #16777216
 2745 003e 00F08381 		beq	.L264
 2746 0042 40F23881 		bls	.L302
 2747 0046 B4F1C07F 		cmp	r4, #25165824
 2748 004a 00F07D81 		beq	.L264
 2749 004e B4F1E07F 		cmp	r4, #29360128
 2750 0052 00F03781 		beq	.L266
 2751 0056 B4F1A07F 		cmp	r4, #20971520
 2752 005a 00F03381 		beq	.L266
 2753              	.L263:
 2754              	.LVL244:
 2755              	.LBB584:
 2756              	.LBB585:
5647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
 2757              		.loc 2 5647 0
 2758 005e 0C32     		adds	r2, r2, #12
 2759              	.LVL245:
 2760 0060 C0F30154 		ubfx	r4, r0, #20, #2
 2761 0064 00F00106 		and	r6, r0, #1
 2762 0068 F500     		lsls	r5, r6, #3
 2763 006a 3544     		add	r5, r5, r6
 2764 006c AE00     		lsls	r6, r5, #2
 2765 006e 3444     		add	r4, r4, r6
 2766              	.LVL246:
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2767              		.loc 2 5650 0
 2768 0070 52F82450 		ldr	r5, [r2, r4, lsl #2]
 2769 0074 A44E     		ldr	r6, .L318+4
 2770 0076 0640     		ands	r6, r6, r0
 2771 0078 25EA0605 		bic	r5, r5, r6
 2772 007c 42F82450 		str	r5, [r2, r4, lsl #2]
 2773              	.LVL247:
 2774              	.L270:
 2775              	.LBE585:
 2776              	.LBE584:
3348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 2777              		.loc 1 3348 0
 2778 0080 1A68     		ldr	r2, [r3]
 2779 0082 D068     		ldr	r0, [r2, #12]
 2780 0084 10F0100F 		tst	r0, #16
 2781 0088 40F0A781 		bne	.L279
3348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 2782              		.loc 1 3348 0 is_stmt 0 discriminator 1
 2783 008c 0D69     		ldr	r5, [r1, #16]
 2784 008e D068     		ldr	r0, [r2, #12]
ARM GAS  /tmp/ccecbe7f.s 			page 266


 2785 0090 C0F38200 		ubfx	r0, r0, #2, #3
 2786 0094 4000     		lsls	r0, r0, #1
 2787 0096 8540     		lsls	r5, r5, r0
 2788              	.L280:
 2789              	.LVL248:
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2790              		.loc 1 3349 0 is_stmt 1 discriminator 4
 2791 0098 D068     		ldr	r0, [r2, #12]
 2792 009a 10F0100F 		tst	r0, #16
 2793 009e 40F0A481 		bne	.L281
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2794              		.loc 1 3349 0 is_stmt 0 discriminator 1
 2795 00a2 4C69     		ldr	r4, [r1, #20]
 2796 00a4 D068     		ldr	r0, [r2, #12]
 2797 00a6 C0F38200 		ubfx	r0, r0, #2, #3
 2798 00aa 4000     		lsls	r0, r0, #1
 2799 00ac 04FA00F0 		lsl	r0, r4, r0
 2800              	.L282:
 2801              	.LVL249:
3352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2802              		.loc 1 3352 0 is_stmt 1 discriminator 4
 2803 00b0 964C     		ldr	r4, .L318+8
 2804 00b2 A242     		cmp	r2, r4
 2805 00b4 00F0A281 		beq	.L303
3373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 2806              		.loc 1 3373 0
 2807 00b8 0E68     		ldr	r6, [r1]
 2808 00ba 954C     		ldr	r4, .L318+12
 2809 00bc A642     		cmp	r6, r4
 2810 00be 00F0F081 		beq	.L304
3382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR3_RES11,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 2811              		.loc 1 3382 0
 2812 00c2 D2F8B840 		ldr	r4, [r2, #184]
 2813 00c6 04F07C44 		and	r4, r4, #-67108864
 2814 00ca 2043     		orrs	r0, r0, r4
 2815              	.LVL250:
 2816 00cc C2F8B800 		str	r0, [r2, #184]
3383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 2817              		.loc 1 3383 0
 2818 00d0 1A68     		ldr	r2, [r3]
 2819 00d2 D2F8BC00 		ldr	r0, [r2, #188]
 2820 00d6 00F07C40 		and	r0, r0, #-67108864
 2821 00da 0543     		orrs	r5, r5, r0
 2822              	.LVL251:
 2823 00dc C2F8BC50 		str	r5, [r2, #188]
 2824              	.L289:
3401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2825              		.loc 1 3401 0
 2826 00e0 0868     		ldr	r0, [r1]
 2827 00e2 8B4A     		ldr	r2, .L318+12
 2828 00e4 9042     		cmp	r0, r2
 2829 00e6 00F0EC81 		beq	.L305
3426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2830              		.loc 1 3426 0
 2831 00ea 1A6E     		ldr	r2, [r3, #96]
 2832 00ec 22F48022 		bic	r2, r2, #262144
 2833 00f0 1A66     		str	r2, [r3, #96]
ARM GAS  /tmp/ccecbe7f.s 			page 267


3432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 2834              		.loc 1 3432 0
 2835 00f2 1A68     		ldr	r2, [r3]
 2836              	.LVL252:
 2837              	.LBB586:
 2838              	.LBB587:
7080:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7081:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7082:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7083:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected command of conversion stop state
7084:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CR       JADSTP         LL_ADC_INJ_IsStopConversionOngoing
7085:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7086:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval 0: no command of conversion stop is on going on ADC group injected.
7087:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7088:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_IsStopConversionOngoing(ADC_TypeDef *ADCx)
7089:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7090:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
7091:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7092:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7093:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7094:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7095:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all ADC configurations: all ADC resolutions and
7096:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         all oversampling increased data width (for devices
7097:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         with feature oversampling).
7098:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData32\n
7099:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData32\n
7100:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData32\n
7101:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData32
7102:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7103:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7104:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7105:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7106:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7107:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7108:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
7109:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7110:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_INJ_ReadConversionData32(ADC_TypeDef *ADCx, uint32_t Rank)
7111:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7112:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7113:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7114:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint32_t)(READ_BIT(*preg,
7115:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7116:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7117:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7118:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7119:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7120:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7121:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 16 bits.
7122:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7123:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7124:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7125:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData16\n
7126:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData16\n
7127:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData16\n
7128:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData16
7129:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7130:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
ARM GAS  /tmp/ccecbe7f.s 			page 268


7131:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7132:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7133:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7134:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7135:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFFF
7136:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7137:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData16(ADC_TypeDef *ADCx, uint32_t Rank)
7138:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7139:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7140:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7141:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7142:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7143:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7144:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7145:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7146:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7147:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7148:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 14 bits.
7149:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7150:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7151:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7152:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData14\n
7153:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData14\n
7154:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData14\n
7155:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData14
7156:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7157:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7158:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7159:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7160:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7161:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7162:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FFF
7163:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7164:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData14(ADC_TypeDef *ADCx, uint32_t Rank)
7165:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7166:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7167:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7168:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7169:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7170:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7171:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7172:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7173:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7174:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7175:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 12 bits.
7176:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7177:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7178:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7179:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData12\n
7180:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData12\n
7181:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData12\n
7182:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData12
7183:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7184:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7185:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7186:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7187:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
ARM GAS  /tmp/ccecbe7f.s 			page 269


7188:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7189:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0xFFF
7190:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7191:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData12(ADC_TypeDef *ADCx, uint32_t Rank)
7192:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7193:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7194:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7195:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7196:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7197:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7198:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7199:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7200:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7201:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7202:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 10 bits.
7203:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7204:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7205:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7206:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData10\n
7207:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData10\n
7208:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData10\n
7209:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData10
7210:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7211:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7212:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7213:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7214:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7215:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7216:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x000 and Max_Data=0x3FF
7217:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7218:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint16_t LL_ADC_INJ_ReadConversionData10(ADC_TypeDef *ADCx, uint32_t Rank)
7219:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7220:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7221:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7222:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint16_t)(READ_BIT(*preg,
7223:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                              ADC_JDR1_JDATA)
7224:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                    );
7225:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7226:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7227:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7228:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get ADC group injected conversion data, range fit for
7229:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         ADC resolution 8 bits.
7230:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   For devices with feature oversampling: Oversampling
7231:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         can increase data width, function for extended range
7232:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         may be needed: @ref LL_ADC_INJ_ReadConversionData32.
7233:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll JDR1     JDATA          LL_ADC_INJ_ReadConversionData8\n
7234:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR2     JDATA          LL_ADC_INJ_ReadConversionData8\n
7235:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR3     JDATA          LL_ADC_INJ_ReadConversionData8\n
7236:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         JDR4     JDATA          LL_ADC_INJ_ReadConversionData8
7237:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7238:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  Rank This parameter can be one of the following values:
7239:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_1
7240:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_2
7241:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_3
7242:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         @arg @ref LL_ADC_INJ_RANK_4
7243:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
7244:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 270


7245:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint8_t LL_ADC_INJ_ReadConversionData8(ADC_TypeDef *ADCx, uint32_t Rank)
7246:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7247:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->JDR1, ((Rank & ADC_INJ_JDRX_REGOFFSET_MASK
7248:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7249:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return (uint8_t)(READ_BIT(*preg,
7250:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                             ADC_JDR1_JDATA)
7251:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                   );
7252:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7253:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7254:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7255:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7256:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7257:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7258:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_FLAG_Management ADC flag management
7259:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7260:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7261:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7262:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7263:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC ready.
7264:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7265:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7266:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7267:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
7268:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7269:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7270:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7271:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
7272:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7273:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
7274:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7275:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7276:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7277:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of unitary conversion.
7278:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_IsActiveFlag_EOC
7279:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7280:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7281:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7282:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOC(ADC_TypeDef *ADCx)
7283:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7284:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
7285:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7286:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7287:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sequence conversions.
7289:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_IsActiveFlag_EOS
7290:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7291:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7292:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7293:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOS(ADC_TypeDef *ADCx)
7294:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7295:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOS) == (LL_ADC_FLAG_EOS)) ? 1UL : 0UL);
7296:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7297:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7298:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7299:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular overrun.
7300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_IsActiveFlag_OVR
7301:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
ARM GAS  /tmp/ccecbe7f.s 			page 271


7302:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7303:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7304:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_OVR(ADC_TypeDef *ADCx)
7305:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7306:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_OVR) == (LL_ADC_FLAG_OVR)) ? 1UL : 0UL);
7307:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7308:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7309:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7310:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group regular end of sampling phase.
7311:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_IsActiveFlag_EOSMP
7312:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7313:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7314:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7315:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_EOSMP(ADC_TypeDef *ADCx)
7316:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7317:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_EOSMP) == (LL_ADC_FLAG_EOSMP)) ? 1UL : 0UL);
7318:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7319:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7320:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7321:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of unitary conversion.
7322:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_IsActiveFlag_JEOC
7323:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7324:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7325:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7326:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOC(ADC_TypeDef *ADCx)
7327:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7328:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOC) == (LL_ADC_FLAG_JEOC)) ? 1UL : 0UL);
7329:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7330:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7331:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7332:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected end of sequence conversions.
7333:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_IsActiveFlag_JEOS
7334:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7335:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7336:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7337:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JEOS(ADC_TypeDef *ADCx)
7338:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7339:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS)) ? 1UL : 0UL);
7340:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7341:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7342:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7343:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC group injected contexts queue overflow.
7344:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_IsActiveFlag_JQOVF
7345:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7346:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7347:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7348:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_JQOVF(ADC_TypeDef *ADCx)
7349:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7350:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_JQOVF) == (LL_ADC_FLAG_JQOVF)) ? 1UL : 0UL);
7351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7352:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7353:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7354:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 1 flag
7355:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_IsActiveFlag_AWD1
7356:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7357:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7358:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
ARM GAS  /tmp/ccecbe7f.s 			page 272


7359:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD1(ADC_TypeDef *ADCx)
7360:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7361:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD1) == (LL_ADC_FLAG_AWD1)) ? 1UL : 0UL);
7362:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7363:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7364:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7365:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 2.
7366:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_IsActiveFlag_AWD2
7367:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7368:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7369:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7370:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD2(ADC_TypeDef *ADCx)
7371:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7372:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD2) == (LL_ADC_FLAG_AWD2)) ? 1UL : 0UL);
7373:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7374:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7375:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7376:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag ADC analog watchdog 3.
7377:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_IsActiveFlag_AWD3
7378:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7379:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7380:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7381:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_AWD3(ADC_TypeDef *ADCx)
7382:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7383:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_AWD3) == (LL_ADC_FLAG_AWD3)) ? 1UL : 0UL);
7384:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7385:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7386:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7387:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC ready.
7388:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @note   On this STM32 serie, flag LL_ADC_FLAG_ADRDY is raised when the ADC
7389:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         is enabled and when conversion clock is active.
7390:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (not only core clock: this ADC has a dual clock domain)
7391:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      ADRDY          LL_ADC_ClearFlag_ADRDY
7392:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7393:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7394:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7395:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_ADRDY(ADC_TypeDef *ADCx)
7396:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7397:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_ADRDY);
7398:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7399:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7400:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7401:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of unitary conversion.
7402:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOC            LL_ADC_ClearFlag_EOC
7403:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7404:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7405:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7406:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOC(ADC_TypeDef *ADCx)
7407:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7408:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
7409:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7410:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7411:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sequence conversions.
7413:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOS            LL_ADC_ClearFlag_EOS
7414:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7415:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccecbe7f.s 			page 273


7416:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7417:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOS(ADC_TypeDef *ADCx)
7418:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7419:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOS);
7420:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7421:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7422:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7423:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular overrun.
7424:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      OVR            LL_ADC_ClearFlag_OVR
7425:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7426:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7427:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7428:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_OVR(ADC_TypeDef *ADCx)
7429:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7430:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_OVR);
7431:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7432:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7433:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7434:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group regular end of sampling phase.
7435:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      EOSMP          LL_ADC_ClearFlag_EOSMP
7436:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7437:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7438:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7439:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_EOSMP(ADC_TypeDef *ADCx)
7440:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7441:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOSMP);
7442:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7443:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7444:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7445:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of unitary conversion.
7446:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOC           LL_ADC_ClearFlag_JEOC
7447:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7448:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7449:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7450:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOC(ADC_TypeDef *ADCx)
7451:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7452:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
7453:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7454:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7455:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7456:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected end of sequence conversions.
7457:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JEOS           LL_ADC_ClearFlag_JEOS
7458:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7459:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7460:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7461:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JEOS(ADC_TypeDef *ADCx)
7462:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7463:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
7464:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7465:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7466:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7467:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC group injected contexts queue overflow.
7468:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      JQOVF          LL_ADC_ClearFlag_JQOVF
7469:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7470:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7471:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7472:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_JQOVF(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccecbe7f.s 			page 274


7473:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7474:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JQOVF);
7475:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7476:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7477:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7478:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 1.
7479:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD1           LL_ADC_ClearFlag_AWD1
7480:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7481:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7482:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7483:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD1(ADC_TypeDef *ADCx)
7484:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD1);
7486:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7487:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7488:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7489:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 2.
7490:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD2           LL_ADC_ClearFlag_AWD2
7491:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7492:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7493:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7494:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD2(ADC_TypeDef *ADCx)
7495:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD2);
7497:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7498:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7499:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7500:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Clear flag ADC analog watchdog 3.
7501:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll ISR      AWD3           LL_ADC_ClearFlag_AWD3
7502:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7503:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7504:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7505:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_ClearFlag_AWD3(ADC_TypeDef *ADCx)
7506:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7507:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   WRITE_REG(ADCx->ISR, LL_ADC_FLAG_AWD3);
 2839              		.loc 2 7507 0
 2840 00f4 4FF40070 		mov	r0, #512
 2841 00f8 1060     		str	r0, [r2]
 2842              	.LVL253:
 2843              	.LBE587:
 2844              	.LBE586:
3435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 2845              		.loc 1 3435 0
 2846 00fa 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 2847 00fc 012A     		cmp	r2, #1
 2848 00fe 00F0F881 		beq	.L306
3441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 2849              		.loc 1 3441 0
 2850 0102 1968     		ldr	r1, [r3]
 2851              	.LVL254:
 2852              	.LBB588:
 2853              	.LBB589:
7508:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7509:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7510:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7511:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC master.
7512:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_MST      LL_ADC_IsActiveFlag_MST_ADRDY
ARM GAS  /tmp/ccecbe7f.s 			page 275


7513:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7514:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7515:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7516:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7517:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7518:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7519:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_MST) == (LL_ADC_FLAG_ADRDY_MST)) ? 1UL : 0
7520:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7521:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7522:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7523:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC ready of the ADC slave.
7524:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      ADRDY_SLV      LL_ADC_IsActiveFlag_SLV_ADRDY
7525:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7526:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7527:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7528:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7529:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_ADRDY(ADC_Common_TypeDef *ADCxy_COMMON)
7530:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7531:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_ADRDY_SLV) == (LL_ADC_FLAG_ADRDY_SLV)) ? 1UL : 0
7532:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7533:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7534:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7535:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC master.
7536:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOC_MST        LL_ADC_IsActiveFlag_MST_EOC
7537:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7538:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7539:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7540:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7541:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7542:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7543:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7544:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7545:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7546:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7547:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of unitary conversion of the ADC slave.
7548:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOC_SLV        LL_ADC_IsActiveFlag_SLV_EOC
7549:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7550:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7551:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7552:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7553:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOC(ADC_Common_TypeDef *ADCxy_COMMON)
7554:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7555:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOC_SLV) == (LL_ADC_FLAG_EOC_SLV)) ? 1UL : 0UL);
7556:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7557:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7558:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7559:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC master.
7560:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOS_MST        LL_ADC_IsActiveFlag_MST_EOS
7561:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7562:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7563:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7564:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7565:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7566:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7567:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_MST) == (LL_ADC_FLAG_EOS_MST)) ? 1UL : 0UL);
7568:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7569:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 276


7570:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7571:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sequence conversions of the ADC slave.
7572:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOS_SLV        LL_ADC_IsActiveFlag_SLV_EOS
7573:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7574:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7575:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7576:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7577:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOS(ADC_Common_TypeDef *ADCxy_COMMON)
7578:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7579:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOS_SLV) == (LL_ADC_FLAG_EOS_SLV)) ? 1UL : 0UL);
7580:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7581:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7582:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7583:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC master.
7584:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      OVR_MST        LL_ADC_IsActiveFlag_MST_OVR
7585:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7586:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7587:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7588:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7589:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7590:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7591:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_MST) == (LL_ADC_FLAG_OVR_MST)) ? 1UL : 0UL);
7592:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7593:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7594:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7595:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular overrun of the ADC slave.
7596:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      OVR_SLV        LL_ADC_IsActiveFlag_SLV_OVR
7597:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7598:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7599:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7600:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7601:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_OVR(ADC_Common_TypeDef *ADCxy_COMMON)
7602:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7603:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_OVR_SLV) == (LL_ADC_FLAG_OVR_SLV)) ? 1UL : 0UL);
7604:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7605:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7606:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7607:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC master.
7608:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_MST      LL_ADC_IsActiveFlag_MST_EOSMP
7609:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7610:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7611:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7612:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7613:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7614:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7615:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_MST) == (LL_ADC_FLAG_EOSMP_MST)) ? 1UL : 0
7616:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7617:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7618:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7619:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group regular end of sampling of the ADC slave.
7620:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      EOSMP_SLV      LL_ADC_IsActiveFlag_SLV_EOSMP
7621:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7622:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7623:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7624:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7625:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_EOSMP(ADC_Common_TypeDef *ADCxy_COMMON)
7626:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
ARM GAS  /tmp/ccecbe7f.s 			page 277


7627:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_EOSMP_SLV) == (LL_ADC_FLAG_EOSMP_SLV)) ? 1UL : 0
7628:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7629:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7630:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7631:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC master.
7632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOC_MST       LL_ADC_IsActiveFlag_MST_JEOC
7633:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7634:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7635:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7636:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7637:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7638:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7639:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_MST) == (LL_ADC_FLAG_JEOC_MST)) ? 1UL : 0UL
7640:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7641:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7642:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of unitary conversion of the ADC slave.
7644:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOC_SLV       LL_ADC_IsActiveFlag_SLV_JEOC
7645:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7646:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7649:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOC(ADC_Common_TypeDef *ADCxy_COMMON)
7650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7651:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOC_SLV) == (LL_ADC_FLAG_JEOC_SLV)) ? 1UL : 0UL
7652:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7653:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7654:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7655:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC master.
7656:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOS_MST       LL_ADC_IsActiveFlag_MST_JEOS
7657:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7658:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7659:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7660:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7661:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7662:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7663:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_MST) == (LL_ADC_FLAG_JEOS_MST)) ? 1UL : 0UL
7664:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7666:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7667:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected end of sequence conversions of the ADC slave.
7668:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JEOS_SLV       LL_ADC_IsActiveFlag_SLV_JEOS
7669:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7670:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7671:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7672:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7673:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JEOS(ADC_Common_TypeDef *ADCxy_COMMON)
7674:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7675:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JEOS_SLV) == (LL_ADC_FLAG_JEOS_SLV)) ? 1UL : 0UL
7676:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7677:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7678:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7679:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC master.
7680:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_MST      LL_ADC_IsActiveFlag_MST_JQOVF
7681:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7682:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7683:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/ccecbe7f.s 			page 278


7684:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7685:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7686:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7687:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_MST) == (LL_ADC_FLAG_JQOVF_MST)) ? 1UL : 0
7688:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7689:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7690:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7691:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC group injected context queue overflow of the ADC slave.
7692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      JQOVF_SLV      LL_ADC_IsActiveFlag_SLV_JQOVF
7693:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7694:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7695:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7696:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7697:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_JQOVF(ADC_Common_TypeDef *ADCxy_COMMON)
7698:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7699:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_JQOVF_SLV) == (LL_ADC_FLAG_JQOVF_SLV)) ? 1UL : 0
7700:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7701:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7702:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7703:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 1 of the ADC master.
7704:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD1_MST       LL_ADC_IsActiveFlag_MST_AWD1
7705:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7706:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7707:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7708:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7709:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7710:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7711:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_MST) == (LL_ADC_FLAG_AWD1_MST)) ? 1UL : 0UL
7712:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7713:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7714:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7715:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode analog watchdog 1 of the ADC slave.
7716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD1_SLV       LL_ADC_IsActiveFlag_SLV_AWD1
7717:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7718:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7719:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7720:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7721:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD1(ADC_Common_TypeDef *ADCxy_COMMON)
7722:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7723:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD1_SLV) == (LL_ADC_FLAG_AWD1_SLV)) ? 1UL : 0UL
7724:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7725:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7726:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7727:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC master.
7728:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD2_MST       LL_ADC_IsActiveFlag_MST_AWD2
7729:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7730:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7731:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7732:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7733:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7734:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7735:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_MST) == (LL_ADC_FLAG_AWD2_MST)) ? 1UL : 0UL
7736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7737:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7738:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7739:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 2 of the ADC slave.
7740:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD2_SLV       LL_ADC_IsActiveFlag_SLV_AWD2
ARM GAS  /tmp/ccecbe7f.s 			page 279


7741:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7742:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7743:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7744:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7745:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD2(ADC_Common_TypeDef *ADCxy_COMMON)
7746:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7747:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD2_SLV) == (LL_ADC_FLAG_AWD2_SLV)) ? 1UL : 0UL
7748:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7749:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7750:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7751:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC master.
7752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD3_MST       LL_ADC_IsActiveFlag_MST_AWD3
7753:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7754:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7755:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7756:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7757:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_MST_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7758:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7759:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_MST) == (LL_ADC_FLAG_AWD3_MST)) ? 1UL : 0UL
7760:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7761:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7762:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Get flag multimode ADC analog watchdog 3 of the ADC slave.
7764:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll CSR      AWD3_SLV       LL_ADC_IsActiveFlag_SLV_AWD3
7765:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCxy_COMMON ADC common instance
7766:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   *         (can be set directly from CMSIS definition or by using helper macro @ref __LL_ADC_COMMO
7767:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval State of bit (1 or 0).
7768:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7769:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_SLV_AWD3(ADC_Common_TypeDef *ADCxy_COMMON)
7770:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7771:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   return ((READ_BIT(ADCxy_COMMON->CSR, LL_ADC_FLAG_AWD3_SLV) == (LL_ADC_FLAG_AWD3_SLV)) ? 1UL : 0UL
7772:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7773:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7774:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7775:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @}
7776:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7777:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7778:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /** @defgroup ADC_LL_EF_IT_Management ADC IT management
7779:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @{
7780:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7781:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7782:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7783:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC ready.
7784:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_EnableIT_ADRDY
7785:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7786:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7787:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7788:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_ADRDY(ADC_TypeDef *ADCx)
7789:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7790:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
7791:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7792:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7793:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7794:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of unitary conversion.
7795:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_EnableIT_EOC
7796:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7797:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
ARM GAS  /tmp/ccecbe7f.s 			page 280


7798:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7799:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOC(ADC_TypeDef *ADCx)
7800:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7801:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOC);
7802:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7803:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7804:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7805:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sequence conversions.
7806:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_EnableIT_EOS
7807:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7808:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7809:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7810:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOS(ADC_TypeDef *ADCx)
7811:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7812:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOS);
7813:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7814:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7815:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7816:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable ADC group regular interruption overrun.
7817:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_EnableIT_OVR
7818:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7819:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7820:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7821:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_OVR(ADC_TypeDef *ADCx)
7822:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7823:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_OVR);
7824:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7825:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7826:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7827:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group regular end of sampling.
7828:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_EnableIT_EOSMP
7829:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7830:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7831:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7832:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_EOSMP(ADC_TypeDef *ADCx)
7833:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7834:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7835:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7836:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7837:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7838:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of unitary conversion.
7839:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_EnableIT_JEOC
7840:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7841:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7842:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7843:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOC(ADC_TypeDef *ADCx)
7844:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7845:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7846:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7847:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7848:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7849:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected end of sequence conversions.
7850:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_EnableIT_JEOS
7851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7852:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7853:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7854:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JEOS(ADC_TypeDef *ADCx)
ARM GAS  /tmp/ccecbe7f.s 			page 281


7855:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7856:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7857:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7858:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7859:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7860:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC group injected context queue overflow.
7861:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_EnableIT_JQOVF
7862:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7863:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7864:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7865:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_JQOVF(ADC_TypeDef *ADCx)
7866:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7867:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7868:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7869:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7870:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 1.
7872:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_EnableIT_AWD1
7873:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7874:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7875:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7876:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD1(ADC_TypeDef *ADCx)
7877:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD1);
7879:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7880:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7881:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7882:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 2.
7883:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_EnableIT_AWD2
7884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7885:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7886:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7887:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD2(ADC_TypeDef *ADCx)
7888:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD2);
7890:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7891:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7892:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7893:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Enable interruption ADC analog watchdog 3.
7894:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_EnableIT_AWD3
7895:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7896:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7897:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7898:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_EnableIT_AWD3(ADC_TypeDef *ADCx)
7899:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   SET_BIT(ADCx->IER, LL_ADC_IT_AWD3);
7901:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7902:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7903:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7904:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC ready.
7905:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      ADRDYIE        LL_ADC_DisableIT_ADRDY
7906:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7907:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7908:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7909:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_ADRDY(ADC_TypeDef *ADCx)
7910:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7911:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_ADRDY);
ARM GAS  /tmp/ccecbe7f.s 			page 282


7912:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7913:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7914:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7915:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7916:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOCIE          LL_ADC_DisableIT_EOC
7917:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7918:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7919:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7920:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
7921:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7922:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
7923:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7924:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7925:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7926:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sequence conversions.
7927:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSIE          LL_ADC_DisableIT_EOS
7928:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7929:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7930:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7931:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOS(ADC_TypeDef *ADCx)
7932:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7933:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOS);
7934:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7935:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7936:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7937:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular overrun.
7938:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      OVRIE          LL_ADC_DisableIT_OVR
7939:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7940:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7941:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7942:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_OVR(ADC_TypeDef *ADCx)
7943:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7944:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_OVR);
7945:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7946:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7947:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7948:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of sampling.
7949:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      EOSMPIE        LL_ADC_DisableIT_EOSMP
7950:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7951:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7952:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7953:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_EOSMP(ADC_TypeDef *ADCx)
7954:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7955:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOSMP);
7956:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7957:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7958:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7959:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group regular end of unitary conversion.
7960:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOCIE         LL_ADC_DisableIT_JEOC
7961:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7962:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7963:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7964:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
7965:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7966:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
7967:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7968:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
ARM GAS  /tmp/ccecbe7f.s 			page 283


7969:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7970:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected end of sequence conversions.
7971:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JEOSIE         LL_ADC_DisableIT_JEOS
7972:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7973:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7974:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7975:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JEOS(ADC_TypeDef *ADCx)
7976:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7977:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOS);
7978:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7979:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7980:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7981:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC group injected context queue overflow.
7982:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      JQOVFIE        LL_ADC_DisableIT_JQOVF
7983:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7984:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7985:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7986:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_JQOVF(ADC_TypeDef *ADCx)
7987:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7988:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_JQOVF);
7989:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
7990:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
7991:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
7992:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 1.
7993:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD1IE         LL_ADC_DisableIT_AWD1
7994:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
7995:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
7996:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
7997:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD1(ADC_TypeDef *ADCx)
7998:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
7999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD1);
8000:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8001:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8002:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8003:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 2.
8004:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD2IE         LL_ADC_DisableIT_AWD2
8005:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8006:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8007:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8008:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD2(ADC_TypeDef *ADCx)
8009:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD2);
8011:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
8012:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
8013:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** /**
8014:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @brief  Disable interruption ADC analog watchdog 3.
8015:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @rmtoll IER      AWD3IE         LL_ADC_DisableIT_AWD3
8016:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @param  ADCx ADC instance
8017:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   * @retval None
8018:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   */
8019:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** __STATIC_INLINE void LL_ADC_DisableIT_AWD3(ADC_TypeDef *ADCx)
8020:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** {
8021:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   CLEAR_BIT(ADCx->IER, LL_ADC_IT_AWD3);
 2854              		.loc 2 8021 0
 2855 0104 4A68     		ldr	r2, [r1, #4]
 2856 0106 22F40072 		bic	r2, r2, #512
 2857 010a 4A60     		str	r2, [r1, #4]
ARM GAS  /tmp/ccecbe7f.s 			page 284


 2858              	.LBE589:
 2859              	.LBE588:
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 2860              		.loc 1 3135 0
 2861 010c 0020     		movs	r0, #0
 2862 010e FBE1     		b	.L262
 2863              	.LVL255:
 2864              	.L295:
 2865              	.LBB590:
 2866              	.LBB580:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2867              		.loc 2 6884 0
 2868 0110 0020     		movs	r0, #0
 2869 0112 85E7     		b	.L240
 2870              	.LVL256:
 2871              	.L296:
 2872              	.LBE580:
 2873              	.LBE590:
 2874              	.LBB591:
 2875              	.LBB583:
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 2876              		.loc 2 7079 0
 2877 0114 0024     		movs	r4, #0
 2878 0116 88E7     		b	.L241
 2879              	.LVL257:
 2880              	.L301:
 2881              	.LBE583:
 2882              	.LBE591:
3212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2883              		.loc 1 3212 0
 2884 0118 4868     		ldr	r0, [r1, #4]
 2885 011a B0F1807F 		cmp	r0, #16777216
 2886 011e 4ED0     		beq	.L245
 2887 0120 0DD9     		bls	.L307
 2888 0122 B0F1C07F 		cmp	r0, #25165824
 2889 0126 51D0     		beq	.L249
 2890 0128 B0F1E07F 		cmp	r0, #29360128
 2891 012c 35D0     		beq	.L250
 2892 012e B0F1A07F 		cmp	r0, #20971520
 2893 0132 27D0     		beq	.L308
 2894              	.L244:
 2895              	.LVL258:
 2896              	.LBB592:
 2897              	.LBB593:
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2898              		.loc 2 5650 0
 2899 0134 D468     		ldr	r4, [r2, #12]
 2900 0136 7748     		ldr	r0, .L318+16
 2901 0138 2040     		ands	r0, r0, r4
 2902 013a D060     		str	r0, [r2, #12]
 2903 013c 0FE0     		b	.L252
 2904              	.LVL259:
 2905              	.L307:
 2906              	.LBE593:
 2907              	.LBE592:
3212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 2908              		.loc 1 3212 0
ARM GAS  /tmp/ccecbe7f.s 			page 285


 2909 013e B0F5000F 		cmp	r0, #8388608
 2910 0142 35D0     		beq	.L247
 2911 0144 B0F5400F 		cmp	r0, #12582912
 2912 0148 F4D1     		bne	.L244
3215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR));
 2913              		.loc 1 3215 0
 2914 014a 8C68     		ldr	r4, [r1, #8]
 2915              	.LVL260:
 2916              	.LBB594:
 2917              	.LBB595:
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2918              		.loc 2 5650 0
 2919 014c D568     		ldr	r5, [r2, #12]
 2920 014e 7148     		ldr	r0, .L318+16
 2921 0150 2840     		ands	r0, r0, r5
 2922 0152 04F0F844 		and	r4, r4, #2080374784
 2923              	.LVL261:
 2924 0156 44F44004 		orr	r4, r4, #12582912
 2925 015a 2043     		orrs	r0, r0, r4
 2926 015c D060     		str	r0, [r2, #12]
 2927              	.LVL262:
 2928              	.L252:
 2929              	.LBE595:
 2930              	.LBE594:
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 2931              		.loc 1 3249 0
 2932 015e 6E4A     		ldr	r2, .L318+20
 2933 0160 1268     		ldr	r2, [r2]
 2934 0162 02F07042 		and	r2, r2, #-268435456
 2935 0166 B2F1805F 		cmp	r2, #268435456
 2936 016a 36D0     		beq	.L309
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 2937              		.loc 1 3249 0 is_stmt 0 discriminator 2
 2938 016c 1868     		ldr	r0, [r3]
 2939 016e C268     		ldr	r2, [r0, #12]
 2940 0170 12F0100F 		tst	r2, #16
 2941 0174 4CD1     		bne	.L255
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 2942              		.loc 1 3249 0 discriminator 4
 2943 0176 0D69     		ldr	r5, [r1, #16]
 2944 0178 C268     		ldr	r2, [r0, #12]
 2945 017a C2F38202 		ubfx	r2, r2, #2, #3
 2946 017e 5200     		lsls	r2, r2, #1
 2947 0180 9540     		lsls	r5, r5, r2
 2948 0182 31E0     		b	.L254
 2949              	.L308:
3220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_INJECTED));
 2950              		.loc 1 3220 0 is_stmt 1
 2951 0184 8C68     		ldr	r4, [r1, #8]
 2952              	.LVL263:
 2953              	.LBB596:
 2954              	.LBB597:
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2955              		.loc 2 5650 0
 2956 0186 D568     		ldr	r5, [r2, #12]
 2957 0188 6248     		ldr	r0, .L318+16
 2958 018a 2840     		ands	r0, r0, r5
ARM GAS  /tmp/ccecbe7f.s 			page 286


 2959 018c 04F0F844 		and	r4, r4, #2080374784
 2960              	.LVL264:
 2961 0190 44F0A074 		orr	r4, r4, #20971520
 2962 0194 2043     		orrs	r0, r0, r4
 2963 0196 D060     		str	r0, [r2, #12]
 2964              	.LVL265:
 2965 0198 E1E7     		b	.L252
 2966              	.LVL266:
 2967              	.L250:
 2968              	.LBE597:
 2969              	.LBE596:
3225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                                           LL_ADC_GROUP_REGULAR_INJECTED));
 2970              		.loc 1 3225 0
 2971 019a 8C68     		ldr	r4, [r1, #8]
 2972              	.LVL267:
 2973              	.LBB598:
 2974              	.LBB599:
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 2975              		.loc 2 5650 0
 2976 019c D568     		ldr	r5, [r2, #12]
 2977 019e 5D48     		ldr	r0, .L318+16
 2978 01a0 2840     		ands	r0, r0, r5
 2979 01a2 04F0F844 		and	r4, r4, #2080374784
 2980              	.LVL268:
 2981 01a6 44F0E074 		orr	r4, r4, #29360128
 2982 01aa 2043     		orrs	r0, r0, r4
 2983 01ac D060     		str	r0, [r2, #12]
 2984              	.LVL269:
 2985 01ae D6E7     		b	.L252
 2986              	.LVL270:
 2987              	.L247:
 2988              	.LBE599:
 2989              	.LBE598:
 2990              	.LBB600:
 2991              	.LBB601:
 2992 01b0 D468     		ldr	r4, [r2, #12]
 2993 01b2 5848     		ldr	r0, .L318+16
 2994 01b4 2040     		ands	r0, r0, r4
 2995 01b6 40F40000 		orr	r0, r0, #8388608
 2996 01ba D060     		str	r0, [r2, #12]
 2997 01bc CFE7     		b	.L252
 2998              	.LVL271:
 2999              	.L245:
 3000              	.LBE601:
 3001              	.LBE600:
 3002              	.LBB602:
 3003              	.LBB603:
 3004 01be D468     		ldr	r4, [r2, #12]
 3005 01c0 5448     		ldr	r0, .L318+16
 3006 01c2 2040     		ands	r0, r0, r4
 3007 01c4 40F08070 		orr	r0, r0, #16777216
 3008 01c8 D060     		str	r0, [r2, #12]
 3009 01ca C8E7     		b	.L252
 3010              	.LVL272:
 3011              	.L249:
 3012              	.LBE603:
 3013              	.LBE602:
ARM GAS  /tmp/ccecbe7f.s 			page 287


 3014              	.LBB604:
 3015              	.LBB605:
 3016 01cc D468     		ldr	r4, [r2, #12]
 3017 01ce 5148     		ldr	r0, .L318+16
 3018 01d0 2040     		ands	r0, r0, r4
 3019 01d2 40F0C070 		orr	r0, r0, #25165824
 3020 01d6 D060     		str	r0, [r2, #12]
 3021 01d8 C1E7     		b	.L252
 3022              	.LVL273:
 3023              	.L309:
 3024              	.LBE605:
 3025              	.LBE604:
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 3026              		.loc 1 3249 0 discriminator 1
 3027 01da 0D69     		ldr	r5, [r1, #16]
 3028 01dc 1A68     		ldr	r2, [r3]
 3029 01de D268     		ldr	r2, [r2, #12]
 3030 01e0 C2F38202 		ubfx	r2, r2, #2, #3
 3031 01e4 5200     		lsls	r2, r2, #1
 3032 01e6 9540     		lsls	r5, r5, r2
 3033              	.L254:
 3034              	.LVL274:
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3035              		.loc 1 3250 0 discriminator 8
 3036 01e8 4B4A     		ldr	r2, .L318+20
 3037 01ea 1068     		ldr	r0, [r2]
 3038 01ec 00F07040 		and	r0, r0, #-268435456
 3039 01f0 B0F1805F 		cmp	r0, #268435456
 3040 01f4 14D0     		beq	.L310
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3041              		.loc 1 3250 0 is_stmt 0 discriminator 2
 3042 01f6 1C68     		ldr	r4, [r3]
 3043 01f8 E268     		ldr	r2, [r4, #12]
 3044 01fa 12F0100F 		tst	r2, #16
 3045 01fe 37D1     		bne	.L258
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3046              		.loc 1 3250 0 discriminator 4
 3047 0200 4869     		ldr	r0, [r1, #20]
 3048 0202 E268     		ldr	r2, [r4, #12]
 3049 0204 C2F38202 		ubfx	r2, r2, #2, #3
 3050 0208 5200     		lsls	r2, r2, #1
 3051 020a 00FA02F2 		lsl	r2, r0, r2
 3052 020e 0FE0     		b	.L257
 3053              	.LVL275:
 3054              	.L255:
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThr
 3055              		.loc 1 3249 0 is_stmt 1 discriminator 5
 3056 0210 0D69     		ldr	r5, [r1, #16]
 3057 0212 C268     		ldr	r2, [r0, #12]
 3058 0214 9208     		lsrs	r2, r2, #2
 3059 0216 02F00402 		and	r2, r2, #4
 3060 021a 5200     		lsls	r2, r2, #1
 3061 021c 9540     		lsls	r5, r5, r2
 3062 021e E3E7     		b	.L254
 3063              	.LVL276:
 3064              	.L310:
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 288


 3065              		.loc 1 3250 0 discriminator 1
 3066 0220 4869     		ldr	r0, [r1, #20]
 3067 0222 1A68     		ldr	r2, [r3]
 3068 0224 D268     		ldr	r2, [r2, #12]
 3069 0226 C2F38202 		ubfx	r2, r2, #2, #3
 3070 022a 5200     		lsls	r2, r2, #1
 3071 022c 00FA02F2 		lsl	r2, r0, r2
 3072              	.L257:
 3073              	.LVL277:
3254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3074              		.loc 1 3254 0 discriminator 8
 3075 0230 1C68     		ldr	r4, [r3]
 3076 0232 3648     		ldr	r0, .L318+8
 3077 0234 8442     		cmp	r4, r0
 3078 0236 24D0     		beq	.L311
3265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->HTR1_TR2,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 3079              		.loc 1 3265 0
 3080 0238 206A     		ldr	r0, [r4, #32]
 3081 023a 00F07C40 		and	r0, r0, #-67108864
 3082 023e 0243     		orrs	r2, r2, r0
 3083              	.LVL278:
 3084 0240 2262     		str	r2, [r4, #32]
3266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 3085              		.loc 1 3266 0
 3086 0242 1868     		ldr	r0, [r3]
 3087 0244 426A     		ldr	r2, [r0, #36]
 3088 0246 02F07C42 		and	r2, r2, #-67108864
 3089 024a 2A43     		orrs	r2, r2, r5
 3090 024c 4262     		str	r2, [r0, #36]
 3091              	.L260:
3274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3092              		.loc 1 3274 0
 3093 024e 1A6E     		ldr	r2, [r3, #96]
 3094 0250 22F48032 		bic	r2, r2, #65536
 3095 0254 1A66     		str	r2, [r3, #96]
3280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3096              		.loc 1 3280 0
 3097 0256 1A68     		ldr	r2, [r3]
 3098              	.LVL279:
 3099              	.LBB606:
 3100              	.LBB607:
7485:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3101              		.loc 2 7485 0
 3102 0258 8020     		movs	r0, #128
 3103 025a 1060     		str	r0, [r2]
 3104              	.LVL280:
 3105              	.LBE607:
 3106              	.LBE606:
3283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3107              		.loc 1 3283 0
 3108 025c 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 3109 025e 012A     		cmp	r2, #1
 3110 0260 23D0     		beq	.L312
3289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 3111              		.loc 1 3289 0
 3112 0262 1968     		ldr	r1, [r3]
 3113              	.LVL281:
ARM GAS  /tmp/ccecbe7f.s 			page 289


 3114              	.LBB608:
 3115              	.LBB609:
7999:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3116              		.loc 2 7999 0
 3117 0264 4A68     		ldr	r2, [r1, #4]
 3118 0266 22F08002 		bic	r2, r2, #128
 3119 026a 4A60     		str	r2, [r1, #4]
 3120              	.LBE609:
 3121              	.LBE608:
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 3122              		.loc 1 3135 0
 3123 026c 0020     		movs	r0, #0
 3124 026e 4BE1     		b	.L262
 3125              	.LVL282:
 3126              	.L258:
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3127              		.loc 1 3250 0 discriminator 5
 3128 0270 4869     		ldr	r0, [r1, #20]
 3129 0272 E268     		ldr	r2, [r4, #12]
 3130 0274 9208     		lsrs	r2, r2, #2
 3131 0276 02F00402 		and	r2, r2, #4
 3132 027a 5200     		lsls	r2, r2, #1
 3133 027c 00FA02F2 		lsl	r2, r0, r2
 3134 0280 D6E7     		b	.L257
 3135              	.LVL283:
 3136              	.L311:
3256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                    ADC3_TR1_AWDFILT,
 3137              		.loc 1 3256 0
 3138 0282 206A     		ldr	r0, [r4, #32]
 3139 0284 20F4E040 		bic	r0, r0, #28672
 3140 0288 8E69     		ldr	r6, [r1, #24]
 3141 028a 3043     		orrs	r0, r0, r6
 3142 028c 2062     		str	r0, [r4, #32]
3259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         MODIFY_REG(hadc->Instance->LTR1_TR1,  ADC3_TR1_HT1, (tmpAWDHighThresholdShifted << ADC3_TR1
 3143              		.loc 1 3259 0
 3144 028e 1C68     		ldr	r4, [r3]
 3145 0290 266A     		ldr	r6, [r4, #32]
 3146 0292 2248     		ldr	r0, .L318+24
 3147 0294 3040     		ands	r0, r0, r6
 3148 0296 0243     		orrs	r2, r2, r0
 3149              	.LVL284:
 3150 0298 2262     		str	r2, [r4, #32]
3260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 3151              		.loc 1 3260 0
 3152 029a 1868     		ldr	r0, [r3]
 3153 029c 046A     		ldr	r4, [r0, #32]
 3154 029e 204A     		ldr	r2, .L318+28
 3155 02a0 2240     		ands	r2, r2, r4
 3156 02a2 42EA0542 		orr	r2, r2, r5, lsl #16
 3157 02a6 0262     		str	r2, [r0, #32]
 3158 02a8 D1E7     		b	.L260
 3159              	.L312:
3285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 3160              		.loc 1 3285 0
 3161 02aa 1968     		ldr	r1, [r3]
 3162              	.LVL285:
 3163              	.LBB610:
ARM GAS  /tmp/ccecbe7f.s 			page 290


 3164              	.LBB611:
7878:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3165              		.loc 2 7878 0
 3166 02ac 4A68     		ldr	r2, [r1, #4]
 3167 02ae 0243     		orrs	r2, r2, r0
 3168 02b0 4A60     		str	r2, [r1, #4]
 3169              	.LBE611:
 3170              	.LBE610:
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 3171              		.loc 1 3135 0
 3172 02b2 0020     		movs	r0, #0
 3173 02b4 28E1     		b	.L262
 3174              	.LVL286:
 3175              	.L302:
3295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3176              		.loc 1 3295 0
 3177 02b6 B4F5000F 		cmp	r4, #8388608
 3178 02ba 45D0     		beq	.L264
 3179 02bc B4F5400F 		cmp	r4, #12582912
 3180 02c0 7FF4CDAE 		bne	.L263
 3181              	.L266:
3302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 3182              		.loc 1 3302 0
 3183 02c4 124C     		ldr	r4, .L318+12
 3184 02c6 A042     		cmp	r0, r4
 3185 02c8 0DD0     		beq	.L313
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3186              		.loc 1 3308 0
 3187 02ca 8868     		ldr	r0, [r1, #8]
 3188 02cc C0F31304 		ubfx	r4, r0, #0, #20
 3189 02d0 8CBB     		cbnz	r4, .L271
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3190              		.loc 1 3308 0 is_stmt 0 discriminator 1
 3191 02d2 C0F38460 		ubfx	r0, r0, #26, #5
 3192 02d6 0124     		movs	r4, #1
 3193 02d8 8440     		lsls	r4, r4, r0
 3194              	.L272:
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3195              		.loc 1 3308 0 discriminator 4
 3196 02da D2F8A400 		ldr	r0, [r2, #164]
 3197 02de 2043     		orrs	r0, r0, r4
 3198 02e0 C2F8A400 		str	r0, [r2, #164]
 3199 02e4 CCE6     		b	.L270
 3200              	.L313:
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3201              		.loc 1 3304 0 is_stmt 1
 3202 02e6 8868     		ldr	r0, [r1, #8]
 3203 02e8 C0F31304 		ubfx	r4, r0, #0, #20
 3204 02ec D4B9     		cbnz	r4, .L268
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3205              		.loc 1 3304 0 is_stmt 0 discriminator 1
 3206 02ee C0F38460 		ubfx	r0, r0, #26, #5
 3207 02f2 0124     		movs	r4, #1
 3208 02f4 8440     		lsls	r4, r4, r0
 3209              	.L269:
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3210              		.loc 1 3304 0 discriminator 4
ARM GAS  /tmp/ccecbe7f.s 			page 291


 3211 02f6 D2F8A000 		ldr	r0, [r2, #160]
 3212 02fa 2043     		orrs	r0, r0, r4
 3213 02fc C2F8A000 		str	r0, [r2, #160]
 3214 0300 BEE6     		b	.L270
 3215              	.L319:
 3216 0302 00BF     		.align	2
 3217              	.L318:
 3218 0304 0000C07D 		.word	2109734912
 3219 0308 FFFFCF7D 		.word	2110783487
 3220 030c 00600258 		.word	1476550656
 3221 0310 FFFF1F00 		.word	2097151
 3222 0314 FFFF3F82 		.word	-2109734913
 3223 0318 0010005C 		.word	1543507968
 3224 031c 00F0FFFF 		.word	-4096
 3225 0320 FFFF00F0 		.word	-268369921
 3226              	.L268:
 3227              	.LVL287:
 3228              	.LBB612:
 3229              	.LBB613:
 3230              		.loc 3 988 0 is_stmt 1 discriminator 2
 3231              		.syntax unified
 3232              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3233 0324 90FAA0F0 		rbit r0, r0
 3234              	@ 0 "" 2
 3235              	.LVL288:
 3236              		.thumb
 3237              		.syntax unified
 3238              	.LBE613:
 3239              	.LBE612:
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3240              		.loc 1 3304 0 discriminator 2
 3241 0328 B0FA80F0 		clz	r0, r0
 3242 032c 00F01F00 		and	r0, r0, #31
 3243 0330 0124     		movs	r4, #1
 3244 0332 8440     		lsls	r4, r4, r0
 3245 0334 DFE7     		b	.L269
 3246              	.L271:
 3247              	.LVL289:
 3248              	.LBB614:
 3249              	.LBB615:
 3250              		.loc 3 988 0 discriminator 2
 3251              		.syntax unified
 3252              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3253 0336 90FAA0F0 		rbit r0, r0
 3254              	@ 0 "" 2
 3255              	.LVL290:
 3256              		.thumb
 3257              		.syntax unified
 3258              	.LBE615:
 3259              	.LBE614:
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 3260              		.loc 1 3308 0 discriminator 2
 3261 033a B0FA80F0 		clz	r0, r0
 3262 033e 00F01F00 		and	r0, r0, #31
 3263 0342 0124     		movs	r4, #1
 3264 0344 8440     		lsls	r4, r4, r0
 3265 0346 C8E7     		b	.L272
ARM GAS  /tmp/ccecbe7f.s 			page 292


 3266              	.L264:
3317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 3267              		.loc 1 3317 0
 3268 0348 734C     		ldr	r4, .L320
 3269 034a A242     		cmp	r2, r4
 3270 034c 10D0     		beq	.L314
3328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             {
 3271              		.loc 1 3328 0
 3272 034e 734C     		ldr	r4, .L320+4
 3273 0350 A042     		cmp	r0, r4
 3274 0352 22D0     		beq	.L315
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3275              		.loc 1 3334 0
 3276 0354 8868     		ldr	r0, [r1, #8]
 3277 0356 C0F31304 		ubfx	r4, r0, #0, #20
 3278 035a ACBB     		cbnz	r4, .L277
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3279              		.loc 1 3334 0 is_stmt 0 discriminator 1
 3280 035c C0F38460 		ubfx	r0, r0, #26, #5
 3281 0360 0124     		movs	r4, #1
 3282 0362 8440     		lsls	r4, r4, r0
 3283              	.L278:
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3284              		.loc 1 3334 0 discriminator 4
 3285 0364 D2F8A400 		ldr	r0, [r2, #164]
 3286 0368 2043     		orrs	r0, r0, r4
 3287 036a C2F8A400 		str	r0, [r2, #164]
 3288 036e 87E6     		b	.L270
 3289              	.L314:
 3290              	.LVL291:
 3291              	.LBB616:
 3292              	.LBB617:
5647:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                       + ((AWDy & ADC_AWD_CR12_REGOFFSETGAP_MASK) * 
 3293              		.loc 2 5647 0 is_stmt 1
 3294 0370 0C32     		adds	r2, r2, #12
 3295              	.LVL292:
 3296 0372 C0F30155 		ubfx	r5, r0, #20, #2
 3297 0376 00F00106 		and	r6, r0, #1
 3298 037a F400     		lsls	r4, r6, #3
 3299 037c 3444     		add	r4, r4, r6
 3300 037e A600     		lsls	r6, r4, #2
 3301 0380 3544     		add	r5, r5, r6
 3302              	.LVL293:
5650:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              (AWDy & ADC_AWD_CR_ALL_CHANNEL_MASK),
 3303              		.loc 2 5650 0
 3304 0382 52F82540 		ldr	r4, [r2, r5, lsl #2]
 3305 0386 664E     		ldr	r6, .L320+8
 3306 0388 0640     		ands	r6, r6, r0
 3307 038a 24EA0604 		bic	r4, r4, r6
 3308 038e 654E     		ldr	r6, .L320+12
 3309 0390 0640     		ands	r6, r6, r0
 3310 0392 3443     		orrs	r4, r4, r6
 3311 0394 42F82540 		str	r4, [r2, r5, lsl #2]
 3312              	.LVL294:
 3313 0398 72E6     		b	.L270
 3314              	.LVL295:
 3315              	.L315:
ARM GAS  /tmp/ccecbe7f.s 			page 293


 3316              	.LBE617:
 3317              	.LBE616:
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3318              		.loc 1 3330 0
 3319 039a 8868     		ldr	r0, [r1, #8]
 3320 039c C0F31304 		ubfx	r4, r0, #0, #20
 3321 03a0 4CB9     		cbnz	r4, .L275
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3322              		.loc 1 3330 0 is_stmt 0 discriminator 1
 3323 03a2 C0F38460 		ubfx	r0, r0, #26, #5
 3324 03a6 0124     		movs	r4, #1
 3325 03a8 8440     		lsls	r4, r4, r0
 3326              	.L276:
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3327              		.loc 1 3330 0 discriminator 4
 3328 03aa D2F8A000 		ldr	r0, [r2, #160]
 3329 03ae 2043     		orrs	r0, r0, r4
 3330 03b0 C2F8A000 		str	r0, [r2, #160]
 3331 03b4 64E6     		b	.L270
 3332              	.L275:
 3333              	.LVL296:
 3334              	.LBB618:
 3335              	.LBB619:
 3336              		.loc 3 988 0 is_stmt 1 discriminator 2
 3337              		.syntax unified
 3338              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3339 03b6 90FAA0F0 		rbit r0, r0
 3340              	@ 0 "" 2
 3341              	.LVL297:
 3342              		.thumb
 3343              		.syntax unified
 3344              	.LBE619:
 3345              	.LBE618:
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3346              		.loc 1 3330 0 discriminator 2
 3347 03ba B0FA80F0 		clz	r0, r0
 3348 03be 00F01F00 		and	r0, r0, #31
 3349 03c2 0124     		movs	r4, #1
 3350 03c4 8440     		lsls	r4, r4, r0
 3351 03c6 F0E7     		b	.L276
 3352              	.L277:
 3353              	.LVL298:
 3354              	.LBB620:
 3355              	.LBB621:
 3356              		.loc 3 988 0 discriminator 2
 3357              		.syntax unified
 3358              	@ 988 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 3359 03c8 90FAA0F0 		rbit r0, r0
 3360              	@ 0 "" 2
 3361              	.LVL299:
 3362              		.thumb
 3363              		.syntax unified
 3364              	.LBE621:
 3365              	.LBE620:
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             }
 3366              		.loc 1 3334 0 discriminator 2
 3367 03cc B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/ccecbe7f.s 			page 294


 3368 03d0 00F01F00 		and	r0, r0, #31
 3369 03d4 0124     		movs	r4, #1
 3370 03d6 8440     		lsls	r4, r4, r0
 3371 03d8 C4E7     		b	.L278
 3372              	.L279:
3348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowTh
 3373              		.loc 1 3348 0 discriminator 2
 3374 03da 0D69     		ldr	r5, [r1, #16]
 3375 03dc D068     		ldr	r0, [r2, #12]
 3376 03de 8008     		lsrs	r0, r0, #2
 3377 03e0 00F00400 		and	r0, r0, #4
 3378 03e4 4000     		lsls	r0, r0, #1
 3379 03e6 8540     		lsls	r5, r5, r0
 3380 03e8 56E6     		b	.L280
 3381              	.LVL300:
 3382              	.L281:
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3383              		.loc 1 3349 0 discriminator 2
 3384 03ea 4C69     		ldr	r4, [r1, #20]
 3385 03ec D068     		ldr	r0, [r2, #12]
 3386 03ee 8008     		lsrs	r0, r0, #2
 3387 03f0 00F00400 		and	r0, r0, #4
 3388 03f4 4000     		lsls	r0, r0, #1
 3389 03f6 04FA00F0 		lsl	r0, r4, r0
 3390 03fa 59E6     		b	.L282
 3391              	.LVL301:
 3392              	.L303:
3356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 3393              		.loc 1 3356 0
 3394 03fc 0C68     		ldr	r4, [r1]
 3395 03fe 4A4E     		ldr	r6, .L320+16
 3396 0400 B442     		cmp	r4, r6
 3397 0402 14D0     		beq	.L284
3361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->L
 3398              		.loc 1 3361 0
 3399 0404 D068     		ldr	r0, [r2, #12]
 3400              	.LVL302:
 3401 0406 10F0100F 		tst	r0, #16
 3402 040a 2CD1     		bne	.L285
3361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->L
 3403              		.loc 1 3361 0 is_stmt 0 discriminator 1
 3404 040c 0D69     		ldr	r5, [r1, #16]
 3405              	.LVL303:
 3406 040e D068     		ldr	r0, [r2, #12]
 3407 0410 C0F38200 		ubfx	r0, r0, #2, #3
 3408 0414 4000     		lsls	r0, r0, #1
 3409 0416 8540     		lsls	r5, r5, r0
 3410              	.L286:
 3411              	.LVL304:
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3412              		.loc 1 3362 0 is_stmt 1 discriminator 4
 3413 0418 D068     		ldr	r0, [r2, #12]
 3414 041a 10F0100F 		tst	r0, #16
 3415 041e 2AD1     		bne	.L287
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3416              		.loc 1 3362 0 is_stmt 0 discriminator 1
 3417 0420 4E69     		ldr	r6, [r1, #20]
ARM GAS  /tmp/ccecbe7f.s 			page 295


 3418 0422 D068     		ldr	r0, [r2, #12]
 3419 0424 C0F38200 		ubfx	r0, r0, #2, #3
 3420 0428 4000     		lsls	r0, r0, #1
 3421 042a 06FA00F0 		lsl	r0, r6, r0
 3422              	.L284:
 3423              	.LVL305:
 3424              	.LBB622:
 3425              	.LBB623:
6025:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   {
 3426              		.loc 2 6025 0 is_stmt 1
 3427 042e 3A4E     		ldr	r6, .L320
 3428 0430 B242     		cmp	r2, r6
 3429 0432 29D0     		beq	.L316
 3430              	.LBB624:
6035:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                         + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK) 
 3431              		.loc 2 6035 0
 3432 0434 2032     		adds	r2, r2, #32
 3433              	.LVL306:
 3434 0436 C4F30157 		ubfx	r7, r4, #20, #2
 3435 043a 04F00104 		and	r4, r4, #1
 3436              	.LVL307:
 3437 043e 2601     		lsls	r6, r4, #4
 3438 0440 3444     		add	r4, r4, r6
 3439 0442 3C44     		add	r4, r4, r7
 3440 0444 6700     		lsls	r7, r4, #1
 3441              	.LVL308:
6038:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                                                          + ((AWDy & ADC_AWD_TR12_REGOFFSETGAP_MASK)
 3442              		.loc 2 6038 0
 3443 0446 0137     		adds	r7, r7, #1
 3444              	.LVL309:
6042:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****     MODIFY_REG(*preg2, ADC_HTR_HT, AWDThresholdHighValue);
 3445              		.loc 2 6042 0
 3446 0448 52F83460 		ldr	r6, [r2, r4, lsl #3]
 3447 044c 06F07C46 		and	r6, r6, #-67108864
 3448 0450 3043     		orrs	r0, r0, r6
 3449              	.LVL310:
 3450 0452 42F83400 		str	r0, [r2, r4, lsl #3]
 3451              	.LVL311:
6043:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
 3452              		.loc 2 6043 0
 3453 0456 52F82700 		ldr	r0, [r2, r7, lsl #2]
 3454 045a 00F07C40 		and	r0, r0, #-67108864
 3455 045e 0543     		orrs	r5, r5, r0
 3456              	.LVL312:
 3457 0460 42F82750 		str	r5, [r2, r7, lsl #2]
 3458 0464 3CE6     		b	.L289
 3459              	.LVL313:
 3460              	.L285:
 3461              	.LBE624:
 3462              	.LBE623:
 3463              	.LBE622:
3361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           tmpAWDLowThresholdShifted  = ADC_AWD23THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->L
 3464              		.loc 1 3361 0 discriminator 2
 3465 0466 0D69     		ldr	r5, [r1, #16]
 3466              	.LVL314:
 3467 0468 D068     		ldr	r0, [r2, #12]
 3468 046a 8008     		lsrs	r0, r0, #2
ARM GAS  /tmp/ccecbe7f.s 			page 296


 3469 046c 00F00400 		and	r0, r0, #4
 3470 0470 4000     		lsls	r0, r0, #1
 3471 0472 8540     		lsls	r5, r5, r0
 3472 0474 D0E7     		b	.L286
 3473              	.LVL315:
 3474              	.L287:
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3475              		.loc 1 3362 0 discriminator 2
 3476 0476 4E69     		ldr	r6, [r1, #20]
 3477 0478 D068     		ldr	r0, [r2, #12]
 3478 047a 8008     		lsrs	r0, r0, #2
 3479 047c 00F00400 		and	r0, r0, #4
 3480 0480 4000     		lsls	r0, r0, #1
 3481 0482 06FA00F0 		lsl	r0, r6, r0
 3482 0486 D2E7     		b	.L284
 3483              	.LVL316:
 3484              	.L316:
 3485              	.LBB627:
 3486              	.LBB626:
 3487              	.LBB625:
6027:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** 
 3488              		.loc 2 6027 0
 3489 0488 2032     		adds	r2, r2, #32
 3490              	.LVL317:
 3491 048a 240D     		lsrs	r4, r4, #20
 3492              	.LVL318:
 3493 048c A400     		lsls	r4, r4, #2
 3494 048e 04F00C04 		and	r4, r4, #12
 3495              	.LVL319:
6029:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****                ADC3_TR1_HT1 | ADC3_TR1_LT1,
 3496              		.loc 2 6029 0
 3497 0492 1659     		ldr	r6, [r2, r4]
 3498 0494 06F0F026 		and	r6, r6, #-268374016
 3499 0498 40EA0540 		orr	r0, r0, r5, lsl #16
 3500              	.LVL320:
 3501 049c 3043     		orrs	r0, r0, r6
 3502 049e 1051     		str	r0, [r2, r4]
 3503              	.LVL321:
 3504 04a0 1EE6     		b	.L289
 3505              	.LVL322:
 3506              	.L304:
 3507              	.LBE625:
 3508              	.LBE626:
 3509              	.LBE627:
3376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           MODIFY_REG(hadc->Instance->HTR2_CALFACT,  ADC_HTR_HT, tmpAWDHighThresholdShifted);
 3510              		.loc 1 3376 0
 3511 04a2 D2F8B040 		ldr	r4, [r2, #176]
 3512 04a6 04F07C44 		and	r4, r4, #-67108864
 3513 04aa 2043     		orrs	r0, r0, r4
 3514              	.LVL323:
 3515 04ac C2F8B000 		str	r0, [r2, #176]
3377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3516              		.loc 1 3377 0
 3517 04b0 1868     		ldr	r0, [r3]
 3518 04b2 D0F8B420 		ldr	r2, [r0, #180]
 3519 04b6 02F07C42 		and	r2, r2, #-67108864
 3520 04ba 1543     		orrs	r5, r5, r2
ARM GAS  /tmp/ccecbe7f.s 			page 297


 3521              	.LVL324:
 3522 04bc C0F8B450 		str	r5, [r0, #180]
 3523 04c0 0EE6     		b	.L289
 3524              	.L305:
3404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3525              		.loc 1 3404 0
 3526 04c2 1A6E     		ldr	r2, [r3, #96]
 3527 04c4 22F40032 		bic	r2, r2, #131072
 3528 04c8 1A66     		str	r2, [r3, #96]
3410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3529              		.loc 1 3410 0
 3530 04ca 1A68     		ldr	r2, [r3]
 3531              	.LVL325:
 3532              	.LBB628:
 3533              	.LBB629:
7496:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3534              		.loc 2 7496 0
 3535 04cc 4FF48070 		mov	r0, #256
 3536 04d0 1060     		str	r0, [r2]
 3537              	.LVL326:
 3538              	.LBE629:
 3539              	.LBE628:
3413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 3540              		.loc 1 3413 0
 3541 04d2 0A7B     		ldrb	r2, [r1, #12]	@ zero_extendqisi2
 3542 04d4 012A     		cmp	r2, #1
 3543 04d6 06D0     		beq	.L317
3419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3544              		.loc 1 3419 0
 3545 04d8 1968     		ldr	r1, [r3]
 3546              	.LVL327:
 3547              	.LBB630:
 3548              	.LBB631:
8010:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3549              		.loc 2 8010 0
 3550 04da 4A68     		ldr	r2, [r1, #4]
 3551 04dc 22F48072 		bic	r2, r2, #256
 3552 04e0 4A60     		str	r2, [r1, #4]
 3553              	.LBE631:
 3554              	.LBE630:
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 3555              		.loc 1 3135 0
 3556 04e2 0020     		movs	r0, #0
 3557 04e4 10E0     		b	.L262
 3558              	.LVL328:
 3559              	.L317:
3415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3560              		.loc 1 3415 0
 3561 04e6 1968     		ldr	r1, [r3]
 3562              	.LVL329:
 3563              	.LBB632:
 3564              	.LBB633:
7889:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3565              		.loc 2 7889 0
 3566 04e8 4A68     		ldr	r2, [r1, #4]
 3567 04ea 0243     		orrs	r2, r2, r0
 3568 04ec 4A60     		str	r2, [r1, #4]
ARM GAS  /tmp/ccecbe7f.s 			page 298


 3569              	.LBE633:
 3570              	.LBE632:
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 3571              		.loc 1 3135 0
 3572 04ee 0020     		movs	r0, #0
 3573 04f0 0AE0     		b	.L262
 3574              	.LVL330:
 3575              	.L306:
3437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3576              		.loc 1 3437 0
 3577 04f2 1968     		ldr	r1, [r3]
 3578              	.LVL331:
 3579              	.LBB634:
 3580              	.LBB635:
7900:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3581              		.loc 2 7900 0
 3582 04f4 4A68     		ldr	r2, [r1, #4]
 3583 04f6 0243     		orrs	r2, r2, r0
 3584 04f8 4A60     		str	r2, [r1, #4]
 3585              	.LBE635:
 3586              	.LBE634:
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpAWDHighThresholdShifted;
 3587              		.loc 1 3135 0
 3588 04fa 0020     		movs	r0, #0
 3589 04fc 04E0     		b	.L262
 3590              	.LVL332:
 3591              	.L242:
3452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3592              		.loc 1 3452 0
 3593 04fe 1A6E     		ldr	r2, [r3, #96]
 3594 0500 42F02002 		orr	r2, r2, #32
 3595 0504 1A66     		str	r2, [r3, #96]
 3596              	.LVL333:
3454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 3597              		.loc 1 3454 0
 3598 0506 0120     		movs	r0, #1
 3599              	.LVL334:
 3600              	.L262:
3457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3601              		.loc 1 3457 0
 3602 0508 0022     		movs	r2, #0
 3603 050a 83F85C20 		strb	r2, [r3, #92]
3461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3604              		.loc 1 3461 0
 3605 050e F0BC     		pop	{r4, r5, r6, r7}
 3606              	.LCFI12:
 3607              		.cfi_restore 7
 3608              		.cfi_restore 6
 3609              		.cfi_restore 5
 3610              		.cfi_restore 4
 3611              		.cfi_def_cfa_offset 0
 3612 0510 7047     		bx	lr
 3613              	.LVL335:
 3614              	.L294:
3193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3615              		.loc 1 3193 0
 3616 0512 0220     		movs	r0, #2
ARM GAS  /tmp/ccecbe7f.s 			page 299


3461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3617              		.loc 1 3461 0
 3618 0514 7047     		bx	lr
 3619              	.L321:
 3620 0516 00BF     		.align	2
 3621              	.L320:
 3622 0518 00600258 		.word	1476550656
 3623 051c FFFF1F00 		.word	2097151
 3624 0520 FFFFCF7D 		.word	2110783487
 3625 0524 FFFF8F01 		.word	26214399
 3626 0528 0000C07D 		.word	2109734912
 3627              		.cfi_endproc
 3628              	.LFE362:
 3630              		.section	.text.HAL_ADC_GetState,"ax",%progbits
 3631              		.align	1
 3632              		.global	HAL_ADC_GetState
 3633              		.syntax unified
 3634              		.thumb
 3635              		.thumb_func
 3636              		.fpu fpv5-d16
 3638              	HAL_ADC_GetState:
 3639              	.LFB363:
3496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 3640              		.loc 1 3496 0
 3641              		.cfi_startproc
 3642              		@ args = 0, pretend = 0, frame = 0
 3643              		@ frame_needed = 0, uses_anonymous_args = 0
 3644              		@ link register save eliminated.
 3645              	.LVL336:
3501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3646              		.loc 1 3501 0
 3647 0000 006E     		ldr	r0, [r0, #96]
 3648              	.LVL337:
3502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3649              		.loc 1 3502 0
 3650 0002 7047     		bx	lr
 3651              		.cfi_endproc
 3652              	.LFE363:
 3654              		.section	.text.HAL_ADC_GetError,"ax",%progbits
 3655              		.align	1
 3656              		.global	HAL_ADC_GetError
 3657              		.syntax unified
 3658              		.thumb
 3659              		.thumb_func
 3660              		.fpu fpv5-d16
 3662              	HAL_ADC_GetError:
 3663              	.LFB364:
3510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Check the parameters */
 3664              		.loc 1 3510 0
 3665              		.cfi_startproc
 3666              		@ args = 0, pretend = 0, frame = 0
 3667              		@ frame_needed = 0, uses_anonymous_args = 0
 3668              		@ link register save eliminated.
 3669              	.LVL338:
3514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3670              		.loc 1 3514 0
 3671 0000 406E     		ldr	r0, [r0, #100]
ARM GAS  /tmp/ccecbe7f.s 			page 300


 3672              	.LVL339:
3515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3673              		.loc 1 3515 0
 3674 0002 7047     		bx	lr
 3675              		.cfi_endproc
 3676              	.LFE364:
 3678              		.section	.text.ADC_ConversionStop,"ax",%progbits
 3679              		.align	1
 3680              		.global	ADC_ConversionStop
 3681              		.syntax unified
 3682              		.thumb
 3683              		.thumb_func
 3684              		.fpu fpv5-d16
 3686              	ADC_ConversionStop:
 3687              	.LFB365:
3540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
 3688              		.loc 1 3540 0
 3689              		.cfi_startproc
 3690              		@ args = 0, pretend = 0, frame = 0
 3691              		@ frame_needed = 0, uses_anonymous_args = 0
 3692              	.LVL340:
 3693 0000 70B5     		push	{r4, r5, r6, lr}
 3694              	.LCFI13:
 3695              		.cfi_def_cfa_offset 16
 3696              		.cfi_offset 4, -16
 3697              		.cfi_offset 5, -12
 3698              		.cfi_offset 6, -8
 3699              		.cfi_offset 14, -4
 3700 0002 0446     		mov	r4, r0
 3701              	.LVL341:
3554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 3702              		.loc 1 3554 0
 3703 0004 0368     		ldr	r3, [r0]
 3704              	.LVL342:
 3705              	.LBB636:
 3706              	.LBB637:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3707              		.loc 2 6884 0
 3708 0006 9A68     		ldr	r2, [r3, #8]
 3709 0008 12F0040F 		tst	r2, #4
 3710 000c 4DD0     		beq	.L340
 3711 000e 0122     		movs	r2, #1
 3712              	.L325:
 3713              	.LVL343:
 3714              	.LBE637:
 3715              	.LBE636:
 3716              	.LBB639:
 3717              	.LBB640:
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3718              		.loc 2 7079 0
 3719 0010 9868     		ldr	r0, [r3, #8]
 3720              	.LVL344:
 3721 0012 10F0080F 		tst	r0, #8
 3722 0016 4AD0     		beq	.L341
 3723 0018 0120     		movs	r0, #1
 3724              	.L326:
 3725              	.LVL345:
ARM GAS  /tmp/ccecbe7f.s 			page 301


 3726              	.LBE640:
 3727              	.LBE639:
3556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       || (tmp_adc_is_conversion_on_going_injected != 0UL)
 3728              		.loc 1 3556 0
 3729 001a 0243     		orrs	r2, r0, r2
 3730 001c 67D0     		beq	.L342
3566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (hadc->Init.ContinuousConvMode == ENABLE)
 3731              		.loc 1 3566 0
 3732 001e DA68     		ldr	r2, [r3, #12]
 3733 0020 12F0007F 		tst	r2, #33554432
 3734 0024 04D0     		beq	.L328
3568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 3735              		.loc 1 3568 0
 3736 0026 208B     		ldrh	r0, [r4, #24]
 3737 0028 40F20112 		movw	r2, #257
 3738 002c 9042     		cmp	r0, r2
 3739 002e 4AD0     		beq	.L347
 3740              	.L328:
3595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 3741              		.loc 1 3595 0
 3742 0030 0229     		cmp	r1, #2
 3743 0032 0ED0     		beq	.L333
 3744              	.LVL346:
 3745              	.L332:
3598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3746              		.loc 1 3598 0
 3747 0034 2368     		ldr	r3, [r4]
 3748              	.LVL347:
 3749              	.LBB642:
 3750              	.LBB643:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3751              		.loc 2 6884 0
 3752 0036 9A68     		ldr	r2, [r3, #8]
 3753 0038 12F0040F 		tst	r2, #4
 3754 003c 09D0     		beq	.L333
 3755              	.LVL348:
 3756              	.LBE643:
 3757              	.LBE642:
 3758              	.LBB644:
 3759              	.LBB645:
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3760              		.loc 2 6763 0
 3761 003e 9A68     		ldr	r2, [r3, #8]
 3762 0040 12F0020F 		tst	r2, #2
 3763 0044 05D1     		bne	.L333
 3764              	.LVL349:
 3765              	.LBE645:
 3766              	.LBE644:
 3767              	.LBB646:
 3768              	.LBB647:
6871:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3769              		.loc 2 6871 0
 3770 0046 9868     		ldr	r0, [r3, #8]
 3771 0048 2A4A     		ldr	r2, .L351
 3772 004a 0240     		ands	r2, r2, r0
 3773 004c 42F01002 		orr	r2, r2, #16
 3774 0050 9A60     		str	r2, [r3, #8]
ARM GAS  /tmp/ccecbe7f.s 			page 302


 3775              	.LVL350:
 3776              	.L333:
 3777              	.LBE647:
 3778              	.LBE646:
3609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 3779              		.loc 1 3609 0
 3780 0052 0129     		cmp	r1, #1
 3781 0054 0ED0     		beq	.L334
3612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3782              		.loc 1 3612 0
 3783 0056 2368     		ldr	r3, [r4]
 3784              	.LVL351:
 3785              	.LBB648:
 3786              	.LBB649:
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3787              		.loc 2 7079 0
 3788 0058 9A68     		ldr	r2, [r3, #8]
 3789 005a 12F0080F 		tst	r2, #8
 3790 005e 09D0     		beq	.L334
 3791              	.LVL352:
 3792              	.LBE649:
 3793              	.LBE648:
 3794              	.LBB650:
 3795              	.LBB651:
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3796              		.loc 2 6763 0
 3797 0060 9A68     		ldr	r2, [r3, #8]
 3798 0062 12F0020F 		tst	r2, #2
 3799 0066 05D1     		bne	.L334
 3800              	.LVL353:
 3801              	.LBE651:
 3802              	.LBE650:
 3803              	.LBB652:
 3804              	.LBB653:
7066:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 3805              		.loc 2 7066 0
 3806 0068 9868     		ldr	r0, [r3, #8]
 3807 006a 224A     		ldr	r2, .L351
 3808 006c 0240     		ands	r2, r2, r0
 3809 006e 42F02002 		orr	r2, r2, #32
 3810 0072 9A60     		str	r2, [r3, #8]
 3811              	.LVL354:
 3812              	.L334:
 3813              	.LBE653:
 3814              	.LBE652:
3623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 3815              		.loc 1 3623 0
 3816 0074 0229     		cmp	r1, #2
 3817 0076 36D0     		beq	.L344
 3818 0078 0329     		cmp	r1, #3
 3819 007a 32D1     		bne	.L345
3626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 3820              		.loc 1 3626 0
 3821 007c 0C25     		movs	r5, #12
 3822              	.L336:
 3823              	.LVL355:
3638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 303


 3824              		.loc 1 3638 0
 3825 007e FFF7FEFF 		bl	HAL_GetTick
 3826              	.LVL356:
 3827 0082 0646     		mov	r6, r0
 3828              	.LVL357:
 3829              	.L338:
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 3830              		.loc 1 3640 0
 3831 0084 2368     		ldr	r3, [r4]
 3832 0086 9B68     		ldr	r3, [r3, #8]
 3833 0088 2B42     		tst	r3, r5
 3834 008a 2ED0     		beq	.L348
3642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3835              		.loc 1 3642 0
 3836 008c FFF7FEFF 		bl	HAL_GetTick
 3837              	.LVL358:
 3838 0090 801B     		subs	r0, r0, r6
 3839 0092 0528     		cmp	r0, #5
 3840 0094 F6D9     		bls	.L338
3645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3841              		.loc 1 3645 0
 3842 0096 236E     		ldr	r3, [r4, #96]
 3843 0098 43F01003 		orr	r3, r3, #16
 3844 009c 2366     		str	r3, [r4, #96]
3648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3845              		.loc 1 3648 0
 3846 009e 636E     		ldr	r3, [r4, #100]
 3847 00a0 43F00103 		orr	r3, r3, #1
 3848 00a4 6366     		str	r3, [r4, #100]
3650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 3849              		.loc 1 3650 0
 3850 00a6 0120     		movs	r0, #1
 3851 00a8 22E0     		b	.L327
 3852              	.LVL359:
 3853              	.L340:
 3854              	.LBB654:
 3855              	.LBB638:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3856              		.loc 2 6884 0
 3857 00aa 0022     		movs	r2, #0
 3858 00ac B0E7     		b	.L325
 3859              	.LVL360:
 3860              	.L341:
 3861              	.LBE638:
 3862              	.LBE654:
 3863              	.LBB655:
 3864              	.LBB641:
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3865              		.loc 2 7079 0
 3866 00ae 0020     		movs	r0, #0
 3867 00b0 B3E7     		b	.L326
 3868              	.LVL361:
 3869              	.L350:
 3870              	.LBE641:
 3871              	.LBE655:
3580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3872              		.loc 1 3580 0
ARM GAS  /tmp/ccecbe7f.s 			page 304


 3873 00b2 236E     		ldr	r3, [r4, #96]
 3874 00b4 43F01003 		orr	r3, r3, #16
 3875 00b8 2366     		str	r3, [r4, #96]
3583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3876              		.loc 1 3583 0
 3877 00ba 636E     		ldr	r3, [r4, #100]
 3878 00bc 43F00103 		orr	r3, r3, #1
 3879 00c0 6366     		str	r3, [r4, #100]
3585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 3880              		.loc 1 3585 0
 3881 00c2 0120     		movs	r0, #1
 3882 00c4 14E0     		b	.L327
 3883              	.LVL362:
 3884              	.L347:
3542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t conversion_group_reassigned = ConversionGroup;
 3885              		.loc 1 3542 0
 3886 00c6 0022     		movs	r2, #0
 3887              	.LVL363:
 3888              	.L329:
3575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 3889              		.loc 1 3575 0
 3890 00c8 1968     		ldr	r1, [r3]
 3891 00ca 11F0400F 		tst	r1, #64
 3892 00ce 04D1     		bne	.L349
3577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 3893              		.loc 1 3577 0
 3894 00d0 0949     		ldr	r1, .L351+4
 3895 00d2 8A42     		cmp	r2, r1
 3896 00d4 EDD8     		bhi	.L350
3587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 3897              		.loc 1 3587 0
 3898 00d6 0132     		adds	r2, r2, #1
 3899              	.LVL364:
 3900 00d8 F6E7     		b	.L329
 3901              	.L349:
3591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 3902              		.loc 1 3591 0
 3903 00da 4022     		movs	r2, #64
 3904              	.LVL365:
 3905 00dc 1A60     		str	r2, [r3]
 3906              	.LVL366:
3572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3907              		.loc 1 3572 0
 3908 00de 0121     		movs	r1, #1
 3909 00e0 A8E7     		b	.L332
 3910              	.LVL367:
 3911              	.L345:
3633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 3912              		.loc 1 3633 0
 3913 00e2 0425     		movs	r5, #4
3634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 3914              		.loc 1 3634 0
 3915 00e4 CBE7     		b	.L336
 3916              	.LVL368:
 3917              	.L344:
3629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 3918              		.loc 1 3629 0
ARM GAS  /tmp/ccecbe7f.s 			page 305


 3919 00e6 0825     		movs	r5, #8
 3920 00e8 C9E7     		b	.L336
 3921              	.LVL369:
 3922              	.L348:
3657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 3923              		.loc 1 3657 0
 3924 00ea 0020     		movs	r0, #0
 3925 00ec 00E0     		b	.L327
 3926              	.LVL370:
 3927              	.L342:
 3928 00ee 0020     		movs	r0, #0
 3929              	.LVL371:
 3930              	.L327:
3658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3931              		.loc 1 3658 0
 3932 00f0 70BD     		pop	{r4, r5, r6, pc}
 3933              	.LVL372:
 3934              	.L352:
 3935 00f2 00BF     		.align	2
 3936              	.L351:
 3937 00f4 C0FFFF7F 		.word	2147483584
 3938 00f8 FFDB0C00 		.word	842751
 3939              		.cfi_endproc
 3940              	.LFE365:
 3942              		.section	.text.ADC_Enable,"ax",%progbits
 3943              		.align	1
 3944              		.global	ADC_Enable
 3945              		.syntax unified
 3946              		.thumb
 3947              		.thumb_func
 3948              		.fpu fpv5-d16
 3950              	ADC_Enable:
 3951              	.LFB366:
3670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
 3952              		.loc 1 3670 0
 3953              		.cfi_startproc
 3954              		@ args = 0, pretend = 0, frame = 0
 3955              		@ frame_needed = 0, uses_anonymous_args = 0
 3956              	.LVL373:
 3957 0000 38B5     		push	{r3, r4, r5, lr}
 3958              	.LCFI14:
 3959              		.cfi_def_cfa_offset 16
 3960              		.cfi_offset 3, -16
 3961              		.cfi_offset 4, -12
 3962              		.cfi_offset 5, -8
 3963              		.cfi_offset 14, -4
3677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 3964              		.loc 1 3677 0
 3965 0002 0368     		ldr	r3, [r0]
 3966              	.LVL374:
 3967              	.LBB656:
 3968              	.LBB657:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 3969              		.loc 2 6752 0
 3970 0004 9A68     		ldr	r2, [r3, #8]
 3971 0006 12F0010F 		tst	r2, #1
 3972 000a 52D1     		bne	.L362
ARM GAS  /tmp/ccecbe7f.s 			page 306


 3973              	.LVL375:
 3974              	.LBE657:
 3975              	.LBE656:
 3976              	.LBB658:
3680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 3977              		.loc 1 3680 0
 3978 000c 9968     		ldr	r1, [r3, #8]
 3979 000e 2A4A     		ldr	r2, .L369
 3980 0010 1142     		tst	r1, r2
 3981 0012 09D0     		beq	.L355
3683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3982              		.loc 1 3683 0
 3983 0014 036E     		ldr	r3, [r0, #96]
 3984 0016 43F01003 		orr	r3, r3, #16
 3985 001a 0366     		str	r3, [r0, #96]
3686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 3986              		.loc 1 3686 0
 3987 001c 436E     		ldr	r3, [r0, #100]
 3988 001e 43F00103 		orr	r3, r3, #1
 3989 0022 4366     		str	r3, [r0, #100]
3688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 3990              		.loc 1 3688 0
 3991 0024 0120     		movs	r0, #1
 3992              	.LVL376:
 3993 0026 45E0     		b	.L354
 3994              	.LVL377:
 3995              	.L355:
 3996 0028 0446     		mov	r4, r0
 3997              	.LVL378:
 3998              	.LBB659:
 3999              	.LBB660:
6716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4000              		.loc 2 6716 0
 4001 002a 9968     		ldr	r1, [r3, #8]
 4002 002c 234A     		ldr	r2, .L369+4
 4003 002e 0A40     		ands	r2, r2, r1
 4004 0030 42F00102 		orr	r2, r2, #1
 4005 0034 9A60     		str	r2, [r3, #8]
 4006              	.LVL379:
 4007              	.LBE660:
 4008              	.LBE659:
3695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4009              		.loc 1 3695 0
 4010 0036 FFF7FEFF 		bl	HAL_GetTick
 4011              	.LVL380:
 4012 003a 0546     		mov	r5, r0
 4013              	.LVL381:
3699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4014              		.loc 1 3699 0
 4015 003c 2368     		ldr	r3, [r4]
 4016 003e 2049     		ldr	r1, .L369+8
 4017 0040 204A     		ldr	r2, .L369+12
 4018 0042 9342     		cmp	r3, r2
 4019 0044 18BF     		it	ne
 4020 0046 8B42     		cmpne	r3, r1
 4021 0048 0DD1     		bne	.L363
 4022 004a 02F50072 		add	r2, r2, #512
ARM GAS  /tmp/ccecbe7f.s 			page 307


 4023              	.L356:
 4024              	.LVL382:
 4025              	.LBB661:
 4026              	.LBB662:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4027              		.loc 2 6412 0 discriminator 4
 4028 004e 9268     		ldr	r2, [r2, #8]
 4029              	.LVL383:
 4030 0050 02F01F02 		and	r2, r2, #31
 4031              	.LBE662:
 4032              	.LBE661:
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4033              		.loc 1 3700 0 discriminator 4
 4034 0054 1B49     		ldr	r1, .L369+12
 4035 0056 8B42     		cmp	r3, r1
 4036 0058 07D0     		beq	.L366
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4037              		.loc 1 3700 0 is_stmt 0
 4038 005a 1946     		mov	r1, r3
 4039              	.L357:
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4040              		.loc 1 3700 0 discriminator 4
 4041 005c 9942     		cmp	r1, r3
 4042 005e 0CD0     		beq	.L360
3701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 4043              		.loc 1 3701 0 is_stmt 1
 4044 0060 5AB1     		cbz	r2, .L360
 4045              	.LBE658:
3734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4046              		.loc 1 3734 0
 4047 0062 0020     		movs	r0, #0
 4048              	.LVL384:
 4049 0064 26E0     		b	.L354
 4050              	.LVL385:
 4051              	.L363:
 4052              	.LBB667:
3699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 4053              		.loc 1 3699 0
 4054 0066 184A     		ldr	r2, .L369+16
 4055 0068 F1E7     		b	.L356
 4056              	.L366:
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4057              		.loc 1 3700 0
 4058 006a A1F58071 		sub	r1, r1, #256
 4059 006e F5E7     		b	.L357
 4060              	.LVL386:
 4061              	.L359:
3719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4062              		.loc 1 3719 0
 4063 0070 FFF7FEFF 		bl	HAL_GetTick
 4064              	.LVL387:
 4065 0074 401B     		subs	r0, r0, r5
 4066 0076 0228     		cmp	r0, #2
 4067 0078 0FD8     		bhi	.L367
 4068              	.L360:
3704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4069              		.loc 1 3704 0
ARM GAS  /tmp/ccecbe7f.s 			page 308


 4070 007a 2368     		ldr	r3, [r4]
 4071 007c 1A68     		ldr	r2, [r3]
 4072 007e 12F0010F 		tst	r2, #1
 4073 0082 14D1     		bne	.L368
 4074              	.LVL388:
 4075              	.LBB663:
 4076              	.LBB664:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4077              		.loc 2 6752 0
 4078 0084 9A68     		ldr	r2, [r3, #8]
 4079 0086 12F0010F 		tst	r2, #1
 4080 008a F1D1     		bne	.L359
 4081              	.LVL389:
 4082              	.LBE664:
 4083              	.LBE663:
 4084              	.LBB665:
 4085              	.LBB666:
6716:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4086              		.loc 2 6716 0
 4087 008c 9968     		ldr	r1, [r3, #8]
 4088 008e 0B4A     		ldr	r2, .L369+4
 4089 0090 0A40     		ands	r2, r2, r1
 4090 0092 42F00102 		orr	r2, r2, #1
 4091 0096 9A60     		str	r2, [r3, #8]
 4092 0098 EAE7     		b	.L359
 4093              	.LVL390:
 4094              	.L367:
 4095              	.LBE666:
 4096              	.LBE665:
3722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4097              		.loc 1 3722 0
 4098 009a 236E     		ldr	r3, [r4, #96]
 4099 009c 43F01003 		orr	r3, r3, #16
 4100 00a0 2366     		str	r3, [r4, #96]
3725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4101              		.loc 1 3725 0
 4102 00a2 636E     		ldr	r3, [r4, #100]
 4103 00a4 43F00103 		orr	r3, r3, #1
 4104 00a8 6366     		str	r3, [r4, #100]
3727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4105              		.loc 1 3727 0
 4106 00aa 0120     		movs	r0, #1
 4107 00ac 02E0     		b	.L354
 4108              	.L368:
 4109              	.LBE667:
3734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 4110              		.loc 1 3734 0
 4111 00ae 0020     		movs	r0, #0
 4112              	.LBB668:
 4113 00b0 00E0     		b	.L354
 4114              	.LVL391:
 4115              	.L362:
 4116              	.LBE668:
 4117 00b2 0020     		movs	r0, #0
 4118              	.LVL392:
 4119              	.L354:
3735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 309


 4120              		.loc 1 3735 0
 4121 00b4 38BD     		pop	{r3, r4, r5, pc}
 4122              	.L370:
 4123 00b6 00BF     		.align	2
 4124              	.L369:
 4125 00b8 3F000080 		.word	-2147483585
 4126 00bc C0FFFF7F 		.word	2147483584
 4127 00c0 00200240 		.word	1073881088
 4128 00c4 00210240 		.word	1073881344
 4129 00c8 00630258 		.word	1476551424
 4130              		.cfi_endproc
 4131              	.LFE366:
 4133              		.section	.text.HAL_ADC_Start,"ax",%progbits
 4134              		.align	1
 4135              		.global	HAL_ADC_Start
 4136              		.syntax unified
 4137              		.thumb
 4138              		.thumb_func
 4139              		.fpu fpv5-d16
 4141              	HAL_ADC_Start:
 4142              	.LFB347:
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4143              		.loc 1 1408 0
 4144              		.cfi_startproc
 4145              		@ args = 0, pretend = 0, frame = 0
 4146              		@ frame_needed = 0, uses_anonymous_args = 0
 4147              	.LVL393:
 4148 0000 38B5     		push	{r3, r4, r5, lr}
 4149              	.LCFI15:
 4150              		.cfi_def_cfa_offset 16
 4151              		.cfi_offset 3, -16
 4152              		.cfi_offset 4, -12
 4153              		.cfi_offset 5, -8
 4154              		.cfi_offset 14, -4
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4155              		.loc 1 1411 0
 4156 0002 0368     		ldr	r3, [r0]
 4157 0004 3E49     		ldr	r1, .L392
 4158 0006 3F4A     		ldr	r2, .L392+4
 4159 0008 9342     		cmp	r3, r2
 4160 000a 18BF     		it	ne
 4161 000c 8B42     		cmpne	r3, r1
 4162 000e 52D1     		bne	.L384
 4163 0010 02F50072 		add	r2, r2, #512
 4164              	.L372:
 4165              	.LVL394:
 4166              	.LBB669:
 4167              	.LBB670:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4168              		.loc 2 6412 0 discriminator 4
 4169 0014 9568     		ldr	r5, [r2, #8]
 4170 0016 05F01F05 		and	r5, r5, #31
 4171              	.LVL395:
 4172              	.LBE670:
 4173              	.LBE669:
 4174              	.LBB671:
 4175              	.LBB672:
ARM GAS  /tmp/ccecbe7f.s 			page 310


6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4176              		.loc 2 6884 0 discriminator 4
 4177 001a 9B68     		ldr	r3, [r3, #8]
 4178              	.LVL396:
 4179 001c 13F0040F 		tst	r3, #4
 4180 0020 69D1     		bne	.L385
 4181              	.LVL397:
 4182              	.LBE672:
 4183              	.LBE671:
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4184              		.loc 1 1420 0
 4185 0022 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 4186 0026 012B     		cmp	r3, #1
 4187 0028 68D0     		beq	.L386
 4188 002a 0446     		mov	r4, r0
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4189              		.loc 1 1420 0 is_stmt 0 discriminator 2
 4190 002c 0123     		movs	r3, #1
 4191 002e 80F85C30 		strb	r3, [r0, #92]
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4192              		.loc 1 1423 0 is_stmt 1 discriminator 2
 4193 0032 FFF7FEFF 		bl	ADC_Enable
 4194              	.LVL398:
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 4195              		.loc 1 1426 0 discriminator 2
 4196 0036 0346     		mov	r3, r0
 4197 0038 0028     		cmp	r0, #0
 4198 003a 58D1     		bne	.L374
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4199              		.loc 1 1431 0
 4200 003c 216E     		ldr	r1, [r4, #96]
 4201 003e 324A     		ldr	r2, .L392+8
 4202 0040 0A40     		ands	r2, r2, r1
 4203 0042 42F48072 		orr	r2, r2, #256
 4204 0046 2266     		str	r2, [r4, #96]
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4205              		.loc 1 1438 0
 4206 0048 2268     		ldr	r2, [r4]
 4207 004a 2E49     		ldr	r1, .L392+4
 4208 004c 8A42     		cmp	r2, r1
 4209 004e 34D0     		beq	.L390
 4210 0050 1146     		mov	r1, r2
 4211              	.L375:
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4212              		.loc 1 1438 0 is_stmt 0 discriminator 4
 4213 0052 8A42     		cmp	r2, r1
 4214 0054 00D0     		beq	.L376
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
 4215              		.loc 1 1439 0 is_stmt 1
 4216 0056 1DB9     		cbnz	r5, .L377
 4217              	.L376:
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4218              		.loc 1 1442 0
 4219 0058 216E     		ldr	r1, [r4, #96]
 4220 005a 21F48011 		bic	r1, r1, #1048576
 4221 005e 2166     		str	r1, [r4, #96]
 4222              	.L377:
ARM GAS  /tmp/ccecbe7f.s 			page 311


1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4223              		.loc 1 1447 0
 4224 0060 216E     		ldr	r1, [r4, #96]
 4225 0062 11F4805F 		tst	r1, #4096
 4226 0066 2BD0     		beq	.L378
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4227              		.loc 1 1450 0
 4228 0068 616E     		ldr	r1, [r4, #100]
 4229 006a 21F00601 		bic	r1, r1, #6
 4230 006e 6166     		str	r1, [r4, #100]
 4231              	.L379:
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4232              		.loc 1 1460 0
 4233 0070 1C21     		movs	r1, #28
 4234 0072 1160     		str	r1, [r2]
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4235              		.loc 1 1465 0
 4236 0074 0022     		movs	r2, #0
 4237 0076 84F85C20 		strb	r2, [r4, #92]
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4238              		.loc 1 1475 0
 4239 007a 2268     		ldr	r2, [r4]
 4240 007c 2149     		ldr	r1, .L392+4
 4241 007e 8A42     		cmp	r2, r1
 4242 0080 21D0     		beq	.L391
 4243 0082 1146     		mov	r1, r2
 4244              	.L380:
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4245              		.loc 1 1475 0 is_stmt 0 discriminator 4
 4246 0084 8A42     		cmp	r2, r1
 4247 0086 21D0     		beq	.L381
1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4248              		.loc 1 1477 0 is_stmt 1
 4249 0088 052D     		cmp	r5, #5
 4250 008a 14BF     		ite	ne
 4251 008c 0020     		movne	r0, #0
 4252              	.LVL399:
 4253 008e 0120     		moveq	r0, #1
 4254 0090 E5B1     		cbz	r5, .L381
 4255 0092 D8B9     		cbnz	r0, .L381
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
 4256              		.loc 1 1478 0
 4257 0094 092D     		cmp	r5, #9
 4258 0096 19D0     		beq	.L381
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, update Slave State in setting
 4259              		.loc 1 1493 0
 4260 0098 226E     		ldr	r2, [r4, #96]
 4261 009a 42F48012 		orr	r2, r2, #1048576
 4262 009e 2266     		str	r2, [r4, #96]
 4263              	.LVL400:
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4264              		.loc 1 1497 0
 4265 00a0 CA68     		ldr	r2, [r1, #12]
 4266 00a2 12F0007F 		tst	r2, #33554432
 4267 00a6 27D0     		beq	.L373
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4268              		.loc 1 1499 0
ARM GAS  /tmp/ccecbe7f.s 			page 312


 4269 00a8 226E     		ldr	r2, [r4, #96]
 4270 00aa 22F44052 		bic	r2, r2, #12288
 4271 00ae 42F48052 		orr	r2, r2, #4096
 4272 00b2 2266     		str	r2, [r4, #96]
 4273 00b4 20E0     		b	.L373
 4274              	.LVL401:
 4275              	.L384:
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4276              		.loc 1 1411 0
 4277 00b6 154A     		ldr	r2, .L392+12
 4278 00b8 ACE7     		b	.L372
 4279              	.LVL402:
 4280              	.L390:
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4281              		.loc 1 1438 0
 4282 00ba A1F58071 		sub	r1, r1, #256
 4283 00be C8E7     		b	.L375
 4284              	.L378:
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4285              		.loc 1 1455 0
 4286 00c0 0021     		movs	r1, #0
 4287 00c2 6166     		str	r1, [r4, #100]
 4288 00c4 D4E7     		b	.L379
 4289              	.L391:
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4290              		.loc 1 1475 0
 4291 00c6 A1F58071 		sub	r1, r1, #256
 4292 00ca DBE7     		b	.L380
 4293              	.LVL403:
 4294              	.L381:
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4295              		.loc 1 1482 0
 4296 00cc D168     		ldr	r1, [r2, #12]
 4297 00ce 11F0007F 		tst	r1, #33554432
 4298 00d2 05D0     		beq	.L383
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4299              		.loc 1 1484 0
 4300 00d4 216E     		ldr	r1, [r4, #96]
 4301 00d6 21F44051 		bic	r1, r1, #12288
 4302 00da 41F48051 		orr	r1, r1, #4096
 4303 00de 2166     		str	r1, [r4, #96]
 4304              	.L383:
 4305              	.LVL404:
 4306              	.LBB673:
 4307              	.LBB674:
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4308              		.loc 2 6851 0
 4309 00e0 9068     		ldr	r0, [r2, #8]
 4310 00e2 0B49     		ldr	r1, .L392+16
 4311 00e4 0140     		ands	r1, r1, r0
 4312 00e6 41F00401 		orr	r1, r1, #4
 4313 00ea 9160     		str	r1, [r2, #8]
 4314 00ec 04E0     		b	.L373
 4315              	.LVL405:
 4316              	.L374:
 4317              	.LBE674:
 4318              	.LBE673:
ARM GAS  /tmp/ccecbe7f.s 			page 313


1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 4319              		.loc 1 1507 0
 4320 00ee 0022     		movs	r2, #0
 4321 00f0 84F85C20 		strb	r2, [r4, #92]
 4322 00f4 00E0     		b	.L373
 4323              	.LVL406:
 4324              	.L385:
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 4325              		.loc 1 1512 0
 4326 00f6 0223     		movs	r3, #2
 4327              	.LVL407:
 4328              	.L373:
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4329              		.loc 1 1517 0
 4330 00f8 1846     		mov	r0, r3
 4331 00fa 38BD     		pop	{r3, r4, r5, pc}
 4332              	.LVL408:
 4333              	.L386:
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4334              		.loc 1 1420 0
 4335 00fc 0223     		movs	r3, #2
 4336 00fe FBE7     		b	.L373
 4337              	.L393:
 4338              		.align	2
 4339              	.L392:
 4340 0100 00200240 		.word	1073881088
 4341 0104 00210240 		.word	1073881344
 4342 0108 FEF0FFFF 		.word	-3842
 4343 010c 00630258 		.word	1476551424
 4344 0110 C0FFFF7F 		.word	2147483584
 4345              		.cfi_endproc
 4346              	.LFE347:
 4348              		.section	.text.HAL_ADC_Start_IT,"ax",%progbits
 4349              		.align	1
 4350              		.global	HAL_ADC_Start_IT
 4351              		.syntax unified
 4352              		.thumb
 4353              		.thumb_func
 4354              		.fpu fpv5-d16
 4356              	HAL_ADC_Start_IT:
 4357              	.LFB351:
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4358              		.loc 1 1887 0
 4359              		.cfi_startproc
 4360              		@ args = 0, pretend = 0, frame = 0
 4361              		@ frame_needed = 0, uses_anonymous_args = 0
 4362              	.LVL409:
 4363 0000 38B5     		push	{r3, r4, r5, lr}
 4364              	.LCFI16:
 4365              		.cfi_def_cfa_offset 16
 4366              		.cfi_offset 3, -16
 4367              		.cfi_offset 4, -12
 4368              		.cfi_offset 5, -8
 4369              		.cfi_offset 14, -4
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4370              		.loc 1 1890 0
 4371 0002 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccecbe7f.s 			page 314


 4372 0004 6349     		ldr	r1, .L426
 4373 0006 644A     		ldr	r2, .L426+4
 4374 0008 9342     		cmp	r3, r2
 4375 000a 18BF     		it	ne
 4376 000c 8B42     		cmpne	r3, r1
 4377 000e 75D1     		bne	.L415
 4378 0010 02F50072 		add	r2, r2, #512
 4379              	.L395:
 4380              	.LVL410:
 4381              	.LBB675:
 4382              	.LBB676:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4383              		.loc 2 6412 0 discriminator 4
 4384 0014 9568     		ldr	r5, [r2, #8]
 4385 0016 05F01F05 		and	r5, r5, #31
 4386              	.LVL411:
 4387              	.LBE676:
 4388              	.LBE675:
 4389              	.LBB677:
 4390              	.LBB678:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4391              		.loc 2 6884 0 discriminator 4
 4392 001a 9B68     		ldr	r3, [r3, #8]
 4393              	.LVL412:
 4394 001c 13F0040F 		tst	r3, #4
 4395 0020 40F0B380 		bne	.L416
 4396              	.LVL413:
 4397              	.LBE678:
 4398              	.LBE677:
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4399              		.loc 1 1899 0
 4400 0024 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 4401 0028 012B     		cmp	r3, #1
 4402 002a 00F0B180 		beq	.L417
 4403 002e 0446     		mov	r4, r0
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4404              		.loc 1 1899 0 is_stmt 0 discriminator 2
 4405 0030 0123     		movs	r3, #1
 4406 0032 80F85C30 		strb	r3, [r0, #92]
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4407              		.loc 1 1902 0 is_stmt 1 discriminator 2
 4408 0036 FFF7FEFF 		bl	ADC_Enable
 4409              	.LVL414:
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 4410              		.loc 1 1905 0 discriminator 2
 4411 003a 0346     		mov	r3, r0
 4412 003c 0028     		cmp	r0, #0
 4413 003e 40F0A080 		bne	.L397
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_A
 4414              		.loc 1 1910 0
 4415 0042 216E     		ldr	r1, [r4, #96]
 4416 0044 554A     		ldr	r2, .L426+8
 4417 0046 0A40     		ands	r2, r2, r1
 4418 0048 42F48072 		orr	r2, r2, #256
 4419 004c 2266     		str	r2, [r4, #96]
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4420              		.loc 1 1917 0
ARM GAS  /tmp/ccecbe7f.s 			page 315


 4421 004e 2268     		ldr	r2, [r4]
 4422 0050 5149     		ldr	r1, .L426+4
 4423 0052 8A42     		cmp	r2, r1
 4424 0054 54D0     		beq	.L424
 4425 0056 1146     		mov	r1, r2
 4426              	.L398:
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4427              		.loc 1 1917 0 is_stmt 0 discriminator 4
 4428 0058 8A42     		cmp	r2, r1
 4429 005a 00D0     		beq	.L399
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
 4430              		.loc 1 1918 0 is_stmt 1
 4431 005c 1DB9     		cbnz	r5, .L400
 4432              	.L399:
1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4433              		.loc 1 1921 0
 4434 005e 216E     		ldr	r1, [r4, #96]
 4435 0060 21F48011 		bic	r1, r1, #1048576
 4436 0064 2166     		str	r1, [r4, #96]
 4437              	.L400:
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4438              		.loc 1 1926 0
 4439 0066 216E     		ldr	r1, [r4, #96]
 4440 0068 11F4805F 		tst	r1, #4096
 4441 006c 4BD0     		beq	.L401
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4442              		.loc 1 1929 0
 4443 006e 616E     		ldr	r1, [r4, #100]
 4444 0070 21F00601 		bic	r1, r1, #6
 4445 0074 6166     		str	r1, [r4, #100]
 4446              	.L402:
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4447              		.loc 1 1939 0
 4448 0076 1C21     		movs	r1, #28
 4449 0078 1160     		str	r1, [r2]
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4450              		.loc 1 1944 0
 4451 007a 0022     		movs	r2, #0
 4452 007c 84F85C20 		strb	r2, [r4, #92]
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4453              		.loc 1 1947 0
 4454 0080 2168     		ldr	r1, [r4]
 4455 0082 4A68     		ldr	r2, [r1, #4]
 4456 0084 22F01C02 		bic	r2, r2, #28
 4457 0088 4A60     		str	r2, [r1, #4]
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4458              		.loc 1 1950 0
 4459 008a 6269     		ldr	r2, [r4, #20]
 4460 008c 082A     		cmp	r2, #8
 4461 008e 3DD1     		bne	.L420
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 4462              		.loc 1 1953 0
 4463 0090 2168     		ldr	r1, [r4]
 4464 0092 4A68     		ldr	r2, [r1, #4]
 4465 0094 42F00802 		orr	r2, r2, #8
 4466 0098 4A60     		str	r2, [r1, #4]
 4467              	.L405:
ARM GAS  /tmp/ccecbe7f.s 			page 316


1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4468              		.loc 1 1965 0
 4469 009a E26B     		ldr	r2, [r4, #60]
 4470 009c 22B9     		cbnz	r2, .L406
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4471              		.loc 1 1967 0
 4472 009e 2168     		ldr	r1, [r4]
 4473 00a0 4A68     		ldr	r2, [r1, #4]
 4474 00a2 42F01002 		orr	r2, r2, #16
 4475 00a6 4A60     		str	r2, [r1, #4]
 4476              	.L406:
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4477              		.loc 1 1978 0
 4478 00a8 2268     		ldr	r2, [r4]
 4479 00aa 3B49     		ldr	r1, .L426+4
 4480 00ac 8A42     		cmp	r2, r1
 4481 00ae 33D0     		beq	.L425
 4482 00b0 1146     		mov	r1, r2
 4483              	.L407:
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4484              		.loc 1 1978 0 is_stmt 0 discriminator 4
 4485 00b2 8A42     		cmp	r2, r1
 4486 00b4 33D0     		beq	.L408
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4487              		.loc 1 1980 0 is_stmt 1
 4488 00b6 052D     		cmp	r5, #5
 4489 00b8 14BF     		ite	ne
 4490 00ba 0020     		movne	r0, #0
 4491              	.LVL415:
 4492 00bc 0120     		moveq	r0, #1
 4493 00be 75B3     		cbz	r5, .L408
 4494 00c0 68BB     		cbnz	r0, .L408
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****          )
 4495              		.loc 1 1981 0
 4496 00c2 092D     		cmp	r5, #9
 4497 00c4 2BD0     		beq	.L408
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         /* if Master ADC JAUTO bit is set, Slave injected interruptions
 4498              		.loc 1 2013 0
 4499 00c6 206E     		ldr	r0, [r4, #96]
 4500 00c8 40F48010 		orr	r0, r0, #1048576
 4501 00cc 2066     		str	r0, [r4, #96]
 4502              	.LVL416:
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4503              		.loc 1 2017 0
 4504 00ce C968     		ldr	r1, [r1, #12]
 4505              	.LVL417:
 4506 00d0 11F0007F 		tst	r1, #33554432
 4507 00d4 5AD0     		beq	.L396
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           /* Next, set Slave injected interruptions */
 4508              		.loc 1 2021 0
 4509 00d6 216E     		ldr	r1, [r4, #96]
 4510 00d8 21F44051 		bic	r1, r1, #12288
 4511 00dc 41F48051 		orr	r1, r1, #4096
 4512 00e0 2166     		str	r1, [r4, #96]
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 4513              		.loc 1 2023 0
 4514 00e2 6169     		ldr	r1, [r4, #20]
ARM GAS  /tmp/ccecbe7f.s 			page 317


 4515 00e4 0829     		cmp	r1, #8
 4516 00e6 42D1     		bne	.L422
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4517              		.loc 1 2026 0
 4518 00e8 5168     		ldr	r1, [r2, #4]
 4519 00ea 21F02001 		bic	r1, r1, #32
 4520 00ee 5160     		str	r1, [r2, #4]
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4521              		.loc 1 2027 0
 4522 00f0 2168     		ldr	r1, [r4]
 4523 00f2 4A68     		ldr	r2, [r1, #4]
 4524 00f4 42F04002 		orr	r2, r2, #64
 4525 00f8 4A60     		str	r2, [r1, #4]
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             /* case ADC_EOC_SINGLE_CONV */
 4526              		.loc 1 2028 0
 4527 00fa 47E0     		b	.L396
 4528              	.LVL418:
 4529              	.L415:
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4530              		.loc 1 1890 0
 4531 00fc 284A     		ldr	r2, .L426+12
 4532 00fe 89E7     		b	.L395
 4533              	.LVL419:
 4534              	.L424:
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4535              		.loc 1 1917 0
 4536 0100 A1F58071 		sub	r1, r1, #256
 4537 0104 A8E7     		b	.L398
 4538              	.L401:
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4539              		.loc 1 1934 0
 4540 0106 0021     		movs	r1, #0
 4541 0108 6166     		str	r1, [r4, #100]
 4542 010a B4E7     		b	.L402
 4543              	.L420:
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           break;
 4544              		.loc 1 1957 0
 4545 010c 2168     		ldr	r1, [r4]
 4546 010e 4A68     		ldr	r2, [r1, #4]
 4547 0110 42F00402 		orr	r2, r2, #4
 4548 0114 4A60     		str	r2, [r1, #4]
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4549              		.loc 1 1958 0
 4550 0116 C0E7     		b	.L405
 4551              	.L425:
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4552              		.loc 1 1978 0
 4553 0118 A1F58071 		sub	r1, r1, #256
 4554 011c C9E7     		b	.L407
 4555              	.LVL420:
 4556              	.L408:
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4557              		.loc 1 1985 0
 4558 011e D168     		ldr	r1, [r2, #12]
 4559 0120 11F0007F 		tst	r1, #33554432
 4560 0124 11D0     		beq	.L410
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 318


 4561              		.loc 1 1987 0
 4562 0126 216E     		ldr	r1, [r4, #96]
 4563 0128 21F44051 		bic	r1, r1, #12288
 4564 012c 41F48051 		orr	r1, r1, #4096
 4565 0130 2166     		str	r1, [r4, #96]
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           {
 4566              		.loc 1 1993 0
 4567 0132 6169     		ldr	r1, [r4, #20]
 4568 0134 0829     		cmp	r1, #8
 4569 0136 10D1     		bne	.L421
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 4570              		.loc 1 1996 0
 4571 0138 5168     		ldr	r1, [r2, #4]
 4572 013a 21F02001 		bic	r1, r1, #32
 4573 013e 5160     		str	r1, [r2, #4]
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4574              		.loc 1 1997 0
 4575 0140 2168     		ldr	r1, [r4]
 4576 0142 4A68     		ldr	r2, [r1, #4]
 4577 0144 42F04002 		orr	r2, r2, #64
 4578 0148 4A60     		str	r2, [r1, #4]
 4579              	.L410:
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4580              		.loc 1 2008 0
 4581 014a 2168     		ldr	r1, [r4]
 4582              	.LVL421:
 4583              	.LBB679:
 4584              	.LBB680:
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4585              		.loc 2 6851 0
 4586 014c 8868     		ldr	r0, [r1, #8]
 4587 014e 154A     		ldr	r2, .L426+16
 4588 0150 0240     		ands	r2, r2, r0
 4589 0152 42F00402 		orr	r2, r2, #4
 4590 0156 8A60     		str	r2, [r1, #8]
 4591 0158 18E0     		b	.L396
 4592              	.LVL422:
 4593              	.L421:
 4594              	.LBE680:
 4595              	.LBE679:
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4596              		.loc 1 2001 0
 4597 015a 5168     		ldr	r1, [r2, #4]
 4598 015c 21F04001 		bic	r1, r1, #64
 4599 0160 5160     		str	r1, [r2, #4]
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4600              		.loc 1 2002 0
 4601 0162 2168     		ldr	r1, [r4]
 4602 0164 4A68     		ldr	r2, [r1, #4]
 4603 0166 42F02002 		orr	r2, r2, #32
 4604 016a 4A60     		str	r2, [r1, #4]
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 4605              		.loc 1 2003 0
 4606 016c EDE7     		b	.L410
 4607              	.L422:
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 4608              		.loc 1 2031 0
ARM GAS  /tmp/ccecbe7f.s 			page 319


 4609 016e 5168     		ldr	r1, [r2, #4]
 4610 0170 21F04001 		bic	r1, r1, #64
 4611 0174 5160     		str	r1, [r2, #4]
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****               break;
 4612              		.loc 1 2032 0
 4613 0176 2168     		ldr	r1, [r4]
 4614 0178 4A68     		ldr	r2, [r1, #4]
 4615 017a 42F02002 		orr	r2, r2, #32
 4616 017e 4A60     		str	r2, [r1, #4]
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           }
 4617              		.loc 1 2033 0
 4618 0180 04E0     		b	.L396
 4619              	.LVL423:
 4620              	.L397:
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 4621              		.loc 1 2041 0
 4622 0182 0022     		movs	r2, #0
 4623 0184 84F85C20 		strb	r2, [r4, #92]
 4624 0188 00E0     		b	.L396
 4625              	.LVL424:
 4626              	.L416:
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 4627              		.loc 1 2047 0
 4628 018a 0223     		movs	r3, #2
 4629              	.LVL425:
 4630              	.L396:
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4631              		.loc 1 2052 0
 4632 018c 1846     		mov	r0, r3
 4633 018e 38BD     		pop	{r3, r4, r5, pc}
 4634              	.LVL426:
 4635              	.L417:
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4636              		.loc 1 1899 0
 4637 0190 0223     		movs	r3, #2
 4638 0192 FBE7     		b	.L396
 4639              	.L427:
 4640              		.align	2
 4641              	.L426:
 4642 0194 00200240 		.word	1073881088
 4643 0198 00210240 		.word	1073881344
 4644 019c FEF0FFFF 		.word	-3842
 4645 01a0 00630258 		.word	1476551424
 4646 01a4 C0FFFF7F 		.word	2147483584
 4647              		.cfi_endproc
 4648              	.LFE351:
 4650              		.section	.text.HAL_ADC_Start_DMA,"ax",%progbits
 4651              		.align	1
 4652              		.global	HAL_ADC_Start_DMA
 4653              		.syntax unified
 4654              		.thumb
 4655              		.thumb_func
 4656              		.fpu fpv5-d16
 4658              	HAL_ADC_Start_DMA:
 4659              	.LFB353:
2115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 4660              		.loc 1 2115 0
ARM GAS  /tmp/ccecbe7f.s 			page 320


 4661              		.cfi_startproc
 4662              		@ args = 0, pretend = 0, frame = 0
 4663              		@ frame_needed = 0, uses_anonymous_args = 0
 4664              	.LVL427:
 4665 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 4666              	.LCFI17:
 4667              		.cfi_def_cfa_offset 24
 4668              		.cfi_offset 3, -24
 4669              		.cfi_offset 4, -20
 4670              		.cfi_offset 5, -16
 4671              		.cfi_offset 6, -12
 4672              		.cfi_offset 7, -8
 4673              		.cfi_offset 14, -4
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4674              		.loc 1 2117 0
 4675 0002 0468     		ldr	r4, [r0]
 4676 0004 494E     		ldr	r6, .L448
 4677 0006 4A4D     		ldr	r5, .L448+4
 4678 0008 AC42     		cmp	r4, r5
 4679 000a 18BF     		it	ne
 4680 000c B442     		cmpne	r4, r6
 4681 000e 1ED1     		bne	.L441
 4682 0010 05F50075 		add	r5, r5, #512
 4683              	.L429:
 4684              	.LVL428:
 4685              	.LBB681:
 4686              	.LBB682:
6412:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4687              		.loc 2 6412 0 discriminator 4
 4688 0014 AD68     		ldr	r5, [r5, #8]
 4689              	.LVL429:
 4690 0016 05F01F05 		and	r5, r5, #31
 4691              	.LVL430:
 4692              	.LBE682:
 4693              	.LBE681:
 4694              	.LBB683:
 4695              	.LBB684:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4696              		.loc 2 6884 0 discriminator 4
 4697 001a A468     		ldr	r4, [r4, #8]
 4698              	.LVL431:
 4699 001c 14F0040F 		tst	r4, #4
 4700 0020 7FD1     		bne	.L442
 4701              	.LVL432:
 4702              	.LBE684:
 4703              	.LBE683:
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4704              		.loc 1 2126 0
 4705 0022 90F85C40 		ldrb	r4, [r0, #92]	@ zero_extendqisi2
 4706 0026 012C     		cmp	r4, #1
 4707 0028 7ED0     		beq	.L443
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4708              		.loc 1 2126 0 is_stmt 0 discriminator 2
 4709 002a 0123     		movs	r3, #1
 4710 002c 80F85C30 		strb	r3, [r0, #92]
2131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 4711              		.loc 1 2131 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/ccecbe7f.s 			page 321


 4712 0030 052D     		cmp	r5, #5
 4713 0032 14BF     		ite	ne
 4714 0034 0024     		movne	r4, #0
 4715 0036 0124     		moveq	r4, #1
 4716 0038 002D     		cmp	r5, #0
 4717 003a 08BF     		it	eq
 4718 003c 1C46     		moveq	r4, r3
2130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 4719              		.loc 1 2130 0 discriminator 2
 4720 003e 44B9     		cbnz	r4, .L431
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****        )
 4721              		.loc 1 2132 0
 4722 0040 092D     		cmp	r5, #9
 4723 0042 06D0     		beq	.L431
 4724              	.LVL433:
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 4725              		.loc 1 2236 0
 4726 0044 0023     		movs	r3, #0
 4727 0046 80F85C30 		strb	r3, [r0, #92]
2234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Process unlocked */
 4728              		.loc 1 2234 0
 4729 004a 0123     		movs	r3, #1
 4730 004c 6AE0     		b	.L430
 4731              	.LVL434:
 4732              	.L441:
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4733              		.loc 1 2117 0
 4734 004e 394D     		ldr	r5, .L448+8
 4735 0050 E0E7     		b	.L429
 4736              	.L431:
 4737 0052 1646     		mov	r6, r2
 4738 0054 0F46     		mov	r7, r1
 4739 0056 0446     		mov	r4, r0
2136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4740              		.loc 1 2136 0
 4741 0058 FFF7FEFF 		bl	ADC_Enable
 4742              	.LVL435:
2139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 4743              		.loc 1 2139 0
 4744 005c 0346     		mov	r3, r0
 4745 005e 0028     		cmp	r0, #0
 4746 0060 5BD1     		bne	.L433
2144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                           HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL
 4747              		.loc 1 2144 0
 4748 0062 226E     		ldr	r2, [r4, #96]
 4749 0064 344B     		ldr	r3, .L448+12
 4750 0066 1340     		ands	r3, r3, r2
 4751 0068 43F48073 		orr	r3, r3, #256
 4752 006c 2366     		str	r3, [r4, #96]
2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4753              		.loc 1 2151 0
 4754 006e 2368     		ldr	r3, [r4]
 4755 0070 2F4A     		ldr	r2, .L448+4
 4756 0072 9342     		cmp	r3, r2
 4757 0074 3DD0     		beq	.L446
 4758 0076 1A46     		mov	r2, r3
 4759              	.L434:
ARM GAS  /tmp/ccecbe7f.s 			page 322


2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4760              		.loc 1 2151 0 is_stmt 0 discriminator 4
 4761 0078 9342     		cmp	r3, r2
 4762 007a 00D0     		beq	.L435
2152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****            )
 4763              		.loc 1 2152 0 is_stmt 1
 4764 007c 1DB9     		cbnz	r5, .L436
 4765              	.L435:
2155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4766              		.loc 1 2155 0
 4767 007e 236E     		ldr	r3, [r4, #96]
 4768 0080 23F48013 		bic	r3, r3, #1048576
 4769 0084 2366     		str	r3, [r4, #96]
 4770              	.L436:
2159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4771              		.loc 1 2159 0
 4772 0086 236E     		ldr	r3, [r4, #96]
 4773 0088 13F4805F 		tst	r3, #4096
 4774 008c 34D0     		beq	.L437
2162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4775              		.loc 1 2162 0
 4776 008e 636E     		ldr	r3, [r4, #100]
 4777 0090 23F00603 		bic	r3, r3, #6
 4778 0094 6366     		str	r3, [r4, #100]
 4779              	.L438:
2171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4780              		.loc 1 2171 0
 4781 0096 A36D     		ldr	r3, [r4, #88]
 4782 0098 284A     		ldr	r2, .L448+16
 4783 009a DA63     		str	r2, [r3, #60]
2174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4784              		.loc 1 2174 0
 4785 009c A36D     		ldr	r3, [r4, #88]
 4786 009e 284A     		ldr	r2, .L448+20
 4787 00a0 1A64     		str	r2, [r3, #64]
2177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4788              		.loc 1 2177 0
 4789 00a2 A36D     		ldr	r3, [r4, #88]
 4790 00a4 274A     		ldr	r2, .L448+24
 4791 00a6 DA64     		str	r2, [r3, #76]
2186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4792              		.loc 1 2186 0
 4793 00a8 2368     		ldr	r3, [r4]
 4794 00aa 1C22     		movs	r2, #28
 4795 00ac 1A60     		str	r2, [r3]
2191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4796              		.loc 1 2191 0
 4797 00ae 0023     		movs	r3, #0
 4798 00b0 84F85C30 		strb	r3, [r4, #92]
2196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4799              		.loc 1 2196 0
 4800 00b4 2268     		ldr	r2, [r4]
 4801 00b6 5368     		ldr	r3, [r2, #4]
 4802 00b8 43F01003 		orr	r3, r3, #16
 4803 00bc 5360     		str	r3, [r2, #4]
2200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 4804              		.loc 1 2200 0
ARM GAS  /tmp/ccecbe7f.s 			page 323


 4805 00be 2368     		ldr	r3, [r4]
 4806 00c0 214A     		ldr	r2, .L448+28
 4807 00c2 9342     		cmp	r3, r2
 4808 00c4 1BD0     		beq	.L447
2207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4809              		.loc 1 2207 0
 4810 00c6 226B     		ldr	r2, [r4, #48]
 4811              	.LVL436:
 4812              	.LBB685:
 4813              	.LBB686:
4288:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4814              		.loc 2 4288 0
 4815 00c8 D968     		ldr	r1, [r3, #12]
 4816 00ca 21F00301 		bic	r1, r1, #3
 4817 00ce 0A43     		orrs	r2, r2, r1
 4818              	.LVL437:
 4819 00d0 DA60     		str	r2, [r3, #12]
 4820              	.LVL438:
 4821              	.L440:
 4822              	.LBE686:
 4823              	.LBE685:
2216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4824              		.loc 1 2216 0
 4825 00d2 2168     		ldr	r1, [r4]
 4826 00d4 3346     		mov	r3, r6
 4827 00d6 3A46     		mov	r2, r7
 4828 00d8 4031     		adds	r1, r1, #64
 4829 00da A06D     		ldr	r0, [r4, #88]
 4830              	.LVL439:
 4831 00dc FFF7FEFF 		bl	HAL_DMA_Start_IT
 4832              	.LVL440:
 4833 00e0 0346     		mov	r3, r0
 4834              	.LVL441:
2223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4835              		.loc 1 2223 0
 4836 00e2 2168     		ldr	r1, [r4]
 4837              	.LVL442:
 4838              	.LBB687:
 4839              	.LBB688:
6851:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 4840              		.loc 2 6851 0
 4841 00e4 8868     		ldr	r0, [r1, #8]
 4842 00e6 194A     		ldr	r2, .L448+32
 4843 00e8 0240     		ands	r2, r2, r0
 4844 00ea 42F00402 		orr	r2, r2, #4
 4845 00ee 8A60     		str	r2, [r1, #8]
 4846 00f0 18E0     		b	.L430
 4847              	.LVL443:
 4848              	.L446:
 4849              	.LBE688:
 4850              	.LBE687:
2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 4851              		.loc 1 2151 0
 4852 00f2 A2F58072 		sub	r2, r2, #256
 4853 00f6 BFE7     		b	.L434
 4854              	.L437:
2167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
ARM GAS  /tmp/ccecbe7f.s 			page 324


 4855              		.loc 1 2167 0
 4856 00f8 0023     		movs	r3, #0
 4857 00fa 6366     		str	r3, [r4, #100]
 4858 00fc CBE7     		b	.L438
 4859              	.L447:
2202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****           LL_ADC_EnableDMAReq(hadc->Instance);
 4860              		.loc 1 2202 0
 4861 00fe 94F83810 		ldrb	r1, [r4, #56]	@ zero_extendqisi2
 4862              	.LVL444:
 4863              	.LBB689:
 4864              	.LBB690:
4351:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****   }
 4865              		.loc 2 4351 0
 4866 0102 DA68     		ldr	r2, [r3, #12]
 4867 0104 22F00302 		bic	r2, r2, #3
 4868 0108 42EA4102 		orr	r2, r2, r1, lsl #1
 4869 010c DA60     		str	r2, [r3, #12]
 4870              	.LVL445:
 4871              	.LBE690:
 4872              	.LBE689:
2203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         }
 4873              		.loc 1 2203 0
 4874 010e 2268     		ldr	r2, [r4]
 4875              	.LVL446:
 4876              	.LBB691:
 4877              	.LBB692:
4300:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4878              		.loc 2 4300 0
 4879 0110 D368     		ldr	r3, [r2, #12]
 4880 0112 43F00103 		orr	r3, r3, #1
 4881 0116 D360     		str	r3, [r2, #12]
 4882 0118 DBE7     		b	.L440
 4883              	.LVL447:
 4884              	.L433:
 4885              	.LBE692:
 4886              	.LBE691:
2228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 4887              		.loc 1 2228 0
 4888 011a 0022     		movs	r2, #0
 4889 011c 84F85C20 		strb	r2, [r4, #92]
 4890 0120 00E0     		b	.L430
 4891              	.LVL448:
 4892              	.L442:
2241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 4893              		.loc 1 2241 0
 4894 0122 0223     		movs	r3, #2
 4895              	.LVL449:
 4896              	.L430:
2246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4897              		.loc 1 2246 0
 4898 0124 1846     		mov	r0, r3
 4899 0126 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 4900              	.LVL450:
 4901              	.L443:
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4902              		.loc 1 2126 0
 4903 0128 0223     		movs	r3, #2
ARM GAS  /tmp/ccecbe7f.s 			page 325


 4904 012a FBE7     		b	.L430
 4905              	.L449:
 4906              		.align	2
 4907              	.L448:
 4908 012c 00200240 		.word	1073881088
 4909 0130 00210240 		.word	1073881344
 4910 0134 00630258 		.word	1476551424
 4911 0138 FEF0FFFF 		.word	-3842
 4912 013c 00000000 		.word	ADC_DMAConvCplt
 4913 0140 00000000 		.word	ADC_DMAHalfConvCplt
 4914 0144 00000000 		.word	ADC_DMAError
 4915 0148 00600258 		.word	1476550656
 4916 014c C0FFFF7F 		.word	2147483584
 4917              		.cfi_endproc
 4918              	.LFE353:
 4920              		.section	.text.ADC_Disable,"ax",%progbits
 4921              		.align	1
 4922              		.global	ADC_Disable
 4923              		.syntax unified
 4924              		.thumb
 4925              		.thumb_func
 4926              		.fpu fpv5-d16
 4928              	ADC_Disable:
 4929              	.LFB367:
3745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tickstart;
 4930              		.loc 1 3745 0
 4931              		.cfi_startproc
 4932              		@ args = 0, pretend = 0, frame = 0
 4933              		@ frame_needed = 0, uses_anonymous_args = 0
 4934              	.LVL451:
 4935 0000 38B5     		push	{r3, r4, r5, lr}
 4936              	.LCFI18:
 4937              		.cfi_def_cfa_offset 16
 4938              		.cfi_offset 3, -16
 4939              		.cfi_offset 4, -12
 4940              		.cfi_offset 5, -8
 4941              		.cfi_offset 14, -4
3747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4942              		.loc 1 3747 0
 4943 0002 0368     		ldr	r3, [r0]
 4944              	.LVL452:
 4945              	.LBB693:
 4946              	.LBB694:
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4947              		.loc 2 6763 0
 4948 0004 9A68     		ldr	r2, [r3, #8]
 4949 0006 12F0020F 		tst	r2, #2
 4950 000a 15D0     		beq	.L456
 4951 000c 0121     		movs	r1, #1
 4952              	.L451:
 4953              	.LVL453:
 4954              	.LBE694:
 4955              	.LBE693:
 4956              	.LBB696:
 4957              	.LBB697:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4958              		.loc 2 6752 0
ARM GAS  /tmp/ccecbe7f.s 			page 326


 4959 000e 9A68     		ldr	r2, [r3, #8]
 4960 0010 12F0010F 		tst	r2, #1
 4961 0014 35D0     		beq	.L457
 4962              	.LVL454:
 4963              	.LBE697:
 4964              	.LBE696:
3753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 4965              		.loc 1 3753 0
 4966 0016 0029     		cmp	r1, #0
 4967 0018 35D1     		bne	.L458
3757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 4968              		.loc 1 3757 0
 4969 001a 9A68     		ldr	r2, [r3, #8]
 4970 001c 02F00D02 		and	r2, r2, #13
 4971 0020 012A     		cmp	r2, #1
 4972 0022 0BD0     		beq	.L460
3766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4973              		.loc 1 3766 0
 4974 0024 036E     		ldr	r3, [r0, #96]
 4975 0026 43F01003 		orr	r3, r3, #16
 4976 002a 0366     		str	r3, [r0, #96]
3769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 4977              		.loc 1 3769 0
 4978 002c 436E     		ldr	r3, [r0, #100]
 4979 002e 43F00103 		orr	r3, r3, #1
 4980 0032 4366     		str	r3, [r0, #100]
3771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 4981              		.loc 1 3771 0
 4982 0034 0120     		movs	r0, #1
 4983              	.LVL455:
 4984 0036 25E0     		b	.L452
 4985              	.LVL456:
 4986              	.L456:
 4987              	.LBB698:
 4988              	.LBB695:
6763:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 4989              		.loc 2 6763 0
 4990 0038 0021     		movs	r1, #0
 4991 003a E8E7     		b	.L451
 4992              	.LVL457:
 4993              	.L460:
 4994 003c 0446     		mov	r4, r0
 4995              	.LVL458:
 4996              	.LBE695:
 4997              	.LBE698:
 4998              	.LBB699:
 4999              	.LBB700:
6736:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 5000              		.loc 2 6736 0
 5001 003e 9968     		ldr	r1, [r3, #8]
 5002 0040 124A     		ldr	r2, .L462
 5003 0042 0A40     		ands	r2, r2, r1
 5004 0044 42F00202 		orr	r2, r2, #2
 5005 0048 9A60     		str	r2, [r3, #8]
 5006              	.LVL459:
 5007              	.LBE700:
 5008              	.LBE699:
ARM GAS  /tmp/ccecbe7f.s 			page 327


3761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 5009              		.loc 1 3761 0
 5010 004a 0368     		ldr	r3, [r0]
 5011 004c 0322     		movs	r2, #3
 5012 004e 1A60     		str	r2, [r3]
3776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5013              		.loc 1 3776 0
 5014 0050 FFF7FEFF 		bl	HAL_GetTick
 5015              	.LVL460:
 5016 0054 0546     		mov	r5, r0
 5017              	.LVL461:
 5018              	.L454:
3778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5019              		.loc 1 3778 0
 5020 0056 2368     		ldr	r3, [r4]
 5021 0058 9B68     		ldr	r3, [r3, #8]
 5022 005a 13F0010F 		tst	r3, #1
 5023 005e 0ED0     		beq	.L461
3780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 5024              		.loc 1 3780 0
 5025 0060 FFF7FEFF 		bl	HAL_GetTick
 5026              	.LVL462:
 5027 0064 401B     		subs	r0, r0, r5
 5028 0066 0228     		cmp	r0, #2
 5029 0068 F5D9     		bls	.L454
3783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5030              		.loc 1 3783 0
 5031 006a 236E     		ldr	r3, [r4, #96]
 5032 006c 43F01003 		orr	r3, r3, #16
 5033 0070 2366     		str	r3, [r4, #96]
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5034              		.loc 1 3786 0
 5035 0072 636E     		ldr	r3, [r4, #100]
 5036 0074 43F00103 		orr	r3, r3, #1
 5037 0078 6366     		str	r3, [r4, #100]
3788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 5038              		.loc 1 3788 0
 5039 007a 0120     		movs	r0, #1
 5040 007c 02E0     		b	.L452
 5041              	.L461:
3794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5042              		.loc 1 3794 0
 5043 007e 0020     		movs	r0, #0
 5044 0080 00E0     		b	.L452
 5045              	.LVL463:
 5046              	.L457:
 5047 0082 0020     		movs	r0, #0
 5048              	.LVL464:
 5049              	.L452:
3795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5050              		.loc 1 3795 0
 5051 0084 38BD     		pop	{r3, r4, r5, pc}
 5052              	.LVL465:
 5053              	.L458:
3794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5054              		.loc 1 3794 0
 5055 0086 0020     		movs	r0, #0
ARM GAS  /tmp/ccecbe7f.s 			page 328


 5056              	.LVL466:
 5057 0088 FCE7     		b	.L452
 5058              	.L463:
 5059 008a 00BF     		.align	2
 5060              	.L462:
 5061 008c C0FFFF7F 		.word	2147483584
 5062              		.cfi_endproc
 5063              	.LFE367:
 5065              		.section	.text.HAL_ADC_DeInit,"ax",%progbits
 5066              		.align	1
 5067              		.global	HAL_ADC_DeInit
 5068              		.syntax unified
 5069              		.thumb
 5070              		.thumb_func
 5071              		.fpu fpv5-d16
 5073              	HAL_ADC_DeInit:
 5074              	.LFB344:
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5075              		.loc 1 852 0
 5076              		.cfi_startproc
 5077              		@ args = 0, pretend = 0, frame = 0
 5078              		@ frame_needed = 0, uses_anonymous_args = 0
 5079              	.LVL467:
 5080 0000 38B5     		push	{r3, r4, r5, lr}
 5081              	.LCFI19:
 5082              		.cfi_def_cfa_offset 16
 5083              		.cfi_offset 3, -16
 5084              		.cfi_offset 4, -12
 5085              		.cfi_offset 5, -8
 5086              		.cfi_offset 14, -4
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5087              		.loc 1 856 0
 5088 0002 0028     		cmp	r0, #0
 5089 0004 00F00A81 		beq	.L478
 5090 0008 0446     		mov	r4, r0
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5091              		.loc 1 865 0
 5092 000a 036E     		ldr	r3, [r0, #96]
 5093 000c 43F00203 		orr	r3, r3, #2
 5094 0010 0366     		str	r3, [r0, #96]
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5095              		.loc 1 868 0
 5096 0012 0321     		movs	r1, #3
 5097 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5098              	.LVL468:
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5099              		.loc 1 876 0
 5100 0018 2268     		ldr	r2, [r4]
 5101 001a D368     		ldr	r3, [r2, #12]
 5102 001c 43F40013 		orr	r3, r3, #2097152
 5103 0020 D360     		str	r3, [r2, #12]
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5104              		.loc 1 879 0
 5105 0022 0546     		mov	r5, r0
 5106 0024 0028     		cmp	r0, #0
 5107 0026 00F0C180 		beq	.L484
 5108              	.L466:
ARM GAS  /tmp/ccecbe7f.s 			page 329


 5109              	.LVL469:
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_IT_JQOVF | ADC_IT_OVR  |
 5110              		.loc 1 900 0
 5111 002a 2268     		ldr	r2, [r4]
 5112 002c 5168     		ldr	r1, [r2, #4]
 5113 002e 7C4B     		ldr	r3, .L487
 5114 0030 0B40     		ands	r3, r3, r1
 5115 0032 5360     		str	r3, [r2, #4]
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                               ADC_FLAG_JQOVF | ADC_FLAG_OVR  |
 5116              		.loc 1 907 0
 5117 0034 2368     		ldr	r3, [r4]
 5118 0036 40F2FF72 		movw	r2, #2047
 5119 003a 1A60     		str	r2, [r3]
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   SET_BIT(hadc->Instance->CR, ADC_CR_DEEPPWD);
 5120              		.loc 1 918 0
 5121 003c 2268     		ldr	r2, [r4]
 5122 003e 9368     		ldr	r3, [r2, #8]
 5123 0040 23F0A043 		bic	r3, r3, #1342177280
 5124 0044 9360     		str	r3, [r2, #8]
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5125              		.loc 1 919 0
 5126 0046 2268     		ldr	r2, [r4]
 5127 0048 9368     		ldr	r3, [r2, #8]
 5128 004a 43F00053 		orr	r3, r3, #536870912
 5129 004e 9360     		str	r3, [r2, #8]
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR_AWD1EN  | ADC_CFGR_AWD1SGL | ADC_CFGR_JQM     |
 5130              		.loc 1 922 0
 5131 0050 2268     		ldr	r2, [r4]
 5132 0052 D368     		ldr	r3, [r2, #12]
 5133 0054 03F08023 		and	r3, r3, #-2147450880
 5134 0058 D360     		str	r3, [r2, #12]
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5135              		.loc 1 928 0
 5136 005a 2268     		ldr	r2, [r4]
 5137 005c D368     		ldr	r3, [r2, #12]
 5138 005e 43F00043 		orr	r3, r3, #-2147483648
 5139 0062 D360     		str	r3, [r2, #12]
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_CFGR2_OVSR  | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSE);
 5140              		.loc 1 931 0
 5141 0064 2268     		ldr	r2, [r4]
 5142 0066 1169     		ldr	r1, [r2, #16]
 5143 0068 6E4B     		ldr	r3, .L487+4
 5144 006a 0B40     		ands	r3, r3, r1
 5145 006c 1361     		str	r3, [r2, #16]
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5146              		.loc 1 935 0
 5147 006e 2268     		ldr	r2, [r4]
 5148 0070 5369     		ldr	r3, [r2, #20]
 5149 0072 03F04043 		and	r3, r3, #-1073741824
 5150 0076 5361     		str	r3, [r2, #20]
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SMPR2_SMP15 | ADC_SMPR2_SMP14 | ADC_SMPR2_SMP13 |
 5151              		.loc 1 938 0
 5152 0078 2268     		ldr	r2, [r4]
 5153 007a 9369     		ldr	r3, [r2, #24]
 5154 007c 03F07843 		and	r3, r3, #-134217728
 5155 0080 9361     		str	r3, [r2, #24]
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {  
ARM GAS  /tmp/ccecbe7f.s 			page 330


 5156              		.loc 1 943 0
 5157 0082 2368     		ldr	r3, [r4]
 5158 0084 684A     		ldr	r2, .L487+8
 5159 0086 9342     		cmp	r3, r2
 5160 0088 00F09A80 		beq	.L485
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC_HTR_HT);
 5161              		.loc 1 954 0
 5162 008c 1A6A     		ldr	r2, [r3, #32]
 5163 008e 02F07C42 		and	r2, r2, #-67108864
 5164 0092 1A62     		str	r2, [r3, #32]
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5165              		.loc 1 955 0
 5166 0094 2268     		ldr	r2, [r4]
 5167 0096 536A     		ldr	r3, [r2, #36]
 5168 0098 03F07C43 		and	r3, r3, #-67108864
 5169 009c 5362     		str	r3, [r2, #36]
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR2_CALFACT, ADC_HTR_HT);
 5170              		.loc 1 958 0
 5171 009e 2268     		ldr	r2, [r4]
 5172 00a0 D2F8B030 		ldr	r3, [r2, #176]
 5173 00a4 03F07C43 		and	r3, r3, #-67108864
 5174 00a8 C2F8B030 		str	r3, [r2, #176]
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5175              		.loc 1 959 0
 5176 00ac 2268     		ldr	r2, [r4]
 5177 00ae D2F8B430 		ldr	r3, [r2, #180]
 5178 00b2 03F07C43 		and	r3, r3, #-67108864
 5179 00b6 C2F8B430 		str	r3, [r2, #180]
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR3_RES11, ADC_HTR_HT);
 5180              		.loc 1 962 0
 5181 00ba 2268     		ldr	r2, [r4]
 5182 00bc D2F8B830 		ldr	r3, [r2, #184]
 5183 00c0 03F07C43 		and	r3, r3, #-67108864
 5184 00c4 C2F8B830 		str	r3, [r2, #184]
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5185              		.loc 1 963 0
 5186 00c8 2268     		ldr	r2, [r4]
 5187 00ca D2F8BC30 		ldr	r3, [r2, #188]
 5188 00ce 03F07C43 		and	r3, r3, #-67108864
 5189 00d2 C2F8BC30 		str	r3, [r2, #188]
 5190              	.L468:
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR1_SQ1 | ADC_SQR1_L);
 5191              		.loc 1 981 0
 5192 00d6 2268     		ldr	r2, [r4]
 5193 00d8 116B     		ldr	r1, [r2, #48]
 5194 00da 544B     		ldr	r3, .L487+12
 5195 00dc 0B40     		ands	r3, r3, r1
 5196 00de 1363     		str	r3, [r2, #48]
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR2_SQ6 | ADC_SQR2_SQ5);
 5197              		.loc 1 985 0
 5198 00e0 2368     		ldr	r3, [r4]
 5199 00e2 5A6B     		ldr	r2, [r3, #52]
 5200 00e4 5249     		ldr	r1, .L487+16
 5201 00e6 0A40     		ands	r2, r2, r1
 5202 00e8 5A63     		str	r2, [r3, #52]
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****             ADC_SQR3_SQ11 | ADC_SQR3_SQ10);
 5203              		.loc 1 989 0
ARM GAS  /tmp/ccecbe7f.s 			page 331


 5204 00ea 2268     		ldr	r2, [r4]
 5205 00ec 936B     		ldr	r3, [r2, #56]
 5206 00ee 0B40     		ands	r3, r3, r1
 5207 00f0 9363     		str	r3, [r2, #56]
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5208              		.loc 1 993 0
 5209 00f2 2268     		ldr	r2, [r4]
 5210 00f4 D16B     		ldr	r1, [r2, #60]
 5211 00f6 4F4B     		ldr	r3, .L487+20
 5212 00f8 0B40     		ands	r3, r3, r1
 5213 00fa D363     		str	r3, [r2, #60]
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR2 */
 5214              		.loc 1 1001 0
 5215 00fc 2268     		ldr	r2, [r4]
 5216 00fe 136E     		ldr	r3, [r2, #96]
 5217 0100 0023     		movs	r3, #0
 5218 0102 1366     		str	r3, [r2, #96]
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR3 */
 5219              		.loc 1 1003 0
 5220 0104 2268     		ldr	r2, [r4]
 5221 0106 516E     		ldr	r1, [r2, #100]
 5222 0108 5366     		str	r3, [r2, #100]
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   /* Reset register OFR4 */
 5223              		.loc 1 1005 0
 5224 010a 2268     		ldr	r2, [r4]
 5225 010c 916E     		ldr	r1, [r2, #104]
 5226 010e 9366     		str	r3, [r2, #104]
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5227              		.loc 1 1007 0
 5228 0110 2268     		ldr	r2, [r4]
 5229 0112 D16E     		ldr	r1, [r2, #108]
 5230 0114 D366     		str	r3, [r2, #108]
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5231              		.loc 1 1013 0
 5232 0116 2368     		ldr	r3, [r4]
 5233 0118 D3F8A020 		ldr	r2, [r3, #160]
 5234 011c 4649     		ldr	r1, .L487+24
 5235 011e 0A40     		ands	r2, r2, r1
 5236 0120 C3F8A020 		str	r2, [r3, #160]
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5237              		.loc 1 1016 0
 5238 0124 2268     		ldr	r2, [r4]
 5239 0126 D2F8A430 		ldr	r3, [r2, #164]
 5240 012a 0B40     		ands	r3, r3, r1
 5241 012c C2F8A430 		str	r3, [r2, #164]
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5242              		.loc 1 1019 0
 5243 0130 2368     		ldr	r3, [r4]
 5244 0132 3D4A     		ldr	r2, .L487+8
 5245 0134 9342     		cmp	r3, r2
 5246 0136 52D0     		beq	.L486
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5247              		.loc 1 1030 0
 5248 0138 D3F8C010 		ldr	r1, [r3, #192]
 5249 013c 3E4A     		ldr	r2, .L487+24
 5250 013e 0A40     		ands	r2, r2, r1
 5251 0140 C3F8C020 		str	r2, [r3, #192]
ARM GAS  /tmp/ccecbe7f.s 			page 332


1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5252              		.loc 1 1033 0
 5253 0144 2268     		ldr	r2, [r4]
 5254 0146 D2F8C430 		ldr	r3, [r2, #196]
 5255 014a 03F0F823 		and	r3, r3, #-134154240
 5256 014e C2F8C430 		str	r3, [r2, #196]
 5257              	.L470:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5258              		.loc 1 1047 0
 5259 0152 2368     		ldr	r3, [r4]
 5260 0154 3949     		ldr	r1, .L487+28
 5261 0156 3A4A     		ldr	r2, .L487+32
 5262 0158 9342     		cmp	r3, r2
 5263 015a 18BF     		it	ne
 5264 015c 8B42     		cmpne	r3, r1
 5265 015e 0CBF     		ite	eq
 5266 0160 0123     		moveq	r3, #1
 5267 0162 0023     		movne	r3, #0
 5268 0164 4DD1     		bne	.L471
 5269              	.LVL470:
 5270              	.LBB701:
 5271              	.LBB702:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5272              		.loc 2 6752 0
 5273 0166 8A68     		ldr	r2, [r1, #8]
 5274 0168 12F0010F 		tst	r2, #1
 5275 016c 45D0     		beq	.L479
 5276 016e 0121     		movs	r1, #1
 5277              	.L472:
 5278              	.LVL471:
 5279              	.LBE702:
 5280              	.LBE701:
 5281              	.LBB704:
 5282              	.LBB705:
 5283 0170 334A     		ldr	r2, .L487+32
 5284 0172 9268     		ldr	r2, [r2, #8]
 5285 0174 12F0010F 		tst	r2, #1
 5286 0178 41D0     		beq	.L480
 5287 017a 0122     		movs	r2, #1
 5288              	.L473:
 5289              	.LVL472:
 5290              	.LBE705:
 5291              	.LBE704:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5292              		.loc 1 1047 0
 5293 017c 0A43     		orrs	r2, r2, r1
 5294 017e 0CBF     		ite	eq
 5295 0180 0122     		moveq	r2, #1
 5296 0182 0022     		movne	r2, #0
 5297              	.L474:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5298              		.loc 1 1047 0 is_stmt 0 discriminator 4
 5299 0184 32B1     		cbz	r2, .L476
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5300              		.loc 1 1056 0 is_stmt 1
 5301 0186 002B     		cmp	r3, #0
 5302 0188 46D0     		beq	.L482
ARM GAS  /tmp/ccecbe7f.s 			page 333


 5303 018a 2E4A     		ldr	r2, .L487+36
 5304              	.L477:
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5305              		.loc 1 1056 0 is_stmt 0 discriminator 4
 5306 018c 9168     		ldr	r1, [r2, #8]
 5307 018e 2E4B     		ldr	r3, .L487+40
 5308 0190 0B40     		ands	r3, r3, r1
 5309 0192 9360     		str	r3, [r2, #8]
 5310              	.L476:
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 5311              		.loc 1 1080 0 is_stmt 1
 5312 0194 2046     		mov	r0, r4
 5313 0196 FFF7FEFF 		bl	HAL_ADC_MspDeInit
 5314              	.LVL473:
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5315              		.loc 1 1084 0
 5316 019a 0023     		movs	r3, #0
 5317 019c 6366     		str	r3, [r4, #100]
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   hadc->InjectionConfig.ChannelCount = 0;
 5318              		.loc 1 1087 0
 5319 019e A366     		str	r3, [r4, #104]
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5320              		.loc 1 1088 0
 5321 01a0 E366     		str	r3, [r4, #108]
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5322              		.loc 1 1091 0
 5323 01a2 2366     		str	r3, [r4, #96]
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5324              		.loc 1 1094 0
 5325 01a4 84F85C30 		strb	r3, [r4, #92]
 5326              	.LVL474:
 5327              	.L465:
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5328              		.loc 1 1098 0
 5329 01a8 2846     		mov	r0, r5
 5330 01aa 38BD     		pop	{r3, r4, r5, pc}
 5331              	.LVL475:
 5332              	.L484:
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5333              		.loc 1 882 0
 5334 01ac 2046     		mov	r0, r4
 5335              	.LVL476:
 5336 01ae FFF7FEFF 		bl	ADC_Disable
 5337              	.LVL477:
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5338              		.loc 1 885 0
 5339 01b2 0546     		mov	r5, r0
 5340 01b4 0028     		cmp	r0, #0
 5341 01b6 7FF438AF 		bne	.L466
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 5342              		.loc 1 888 0
 5343 01ba 0123     		movs	r3, #1
 5344 01bc 2366     		str	r3, [r4, #96]
 5345 01be 34E7     		b	.L466
 5346              	.LVL478:
 5347              	.L485:
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     CLEAR_BIT(hadc->Instance->HTR1_TR2, ADC3_TR2_HT2 | ADC3_TR2_LT2);
ARM GAS  /tmp/ccecbe7f.s 			page 334


 5348              		.loc 1 946 0
 5349 01c0 1A6A     		ldr	r2, [r3, #32]
 5350 01c2 02F0F022 		and	r2, r2, #-268374016
 5351 01c6 1A62     		str	r2, [r3, #32]
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5352              		.loc 1 947 0
 5353 01c8 2268     		ldr	r2, [r4]
 5354 01ca 536A     		ldr	r3, [r2, #36]
 5355 01cc 03F0FF23 		and	r3, r3, #-16711936
 5356 01d0 5362     		str	r3, [r2, #36]
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5357              		.loc 1 950 0
 5358 01d2 2268     		ldr	r2, [r4]
 5359 01d4 936A     		ldr	r3, [r2, #40]
 5360 01d6 03F0FF23 		and	r3, r3, #-16711936
 5361 01da 9362     		str	r3, [r2, #40]
 5362 01dc 7BE7     		b	.L468
 5363              	.L486:
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5364              		.loc 1 1022 0
 5365 01de D3F8B010 		ldr	r1, [r3, #176]
 5366 01e2 154A     		ldr	r2, .L487+24
 5367 01e4 0A40     		ands	r2, r2, r1
 5368 01e6 C3F8B020 		str	r2, [r3, #176]
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5369              		.loc 1 1025 0
 5370 01ea 2268     		ldr	r2, [r4]
 5371 01ec D2F8B430 		ldr	r3, [r2, #180]
 5372 01f0 03F0F823 		and	r3, r3, #-134154240
 5373 01f4 C2F8B430 		str	r3, [r2, #180]
 5374 01f8 ABE7     		b	.L470
 5375              	.LVL479:
 5376              	.L479:
 5377              	.LBB707:
 5378              	.LBB703:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5379              		.loc 2 6752 0
 5380 01fa 0021     		movs	r1, #0
 5381 01fc B8E7     		b	.L472
 5382              	.LVL480:
 5383              	.L480:
 5384              	.LBE703:
 5385              	.LBE707:
 5386              	.LBB708:
 5387              	.LBB706:
 5388 01fe 0022     		movs	r2, #0
 5389 0200 BCE7     		b	.L473
 5390              	.LVL481:
 5391              	.L471:
 5392              	.LBE706:
 5393              	.LBE708:
 5394              	.LBB709:
 5395              	.LBB710:
 5396 0202 094A     		ldr	r2, .L487+8
 5397 0204 9268     		ldr	r2, [r2, #8]
 5398 0206 12F0010F 		tst	r2, #1
 5399 020a 03D0     		beq	.L481
ARM GAS  /tmp/ccecbe7f.s 			page 335


 5400 020c 0122     		movs	r2, #1
 5401              	.L475:
 5402              	.LVL482:
 5403              	.LBE710:
 5404              	.LBE709:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5405              		.loc 1 1047 0
 5406 020e 82F00102 		eor	r2, r2, #1
 5407 0212 B7E7     		b	.L474
 5408              	.LVL483:
 5409              	.L481:
 5410              	.LBB712:
 5411              	.LBB711:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5412              		.loc 2 6752 0
 5413 0214 0022     		movs	r2, #0
 5414 0216 FAE7     		b	.L475
 5415              	.LVL484:
 5416              	.L482:
 5417              	.LBE711:
 5418              	.LBE712:
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5419              		.loc 1 1056 0
 5420 0218 0C4A     		ldr	r2, .L487+44
 5421 021a B7E7     		b	.L477
 5422              	.LVL485:
 5423              	.L478:
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5424              		.loc 1 858 0
 5425 021c 0125     		movs	r5, #1
 5426 021e C3E7     		b	.L465
 5427              	.L488:
 5428              		.align	2
 5429              	.L487:
 5430 0220 00F8FFFF 		.word	-2048
 5431 0224 1CF800FC 		.word	-67045348
 5432 0228 00600258 		.word	1476550656
 5433 022c 300882E0 		.word	-528349136
 5434 0230 200882E0 		.word	-528349152
 5435 0234 20F8FFFF 		.word	-2016
 5436 0238 0000F0FF 		.word	-1048576
 5437 023c 00200240 		.word	1073881088
 5438 0240 00210240 		.word	1073881344
 5439 0244 00230240 		.word	1073881856
 5440 0248 E03000FE 		.word	-33541920
 5441 024c 00630258 		.word	1476551424
 5442              		.cfi_endproc
 5443              	.LFE344:
 5445              		.section	.text.HAL_ADC_Stop,"ax",%progbits
 5446              		.align	1
 5447              		.global	HAL_ADC_Stop
 5448              		.syntax unified
 5449              		.thumb
 5450              		.thumb_func
 5451              		.fpu fpv5-d16
 5453              	HAL_ADC_Stop:
 5454              	.LFB348:
ARM GAS  /tmp/ccecbe7f.s 			page 336


1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5455              		.loc 1 1529 0
 5456              		.cfi_startproc
 5457              		@ args = 0, pretend = 0, frame = 0
 5458              		@ frame_needed = 0, uses_anonymous_args = 0
 5459              	.LVL486:
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5460              		.loc 1 1536 0
 5461 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 5462 0004 012B     		cmp	r3, #1
 5463 0006 1BD0     		beq	.L492
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5464              		.loc 1 1529 0 discriminator 2
 5465 0008 10B5     		push	{r4, lr}
 5466              	.LCFI20:
 5467              		.cfi_def_cfa_offset 8
 5468              		.cfi_offset 4, -8
 5469              		.cfi_offset 14, -4
 5470 000a 0446     		mov	r4, r0
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5471              		.loc 1 1536 0 discriminator 2
 5472 000c 0123     		movs	r3, #1
 5473 000e 80F85C30 		strb	r3, [r0, #92]
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5474              		.loc 1 1539 0 discriminator 2
 5475 0012 0321     		movs	r1, #3
 5476 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5477              	.LVL487:
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5478              		.loc 1 1542 0 discriminator 2
 5479 0018 0346     		mov	r3, r0
 5480 001a 20B1     		cbz	r0, .L497
 5481              	.L491:
 5482              	.LVL488:
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5483              		.loc 1 1558 0
 5484 001c 0022     		movs	r2, #0
 5485 001e 84F85C20 		strb	r2, [r4, #92]
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5486              		.loc 1 1562 0
 5487 0022 1846     		mov	r0, r3
 5488 0024 10BD     		pop	{r4, pc}
 5489              	.LVL489:
 5490              	.L497:
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5491              		.loc 1 1545 0
 5492 0026 2046     		mov	r0, r4
 5493              	.LVL490:
 5494 0028 FFF7FEFF 		bl	ADC_Disable
 5495              	.LVL491:
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5496              		.loc 1 1548 0
 5497 002c 0346     		mov	r3, r0
 5498 002e 0028     		cmp	r0, #0
 5499 0030 F4D1     		bne	.L491
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 5500              		.loc 1 1551 0
ARM GAS  /tmp/ccecbe7f.s 			page 337


 5501 0032 216E     		ldr	r1, [r4, #96]
 5502 0034 044A     		ldr	r2, .L498
 5503 0036 0A40     		ands	r2, r2, r1
 5504 0038 42F00102 		orr	r2, r2, #1
 5505 003c 2266     		str	r2, [r4, #96]
 5506 003e EDE7     		b	.L491
 5507              	.LVL492:
 5508              	.L492:
 5509              	.LCFI21:
 5510              		.cfi_def_cfa_offset 0
 5511              		.cfi_restore 4
 5512              		.cfi_restore 14
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5513              		.loc 1 1536 0
 5514 0040 0223     		movs	r3, #2
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5515              		.loc 1 1562 0
 5516 0042 1846     		mov	r0, r3
 5517              	.LVL493:
 5518 0044 7047     		bx	lr
 5519              	.L499:
 5520 0046 00BF     		.align	2
 5521              	.L498:
 5522 0048 FEEEFFFF 		.word	-4354
 5523              		.cfi_endproc
 5524              	.LFE348:
 5526              		.section	.text.HAL_ADC_Stop_IT,"ax",%progbits
 5527              		.align	1
 5528              		.global	HAL_ADC_Stop_IT
 5529              		.syntax unified
 5530              		.thumb
 5531              		.thumb_func
 5532              		.fpu fpv5-d16
 5534              	HAL_ADC_Stop_IT:
 5535              	.LFB352:
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5536              		.loc 1 2062 0
 5537              		.cfi_startproc
 5538              		@ args = 0, pretend = 0, frame = 0
 5539              		@ frame_needed = 0, uses_anonymous_args = 0
 5540              	.LVL494:
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5541              		.loc 1 2069 0
 5542 0000 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 5543 0004 012B     		cmp	r3, #1
 5544 0006 20D0     		beq	.L503
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5545              		.loc 1 2062 0 discriminator 2
 5546 0008 10B5     		push	{r4, lr}
 5547              	.LCFI22:
 5548              		.cfi_def_cfa_offset 8
 5549              		.cfi_offset 4, -8
 5550              		.cfi_offset 14, -4
 5551 000a 0446     		mov	r4, r0
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5552              		.loc 1 2069 0 discriminator 2
 5553 000c 0123     		movs	r3, #1
ARM GAS  /tmp/ccecbe7f.s 			page 338


 5554 000e 80F85C30 		strb	r3, [r0, #92]
2072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5555              		.loc 1 2072 0 discriminator 2
 5556 0012 0321     		movs	r1, #3
 5557 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5558              	.LVL495:
2075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5559              		.loc 1 2075 0 discriminator 2
 5560 0018 0346     		mov	r3, r0
 5561 001a 20B1     		cbz	r0, .L508
 5562              	.L502:
 5563              	.LVL496:
2095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5564              		.loc 1 2095 0
 5565 001c 0022     		movs	r2, #0
 5566 001e 84F85C20 		strb	r2, [r4, #92]
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5567              		.loc 1 2099 0
 5568 0022 1846     		mov	r0, r3
 5569 0024 10BD     		pop	{r4, pc}
 5570              	.LVL497:
 5571              	.L508:
2079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5572              		.loc 1 2079 0
 5573 0026 2268     		ldr	r2, [r4]
 5574 0028 5368     		ldr	r3, [r2, #4]
 5575 002a 23F01C03 		bic	r3, r3, #28
 5576 002e 5360     		str	r3, [r2, #4]
2082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5577              		.loc 1 2082 0
 5578 0030 2046     		mov	r0, r4
 5579              	.LVL498:
 5580 0032 FFF7FEFF 		bl	ADC_Disable
 5581              	.LVL499:
2085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5582              		.loc 1 2085 0
 5583 0036 0346     		mov	r3, r0
 5584 0038 0028     		cmp	r0, #0
 5585 003a EFD1     		bne	.L502
2088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 5586              		.loc 1 2088 0
 5587 003c 216E     		ldr	r1, [r4, #96]
 5588 003e 044A     		ldr	r2, .L509
 5589 0040 0A40     		ands	r2, r2, r1
 5590 0042 42F00102 		orr	r2, r2, #1
 5591 0046 2266     		str	r2, [r4, #96]
 5592 0048 E8E7     		b	.L502
 5593              	.LVL500:
 5594              	.L503:
 5595              	.LCFI23:
 5596              		.cfi_def_cfa_offset 0
 5597              		.cfi_restore 4
 5598              		.cfi_restore 14
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5599              		.loc 1 2069 0
 5600 004a 0223     		movs	r3, #2
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
ARM GAS  /tmp/ccecbe7f.s 			page 339


 5601              		.loc 1 2099 0
 5602 004c 1846     		mov	r0, r3
 5603              	.LVL501:
 5604 004e 7047     		bx	lr
 5605              	.L510:
 5606              		.align	2
 5607              	.L509:
 5608 0050 FEEEFFFF 		.word	-4354
 5609              		.cfi_endproc
 5610              	.LFE352:
 5612              		.section	.text.HAL_ADC_Stop_DMA,"ax",%progbits
 5613              		.align	1
 5614              		.global	HAL_ADC_Stop_DMA
 5615              		.syntax unified
 5616              		.thumb
 5617              		.thumb_func
 5618              		.fpu fpv5-d16
 5620              	HAL_ADC_Stop_DMA:
 5621              	.LFB354:
2262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status;
 5622              		.loc 1 2262 0
 5623              		.cfi_startproc
 5624              		@ args = 0, pretend = 0, frame = 0
 5625              		@ frame_needed = 0, uses_anonymous_args = 0
 5626              	.LVL502:
 5627 0000 38B5     		push	{r3, r4, r5, lr}
 5628              	.LCFI24:
 5629              		.cfi_def_cfa_offset 16
 5630              		.cfi_offset 3, -16
 5631              		.cfi_offset 4, -12
 5632              		.cfi_offset 5, -8
 5633              		.cfi_offset 14, -4
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5634              		.loc 1 2269 0
 5635 0002 90F85C30 		ldrb	r3, [r0, #92]	@ zero_extendqisi2
 5636 0006 012B     		cmp	r3, #1
 5637 0008 37D0     		beq	.L517
 5638 000a 0446     		mov	r4, r0
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5639              		.loc 1 2269 0 is_stmt 0 discriminator 2
 5640 000c 0123     		movs	r3, #1
 5641 000e 80F85C30 		strb	r3, [r0, #92]
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5642              		.loc 1 2272 0 is_stmt 1 discriminator 2
 5643 0012 0321     		movs	r1, #3
 5644 0014 FFF7FEFF 		bl	ADC_ConversionStop
 5645              	.LVL503:
2275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5646              		.loc 1 2275 0 discriminator 2
 5647 0018 0546     		mov	r5, r0
 5648 001a D8B9     		cbnz	r0, .L513
2278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5649              		.loc 1 2278 0
 5650 001c 2268     		ldr	r2, [r4]
 5651 001e D368     		ldr	r3, [r2, #12]
 5652 0020 23F00303 		bic	r3, r3, #3
 5653 0024 D360     		str	r3, [r2, #12]
ARM GAS  /tmp/ccecbe7f.s 			page 340


2282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5654              		.loc 1 2282 0
 5655 0026 A06D     		ldr	r0, [r4, #88]
 5656              	.LVL504:
 5657 0028 90F83530 		ldrb	r3, [r0, #53]	@ zero_extendqisi2
 5658 002c DBB2     		uxtb	r3, r3
 5659 002e 022B     		cmp	r3, #2
 5660 0030 15D0     		beq	.L519
 5661              	.L514:
 5662              	.LVL505:
2295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5663              		.loc 1 2295 0
 5664 0032 2268     		ldr	r2, [r4]
 5665 0034 5368     		ldr	r3, [r2, #4]
 5666 0036 23F01003 		bic	r3, r3, #16
 5667 003a 5360     		str	r3, [r2, #4]
2300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5668              		.loc 1 2300 0
 5669 003c CDB9     		cbnz	r5, .L515
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 5670              		.loc 1 2302 0
 5671 003e 2046     		mov	r0, r4
 5672 0040 FFF7FEFF 		bl	ADC_Disable
 5673              	.LVL506:
 5674 0044 0546     		mov	r5, r0
 5675              	.LVL507:
 5676              	.L516:
2310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5677              		.loc 1 2310 0
 5678 0046 2DB9     		cbnz	r5, .L513
2313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                         HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
 5679              		.loc 1 2313 0
 5680 0048 226E     		ldr	r2, [r4, #96]
 5681 004a 0D4B     		ldr	r3, .L520
 5682 004c 1340     		ands	r3, r3, r2
 5683 004e 43F00103 		orr	r3, r3, #1
 5684 0052 2366     		str	r3, [r4, #96]
 5685              	.LVL508:
 5686              	.L513:
2321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5687              		.loc 1 2321 0
 5688 0054 0023     		movs	r3, #0
 5689 0056 84F85C30 		strb	r3, [r4, #92]
 5690              	.LVL509:
 5691              	.L512:
2325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5692              		.loc 1 2325 0
 5693 005a 2846     		mov	r0, r5
 5694 005c 38BD     		pop	{r3, r4, r5, pc}
 5695              	.LVL510:
 5696              	.L519:
2284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5697              		.loc 1 2284 0
 5698 005e FFF7FEFF 		bl	HAL_DMA_Abort
 5699              	.LVL511:
2287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 5700              		.loc 1 2287 0
ARM GAS  /tmp/ccecbe7f.s 			page 341


 5701 0062 0546     		mov	r5, r0
 5702 0064 0028     		cmp	r0, #0
 5703 0066 E4D0     		beq	.L514
2290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 5704              		.loc 1 2290 0
 5705 0068 236E     		ldr	r3, [r4, #96]
 5706 006a 43F04003 		orr	r3, r3, #64
 5707 006e 2366     		str	r3, [r4, #96]
 5708 0070 DFE7     		b	.L514
 5709              	.LVL512:
 5710              	.L515:
2306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 5711              		.loc 1 2306 0
 5712 0072 2046     		mov	r0, r4
 5713 0074 FFF7FEFF 		bl	ADC_Disable
 5714              	.LVL513:
 5715 0078 E5E7     		b	.L516
 5716              	.LVL514:
 5717              	.L517:
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 5718              		.loc 1 2269 0
 5719 007a 0225     		movs	r5, #2
 5720 007c EDE7     		b	.L512
 5721              	.L521:
 5722 007e 00BF     		.align	2
 5723              	.L520:
 5724 0080 FEEEFFFF 		.word	-4354
 5725              		.cfi_endproc
 5726              	.LFE354:
 5728              		.section	.text.ADC_ConfigureBoostMode,"ax",%progbits
 5729              		.align	1
 5730              		.global	ADC_ConfigureBoostMode
 5731              		.syntax unified
 5732              		.thumb
 5733              		.thumb_func
 5734              		.fpu fpv5-d16
 5736              	ADC_ConfigureBoostMode:
 5737              	.LFB371:
3916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** /**
3918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @brief  Configure boost mode of selected ADC.
3919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @note   Prerequisite condition to use this function: ADC conversions must be
3920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   *         stopped.
3921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @param  hadc ADC handle
3922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   * @retval None.
3923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   */
3924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
3925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** {
 5738              		.loc 1 3925 0
 5739              		.cfi_startproc
 5740              		@ args = 0, pretend = 0, frame = 0
 5741              		@ frame_needed = 0, uses_anonymous_args = 0
 5742              	.LVL515:
 5743 0000 10B5     		push	{r4, lr}
 5744              	.LCFI25:
 5745              		.cfi_def_cfa_offset 8
 5746              		.cfi_offset 4, -8
ARM GAS  /tmp/ccecbe7f.s 			page 342


 5747              		.cfi_offset 14, -4
 5748 0002 0446     		mov	r4, r0
3926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t freq;
3927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 5749              		.loc 1 3927 0
 5750 0004 0368     		ldr	r3, [r0]
 5751 0006 4349     		ldr	r1, .L547
 5752 0008 434A     		ldr	r2, .L547+4
 5753 000a 9342     		cmp	r3, r2
 5754 000c 18BF     		it	ne
 5755 000e 8B42     		cmpne	r3, r1
 5756 0010 23D1     		bne	.L523
 5757              		.loc 1 3927 0 is_stmt 0 discriminator 1
 5758 0012 424B     		ldr	r3, .L547+8
 5759 0014 9B68     		ldr	r3, [r3, #8]
 5760 0016 13F4403F 		tst	r3, #196608
 5761 001a 14BF     		ite	ne
 5762 001c 0123     		movne	r3, #1
 5763 001e 0023     		moveq	r3, #0
 5764              	.L524:
 5765              		.loc 1 3927 0 discriminator 4
 5766 0020 4BB3     		cbz	r3, .L525
3928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq = HAL_RCC_GetHCLKFreq();
 5767              		.loc 1 3929 0 is_stmt 1
 5768 0022 FFF7FEFF 		bl	HAL_RCC_GetHCLKFreq
 5769              	.LVL516:
3930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
 5770              		.loc 1 3930 0
 5771 0026 6368     		ldr	r3, [r4, #4]
 5772 0028 B3F5003F 		cmp	r3, #131072
 5773 002c 1DD0     		beq	.L527
 5774 002e B3F5403F 		cmp	r3, #196608
 5775 0032 1ED0     		beq	.L528
 5776 0034 B3F5803F 		cmp	r3, #65536
 5777 0038 17D0     		beq	.L527
 5778              	.L526:
3931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV1:
3933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV2:
3934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
3935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV4:
3937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 4UL;
3938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else
3944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
3946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
3947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV2:
3949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV4:
3950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV6:
ARM GAS  /tmp/ccecbe7f.s 			page 343


3951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV8:
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV10:
3953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV12:
3954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
3955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV16:
3957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 16UL;
3958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV32:
3960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 32UL;
3961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV64:
3963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 64UL;
3964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV128:
3966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 128UL;
3967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV256:
3969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         freq /= 256UL;
3970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
3972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
3973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
3974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
3976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_3) || defined(ADC_VER_V5_V90)
3977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   freq /= 2U;
 5779              		.loc 1 3977 0
 5780 003a 4008     		lsrs	r0, r0, #1
 5781              	.LVL517:
3978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (freq <= 6250000UL)
 5782              		.loc 1 3978 0
 5783 003c 384B     		ldr	r3, .L547+12
 5784 003e 9842     		cmp	r0, r3
 5785 0040 52D9     		bls	.L543
3979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
3981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (freq <= 12500000UL)
 5786              		.loc 1 3982 0
 5787 0042 384B     		ldr	r3, .L547+16
 5788 0044 9842     		cmp	r0, r3
 5789 0046 55D9     		bls	.L544
3983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
3985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else if (freq <= 25000000UL)
 5790              		.loc 1 3986 0
 5791 0048 374B     		ldr	r3, .L547+20
 5792 004a 9842     		cmp	r0, r3
 5793 004c 5AD9     		bls	.L545
3987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
3989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* if(freq > 25000000UL) */
3991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
ARM GAS  /tmp/ccecbe7f.s 			page 344


 5794              		.loc 1 3992 0
 5795 004e 2268     		ldr	r2, [r4]
 5796 0050 9368     		ldr	r3, [r2, #8]
 5797 0052 43F44073 		orr	r3, r3, #768
 5798 0056 9360     		str	r3, [r2, #8]
3993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
3994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #else
3995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
3996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
3997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (freq > 20000000UL)
3998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
3999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
4000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else
4002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
4004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   else /* STM32H7 silicon Rev.V */
4007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
4008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     freq /= 2U; /* divider by 2 for Rev.V */
4009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
4010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     if (freq <= 6250000UL)
4011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
4013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else if (freq <= 12500000UL)
4015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
4017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else if (freq <= 25000000UL)
4019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
4021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     else /* if(freq > 25000000UL) */
4023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
4024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
4025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
4026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
4027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* ADC_VER_V5_3 */
4028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** }
 5799              		.loc 1 4028 0
 5800 0058 4BE0     		b	.L522
 5801              	.LVL518:
 5802              	.L523:
3927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5803              		.loc 1 3927 0 discriminator 2
 5804 005a 344B     		ldr	r3, .L547+24
 5805 005c 9B68     		ldr	r3, [r3, #8]
 5806 005e 13F4403F 		tst	r3, #196608
 5807 0062 14BF     		ite	ne
 5808 0064 0123     		movne	r3, #1
 5809 0066 0023     		moveq	r3, #0
 5810 0068 DAE7     		b	.L524
 5811              	.LVL519:
 5812              	.L527:
3934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
ARM GAS  /tmp/ccecbe7f.s 			page 345


 5813              		.loc 1 3934 0
 5814 006a 1B0C     		lsrs	r3, r3, #16
 5815 006c B0FBF3F0 		udiv	r0, r0, r3
 5816              	.LVL520:
3935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_SYNC_PCLK_DIV4:
 5817              		.loc 1 3935 0
 5818 0070 E3E7     		b	.L526
 5819              	.L528:
3937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5820              		.loc 1 3937 0
 5821 0072 8008     		lsrs	r0, r0, #2
 5822              	.LVL521:
3938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
 5823              		.loc 1 3938 0
 5824 0074 E1E7     		b	.L526
 5825              	.LVL522:
 5826              	.L525:
3945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     switch (hadc->Init.ClockPrescaler)
 5827              		.loc 1 3945 0
 5828 0076 4FF40020 		mov	r0, #524288
 5829              	.LVL523:
 5830 007a FFF7FEFF 		bl	HAL_RCCEx_GetPeriphCLKFreq
 5831              	.LVL524:
3946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5832              		.loc 1 3946 0
 5833 007e 6368     		ldr	r3, [r4, #4]
 5834 0080 B3F5C01F 		cmp	r3, #1572864
 5835 0084 16D0     		beq	.L529
 5836 0086 0BD9     		bls	.L546
 5837 0088 B3F5101F 		cmp	r3, #2359296
 5838 008c 28D0     		beq	.L532
 5839 008e 1DD8     		bhi	.L533
 5840 0090 B3F5E01F 		cmp	r3, #1835008
 5841 0094 22D0     		beq	.L534
 5842 0096 B3F5001F 		cmp	r3, #2097152
 5843 009a CED1     		bne	.L526
3960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5844              		.loc 1 3960 0
 5845 009c 4009     		lsrs	r0, r0, #5
 5846              	.LVL525:
3961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV64:
 5847              		.loc 1 3961 0
 5848 009e CCE7     		b	.L526
 5849              	.L546:
3946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5850              		.loc 1 3946 0
 5851 00a0 B3F5402F 		cmp	r3, #786432
 5852 00a4 06D0     		beq	.L529
 5853 00a6 0AD8     		bhi	.L531
 5854 00a8 B3F5802F 		cmp	r3, #262144
 5855 00ac 02D0     		beq	.L529
 5856 00ae B3F5002F 		cmp	r3, #524288
 5857 00b2 C2D1     		bne	.L526
 5858              	.L529:
3954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5859              		.loc 1 3954 0
 5860 00b4 9B0C     		lsrs	r3, r3, #18
ARM GAS  /tmp/ccecbe7f.s 			page 346


 5861 00b6 5B00     		lsls	r3, r3, #1
 5862 00b8 B0FBF3F0 		udiv	r0, r0, r3
 5863              	.LVL526:
3955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV16:
 5864              		.loc 1 3955 0
 5865 00bc BDE7     		b	.L526
 5866              	.L531:
3946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 5867              		.loc 1 3946 0
 5868 00be B3F5801F 		cmp	r3, #1048576
 5869 00c2 F7D0     		beq	.L529
 5870 00c4 B3F5A01F 		cmp	r3, #1310720
 5871 00c8 B7D1     		bne	.L526
 5872 00ca F3E7     		b	.L529
 5873              	.L533:
 5874 00cc B3F5201F 		cmp	r3, #2621440
 5875 00d0 08D0     		beq	.L536
 5876 00d2 B3F5301F 		cmp	r3, #2883584
 5877 00d6 B0D1     		bne	.L526
3969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5878              		.loc 1 3969 0
 5879 00d8 000A     		lsrs	r0, r0, #8
 5880              	.LVL527:
3970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       default:
 5881              		.loc 1 3970 0
 5882 00da AEE7     		b	.L526
 5883              	.L534:
3957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5884              		.loc 1 3957 0
 5885 00dc 0009     		lsrs	r0, r0, #4
 5886              	.LVL528:
3958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV32:
 5887              		.loc 1 3958 0
 5888 00de ACE7     		b	.L526
 5889              	.L532:
3963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5890              		.loc 1 3963 0
 5891 00e0 8009     		lsrs	r0, r0, #6
 5892              	.LVL529:
3964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV128:
 5893              		.loc 1 3964 0
 5894 00e2 AAE7     		b	.L526
 5895              	.L536:
3966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         break;
 5896              		.loc 1 3966 0
 5897 00e4 C009     		lsrs	r0, r0, #7
 5898              	.LVL530:
3967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       case ADC_CLOCK_ASYNC_DIV256:
 5899              		.loc 1 3967 0
 5900 00e6 A8E7     		b	.L526
 5901              	.L543:
3980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5902              		.loc 1 3980 0
 5903 00e8 2268     		ldr	r2, [r4]
 5904 00ea 9368     		ldr	r3, [r2, #8]
 5905 00ec 23F44073 		bic	r3, r3, #768
 5906 00f0 9360     		str	r3, [r2, #8]
ARM GAS  /tmp/ccecbe7f.s 			page 347


 5907              	.L522:
 5908              		.loc 1 4028 0
 5909 00f2 10BD     		pop	{r4, pc}
 5910              	.LVL531:
 5911              	.L544:
3984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5912              		.loc 1 3984 0
 5913 00f4 2268     		ldr	r2, [r4]
 5914 00f6 9368     		ldr	r3, [r2, #8]
 5915 00f8 23F44073 		bic	r3, r3, #768
 5916 00fc 43F48073 		orr	r3, r3, #256
 5917 0100 9360     		str	r3, [r2, #8]
 5918 0102 F6E7     		b	.L522
 5919              	.L545:
3988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 5920              		.loc 1 3988 0
 5921 0104 2268     		ldr	r2, [r4]
 5922 0106 9368     		ldr	r3, [r2, #8]
 5923 0108 23F44073 		bic	r3, r3, #768
 5924 010c 43F40073 		orr	r3, r3, #512
 5925 0110 9360     		str	r3, [r2, #8]
 5926 0112 EEE7     		b	.L522
 5927              	.L548:
 5928              		.align	2
 5929              	.L547:
 5930 0114 00200240 		.word	1073881088
 5931 0118 00210240 		.word	1073881344
 5932 011c 00230240 		.word	1073881856
 5933 0120 105E5F00 		.word	6250000
 5934 0124 20BCBE00 		.word	12500000
 5935 0128 40787D01 		.word	25000000
 5936 012c 00630258 		.word	1476551424
 5937              		.cfi_endproc
 5938              	.LFE371:
 5940              		.section	.text.HAL_ADC_Init,"ax",%progbits
 5941              		.align	1
 5942              		.global	HAL_ADC_Init
 5943              		.syntax unified
 5944              		.thumb
 5945              		.thumb_func
 5946              		.fpu fpv5-d16
 5948              	HAL_ADC_Init:
 5949              	.LFB343:
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 5950              		.loc 1 417 0
 5951              		.cfi_startproc
 5952              		@ args = 0, pretend = 0, frame = 8
 5953              		@ frame_needed = 0, uses_anonymous_args = 0
 5954              	.LVL532:
 5955 0000 30B5     		push	{r4, r5, lr}
 5956              	.LCFI26:
 5957              		.cfi_def_cfa_offset 12
 5958              		.cfi_offset 4, -12
 5959              		.cfi_offset 5, -8
 5960              		.cfi_offset 14, -4
 5961 0002 83B0     		sub	sp, sp, #12
 5962              	.LCFI27:
ARM GAS  /tmp/ccecbe7f.s 			page 348


 5963              		.cfi_def_cfa_offset 24
 5964              	.LVL533:
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmp_adc_is_conversion_on_going_regular;
 5965              		.loc 1 421 0
 5966 0004 0023     		movs	r3, #0
 5967 0006 0193     		str	r3, [sp, #4]
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5968              		.loc 1 426 0
 5969 0008 0028     		cmp	r0, #0
 5970 000a 00F05881 		beq	.L583
 5971 000e 0446     		mov	r4, r0
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5972              		.loc 1 461 0
 5973 0010 036E     		ldr	r3, [r0, #96]
 5974 0012 E3B1     		cbz	r3, .L595
 5975              	.LVL534:
 5976              	.L551:
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 5977              		.loc 1 495 0
 5978 0014 2368     		ldr	r3, [r4]
 5979              	.LVL535:
 5980              	.LBB713:
 5981              	.LBB714:
6643:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5982              		.loc 2 6643 0
 5983 0016 9A68     		ldr	r2, [r3, #8]
 5984 0018 12F0005F 		tst	r2, #536870912
 5985 001c 03D0     		beq	.L552
 5986              	.LVL536:
 5987              	.LBE714:
 5988              	.LBE713:
 5989              	.LBB715:
 5990              	.LBB716:
6632:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 5991              		.loc 2 6632 0
 5992 001e 9968     		ldr	r1, [r3, #8]
 5993 0020 A84A     		ldr	r2, .L603
 5994 0022 0A40     		ands	r2, r2, r1
 5995 0024 9A60     		str	r2, [r3, #8]
 5996              	.LVL537:
 5997              	.L552:
 5998              	.LBE716:
 5999              	.LBE715:
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 6000              		.loc 1 505 0
 6001 0026 2368     		ldr	r3, [r4]
 6002              	.LVL538:
 6003              	.LBB717:
 6004              	.LBB718:
6692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6005              		.loc 2 6692 0
 6006 0028 9A68     		ldr	r2, [r3, #8]
 6007 002a 12F0805F 		tst	r2, #268435456
 6008 002e 1BD1     		bne	.L553
 6009              	.LVL539:
 6010              	.LBE718:
 6011              	.LBE717:
ARM GAS  /tmp/ccecbe7f.s 			page 349


 6012              	.LBB719:
 6013              	.LBB720:
6665:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h ****              ADC_CR_BITS_PROPERTY_RS,
 6014              		.loc 2 6665 0
 6015 0030 9968     		ldr	r1, [r3, #8]
 6016 0032 A54A     		ldr	r2, .L603+4
 6017 0034 0A40     		ands	r2, r2, r1
 6018 0036 42F08052 		orr	r2, r2, #268435456
 6019 003a 9A60     		str	r2, [r3, #8]
 6020              	.LVL540:
 6021              	.LBE720:
 6022              	.LBE719:
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     while (wait_loop_index != 0UL)
 6023              		.loc 1 513 0
 6024 003c A34B     		ldr	r3, .L603+8
 6025 003e 1B68     		ldr	r3, [r3]
 6026 0040 9B09     		lsrs	r3, r3, #6
 6027 0042 A34A     		ldr	r2, .L603+12
 6028 0044 A2FB0323 		umull	r2, r3, r2, r3
 6029 0048 9B09     		lsrs	r3, r3, #6
 6030 004a 0193     		str	r3, [sp, #4]
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6031              		.loc 1 514 0
 6032 004c 09E0     		b	.L554
 6033              	.LVL541:
 6034              	.L595:
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
 6035              		.loc 1 484 0
 6036 004e FFF7FEFF 		bl	HAL_ADC_MspInit
 6037              	.LVL542:
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 6038              		.loc 1 488 0
 6039 0052 0023     		movs	r3, #0
 6040 0054 6366     		str	r3, [r4, #100]
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 6041              		.loc 1 491 0
 6042 0056 84F85C30 		strb	r3, [r4, #92]
 6043 005a DBE7     		b	.L551
 6044              	.L555:
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6045              		.loc 1 516 0
 6046 005c 019B     		ldr	r3, [sp, #4]
 6047 005e 013B     		subs	r3, r3, #1
 6048 0060 0193     		str	r3, [sp, #4]
 6049              	.L554:
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6050              		.loc 1 514 0
 6051 0062 019B     		ldr	r3, [sp, #4]
 6052 0064 002B     		cmp	r3, #0
 6053 0066 F9D1     		bne	.L555
 6054              	.L553:
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   {
 6055              		.loc 1 523 0
 6056 0068 2368     		ldr	r3, [r4]
 6057              	.LVL543:
 6058              	.LBB721:
 6059              	.LBB722:
ARM GAS  /tmp/ccecbe7f.s 			page 350


6692:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6060              		.loc 2 6692 0
 6061 006a 9A68     		ldr	r2, [r3, #8]
 6062 006c 12F0805F 		tst	r2, #268435456
 6063 0070 40F0A480 		bne	.L584
 6064              	.LVL544:
 6065              	.LBE722:
 6066              	.LBE721:
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 6067              		.loc 1 526 0
 6068 0074 226E     		ldr	r2, [r4, #96]
 6069 0076 42F01002 		orr	r2, r2, #16
 6070 007a 2266     		str	r2, [r4, #96]
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 6071              		.loc 1 529 0
 6072 007c 626E     		ldr	r2, [r4, #100]
 6073 007e 42F00102 		orr	r2, r2, #1
 6074 0082 6266     		str	r2, [r4, #100]
 6075              	.LVL545:
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 6076              		.loc 1 531 0
 6077 0084 0125     		movs	r5, #1
 6078              	.LVL546:
 6079              	.L556:
 6080              	.LBB723:
 6081              	.LBB724:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6082              		.loc 2 6884 0
 6083 0086 9A68     		ldr	r2, [r3, #8]
 6084 0088 12F0040F 		tst	r2, #4
 6085 008c 00F09880 		beq	.L585
 6086 0090 0120     		movs	r0, #1
 6087              	.L557:
 6088              	.LVL547:
 6089              	.LBE724:
 6090              	.LBE723:
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       && (tmp_adc_reg_is_conversion_on_going == 0UL)
 6091              		.loc 1 540 0
 6092 0092 226E     		ldr	r2, [r4, #96]
 6093 0094 12F0100F 		tst	r2, #16
 6094 0098 40F00981 		bne	.L558
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****      )
 6095              		.loc 1 541 0
 6096 009c 0028     		cmp	r0, #0
 6097 009e 40F00681 		bne	.L558
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                       HAL_ADC_STATE_REG_BUSY,
 6098              		.loc 1 545 0
 6099 00a2 226E     		ldr	r2, [r4, #96]
 6100 00a4 22F48172 		bic	r2, r2, #258
 6101 00a8 42F00202 		orr	r2, r2, #2
 6102 00ac 2266     		str	r2, [r4, #96]
 6103              	.LVL548:
 6104              	.LBB726:
 6105              	.LBB727:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6106              		.loc 2 6752 0
 6107 00ae 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccecbe7f.s 			page 351


 6108 00b0 12F0010F 		tst	r2, #1
 6109 00b4 22D1     		bne	.L559
 6110              	.LVL549:
 6111              	.LBE727:
 6112              	.LBE726:
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 6113              		.loc 1 556 0
 6114 00b6 8749     		ldr	r1, .L603+16
 6115 00b8 874A     		ldr	r2, .L603+20
 6116 00ba 9342     		cmp	r3, r2
 6117 00bc 18BF     		it	ne
 6118 00be 8B42     		cmpne	r3, r1
 6119 00c0 0CBF     		ite	eq
 6120 00c2 0123     		moveq	r3, #1
 6121 00c4 0023     		movne	r3, #0
 6122 00c6 40F08180 		bne	.L560
 6123              	.LVL550:
 6124              	.LBB728:
 6125              	.LBB729:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6126              		.loc 2 6752 0
 6127 00ca 8A68     		ldr	r2, [r1, #8]
 6128 00cc 12F0010F 		tst	r2, #1
 6129 00d0 78D0     		beq	.L586
 6130 00d2 0122     		movs	r2, #1
 6131              	.L561:
 6132              	.LVL551:
 6133              	.LBE729:
 6134              	.LBE728:
 6135              	.LBB731:
 6136              	.LBB732:
 6137 00d4 8049     		ldr	r1, .L603+20
 6138 00d6 8968     		ldr	r1, [r1, #8]
 6139 00d8 11F0010F 		tst	r1, #1
 6140 00dc 74D0     		beq	.L587
 6141 00de 0121     		movs	r1, #1
 6142              	.L562:
 6143              	.LVL552:
 6144              	.LBE732:
 6145              	.LBE731:
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 6146              		.loc 1 556 0
 6147 00e0 0A43     		orrs	r2, r1, r2
 6148 00e2 0CBF     		ite	eq
 6149 00e4 0122     		moveq	r2, #1
 6150 00e6 0022     		movne	r2, #0
 6151              	.L563:
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 6152              		.loc 1 556 0 is_stmt 0 discriminator 4
 6153 00e8 42B1     		cbz	r2, .L559
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 6154              		.loc 1 575 0 is_stmt 1
 6155 00ea 002B     		cmp	r3, #0
 6156 00ec 79D0     		beq	.L589
 6157 00ee 7B49     		ldr	r1, .L603+24
 6158              	.L565:
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
ARM GAS  /tmp/ccecbe7f.s 			page 352


 6159              		.loc 1 575 0 is_stmt 0 discriminator 4
 6160 00f0 6368     		ldr	r3, [r4, #4]
 6161              	.LVL553:
 6162              	.LBB734:
 6163              	.LBB735:
2648:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6164              		.loc 2 2648 0 is_stmt 1 discriminator 4
 6165 00f2 8A68     		ldr	r2, [r1, #8]
 6166 00f4 22F47C12 		bic	r2, r2, #4128768
 6167 00f8 1343     		orrs	r3, r3, r2
 6168              	.LVL554:
 6169 00fa 8B60     		str	r3, [r1, #8]
 6170              	.LVL555:
 6171              	.L559:
 6172              	.LBE735:
 6173              	.LBE734:
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6174              		.loc 1 595 0
 6175 00fc 2168     		ldr	r1, [r4]
 6176 00fe 784B     		ldr	r3, .L603+28
 6177 0100 9942     		cmp	r1, r3
 6178 0102 70D0     		beq	.L596
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 6179              		.loc 1 605 0
 6180 0104 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 6181              		.loc 1 606 0
 6182 0106 E36B     		ldr	r3, [r4, #60]
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 6183              		.loc 1 605 0
 6184 0108 43EA4233 		orr	r3, r3, r2, lsl #13
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 6185              		.loc 1 607 0
 6186 010c A268     		ldr	r2, [r4, #8]
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Resolution                                                 |
 6187              		.loc 1 606 0
 6188 010e 1343     		orrs	r3, r3, r2
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6189              		.loc 1 608 0
 6190 0110 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                    |
 6191              		.loc 1 605 0
 6192 0114 43EA0243 		orr	r3, r3, r2, lsl #16
 6193              	.LVL556:
 6194              	.L568:
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6195              		.loc 1 632 0
 6196 0118 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
 6197 011c 012A     		cmp	r2, #1
 6198 011e 7CD0     		beq	.L597
 6199              	.L569:
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6200              		.loc 1 642 0
 6201 0120 A26A     		ldr	r2, [r4, #40]
 6202 0122 22B1     		cbz	r2, .L570
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 6203              		.loc 1 644 0
ARM GAS  /tmp/ccecbe7f.s 			page 353


 6204 0124 02F47872 		and	r2, r2, #992
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                  );
 6205              		.loc 1 645 0
 6206 0128 E06A     		ldr	r0, [r4, #44]
 6207 012a 0243     		orrs	r2, r2, r0
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   | hadc->Init.ExternalTrigConvEdge
 6208              		.loc 1 644 0
 6209 012c 1343     		orrs	r3, r3, r2
 6210              	.LVL557:
 6211              	.L570:
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6212              		.loc 1 651 0
 6213 012e 6C4A     		ldr	r2, .L603+28
 6214 0130 9142     		cmp	r1, r2
 6215 0132 77D0     		beq	.L598
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6216              		.loc 1 661 0
 6217 0134 C868     		ldr	r0, [r1, #12]
 6218 0136 6B4A     		ldr	r2, .L603+32
 6219 0138 0240     		ands	r2, r2, r0
 6220 013a 1343     		orrs	r3, r3, r2
 6221              	.LVL558:
 6222 013c CB60     		str	r3, [r1, #12]
 6223              	.L572:
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 6224              		.loc 1 674 0
 6225 013e 2268     		ldr	r2, [r4]
 6226              	.LVL559:
 6227              	.LBB736:
 6228              	.LBB737:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6229              		.loc 2 6884 0
 6230 0140 9368     		ldr	r3, [r2, #8]
 6231 0142 13F0040F 		tst	r3, #4
 6232 0146 7AD0     		beq	.L592
 6233 0148 0121     		movs	r1, #1
 6234              	.L573:
 6235              	.LVL560:
 6236              	.LBE737:
 6237              	.LBE736:
 6238              	.LBB739:
 6239              	.LBB740:
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6240              		.loc 2 7079 0
 6241 014a 9368     		ldr	r3, [r2, #8]
 6242 014c 13F0080F 		tst	r3, #8
 6243 0150 77D0     		beq	.L593
 6244 0152 0123     		movs	r3, #1
 6245              	.L574:
 6246              	.LVL561:
 6247              	.LBE740:
 6248              	.LBE739:
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         && (tmp_adc_is_conversion_on_going_injected == 0UL)
 6249              		.loc 1 676 0
 6250 0154 0B43     		orrs	r3, r3, r1
 6251 0156 22D1     		bne	.L575
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
ARM GAS  /tmp/ccecbe7f.s 			page 354


 6252              		.loc 1 681 0
 6253 0158 614B     		ldr	r3, .L603+28
 6254 015a 9A42     		cmp	r2, r3
 6255 015c 73D0     		beq	.L599
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 6256              		.loc 1 690 0
 6257 015e 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 6258              		.loc 1 691 0
 6259 0160 236B     		ldr	r3, [r4, #48]
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 6260              		.loc 1 689 0
 6261 0162 43EA8131 		orr	r1, r3, r1, lsl #14
 6262              	.LVL562:
 6263              	.L577:
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 6264              		.loc 1 699 0
 6265 0166 D068     		ldr	r0, [r2, #12]
 6266 0168 5F4B     		ldr	r3, .L603+36
 6267 016a 0340     		ands	r3, r3, r0
 6268 016c 0B43     		orrs	r3, r3, r1
 6269 016e D360     		str	r3, [r2, #12]
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 6270              		.loc 1 701 0
 6271 0170 94F84430 		ldrb	r3, [r4, #68]	@ zero_extendqisi2
 6272 0174 012B     		cmp	r3, #1
 6273 0176 6DD0     		beq	.L600
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 6274              		.loc 1 781 0
 6275 0178 2268     		ldr	r2, [r4]
 6276 017a 1369     		ldr	r3, [r2, #16]
 6277 017c 23F00103 		bic	r3, r3, #1
 6278 0180 1361     		str	r3, [r2, #16]
 6279              	.LVL563:
 6280              	.L580:
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** #if defined(ADC_VER_V5_V90)
 6281              		.loc 1 785 0
 6282 0182 2268     		ldr	r2, [r4]
 6283 0184 1369     		ldr	r3, [r2, #16]
 6284 0186 23F07043 		bic	r3, r3, #-268435456
 6285 018a 216C     		ldr	r1, [r4, #64]
 6286 018c 0B43     		orrs	r3, r3, r1
 6287 018e 1361     		str	r3, [r2, #16]
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 6288              		.loc 1 787 0
 6289 0190 2268     		ldr	r2, [r4]
 6290 0192 534B     		ldr	r3, .L603+28
 6291 0194 9A42     		cmp	r2, r3
 6292 0196 02D0     		beq	.L575
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 6293              		.loc 1 790 0
 6294 0198 2046     		mov	r0, r4
 6295 019a FFF7FEFF 		bl	ADC_ConfigureBoostMode
 6296              	.LVL564:
 6297              	.L575:
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     {
 6298              		.loc 1 807 0
ARM GAS  /tmp/ccecbe7f.s 			page 355


 6299 019e 2369     		ldr	r3, [r4, #16]
 6300 01a0 012B     		cmp	r3, #1
 6301 01a2 7BD0     		beq	.L601
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6302              		.loc 1 814 0
 6303 01a4 2268     		ldr	r2, [r4]
 6304 01a6 136B     		ldr	r3, [r2, #48]
 6305 01a8 23F00F03 		bic	r3, r3, #15
 6306 01ac 1363     		str	r3, [r2, #48]
 6307              	.L582:
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 6308              		.loc 1 819 0
 6309 01ae 236E     		ldr	r3, [r4, #96]
 6310 01b0 23F00303 		bic	r3, r3, #3
 6311 01b4 43F00103 		orr	r3, r3, #1
 6312 01b8 2366     		str	r3, [r4, #96]
 6313 01ba 7DE0     		b	.L550
 6314              	.LVL565:
 6315              	.L584:
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   uint32_t tmpCFGR;
 6316              		.loc 1 418 0
 6317 01bc 0025     		movs	r5, #0
 6318 01be 62E7     		b	.L556
 6319              	.LVL566:
 6320              	.L585:
 6321              	.LBB742:
 6322              	.LBB725:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6323              		.loc 2 6884 0
 6324 01c0 0020     		movs	r0, #0
 6325 01c2 66E7     		b	.L557
 6326              	.LVL567:
 6327              	.L586:
 6328              	.LBE725:
 6329              	.LBE742:
 6330              	.LBB743:
 6331              	.LBB730:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6332              		.loc 2 6752 0
 6333 01c4 0022     		movs	r2, #0
 6334 01c6 85E7     		b	.L561
 6335              	.LVL568:
 6336              	.L587:
 6337              	.LBE730:
 6338              	.LBE743:
 6339              	.LBB744:
 6340              	.LBB733:
 6341 01c8 0021     		movs	r1, #0
 6342 01ca 89E7     		b	.L562
 6343              	.LVL569:
 6344              	.L560:
 6345              	.LBE733:
 6346              	.LBE744:
 6347              	.LBB745:
 6348              	.LBB746:
 6349 01cc 444A     		ldr	r2, .L603+28
 6350 01ce 9268     		ldr	r2, [r2, #8]
ARM GAS  /tmp/ccecbe7f.s 			page 356


 6351 01d0 12F0010F 		tst	r2, #1
 6352 01d4 03D0     		beq	.L588
 6353 01d6 0122     		movs	r2, #1
 6354              	.L564:
 6355              	.LVL570:
 6356              	.LBE746:
 6357              	.LBE745:
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       {
 6358              		.loc 1 556 0
 6359 01d8 82F00102 		eor	r2, r2, #1
 6360 01dc 84E7     		b	.L563
 6361              	.LVL571:
 6362              	.L588:
 6363              	.LBB748:
 6364              	.LBB747:
6752:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6365              		.loc 2 6752 0
 6366 01de 0022     		movs	r2, #0
 6367 01e0 FAE7     		b	.L564
 6368              	.LVL572:
 6369              	.L589:
 6370              	.LBE747:
 6371              	.LBE748:
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 6372              		.loc 1 575 0
 6373 01e2 4249     		ldr	r1, .L603+40
 6374 01e4 84E7     		b	.L565
 6375              	.L596:
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                     |
 6376              		.loc 1 597 0
 6377 01e6 627E     		ldrb	r2, [r4, #25]	@ zero_extendqisi2
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.DataAlign                                                   |
 6378              		.loc 1 598 0
 6379 01e8 E36B     		ldr	r3, [r4, #60]
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                     |
 6380              		.loc 1 597 0
 6381 01ea 43EA4233 		orr	r3, r3, r2, lsl #13
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_C
 6382              		.loc 1 599 0
 6383 01ee E268     		ldr	r2, [r4, #12]
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.DataAlign                                                   |
 6384              		.loc 1 598 0
 6385 01f0 1343     		orrs	r3, r3, r2
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 6386              		.loc 1 600 0
 6387 01f2 A268     		ldr	r2, [r4, #8]
 6388 01f4 082A     		cmp	r2, #8
 6389 01f6 08D0     		beq	.L567
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 6390              		.loc 1 600 0 is_stmt 0 discriminator 1
 6391 01f8 0C2A     		cmp	r2, #12
 6392 01fa 05D0     		beq	.L590
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 6393              		.loc 1 600 0 discriminator 3
 6394 01fc 1C2A     		cmp	r2, #28
 6395 01fe 0AD0     		beq	.L591
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
ARM GAS  /tmp/ccecbe7f.s 			page 357


 6396              		.loc 1 600 0 discriminator 5
 6397 0200 182A     		cmp	r2, #24
 6398 0202 02D1     		bne	.L567
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 6399              		.loc 1 600 0
 6400 0204 1820     		movs	r0, #24
 6401 0206 00E0     		b	.L567
 6402              	.L590:
 6403 0208 0820     		movs	r0, #8
 6404              	.L567:
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ((__LL_ADC12_RESOLUTION_TO_ADC3(hadc->Init.Resolution)  & (ADC_CFGR_RES_1 | ADC_C
 6405              		.loc 1 599 0 is_stmt 1
 6406 020a 0343     		orrs	r3, r3, r0
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6407              		.loc 1 601 0
 6408 020c 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   hadc->Init.Overrun                                                     |
 6409              		.loc 1 597 0
 6410 0210 43EA0243 		orr	r3, r3, r2, lsl #16
 6411              	.LVL573:
 6412 0214 80E7     		b	.L568
 6413              	.LVL574:
 6414              	.L591:
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                   ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 6415              		.loc 1 600 0
 6416 0216 1020     		movs	r0, #16
 6417 0218 F7E7     		b	.L567
 6418              	.LVL575:
 6419              	.L597:
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6420              		.loc 1 634 0
 6421 021a 626A     		ldr	r2, [r4, #36]
 6422 021c 013A     		subs	r2, r2, #1
 6423 021e 43EA4243 		orr	r3, r3, r2, lsl #17
 6424              	.LVL576:
 6425 0222 7DE7     		b	.L569
 6426              	.L598:
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       /* Configuration of sampling mode */
 6427              		.loc 1 654 0
 6428 0224 C868     		ldr	r0, [r1, #12]
 6429 0226 324A     		ldr	r2, .L603+44
 6430 0228 0240     		ands	r2, r2, r0
 6431 022a 1343     		orrs	r3, r3, r2
 6432              	.LVL577:
 6433 022c CB60     		str	r3, [r1, #12]
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6434              		.loc 1 656 0
 6435 022e 2268     		ldr	r2, [r4]
 6436 0230 1369     		ldr	r3, [r2, #16]
 6437 0232 23F04063 		bic	r3, r3, #201326592
 6438 0236 616B     		ldr	r1, [r4, #52]
 6439 0238 0B43     		orrs	r3, r3, r1
 6440 023a 1361     		str	r3, [r2, #16]
 6441 023c 7FE7     		b	.L572
 6442              	.LVL578:
 6443              	.L592:
 6444              	.LBB749:
ARM GAS  /tmp/ccecbe7f.s 			page 358


 6445              	.LBB738:
6884:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6446              		.loc 2 6884 0
 6447 023e 0021     		movs	r1, #0
 6448 0240 83E7     		b	.L573
 6449              	.LVL579:
 6450              	.L593:
 6451              	.LBE738:
 6452              	.LBE749:
 6453              	.LBB750:
 6454              	.LBB741:
7079:Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_ll_adc.h **** }
 6455              		.loc 2 7079 0
 6456 0242 0023     		movs	r3, #0
 6457 0244 86E7     		b	.L574
 6458              	.LVL580:
 6459              	.L599:
 6460              	.LBE741:
 6461              	.LBE750:
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC3_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 6462              		.loc 1 684 0
 6463 0246 217E     		ldrb	r1, [r4, #24]	@ zero_extendqisi2
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****       }
 6464              		.loc 1 685 0
 6465 0248 94F83830 		ldrb	r3, [r4, #56]	@ zero_extendqisi2
 6466 024c 5B00     		lsls	r3, r3, #1
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                     ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 6467              		.loc 1 683 0
 6468 024e 43EA8131 		orr	r1, r3, r1, lsl #14
 6469              	.LVL581:
 6470 0252 88E7     		b	.L577
 6471              	.L600:
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 6472              		.loc 1 704 0
 6473 0254 2168     		ldr	r1, [r4]
 6474              	.LVL582:
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****         {
 6475              		.loc 1 727 0
 6476 0256 224B     		ldr	r3, .L603+28
 6477 0258 9942     		cmp	r1, r3
 6478 025a 10D0     		beq	.L602
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_ROVSE                       |
 6479              		.loc 1 755 0
 6480 025c 0A69     		ldr	r2, [r1, #16]
 6481 025e 254B     		ldr	r3, .L603+48
 6482 0260 1340     		ands	r3, r3, r2
 6483 0262 A26C     		ldr	r2, [r4, #72]
 6484 0264 501E     		subs	r0, r2, #1
 6485 0266 E26C     		ldr	r2, [r4, #76]
 6486 0268 42EA0042 		orr	r2, r2, r0, lsl #16
 6487 026c 206D     		ldr	r0, [r4, #80]
 6488 026e 0243     		orrs	r2, r2, r0
 6489 0270 606D     		ldr	r0, [r4, #84]
 6490 0272 0243     		orrs	r2, r2, r0
 6491 0274 1343     		orrs	r3, r3, r2
 6492 0276 43F00103 		orr	r3, r3, #1
 6493 027a 0B61     		str	r3, [r1, #16]
ARM GAS  /tmp/ccecbe7f.s 			page 359


 6494 027c 81E7     		b	.L580
 6495              	.L602:
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****                      ADC_CFGR2_OVSR  |
 6496              		.loc 1 734 0
 6497 027e 0A69     		ldr	r2, [r1, #16]
 6498 0280 1D4B     		ldr	r3, .L603+52
 6499 0282 1340     		ands	r3, r3, r2
 6500 0284 A26C     		ldr	r2, [r4, #72]
 6501 0286 E06C     		ldr	r0, [r4, #76]
 6502 0288 0243     		orrs	r2, r2, r0
 6503 028a 206D     		ldr	r0, [r4, #80]
 6504 028c 0243     		orrs	r2, r2, r0
 6505 028e 606D     		ldr	r0, [r4, #84]
 6506 0290 0243     		orrs	r2, r2, r0
 6507 0292 1343     		orrs	r3, r3, r2
 6508 0294 43F00103 		orr	r3, r3, #1
 6509 0298 0B61     		str	r3, [r1, #16]
 6510 029a 72E7     		b	.L580
 6511              	.L601:
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****     }
 6512              		.loc 1 810 0
 6513 029c 2168     		ldr	r1, [r4]
 6514 029e 0B6B     		ldr	r3, [r1, #48]
 6515 02a0 23F00F03 		bic	r3, r3, #15
 6516 02a4 E269     		ldr	r2, [r4, #28]
 6517 02a6 013A     		subs	r2, r2, #1
 6518 02a8 1343     		orrs	r3, r3, r2
 6519 02aa 0B63     		str	r3, [r1, #48]
 6520 02ac 7FE7     		b	.L582
 6521              	.L558:
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 6522              		.loc 1 824 0
 6523 02ae 236E     		ldr	r3, [r4, #96]
 6524 02b0 43F01003 		orr	r3, r3, #16
 6525 02b4 2366     		str	r3, [r4, #96]
 6526              	.LVL583:
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 6527              		.loc 1 826 0
 6528 02b6 0125     		movs	r5, #1
 6529              	.LVL584:
 6530              	.L550:
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c **** 
 6531              		.loc 1 831 0
 6532 02b8 2846     		mov	r0, r5
 6533 02ba 03B0     		add	sp, sp, #12
 6534              	.LCFI28:
 6535              		.cfi_remember_state
 6536              		.cfi_def_cfa_offset 12
 6537              		@ sp needed
 6538 02bc 30BD     		pop	{r4, r5, pc}
 6539              	.LVL585:
 6540              	.L583:
 6541              	.LCFI29:
 6542              		.cfi_restore_state
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_adc.c ****   }
 6543              		.loc 1 428 0
 6544 02be 0125     		movs	r5, #1
ARM GAS  /tmp/ccecbe7f.s 			page 360


 6545 02c0 FAE7     		b	.L550
 6546              	.L604:
 6547 02c2 00BF     		.align	2
 6548              	.L603:
 6549 02c4 C0FFFF5F 		.word	1610612672
 6550 02c8 C0FFFF6F 		.word	1879048128
 6551 02cc 00000000 		.word	SystemCoreClock
 6552 02d0 632D3E05 		.word	87960931
 6553 02d4 00200240 		.word	1073881088
 6554 02d8 00210240 		.word	1073881344
 6555 02dc 00230240 		.word	1073881856
 6556 02e0 00600258 		.word	1476550656
 6557 02e4 03C0F0FF 		.word	-999421
 6558 02e8 FCBFFFFF 		.word	-16388
 6559 02ec 00630258 		.word	1476551424
 6560 02f0 0740F0FF 		.word	-1032185
 6561 02f4 1EF800FC 		.word	-67045346
 6562 02f8 1FF800FC 		.word	-67045345
 6563              		.cfi_endproc
 6564              	.LFE343:
 6566              		.text
 6567              	.Letext0:
 6568              		.file 4 "/usr/include/newlib/machine/_default_types.h"
 6569              		.file 5 "/usr/include/newlib/sys/_stdint.h"
 6570              		.file 6 "Drivers/CMSIS/Include/core_cm7.h"
 6571              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 6572              		.file 8 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h723xx.h"
 6573              		.file 9 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 6574              		.file 10 "/usr/include/newlib/sys/lock.h"
 6575              		.file 11 "/usr/include/newlib/sys/_types.h"
 6576              		.file 12 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 6577              		.file 13 "/usr/include/newlib/sys/reent.h"
 6578              		.file 14 "/usr/include/newlib/math.h"
 6579              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 6580              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 6581              		.file 17 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc.h"
 6582              		.file 18 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 6583              		.file 19 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 6584              		.file 20 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 6585              		.file 21 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
 6586              		.file 22 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
 6587              		.file 23 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_adc_ex.h"
ARM GAS  /tmp/ccecbe7f.s 			page 361


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_adc.c
     /tmp/ccecbe7f.s:17     .text.HAL_ADC_MspInit:0000000000000000 $t
     /tmp/ccecbe7f.s:24     .text.HAL_ADC_MspInit:0000000000000000 HAL_ADC_MspInit
     /tmp/ccecbe7f.s:39     .text.HAL_ADC_MspDeInit:0000000000000000 $t
     /tmp/ccecbe7f.s:46     .text.HAL_ADC_MspDeInit:0000000000000000 HAL_ADC_MspDeInit
     /tmp/ccecbe7f.s:60     .text.HAL_ADC_PollForConversion:0000000000000000 $t
     /tmp/ccecbe7f.s:67     .text.HAL_ADC_PollForConversion:0000000000000000 HAL_ADC_PollForConversion
     /tmp/ccecbe7f.s:309    .text.HAL_ADC_PollForConversion:0000000000000124 $d
     /tmp/ccecbe7f.s:316    .text.HAL_ADC_PollForEvent:0000000000000000 $t
     /tmp/ccecbe7f.s:323    .text.HAL_ADC_PollForEvent:0000000000000000 HAL_ADC_PollForEvent
     /tmp/ccecbe7f.s:481    .text.HAL_ADC_GetValue:0000000000000000 $t
     /tmp/ccecbe7f.s:488    .text.HAL_ADC_GetValue:0000000000000000 HAL_ADC_GetValue
     /tmp/ccecbe7f.s:506    .text.HAL_ADC_ConvCpltCallback:0000000000000000 $t
     /tmp/ccecbe7f.s:513    .text.HAL_ADC_ConvCpltCallback:0000000000000000 HAL_ADC_ConvCpltCallback
     /tmp/ccecbe7f.s:527    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 $t
     /tmp/ccecbe7f.s:534    .text.HAL_ADC_ConvHalfCpltCallback:0000000000000000 HAL_ADC_ConvHalfCpltCallback
     /tmp/ccecbe7f.s:548    .text.ADC_DMAHalfConvCplt:0000000000000000 $t
     /tmp/ccecbe7f.s:555    .text.ADC_DMAHalfConvCplt:0000000000000000 ADC_DMAHalfConvCplt
     /tmp/ccecbe7f.s:579    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 $t
     /tmp/ccecbe7f.s:586    .text.HAL_ADC_LevelOutOfWindowCallback:0000000000000000 HAL_ADC_LevelOutOfWindowCallback
     /tmp/ccecbe7f.s:600    .text.HAL_ADC_ErrorCallback:0000000000000000 $t
     /tmp/ccecbe7f.s:607    .text.HAL_ADC_ErrorCallback:0000000000000000 HAL_ADC_ErrorCallback
     /tmp/ccecbe7f.s:621    .text.HAL_ADC_IRQHandler:0000000000000000 $t
     /tmp/ccecbe7f.s:628    .text.HAL_ADC_IRQHandler:0000000000000000 HAL_ADC_IRQHandler
     /tmp/ccecbe7f.s:1131   .text.HAL_ADC_IRQHandler:00000000000002a4 $d
     /tmp/ccecbe7f.s:1137   .text.HAL_ADC_IRQHandler:00000000000002b4 $t
     /tmp/ccecbe7f.s:1158   .text.ADC_DMAConvCplt:0000000000000000 $t
     /tmp/ccecbe7f.s:1165   .text.ADC_DMAConvCplt:0000000000000000 ADC_DMAConvCplt
     /tmp/ccecbe7f.s:1272   .text.ADC_DMAError:0000000000000000 $t
     /tmp/ccecbe7f.s:1279   .text.ADC_DMAError:0000000000000000 ADC_DMAError
     /tmp/ccecbe7f.s:1311   .text.HAL_ADC_ConfigChannel:0000000000000000 $t
     /tmp/ccecbe7f.s:1318   .text.HAL_ADC_ConfigChannel:0000000000000000 HAL_ADC_ConfigChannel
     /tmp/ccecbe7f.s:1991   .text.HAL_ADC_ConfigChannel:0000000000000318 $d
     /tmp/ccecbe7f.s:2002   .text.HAL_ADC_ConfigChannel:0000000000000320 $t
     /tmp/ccecbe7f.s:2605   .text.HAL_ADC_ConfigChannel:00000000000005f8 $d
     /tmp/ccecbe7f.s:2620   .text.HAL_ADC_ConfigChannel:0000000000000628 $t
     /tmp/ccecbe7f.s:2670   .text.HAL_ADC_ConfigChannel:0000000000000660 $d
     /tmp/ccecbe7f.s:2675   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 $t
     /tmp/ccecbe7f.s:2682   .text.HAL_ADC_AnalogWDGConfig:0000000000000000 HAL_ADC_AnalogWDGConfig
     /tmp/ccecbe7f.s:3218   .text.HAL_ADC_AnalogWDGConfig:0000000000000304 $d
     /tmp/ccecbe7f.s:3233   .text.HAL_ADC_AnalogWDGConfig:0000000000000324 $t
     /tmp/ccecbe7f.s:3622   .text.HAL_ADC_AnalogWDGConfig:0000000000000518 $d
     /tmp/ccecbe7f.s:3631   .text.HAL_ADC_GetState:0000000000000000 $t
     /tmp/ccecbe7f.s:3638   .text.HAL_ADC_GetState:0000000000000000 HAL_ADC_GetState
     /tmp/ccecbe7f.s:3655   .text.HAL_ADC_GetError:0000000000000000 $t
     /tmp/ccecbe7f.s:3662   .text.HAL_ADC_GetError:0000000000000000 HAL_ADC_GetError
     /tmp/ccecbe7f.s:3679   .text.ADC_ConversionStop:0000000000000000 $t
     /tmp/ccecbe7f.s:3686   .text.ADC_ConversionStop:0000000000000000 ADC_ConversionStop
     /tmp/ccecbe7f.s:3937   .text.ADC_ConversionStop:00000000000000f4 $d
     /tmp/ccecbe7f.s:3943   .text.ADC_Enable:0000000000000000 $t
     /tmp/ccecbe7f.s:3950   .text.ADC_Enable:0000000000000000 ADC_Enable
     /tmp/ccecbe7f.s:4125   .text.ADC_Enable:00000000000000b8 $d
     /tmp/ccecbe7f.s:4134   .text.HAL_ADC_Start:0000000000000000 $t
     /tmp/ccecbe7f.s:4141   .text.HAL_ADC_Start:0000000000000000 HAL_ADC_Start
     /tmp/ccecbe7f.s:4340   .text.HAL_ADC_Start:0000000000000100 $d
     /tmp/ccecbe7f.s:4349   .text.HAL_ADC_Start_IT:0000000000000000 $t
ARM GAS  /tmp/ccecbe7f.s 			page 362


     /tmp/ccecbe7f.s:4356   .text.HAL_ADC_Start_IT:0000000000000000 HAL_ADC_Start_IT
     /tmp/ccecbe7f.s:4642   .text.HAL_ADC_Start_IT:0000000000000194 $d
     /tmp/ccecbe7f.s:4651   .text.HAL_ADC_Start_DMA:0000000000000000 $t
     /tmp/ccecbe7f.s:4658   .text.HAL_ADC_Start_DMA:0000000000000000 HAL_ADC_Start_DMA
     /tmp/ccecbe7f.s:4908   .text.HAL_ADC_Start_DMA:000000000000012c $d
     /tmp/ccecbe7f.s:4921   .text.ADC_Disable:0000000000000000 $t
     /tmp/ccecbe7f.s:4928   .text.ADC_Disable:0000000000000000 ADC_Disable
     /tmp/ccecbe7f.s:5061   .text.ADC_Disable:000000000000008c $d
     /tmp/ccecbe7f.s:5066   .text.HAL_ADC_DeInit:0000000000000000 $t
     /tmp/ccecbe7f.s:5073   .text.HAL_ADC_DeInit:0000000000000000 HAL_ADC_DeInit
     /tmp/ccecbe7f.s:5430   .text.HAL_ADC_DeInit:0000000000000220 $d
     /tmp/ccecbe7f.s:5446   .text.HAL_ADC_Stop:0000000000000000 $t
     /tmp/ccecbe7f.s:5453   .text.HAL_ADC_Stop:0000000000000000 HAL_ADC_Stop
     /tmp/ccecbe7f.s:5522   .text.HAL_ADC_Stop:0000000000000048 $d
     /tmp/ccecbe7f.s:5527   .text.HAL_ADC_Stop_IT:0000000000000000 $t
     /tmp/ccecbe7f.s:5534   .text.HAL_ADC_Stop_IT:0000000000000000 HAL_ADC_Stop_IT
     /tmp/ccecbe7f.s:5608   .text.HAL_ADC_Stop_IT:0000000000000050 $d
     /tmp/ccecbe7f.s:5613   .text.HAL_ADC_Stop_DMA:0000000000000000 $t
     /tmp/ccecbe7f.s:5620   .text.HAL_ADC_Stop_DMA:0000000000000000 HAL_ADC_Stop_DMA
     /tmp/ccecbe7f.s:5724   .text.HAL_ADC_Stop_DMA:0000000000000080 $d
     /tmp/ccecbe7f.s:5729   .text.ADC_ConfigureBoostMode:0000000000000000 $t
     /tmp/ccecbe7f.s:5736   .text.ADC_ConfigureBoostMode:0000000000000000 ADC_ConfigureBoostMode
     /tmp/ccecbe7f.s:5930   .text.ADC_ConfigureBoostMode:0000000000000114 $d
     /tmp/ccecbe7f.s:5941   .text.HAL_ADC_Init:0000000000000000 $t
     /tmp/ccecbe7f.s:5948   .text.HAL_ADC_Init:0000000000000000 HAL_ADC_Init
     /tmp/ccecbe7f.s:6549   .text.HAL_ADC_Init:00000000000002c4 $d

UNDEFINED SYMBOLS
HAL_GetTick
HAL_ADCEx_EndOfSamplingCallback
HAL_ADCEx_InjectedConvCpltCallback
HAL_ADCEx_LevelOutOfWindow2Callback
HAL_ADCEx_LevelOutOfWindow3Callback
HAL_ADCEx_InjectedQueueOverflowCallback
SystemCoreClock
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_RCC_GetHCLKFreq
HAL_RCCEx_GetPeriphCLKFreq
