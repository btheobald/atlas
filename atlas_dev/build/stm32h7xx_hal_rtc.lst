ARM GAS  /tmp/ccTYdMqB.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_rtc.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.HAL_RTC_MspInit,"ax",%progbits
  17              		.align	1
  18              		.weak	HAL_RTC_MspInit
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv5-d16
  24              	HAL_RTC_MspInit:
  25              	.LFB345:
  26              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @file    stm32h7xx_hal_rtc.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief   RTC HAL module driver.
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          functionalities of the Real-Time Clock (RTC) peripheral:
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Initialization/de-initialization
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Calendar (Time and Date) configuration
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Alarms (Alarm A and Alarm B) configuration
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + WakeUp Timer configuration
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + TimeStamp configuration
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Tampers configuration
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Backup Data Registers configuration
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + RTC Tamper and TimeStamp Pins Selection
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *           + Interrupts and flags management
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @verbatim
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ##### RTC Operating Condition #####
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The real-time clock (RTC) and the RTC backup registers can be powered
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        from the VBAT voltage when the main VDD supply is powered off.
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        To retain the content of the RTC backup registers and supply the RTC
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        when VDD is turned off, VBAT pin can be connected to an optional
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        standby voltage supplied by a battery or by another source.
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Reset #####
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The backup domain reset sets all RTC registers and the RCC_BDCR register
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        to their reset values.
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        A backup domain reset is generated when one of the following events occurs:
ARM GAS  /tmp/ccTYdMqB.s 			page 2


  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Software reset, triggered by setting the BDRST bit in the
  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         RCC Backup domain control register (RCC_BDCR).
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) VDD or VBAT power on, if both supplies have previously been powered off.
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Tamper detection event resets all data backup registers.
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                    ##### Backup Domain Access #####
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] After reset, the backup domain (RTC registers, RTC backup data
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        registers and backup SRAM) is protected against possible unwanted write
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        accesses.
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] To enable access to the RTC Domain and RTC registers, proceed as follows:
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Call the function HAL_RCCEx_PeriphCLKConfig with RCC_PERIPHCLK_RTC for
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         PeriphClockSelection and select RTCClockSelection (LSE, LSI or HSEdiv32)
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (#) Enable RTC Clock using the __HAL_RCC_RTC_ENABLE() macro.
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### How to use RTC Driver #####
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Enable the RTC domain access (see description in the section above).
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Configure the RTC Prescaler (Asynchronous and Synchronous) and RTC hour
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         format using the HAL_RTC_Init() function.
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Time and Date configuration ***
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===================================
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To configure the RTC Calendar (Time and Date) use the HAL_RTC_SetTime()
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         and HAL_RTC_SetDate() functions.
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To read the RTC Calendar, use the HAL_RTC_GetTime() and HAL_RTC_GetDate() functions.
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Alarm configuration ***
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ===========================
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..]
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To configure the RTC Alarm use the HAL_RTC_SetAlarm() function.
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             You can also configure the RTC Alarm with interrupt mode using the
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             HAL_RTC_SetAlarm_IT() function.
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) To read the RTC Alarm, use the HAL_RTC_GetAlarm() function.
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ##### RTC and low power modes #####
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===================================================================
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The MCU can be woken up from a low power mode by an RTC alternate
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        function.
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC alternate functions are the RTC alarms (Alarm A and Alarm B),
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        RTC wakeup, RTC tamper event detection and RTC time stamp event detection.
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        These RTC alternate functions can wake up the system from the Stop and
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Standby low power modes.
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The system can also wake up from low power modes without depending
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        on an external interrupt (Auto-wakeup mode), by using the RTC alarm
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        or the RTC wakeup events.
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   [..] The RTC provides a programmable time base for waking up from the
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Stop or Standby mode at regular intervals.
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        Wakeup from STOP and STANDBY modes is possible only when the RTC clock source
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****        is LSE or LSI.
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *** Callback registration ***
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   =============================================
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
ARM GAS  /tmp/ccTYdMqB.s 			page 3


  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions. This is the recommended configuration
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in order to optimize memory/code consumption footprint/performances.
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   The compilation define  USE_RTC_REGISTER_CALLBACKS when set to 1
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   allows the user to configure dynamically the driver callbacks.
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use Function @ref HAL_RTC_RegisterCallback() to register an interrupt callback.
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Function @ref HAL_RTC_RegisterCallback() allows to register following callbacks:
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function takes as parameters the HAL peripheral handle, the Callback ID
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and a pointer to the user callback function.
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Use function @ref HAL_RTC_UnRegisterCallback() to reset a callback to the default
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   weak function.
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   @ref HAL_RTC_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   and the Callback ID.
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   This function allows to reset following callbacks:
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmAEventCallback          : RTC Alarm A Event callback.
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) AlarmBEventCallback          : RTC Alarm B Event callback.
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) TimeStampEventCallback       : RTC TimeStamp Event callback.
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) WakeUpTimerEventCallback     : RTC WakeUpTimer Event callback.
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper1EventCallback         : RTC Tamper 1 Event callback.
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper2EventCallback         : RTC Tamper 2 Event callback.
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) Tamper3EventCallback         : RTC Tamper 3 Event callback.
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspInitCallback              : RTC MspInit callback.
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     (+) MspDeInitCallback            : RTC MspDeInit callback.
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   By default, after the @ref HAL_RTC_Init() and when the state is HAL_RTC_STATE_RESET,
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   all callbacks are set to the corresponding weak functions :
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   examples @ref AlarmAEventCallback(), @ref WakeUpTimerEventCallback().
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done for MspInit and MspDeInit callbacks that are reset to the legacy weak function
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in the @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit() only when these callbacks are null
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   (not registered beforehand).
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   If not, MspInit or MspDeInit are not null, @ref HAL_RTC_Init()/@ref HAL_RTC_DeInit()
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Callbacks can be registered/unregistered in HAL_RTC_STATE_READY state only.
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   Exception done MspInit/MspDeInit that can be registered/unregistered
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   in HAL_RTC_STATE_READY or HAL_RTC_STATE_RESET state,
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   thus registered (user) MspInit/DeInit callbacks can be used during the Init/DeInit.
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   In that case first register the MspInit/MspDeInit user callbacks
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   using @ref HAL_RTC_RegisterCallback() before calling @ref HAL_RTC_DeInit()
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   or @ref HAL_RTC_Init() function.
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   When The compilation define USE_HAL_RTC_REGISTER_CALLBACKS is set to 0 or
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   not defined, the callback registration feature is not available and all callbacks
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   are set to the corresponding weak functions.
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    @endverbatim
ARM GAS  /tmp/ccTYdMqB.s 			page 4


 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @attention
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * All rights reserved.</center></h2>
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * the "License"; You may not use this file except in compliance with the
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * License. You may obtain a copy of the License at:
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                        opensource.org/licenses/BSD-3-Clause
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   ******************************************************************************
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Includes ------------------------------------------------------------------*/
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #include "stm32h7xx_hal.h"
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup STM32H7xx_HAL_Driver
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief RTC HAL module driver
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #ifdef HAL_RTC_MODULE_ENABLED
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private typedef -----------------------------------------------------------*/
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private define ------------------------------------------------------------*/
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private macro -------------------------------------------------------------*/
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private variables ---------------------------------------------------------*/
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Private function prototypes -----------------------------------------------*/
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /* Exported functions --------------------------------------------------------*/
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group1
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief    Initialization and Configuration functions
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ##### Initialization and de-initialization functions #####
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    [..] This section provides functions allowing to initialize and configure the
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC Prescaler (Synchronous and Asynchronous), RTC Hour format, disable
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers Write protection, enter and exit the RTC initialization mode,
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          RTC registers synchronization check and reference clock detection enable.
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) The RTC Prescaler is programmed to generate the RTC 1Hz time base.
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              It is split into 2 programmable prescalers to minimize power consumption.
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) A 7-bit asynchronous prescaler and a 15-bit synchronous prescaler.
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              (++) When both prescalers are used, it is recommended to configure the
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  asynchronous prescaler to a high value to minimize power consumption.
ARM GAS  /tmp/ccTYdMqB.s 			page 5


 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) All RTC registers are Write protected. Writing to the RTC registers
 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              is enabled by writing a key into the Write Protection register, RTC_WPR.
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To configure the RTC Calendar, user application should enter
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization mode. In this mode, the calendar counter is stopped
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              and its value can be updated. When the initialization sequence is
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              complete, the calendar restarts counting after 4 RTCCLK cycles.
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****          (#) To read the calendar through the shadow registers after Calendar
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              initialization, calendar update or after wakeup from low power modes
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              the software must first clear the RSF flag. The software must then
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              wait until it is set again before reading the calendar, which means
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              that the calendar registers have been correctly copied into the
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              RTC_TR and RTC_DR shadow registers.The HAL_RTC_WaitForSynchro() function
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****              implements the above software sequence (RSF clear and RSF check).
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC peripheral
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_HOUR_FORMAT(hrtc->Init.HourFormat));
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ASYNCH_PREDIV(hrtc->Init.AsynchPrediv));
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SYNCH_PREDIV(hrtc->Init.SynchPrediv));
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT(hrtc->Init.OutPut));
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_CR_TAMPALRM_PU)
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPALRM_PU */
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback          =  HAL_RTC_AlarmAEventCallback;             /* Legacy weak
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback          =  HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->TimeStampEventCallback       =  HAL_RTCEx_TimeStampEventCallback;        /* Legacy weak
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->WakeUpTimerEventCallback     =  HAL_RTCEx_WakeUpTimerEventCallback;      /* Legacy weak
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper1EventCallback         =  HAL_RTCEx_Tamper1EventCallback;          /* Legacy weak
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper2EventCallback         =  HAL_RTCEx_Tamper2EventCallback;          /* Legacy weak
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Tamper3EventCallback         =  HAL_RTCEx_Tamper3EventCallback;          /* Legacy weak
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 6


 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP1E)
 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP1E */
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP2E)
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP2E */
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP3E)
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP3E */
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP4E)
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper4EventCallback =  HAL_RTCEx_InternalTamper4EventCallback;
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP4E */
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP5E)
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP5E */
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP6E)
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP6E */
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP8E)
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP8E */
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspInitCallback == NULL)
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Init the low level hardware */
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspInitCallback(hrtc);
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(hrtc->State == HAL_RTC_STATE_RESET)
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Allocate lock resource and initialize it */
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Lock = HAL_UNLOCKED;
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Initialize RTC MSP */
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspInit(hrtc);
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    /* Enter Initialization mode */
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_CR_TAMPOE)
ARM GAS  /tmp/ccTYdMqB.s 			page 7


 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* RTC_CR_TAMPOE */
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear RTC_CR FMT, OSEL and POL Bits */
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPOE */
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC_CR register */
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity)
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Configure the RTC PRER */
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.Synch
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Exit Initialization mode */
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(status == HAL_OK)
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_CR_TAMPALRM_PU) && defined(RTC_CR_TAMPALRM_TYPE) && defined(RTC_CR_OUT2EN)
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutR
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enable the write protection for RTC registers */
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Set RTC state */
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_READY;
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC peripheral.
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   This function doesn't reset the RTC Backup Data registers.
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeInit(RTC_HandleTypeDef *hrtc)
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t          tickstart;
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check RTC handler */
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(hrtc != NULL)
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Check the parameters */
ARM GAS  /tmp/ccTYdMqB.s 			page 8


 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_ALL_INSTANCE(hrtc->Instance));
 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set RTC state */
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_BUSY;
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the write protection for RTC registers */
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enter Initialization mode */
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_EnterInitMode(hrtc);
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TR, DR and CR registers */
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->TR = 0x00000000U;
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset All CR bits except CR[2:0] */
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->CR &= RTC_CR_WUCKSEL;
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tickstart = HAL_GetTick();
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Wait till WUTWF flag is set and if Time out is reached exit */
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_WUTWF)
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       while (((hrtc->Instance->ICSR) & RTC_ICSR_WUTWF) == 0U)
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_WUTWF */
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_WUTWF)
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         while (((hrtc->Instance->ISR)  & RTC_ISR_WUTWF)  == 0U)
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         {
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           {
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             /* Enable the write protection for RTC registers */
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             /* Set RTC state */
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             hrtc->State = HAL_RTC_STATE_TIMEOUT;
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           }
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         }
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Exit initialization mode */
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = RTC_ExitInitMode(hrtc);
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if (status == HAL_OK)
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset all RTC CR register bits */
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CR &= 0x00000000U;
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset other RTC registers */
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->WUTR = RTC_WUTR_WUT;
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMAR = 0x00000000U;
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMBR = 0x00000000U;
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->SHIFTR = 0x00000000U;
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CALR = 0x00000000U;
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMASSR = 0x00000000U;
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMBSSR = 0x00000000U;
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_INIT)
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset Tamper configuration register */
ARM GAS  /tmp/ccTYdMqB.s 			page 9


 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->TAMPCR = 0x00000000U;
 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Reset Option register */
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR = 0x00000000U;
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INIT */
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(status == HAL_OK)
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_TAMP1E)
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset TAMP registers */
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->CR1 = 0xFFFF0000U;
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       ((TAMP_TypeDef *)((uint32_t)hrtc->Instance + TAMP_OFFSET))->CR2 = 0x00000000U;
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_TAMP1E */
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Enable the write protection for RTC registers */
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(hrtc->MspDeInitCallback == NULL)
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* DeInit the low level hardware: CLOCK, NVIC.*/
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->MspDeInitCallback(hrtc);
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* De-Initialize RTC MSP */
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_MspDeInit(hrtc);
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_RESET;
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Release Lock */
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_UNLOCK(hrtc);
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* return status */
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Register a User RTC Callback
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         To be used instead of the weak predefined callback
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be registered
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
ARM GAS  /tmp/ccTYdMqB.s 			page 10


 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID Internal Tamper 1 Callback ID
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID Internal Tamper 2 Callback ID
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID Internal Tamper 3 Callback ID
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID Internal Tamper 4 Callback ID
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID Internal Tamper 5 Callback ID
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID Internal Tamper 6 Callback ID
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID Internal Tamper 8 Callback ID
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID                Msp Init callback ID
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID              Msp DeInit callback ID
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  pCallback pointer to the Callback function
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_RegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Callb
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(pCallback == NULL)
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     return HAL_ERROR;
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = pCallback;
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = pCallback;
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = pCallback;
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = pCallback;
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = pCallback;
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = pCallback;
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = pCallback;
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP1E)
ARM GAS  /tmp/ccTYdMqB.s 			page 11


 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID :
 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper1EventCallback =  pCallback;
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP1E */
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP2E)
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID :
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper2EventCallback =  pCallback;
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP2E */
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP3E)
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID :
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper3EventCallback =  pCallback;
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP3E */
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP4E)
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID :
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper4EventCallback =  pCallback;
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP4E */
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP5E)
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID :
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper5EventCallback =  pCallback;
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP5E */
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP6E)
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID :
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper6EventCallback =  pCallback;
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP6E */
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP8E)
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID :
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper8EventCallback =  pCallback;
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP8E */
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
ARM GAS  /tmp/ccTYdMqB.s 			page 12


 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = pCallback;
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = pCallback;
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Unregister an RTC Callback
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         RTC callabck is redirected to the weak predefined callback
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  CallbackID ID of the callback to be unregistered
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         This parameter can be one of the following values:
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_A_EVENT_CB_ID          Alarm A Event Callback ID
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_ALARM_B_EVENT_CB_ID          Alarm B Event Callback ID
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TIMESTAMP_EVENT_CB_ID        TimeStamp Event Callback ID
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_WAKEUPTIMER_EVENT_CB_ID      WakeUp Timer Event Callback ID
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER1_EVENT_CB_ID          Tamper 1 Callback ID
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER2_EVENT_CB_ID          Tamper 2 Callback ID
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_TAMPER3_EVENT_CB_ID          Tamper 3 Callback ID
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID Internal Tamper 1 Callback ID
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID Internal Tamper 2 Callback ID
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID Internal Tamper 3 Callback ID
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID Internal Tamper 4 Callback ID
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID Internal Tamper 5 Callback ID
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID Internal Tamper 6 Callback ID
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID Internal Tamper 8 Callback ID
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPINIT_CB_ID Msp Init callback ID
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          @arg @ref HAL_RTC_MSPDEINIT_CB_ID Msp DeInit callback ID
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_UnRegisterCallback(RTC_HandleTypeDef *hrtc, HAL_RTC_CallbackIDTypeDef Cal
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process locked */
ARM GAS  /tmp/ccTYdMqB.s 			page 13


 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_RTC_STATE_READY == hrtc->State)
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_A_EVENT_CB_ID :
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmAEventCallback = HAL_RTC_AlarmAEventCallback;             /* Legacy weak AlarmAE
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_ALARM_B_EVENT_CB_ID :
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->AlarmBEventCallback = HAL_RTCEx_AlarmBEventCallback;           /* Legacy weak AlarmBE
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TIMESTAMP_EVENT_CB_ID :
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->TimeStampEventCallback = HAL_RTCEx_TimeStampEventCallback;     /* Legacy weak TimeSta
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_WAKEUPTIMER_EVENT_CB_ID :
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->WakeUpTimerEventCallback = HAL_RTCEx_WakeUpTimerEventCallback; /* Legacy weak WakeUpT
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER1_EVENT_CB_ID :
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper1EventCallback = HAL_RTCEx_Tamper1EventCallback;         /* Legacy weak Tamper1
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER2_EVENT_CB_ID :
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper2EventCallback = HAL_RTCEx_Tamper2EventCallback;         /* Legacy weak Tamper2
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_TAMPER3_EVENT_CB_ID :
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Tamper3EventCallback = HAL_RTCEx_Tamper3EventCallback;         /* Legacy weak Tamper3
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP1E)
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER1_EVENT_CB_ID :
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper1EventCallback =  HAL_RTCEx_InternalTamper1EventCallback;
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP1E */
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP2E)
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER2_EVENT_CB_ID :
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper2EventCallback =  HAL_RTCEx_InternalTamper2EventCallback;
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP2E */
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP3E)
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER3_EVENT_CB_ID :
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper3EventCallback =  HAL_RTCEx_InternalTamper3EventCallback;
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP3E */
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP4E)
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER4_EVENT_CB_ID :
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper4EventCallback =  HAL_RTCEx_InternalTamper4EventCallback;
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP4E */
ARM GAS  /tmp/ccTYdMqB.s 			page 14


 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP5E)
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER5_EVENT_CB_ID :
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper5EventCallback =  HAL_RTCEx_InternalTamper5EventCallback;
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP5E */
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP6E)
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER6_EVENT_CB_ID :
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper6EventCallback =  HAL_RTCEx_InternalTamper6EventCallback;
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP6E */
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(TAMP_CR1_ITAMP8E)
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_INTERNAL_TAMPER8_EVENT_CB_ID :
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->InternalTamper8EventCallback =  HAL_RTCEx_InternalTamper8EventCallback;
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* TAMP_CR1_ITAMP8E */
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else if(HAL_RTC_STATE_RESET == hrtc->State)
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     switch (CallbackID)
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPINIT_CB_ID :
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspInitCallback = HAL_RTC_MspInit;
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       case HAL_RTC_MSPDEINIT_CB_ID :
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       default :
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Return error status */
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status =  HAL_ERROR;
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         break;
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Return error status */
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status =  HAL_ERROR;
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 15


 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Release Lock */
 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Initialize the RTC MSP.
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  27              		.loc 1 787 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  32              	.LVL0:
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspInit could be implemented in the user file
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
  33              		.loc 1 794 0
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE345:
  38              		.section	.text.HAL_RTC_MspDeInit,"ax",%progbits
  39              		.align	1
  40              		.weak	HAL_RTC_MspDeInit
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv5-d16
  46              	HAL_RTC_MspDeInit:
  47              	.LFB346:
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  DeInitialize the RTC MSP.
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  48              		.loc 1 802 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.LVL1:
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 16


 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_MspDeInit could be implemented in the user file
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
  54              		.loc 1 809 0
  55 0000 7047     		bx	lr
  56              		.cfi_endproc
  57              	.LFE346:
  59              		.section	.text.HAL_RTC_DeactivateAlarm,"ax",%progbits
  60              		.align	1
  61              		.global	HAL_RTC_DeactivateAlarm
  62              		.syntax unified
  63              		.thumb
  64              		.thumb_func
  65              		.fpu fpv5-d16
  67              	HAL_RTC_DeactivateAlarm:
  68              	.LFB353:
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group2
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Time and Date functions
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Time and Date functions #####
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Time and Date features
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current time.
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef status;
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
ARM GAS  /tmp/ccTYdMqB.s 			page 17


 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Enter Initialization mode */
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Format == RTC_FORMAT_BIN)
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(sTime->Hours));
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       else
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sTime->Hours));
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(sTime->Minutes));
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(sTime->Seconds));
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       else
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         sTime->TimeFormat = 0x00U;
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_TR register */
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the bits to be configured */
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the RTC_CR register */
ARM GAS  /tmp/ccTYdMqB.s 			page 18


 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current time.
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sTime Pointer to Time structure with Hours, Minutes and Seconds fields returned
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                with input format (BIN or BCD), also SubSeconds field returning the
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                RTC_SSR register content and SecondFraction field the Synchronous pre-scaler
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *                factor to be used for second fraction ratio computation.
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You can use SubSeconds and SecondFraction (sTime structure fields returned) to convert S
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        value in second fraction ratio with time unit following generic formula:
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Second fraction ratio * time_unit= [(SecondFraction-SubSeconds)/(SecondFraction+1)] * ti
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        This conversion can be performed only if no shift operation is pending (ie. SHFP=0) when
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        to ensure consistency between the time and date values.
 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get subseconds structure field from the corresponding register*/
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get SecondFraction structure field from the corresponding register field*/
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the TR register */
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 19


 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the time structure parameters to Binary format */
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set RTC current date.
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to date structure
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format specifies the format of the entered parameters.
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN: Binary data format
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD: BCD data format
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status;
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(sDate->Year));
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(sDate->Month));
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(sDate->Date));
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
ARM GAS  /tmp/ccTYdMqB.s 			page 20


1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enter Initialization mode */
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   status = RTC_EnterInitMode(hrtc);
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the RTC_DR register */
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Exit Initialization mode */
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     status = RTC_ExitInitMode(hrtc);
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->State = HAL_RTC_STATE_READY;
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get RTC current date.
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sDate Pointer to Date structure
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BIN:  Binary data format
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_FORMAT_BCD:  BCD data format
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note  You must call HAL_RTC_GetDate() after HAL_RTC_GetTime() to unlock the values
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        in the higher-order calendar shadow registers to ensure consistency between the time and
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *        Reading RTC current time locks the values in calendar shadow registers until Current dat
ARM GAS  /tmp/ccTYdMqB.s 			page 21


1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the DR register */
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Fill the structure fields with the read parameters */
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the input parameters format */
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Convert the date structure parameters to Binary format */
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group3
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   RTC Alarm functions
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                  ##### RTC Alarm functions #####
1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  [..] This section provides functions allowing to configure Alarm feature
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm.
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Form
ARM GAS  /tmp/ccTYdMqB.s 			page 22


1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
ARM GAS  /tmp/ccTYdMqB.s 			page 23


1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ICSR_ALRAWF)
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ICSR_ALRAWF */
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ISR_ALRAWF)
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 24


1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ICSR_ALRBWF)
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ICSR_ALRBWF */
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ISR_ALRBWF)
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRBWF */
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 25


1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Set the specified RTC Alarm with Interrupt.
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Alarm structure
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The Alarm register can only be written when the corresponding Alarm
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         is disabled (Use the HAL_RTC_DeactivateAlarm()).
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The HAL_RTC_SetTime() must be called before enabling the Alarm feature.
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t F
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(sAlarm->Alarm));
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_MASK(sAlarm->AlarmMask));
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
ARM GAS  /tmp/ccTYdMqB.s 			page 26


1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(sAlarm->AlarmDateWeekDay));
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours)   << RTC_ALRMAR_HU_Pos)  | \
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       sAlarm->AlarmTime.TimeFormat = 0x00U;
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes)));
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds)));
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(sAlarm->AlarmDateWeekDaySel == RTC_ALARMDATEWEEKDAYSEL_DATE)
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_DATE(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     else
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (((uint32_t)sAlarm->AlarmTime.Hours       << RTC_ALRMAR_HU_Pos)  | \
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmMask));
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm A or Alarm B Sub Second registers */
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmS
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Configure the Alarm register */
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(sAlarm->Alarm == RTC_ALARM_A)
ARM GAS  /tmp/ccTYdMqB.s 			page 27


1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm A interrupt */
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ICSR_ALRAWF)
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ICSR_ALRAWF */
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #if defined(RTC_ISR_ALRAWF)
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMASSR = subsecondtmpreg;
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_ENABLE(hrtc);
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Disable the Alarm B interrupt */
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_ALRBWF)
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_ALRBWF */
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRBWF)
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
ARM GAS  /tmp/ccTYdMqB.s 			page 28


1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ALRMBSSR = subsecondtmpreg;
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_ENABLE(hrtc);
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if !defined(DUAL_CORE)
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* RTC Alarm Interrupt Configuration: EXTI configuration */
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_IT();
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_ENABLE_RISING_EDGE();
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Deactivate the specified RTC Alarm.
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_A:  AlarmA
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *            @arg RTC_ALARM_B:  AlarmB
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
  69              		.loc 1 1526 0
  70              		.cfi_startproc
  71              		@ args = 0, pretend = 0, frame = 0
  72              		@ frame_needed = 0, uses_anonymous_args = 0
  73              	.LVL2:
  74 0000 38B5     		push	{r3, r4, r5, lr}
  75              	.LCFI0:
ARM GAS  /tmp/ccTYdMqB.s 			page 29


  76              		.cfi_def_cfa_offset 16
  77              		.cfi_offset 3, -16
  78              		.cfi_offset 4, -12
  79              		.cfi_offset 5, -8
  80              		.cfi_offset 14, -4
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Locked */
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_LOCK(hrtc);
  81              		.loc 1 1533 0
  82 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
  83 0006 012B     		cmp	r3, #1
  84 0008 5DD0     		beq	.L11
  85 000a 0446     		mov	r4, r0
  86              		.loc 1 1533 0 is_stmt 0 discriminator 2
  87 000c 0123     		movs	r3, #1
  88 000e 80F82030 		strb	r3, [r0, #32]
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_BUSY;
  89              		.loc 1 1535 0 is_stmt 1 discriminator 2
  90 0012 0223     		movs	r3, #2
  91 0014 80F82130 		strb	r3, [r0, #33]
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Disable the write protection for RTC registers */
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
  92              		.loc 1 1538 0 discriminator 2
  93 0018 0368     		ldr	r3, [r0]
  94 001a CA22     		movs	r2, #202
  95 001c 5A62     		str	r2, [r3, #36]
  96 001e 0368     		ldr	r3, [r0]
  97 0020 5322     		movs	r2, #83
  98 0022 5A62     		str	r2, [r3, #36]
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
  99              		.loc 1 1540 0 discriminator 2
 100 0024 B1F5807F 		cmp	r1, #256
 101 0028 21D0     		beq	.L13
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMA_DISABLE(hrtc);
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_ALRAWF)
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRAWF) == 0U)
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_ALRAWF */
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRAWF)
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAWF */
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccTYdMqB.s 			page 30


1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmB */
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARMB_DISABLE(hrtc);
 102              		.loc 1 1575 0
 103 002a 0268     		ldr	r2, [r0]
 104 002c 9368     		ldr	r3, [r2, #8]
 105 002e 23F40073 		bic	r3, r3, #512
 106 0032 9360     		str	r3, [r2, #8]
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 107              		.loc 1 1578 0
 108 0034 0268     		ldr	r2, [r0]
 109 0036 9368     		ldr	r3, [r2, #8]
 110 0038 23F40053 		bic	r3, r3, #8192
 111 003c 9360     		str	r3, [r2, #8]
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
 112              		.loc 1 1580 0
 113 003e FFF7FEFF 		bl	HAL_GetTick
 114              	.LVL3:
 115 0042 0546     		mov	r5, r0
 116              	.LVL4:
 117              	.L9:
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_ALRBWF)
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while (READ_BIT(hrtc->Instance->ICSR, RTC_FLAG_ALRBWF) == 0U)
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_ALRBWF */
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRBWF)
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == 0U)
 118              		.loc 1 1587 0
 119 0044 2368     		ldr	r3, [r4]
 120 0046 DB68     		ldr	r3, [r3, #12]
 121 0048 13F0020F 		tst	r3, #2
 122 004c 31D1     		bne	.L8
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 123              		.loc 1 1590 0
 124 004e FFF7FEFF 		bl	HAL_GetTick
 125              	.LVL5:
ARM GAS  /tmp/ccTYdMqB.s 			page 31


 126 0052 401B     		subs	r0, r0, r5
 127 0054 B0F57A7F 		cmp	r0, #1000
 128 0058 F4D9     		bls	.L9
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Enable the write protection for RTC registers */
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 129              		.loc 1 1593 0
 130 005a 2368     		ldr	r3, [r4]
 131 005c FF22     		movs	r2, #255
 132 005e 5A62     		str	r2, [r3, #36]
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 133              		.loc 1 1595 0
 134 0060 0320     		movs	r0, #3
 135 0062 84F82100 		strb	r0, [r4, #33]
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         /* Process Unlocked */
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         __HAL_UNLOCK(hrtc);
 136              		.loc 1 1598 0
 137 0066 0023     		movs	r3, #0
 138 0068 84F82030 		strb	r3, [r4, #32]
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 139              		.loc 1 1600 0
 140 006c 2AE0     		b	.L4
 141              	.LVL6:
 142              	.L13:
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 143              		.loc 1 1543 0
 144 006e 0268     		ldr	r2, [r0]
 145 0070 9368     		ldr	r3, [r2, #8]
 146 0072 23F48073 		bic	r3, r3, #256
 147 0076 9360     		str	r3, [r2, #8]
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 148              		.loc 1 1546 0
 149 0078 0268     		ldr	r2, [r0]
 150 007a 9368     		ldr	r3, [r2, #8]
 151 007c 23F48053 		bic	r3, r3, #4096
 152 0080 9360     		str	r3, [r2, #8]
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 153              		.loc 1 1548 0
 154 0082 FFF7FEFF 		bl	HAL_GetTick
 155              	.LVL7:
 156 0086 0546     		mov	r5, r0
 157              	.LVL8:
 158              	.L6:
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAWF */
 159              		.loc 1 1555 0
 160 0088 2368     		ldr	r3, [r4]
 161 008a DB68     		ldr	r3, [r3, #12]
 162 008c 13F0010F 		tst	r3, #1
 163 0090 0FD1     		bne	.L8
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 164              		.loc 1 1558 0
 165 0092 FFF7FEFF 		bl	HAL_GetTick
 166              	.LVL9:
 167 0096 401B     		subs	r0, r0, r5
ARM GAS  /tmp/ccTYdMqB.s 			page 32


 168 0098 B0F57A7F 		cmp	r0, #1000
 169 009c F4D9     		bls	.L6
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 170              		.loc 1 1561 0
 171 009e 2368     		ldr	r3, [r4]
 172 00a0 FF22     		movs	r2, #255
 173 00a2 5A62     		str	r2, [r3, #36]
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 174              		.loc 1 1563 0
 175 00a4 0320     		movs	r0, #3
 176 00a6 84F82100 		strb	r0, [r4, #33]
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 177              		.loc 1 1566 0
 178 00aa 0023     		movs	r3, #0
 179 00ac 84F82030 		strb	r3, [r4, #32]
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 180              		.loc 1 1568 0
 181 00b0 08E0     		b	.L4
 182              	.L8:
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Enable the write protection for RTC registers */
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 183              		.loc 1 1605 0
 184 00b2 2368     		ldr	r3, [r4]
 185 00b4 FF22     		movs	r2, #255
 186 00b6 5A62     		str	r2, [r3, #36]
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 187              		.loc 1 1607 0
 188 00b8 0123     		movs	r3, #1
 189 00ba 84F82130 		strb	r3, [r4, #33]
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Process Unlocked */
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_UNLOCK(hrtc);
 190              		.loc 1 1610 0
 191 00be 0020     		movs	r0, #0
 192 00c0 84F82000 		strb	r0, [r4, #32]
 193              	.LVL10:
 194              	.L4:
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 195              		.loc 1 1613 0
 196 00c4 38BD     		pop	{r3, r4, r5, pc}
 197              	.LVL11:
 198              	.L11:
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 199              		.loc 1 1533 0
 200 00c6 0220     		movs	r0, #2
 201              	.LVL12:
 202 00c8 FCE7     		b	.L4
 203              		.cfi_endproc
 204              	.LFE353:
 206              		.section	.text.HAL_RTC_AlarmAEventCallback,"ax",%progbits
 207              		.align	1
ARM GAS  /tmp/ccTYdMqB.s 			page 33


 208              		.weak	HAL_RTC_AlarmAEventCallback
 209              		.syntax unified
 210              		.thumb
 211              		.thumb_func
 212              		.fpu fpv5-d16
 214              	HAL_RTC_AlarmAEventCallback:
 215              	.LFB356:
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Get the RTC Alarm value and masks.
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  sAlarm Pointer to Date structure
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Alarm Specifies the Alarm.
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_A: AlarmA
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_ALARM_B: AlarmB
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Format Specifies the format of the entered parameters.
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *          This parameter can be one of the following values:
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BIN: Binary data format
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *             @arg RTC_FORMAT_BCD: BCD data format
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_GetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Alar
1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t subsecondtmpreg;
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check the parameters */
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_FORMAT(Format));
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   assert_param(IS_RTC_ALARM(Alarm));
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Alarm == RTC_ALARM_A)
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* AlarmA */
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_A;
1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMAR);
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t)((tmpreg & (RTC_ALRMAR_HT  | RTC_ALRMAR_HU))  >> RTC_AL
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_AL
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU))  >> RTC_AL
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMAR_PM)                    >> RTC_AL
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_AL
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMAR_WDSEL);
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->Alarm = RTC_ALARM_B;
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tmpreg = (uint32_t)(hrtc->Instance->ALRMBR);
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Fill the structure with the read parameters */
ARM GAS  /tmp/ccTYdMqB.s 			page 34


1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours      = (uint8_t)((tmpreg & (RTC_ALRMBR_HT  | RTC_ALRMBR_HU))  >> RTC_AL
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_AL
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMBR_ST  | RTC_ALRMBR_SU))  >> RTC_AL
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMBR_PM)                    >> RTC_AL
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU))   >> RTC_AL
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMBR_WDSEL);
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(Format == RTC_FORMAT_BIN)
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Hours = RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours);
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle Alarm interrupt request.
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(DUAL_CORE)
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(HAL_GetCurrentCPUID() == CM7_CPUID)
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     __HAL_RTC_ALARM_EXTID2_CLEAR_FLAG();
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* SINGLE_CORE */
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* DUAL_CORE */
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_MISR_ALRAMF)
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get interrupt status */
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmp = hrtc->Instance->MISR;
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((tmp & RTC_MISR_ALRAMF) != 0u)
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the AlarmA interrupt pending bit */
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRAF;
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Call Compare Match registered Callback */
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->AlarmAEventCallback(hrtc);
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     HAL_RTC_AlarmAEventCallback(hrtc);
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
ARM GAS  /tmp/ccTYdMqB.s 			page 35


1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_MISR_ALRAMF */
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_MISR_ALRBMF)
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((tmp & RTC_MISR_ALRBMF) != 0u)
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear the AlarmB interrupt pending bit */
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->SCR = RTC_SCR_CALRBF;
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Call Compare Match registered Callback */
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->AlarmBEventCallback(hrtc);
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     HAL_RTCEx_AlarmBEventCallback(hrtc);
1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_MISR_ALRBMF */
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRAF)
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmA interrupt source enable status */
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmA Interrupt */
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmA interrupt pending bit */
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmAEventCallback(hrtc);
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTC_AlarmAEventCallback(hrtc);
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRAF */
1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_ALRBF)
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Get the AlarmB interrupt source enable status */
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != 0U)
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Get the pending status of the AlarmB Interrupt */
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != 0U)
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Clear the AlarmB interrupt pending bit */
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* AlarmB callback */
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->AlarmBEventCallback(hrtc);
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #else  /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       HAL_RTCEx_AlarmBEventCallback(hrtc);
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBF */
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 36


1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Alarm A callback.
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval None
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** __weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 216              		.loc 1 1788 0
 217              		.cfi_startproc
 218              		@ args = 0, pretend = 0, frame = 0
 219              		@ frame_needed = 0, uses_anonymous_args = 0
 220              		@ link register save eliminated.
 221              	.LVL13:
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Prevent unused argument(s) compilation warning */
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   UNUSED(hrtc);
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* NOTE : This function should not be modified, when the callback is needed,
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****             the HAL_RTC_AlarmAEventCallback could be implemented in the user file
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****    */
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 222              		.loc 1 1795 0
 223 0000 7047     		bx	lr
 224              		.cfi_endproc
 225              	.LFE356:
 227              		.section	.text.HAL_RTC_AlarmIRQHandler,"ax",%progbits
 228              		.align	1
 229              		.global	HAL_RTC_AlarmIRQHandler
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv5-d16
 235              	HAL_RTC_AlarmIRQHandler:
 236              	.LFB355:
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the EXTI's line Flag for RTC Alarm */
 237              		.loc 1 1691 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              	.LVL14:
 242 0000 10B5     		push	{r4, lr}
 243              	.LCFI1:
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 4, -8
 246              		.cfi_offset 14, -4
 247 0002 0446     		mov	r4, r0
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* DUAL_CORE */
 248              		.loc 1 1703 0
 249 0004 154B     		ldr	r3, .L21
 250 0006 4FF40032 		mov	r2, #131072
 251 000a 9A60     		str	r2, [r3, #8]
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 252              		.loc 1 1741 0
 253 000c 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccTYdMqB.s 			page 37


 254 000e 9A68     		ldr	r2, [r3, #8]
 255 0010 12F4805F 		tst	r2, #4096
 256 0014 03D0     		beq	.L16
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 257              		.loc 1 1744 0
 258 0016 DA68     		ldr	r2, [r3, #12]
 259 0018 12F4807F 		tst	r2, #256
 260 001c 0CD1     		bne	.L19
 261              	.LVL15:
 262              	.L16:
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 263              		.loc 1 1760 0
 264 001e 2368     		ldr	r3, [r4]
 265 0020 9A68     		ldr	r2, [r3, #8]
 266 0022 12F4005F 		tst	r2, #8192
 267 0026 03D0     		beq	.L17
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 268              		.loc 1 1763 0
 269 0028 DA68     		ldr	r2, [r3, #12]
 270 002a 12F4007F 		tst	r2, #512
 271 002e 0BD1     		bne	.L20
 272              	.L17:
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 273              		.loc 1 1779 0
 274 0030 0123     		movs	r3, #1
 275 0032 84F82130 		strb	r3, [r4, #33]
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 276              		.loc 1 1780 0
 277 0036 10BD     		pop	{r4, pc}
 278              	.LVL16:
 279              	.L19:
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 280              		.loc 1 1747 0
 281 0038 DA68     		ldr	r2, [r3, #12]
 282 003a D2B2     		uxtb	r2, r2
 283 003c 62F4C072 		orn	r2, r2, #384
 284 0040 DA60     		str	r2, [r3, #12]
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 285              		.loc 1 1752 0
 286 0042 FFF7FEFF 		bl	HAL_RTC_AlarmAEventCallback
 287              	.LVL17:
 288 0046 EAE7     		b	.L16
 289              	.L20:
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 290              		.loc 1 1766 0
 291 0048 DA68     		ldr	r2, [r3, #12]
 292 004a D2B2     		uxtb	r2, r2
 293 004c 62F42072 		orn	r2, r2, #640
 294 0050 DA60     		str	r2, [r3, #12]
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
 295              		.loc 1 1772 0
 296 0052 2046     		mov	r0, r4
 297 0054 FFF7FEFF 		bl	HAL_RTCEx_AlarmBEventCallback
 298              	.LVL18:
 299 0058 EAE7     		b	.L17
 300              	.L22:
 301 005a 00BF     		.align	2
ARM GAS  /tmp/ccTYdMqB.s 			page 38


 302              	.L21:
 303 005c 80000058 		.word	1476395136
 304              		.cfi_endproc
 305              	.LFE355:
 307              		.section	.text.HAL_RTC_PollForAlarmAEvent,"ax",%progbits
 308              		.align	1
 309              		.global	HAL_RTC_PollForAlarmAEvent
 310              		.syntax unified
 311              		.thumb
 312              		.thumb_func
 313              		.fpu fpv5-d16
 315              	HAL_RTC_PollForAlarmAEvent:
 316              	.LFB357:
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Handle AlarmA Polling request.
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Timeout Timeout duration
1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_PollForAlarmAEvent(RTC_HandleTypeDef *hrtc, uint32_t Timeout)
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 317              		.loc 1 1804 0
 318              		.cfi_startproc
 319              		@ args = 0, pretend = 0, frame = 0
 320              		@ frame_needed = 0, uses_anonymous_args = 0
 321              	.LVL19:
 322 0000 70B5     		push	{r4, r5, r6, lr}
 323              	.LCFI2:
 324              		.cfi_def_cfa_offset 16
 325              		.cfi_offset 4, -16
 326              		.cfi_offset 5, -12
 327              		.cfi_offset 6, -8
 328              		.cfi_offset 14, -4
 329 0002 0446     		mov	r4, r0
 330 0004 0D46     		mov	r5, r1
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart = HAL_GetTick();
 331              		.loc 1 1806 0
 332 0006 FFF7FEFF 		bl	HAL_GetTick
 333              	.LVL20:
 334 000a 0646     		mov	r6, r0
 335              	.LVL21:
 336              	.L25:
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) == 0U)
 337              		.loc 1 1808 0
 338 000c 2368     		ldr	r3, [r4]
 339 000e DA68     		ldr	r2, [r3, #12]
 340 0010 12F4807F 		tst	r2, #256
 341 0014 0DD1     		bne	.L30
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if(Timeout != HAL_MAX_DELAY)
 342              		.loc 1 1810 0
 343 0016 B5F1FF3F 		cmp	r5, #-1
 344 001a F7D0     		beq	.L25
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
ARM GAS  /tmp/ccTYdMqB.s 			page 39


1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 345              		.loc 1 1812 0
 346 001c FFF7FEFF 		bl	HAL_GetTick
 347              	.LVL22:
 348 0020 801B     		subs	r0, r0, r6
 349 0022 A842     		cmp	r0, r5
 350 0024 01D8     		bhi	.L26
 351              		.loc 1 1812 0 is_stmt 0 discriminator 1
 352 0026 002D     		cmp	r5, #0
 353 0028 F0D1     		bne	.L25
 354              	.L26:
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
 355              		.loc 1 1814 0 is_stmt 1
 356 002a 0320     		movs	r0, #3
 357 002c 84F82100 		strb	r0, [r4, #33]
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 358              		.loc 1 1815 0
 359 0030 08E0     		b	.L27
 360              	.L30:
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear the Alarm interrupt pending bit */
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 361              		.loc 1 1821 0
 362 0032 DA68     		ldr	r2, [r3, #12]
 363 0034 D2B2     		uxtb	r2, r2
 364 0036 62F4C072 		orn	r2, r2, #384
 365 003a DA60     		str	r2, [r3, #12]
1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Change RTC state */
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->State = HAL_RTC_STATE_READY;
 366              		.loc 1 1824 0
 367 003c 0123     		movs	r3, #1
 368 003e 84F82130 		strb	r3, [r4, #33]
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 369              		.loc 1 1826 0
 370 0042 0020     		movs	r0, #0
 371              	.L27:
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 372              		.loc 1 1827 0
 373 0044 70BD     		pop	{r4, r5, r6, pc}
 374              		.cfi_endproc
 375              	.LFE357:
 377              		.section	.text.HAL_RTC_WaitForSynchro,"ax",%progbits
 378              		.align	1
 379              		.global	HAL_RTC_WaitForSynchro
 380              		.syntax unified
 381              		.thumb
 382              		.thumb_func
 383              		.fpu fpv5-d16
 385              	HAL_RTC_WaitForSynchro:
 386              	.LFB358:
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 40


1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group4
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral Control functions
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral Control functions #####
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Wait for RTC Time and Date Synchronization
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Wait until the RTC Time and Date registers (RTC_TR and RTC_DR) are
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         synchronized with RTC APB clock.
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Resynchronization mode is write protected, use the
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   To read the calendar through the shadow registers after Calendar
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         initialization, calendar update or after wakeup from low power modes
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the software must first clear the RSF flag.
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         The software must then wait until it is set again before reading
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         the calendar, which means that the calendar registers have been
1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         correctly copied into the RTC_TR and RTC_DR shadow registers.
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 387              		.loc 1 1863 0
 388              		.cfi_startproc
 389              		@ args = 0, pretend = 0, frame = 0
 390              		@ frame_needed = 0, uses_anonymous_args = 0
 391              	.LVL23:
 392 0000 38B5     		push	{r3, r4, r5, lr}
 393              	.LCFI3:
 394              		.cfi_def_cfa_offset 16
 395              		.cfi_offset 3, -16
 396              		.cfi_offset 4, -12
 397              		.cfi_offset 5, -8
 398              		.cfi_offset 14, -4
 399 0002 0446     		mov	r4, r0
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Clear RSF flag */
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_RSF)
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_RSF */
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_RSF)
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 400              		.loc 1 1871 0
ARM GAS  /tmp/ccTYdMqB.s 			page 41


 401 0004 0268     		ldr	r2, [r0]
 402 0006 D368     		ldr	r3, [r2, #12]
 403 0008 23F0A003 		bic	r3, r3, #160
 404 000c D360     		str	r3, [r2, #12]
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tickstart = HAL_GetTick();
 405              		.loc 1 1874 0
 406 000e FFF7FEFF 		bl	HAL_GetTick
 407              	.LVL24:
 408 0012 0546     		mov	r5, r0
 409              	.LVL25:
 410              	.L32:
1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Wait the registers to be synchronised */
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_RSF)
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_RSF */
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_RSF)
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 411              		.loc 1 1881 0
 412 0014 2368     		ldr	r3, [r4]
 413 0016 DB68     		ldr	r3, [r3, #12]
 414 0018 13F0200F 		tst	r3, #32
 415 001c 07D1     		bne	.L37
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_RSF */
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 416              		.loc 1 1884 0
 417 001e FFF7FEFF 		bl	HAL_GetTick
 418              	.LVL26:
 419 0022 401B     		subs	r0, r0, r5
 420 0024 B0F57A7F 		cmp	r0, #1000
 421 0028 F4D9     		bls	.L32
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         return HAL_TIMEOUT;
 422              		.loc 1 1886 0
 423 002a 0320     		movs	r0, #3
 424 002c 00E0     		b	.L33
 425              	.L37:
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return HAL_OK;
 426              		.loc 1 1890 0
 427 002e 0020     		movs	r0, #0
 428              	.L33:
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 429              		.loc 1 1891 0
 430 0030 38BD     		pop	{r3, r4, r5, pc}
 431              		.cfi_endproc
 432              	.LFE358:
 434              		.section	.text.HAL_RTC_GetState,"ax",%progbits
 435              		.align	1
 436              		.global	HAL_RTC_GetState
 437              		.syntax unified
 438              		.thumb
ARM GAS  /tmp/ccTYdMqB.s 			page 42


 439              		.thumb_func
 440              		.fpu fpv5-d16
 442              	HAL_RTC_GetState:
 443              	.LFB359:
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Exported_Functions_Group5
1898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *  @brief   Peripheral State functions
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  *
1900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @verbatim
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                      ##### Peripheral State functions #####
1903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  ===============================================================================
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     [..]
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     This subsection provides functions allowing to
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       (+) Get RTC state
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** @endverbatim
1909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Return the RTC handle state.
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL state
1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_RTCStateTypeDef HAL_RTC_GetState(RTC_HandleTypeDef *hrtc)
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 444              		.loc 1 1917 0
 445              		.cfi_startproc
 446              		@ args = 0, pretend = 0, frame = 0
 447              		@ frame_needed = 0, uses_anonymous_args = 0
 448              		@ link register save eliminated.
 449              	.LVL27:
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Return RTC handle state */
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return hrtc->State;
 450              		.loc 1 1919 0
 451 0000 90F82100 		ldrb	r0, [r0, #33]	@ zero_extendqisi2
 452              	.LVL28:
1920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 453              		.loc 1 1920 0
 454 0004 7047     		bx	lr
 455              		.cfi_endproc
 456              	.LFE359:
 458              		.section	.text.RTC_EnterInitMode,"ax",%progbits
 459              		.align	1
 460              		.global	RTC_EnterInitMode
 461              		.syntax unified
 462              		.thumb
 463              		.thumb_func
 464              		.fpu fpv5-d16
 466              	RTC_EnterInitMode:
 467              	.LFB360:
1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
ARM GAS  /tmp/ccTYdMqB.s 			page 43


1923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @}
1928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /** @addtogroup RTC_Private_Functions
1931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @{
1932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Enter the RTC Initialization mode.
1935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @note   The RTC Initialization mode is write protected, use the
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
1937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
1941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 468              		.loc 1 1941 0
 469              		.cfi_startproc
 470              		@ args = 0, pretend = 0, frame = 0
 471              		@ frame_needed = 0, uses_anonymous_args = 0
 472              	.LVL29:
 473 0000 70B5     		push	{r4, r5, r6, lr}
 474              	.LCFI4:
 475              		.cfi_def_cfa_offset 16
 476              		.cfi_offset 4, -16
 477              		.cfi_offset 5, -12
 478              		.cfi_offset 6, -8
 479              		.cfi_offset 14, -4
 480              	.LVL30:
1942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_INITF)
1946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
1954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = HAL_TIMEOUT;
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ICSR_INITF */
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ISR_INITF)
1964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 481              		.loc 1 1964 0
 482 0002 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccTYdMqB.s 			page 44


 483 0004 DA68     		ldr	r2, [r3, #12]
 484 0006 12F0400F 		tst	r2, #64
 485 000a 02D0     		beq	.L46
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
 486              		.loc 1 1943 0
 487 000c 0026     		movs	r6, #0
 488              	.LVL31:
 489              	.L40:
1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Set the Initialization mode */
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     tickstart = HAL_GetTick();
1970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         status = HAL_TIMEOUT;
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->State = HAL_RTC_STATE_TIMEOUT;
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
1979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INITF */
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
1983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 490              		.loc 1 1983 0
 491 000e 3046     		mov	r0, r6
 492 0010 70BD     		pop	{r4, r5, r6, pc}
 493              	.LVL32:
 494              	.L46:
 495 0012 0446     		mov	r4, r0
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 496              		.loc 1 1967 0
 497 0014 4FF0FF32 		mov	r2, #-1
 498 0018 DA60     		str	r2, [r3, #12]
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC is in INIT state and if Time out is reached exit */
 499              		.loc 1 1969 0
 500 001a FFF7FEFF 		bl	HAL_GetTick
 501              	.LVL33:
 502 001e 0546     		mov	r5, r0
 503              	.LVL34:
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
 504              		.loc 1 1943 0
 505 0020 0026     		movs	r6, #0
 506              	.LVL35:
 507              	.L42:
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 508              		.loc 1 1971 0
 509 0022 2368     		ldr	r3, [r4]
 510 0024 DB68     		ldr	r3, [r3, #12]
 511 0026 13F0400F 		tst	r3, #64
 512 002a F0D1     		bne	.L40
1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 513              		.loc 1 1973 0
 514 002c FFF7FEFF 		bl	HAL_GetTick
ARM GAS  /tmp/ccTYdMqB.s 			page 45


 515              	.LVL36:
 516 0030 401B     		subs	r0, r0, r5
 517 0032 B0F57A7F 		cmp	r0, #1000
 518 0036 F4D9     		bls	.L42
 519              	.LVL37:
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 520              		.loc 1 1976 0
 521 0038 0326     		movs	r6, #3
 522 003a 84F82160 		strb	r6, [r4, #33]
 523 003e F0E7     		b	.L42
 524              		.cfi_endproc
 525              	.LFE360:
 527              		.section	.text.RTC_ExitInitMode,"ax",%progbits
 528              		.align	1
 529              		.global	RTC_ExitInitMode
 530              		.syntax unified
 531              		.thumb
 532              		.thumb_func
 533              		.fpu fpv5-d16
 535              	RTC_ExitInitMode:
 536              	.LFB361:
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Exit the RTC Initialization mode.
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  hrtc RTC handle
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval HAL status
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
1990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
1991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 537              		.loc 1 1991 0
 538              		.cfi_startproc
 539              		@ args = 0, pretend = 0, frame = 0
 540              		@ frame_needed = 0, uses_anonymous_args = 0
 541              	.LVL38:
 542 0000 10B5     		push	{r4, lr}
 543              	.LCFI5:
 544              		.cfi_def_cfa_offset 8
 545              		.cfi_offset 4, -8
 546              		.cfi_offset 14, -4
 547 0002 0446     		mov	r4, r0
 548              	.LVL39:
1992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_OK;
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Check if the Initialization mode is set */
1995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #if defined(RTC_ICSR_INITF)
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Exit Initialization mode */
1998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
1999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #elif defined(RTC_ISR_INITF)
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* Exit Initialization mode */
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 549              		.loc 1 2003 0
 550 0004 114B     		ldr	r3, .L52
 551 0006 DA68     		ldr	r2, [r3, #12]
 552 0008 22F04002 		bic	r2, r2, #64
ARM GAS  /tmp/ccTYdMqB.s 			page 46


 553 000c DA60     		str	r2, [r3, #12]
2004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INITF */
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   /* If CR_BYPSHAD bit = 0, wait for synchro */
2007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 554              		.loc 1 2007 0
 555 000e 9B68     		ldr	r3, [r3, #8]
 556 0010 13F0200F 		tst	r3, #32
 557 0014 07D1     		bne	.L48
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 558              		.loc 1 2009 0
 559 0016 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 560              	.LVL40:
 561 001a 0346     		mov	r3, r0
 562 001c A0B1     		cbz	r0, .L49
2010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
2011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 563              		.loc 1 2011 0
 564 001e 0323     		movs	r3, #3
 565 0020 84F82130 		strb	r3, [r4, #33]
 566              	.LVL41:
 567 0024 10E0     		b	.L49
 568              	.LVL42:
 569              	.L48:
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_TIMEOUT;
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   else
2016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear BYPSHAD bit */
2018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 570              		.loc 1 2018 0
 571 0026 094A     		ldr	r2, .L52
 572 0028 9368     		ldr	r3, [r2, #8]
 573 002a 23F02003 		bic	r3, r3, #32
 574 002e 9360     		str	r3, [r2, #8]
2019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 575              		.loc 1 2019 0
 576 0030 FFF7FEFF 		bl	HAL_RTC_WaitForSynchro
 577              	.LVL43:
 578 0034 0346     		mov	r3, r0
 579 0036 10B1     		cbz	r0, .L50
2020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->State = HAL_RTC_STATE_TIMEOUT;
 580              		.loc 1 2021 0
 581 0038 0323     		movs	r3, #3
 582 003a 84F82130 		strb	r3, [r4, #33]
 583              	.LVL44:
 584              	.L50:
2022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       status = HAL_TIMEOUT;
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Restore BYPSHAD bit */
2025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 585              		.loc 1 2025 0
 586 003e 0349     		ldr	r1, .L52
 587 0040 8A68     		ldr	r2, [r1, #8]
ARM GAS  /tmp/ccTYdMqB.s 			page 47


 588 0042 42F02002 		orr	r2, r2, #32
 589 0046 8A60     		str	r2, [r1, #8]
 590              	.LVL45:
 591              	.L49:
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return status;
2029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 592              		.loc 1 2029 0
 593 0048 1846     		mov	r0, r3
 594 004a 10BD     		pop	{r4, pc}
 595              	.LVL46:
 596              	.L53:
 597              		.align	2
 598              	.L52:
 599 004c 00400058 		.word	1476411392
 600              		.cfi_endproc
 601              	.LFE361:
 603              		.section	.text.HAL_RTC_Init,"ax",%progbits
 604              		.align	1
 605              		.global	HAL_RTC_Init
 606              		.syntax unified
 607              		.thumb
 608              		.thumb_func
 609              		.fpu fpv5-d16
 611              	HAL_RTC_Init:
 612              	.LFB343:
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 613              		.loc 1 228 0
 614              		.cfi_startproc
 615              		@ args = 0, pretend = 0, frame = 0
 616              		@ frame_needed = 0, uses_anonymous_args = 0
 617              	.LVL47:
 618 0000 38B5     		push	{r3, r4, r5, lr}
 619              	.LCFI6:
 620              		.cfi_def_cfa_offset 16
 621              		.cfi_offset 3, -16
 622              		.cfi_offset 4, -12
 623              		.cfi_offset 5, -8
 624              		.cfi_offset 14, -4
 625              	.LVL48:
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 626              		.loc 1 232 0
 627 0002 0028     		cmp	r0, #0
 628 0004 46D0     		beq	.L58
 629 0006 0446     		mov	r4, r0
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 630              		.loc 1 297 0
 631 0008 90F82130 		ldrb	r3, [r0, #33]	@ zero_extendqisi2
 632 000c B3B1     		cbz	r3, .L60
 633              	.LVL49:
 634              	.L56:
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 635              		.loc 1 308 0
 636 000e 0223     		movs	r3, #2
 637 0010 84F82130 		strb	r3, [r4, #33]
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
ARM GAS  /tmp/ccTYdMqB.s 			page 48


 638              		.loc 1 311 0
 639 0014 2368     		ldr	r3, [r4]
 640 0016 CA22     		movs	r2, #202
 641 0018 5A62     		str	r2, [r3, #36]
 642 001a 2368     		ldr	r3, [r4]
 643 001c 5322     		movs	r2, #83
 644 001e 5A62     		str	r2, [r3, #36]
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 645              		.loc 1 314 0
 646 0020 2046     		mov	r0, r4
 647 0022 FFF7FEFF 		bl	RTC_EnterInitMode
 648              	.LVL50:
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 649              		.loc 1 315 0
 650 0026 0346     		mov	r3, r0
 651 0028 68B1     		cbz	r0, .L61
 652              	.LVL51:
 653              	.L57:
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 654              		.loc 1 348 0
 655 002a 2268     		ldr	r2, [r4]
 656 002c FF21     		movs	r1, #255
 657 002e 5162     		str	r1, [r2, #36]
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 658              		.loc 1 349 0
 659 0030 13B9     		cbnz	r3, .L55
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 660              		.loc 1 352 0
 661 0032 0122     		movs	r2, #1
 662 0034 84F82120 		strb	r2, [r4, #33]
 663              	.LVL52:
 664              	.L55:
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 665              		.loc 1 358 0
 666 0038 1846     		mov	r0, r3
 667 003a 38BD     		pop	{r3, r4, r5, pc}
 668              	.LVL53:
 669              	.L60:
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 670              		.loc 1 300 0
 671 003c 80F82030 		strb	r3, [r0, #32]
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 672              		.loc 1 303 0
 673 0040 FFF7FEFF 		bl	HAL_RTC_MspInit
 674              	.LVL54:
 675 0044 E3E7     		b	.L56
 676              	.LVL55:
 677              	.L61:
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_CR_TAMPOE */
 678              		.loc 1 322 0
 679 0046 2268     		ldr	r2, [r4]
 680 0048 9168     		ldr	r1, [r2, #8]
 681 004a 134B     		ldr	r3, .L62
 682 004c 0B40     		ands	r3, r3, r1
 683 004e 9360     		str	r3, [r2, #8]
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 684              		.loc 1 326 0
ARM GAS  /tmp/ccTYdMqB.s 			page 49


 685 0050 2168     		ldr	r1, [r4]
 686 0052 8A68     		ldr	r2, [r1, #8]
 687 0054 6368     		ldr	r3, [r4, #4]
 688 0056 2069     		ldr	r0, [r4, #16]
 689              	.LVL56:
 690 0058 0343     		orrs	r3, r3, r0
 691 005a A069     		ldr	r0, [r4, #24]
 692 005c 0343     		orrs	r3, r3, r0
 693 005e 1343     		orrs	r3, r3, r2
 694 0060 8B60     		str	r3, [r1, #8]
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 695              		.loc 1 329 0
 696 0062 A168     		ldr	r1, [r4, #8]
 697 0064 E368     		ldr	r3, [r4, #12]
 698 0066 2268     		ldr	r2, [r4]
 699 0068 43EA0143 		orr	r3, r3, r1, lsl #16
 700 006c 1361     		str	r3, [r2, #16]
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 701              		.loc 1 332 0
 702 006e 2046     		mov	r0, r4
 703 0070 FFF7FEFF 		bl	RTC_ExitInitMode
 704              	.LVL57:
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 705              		.loc 1 334 0
 706 0074 0346     		mov	r3, r0
 707 0076 0028     		cmp	r0, #0
 708 0078 D7D1     		bne	.L57
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 709              		.loc 1 342 0
 710 007a 2168     		ldr	r1, [r4]
 711 007c CA6C     		ldr	r2, [r1, #76]
 712 007e 22F00302 		bic	r2, r2, #3
 713 0082 CA64     		str	r2, [r1, #76]
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
 714              		.loc 1 343 0
 715 0084 2068     		ldr	r0, [r4]
 716              	.LVL58:
 717 0086 C26C     		ldr	r2, [r0, #76]
 718 0088 E169     		ldr	r1, [r4, #28]
 719 008a 6569     		ldr	r5, [r4, #20]
 720 008c 2943     		orrs	r1, r1, r5
 721 008e 0A43     		orrs	r2, r2, r1
 722 0090 C264     		str	r2, [r0, #76]
 723 0092 CAE7     		b	.L57
 724              	.LVL59:
 725              	.L58:
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 726              		.loc 1 229 0
 727 0094 0123     		movs	r3, #1
 728 0096 CFE7     		b	.L55
 729              	.L63:
 730              		.align	2
 731              	.L62:
 732 0098 BFFF8FFF 		.word	-7340097
 733              		.cfi_endproc
 734              	.LFE343:
 736              		.section	.text.HAL_RTC_DeInit,"ax",%progbits
ARM GAS  /tmp/ccTYdMqB.s 			page 50


 737              		.align	1
 738              		.global	HAL_RTC_DeInit
 739              		.syntax unified
 740              		.thumb
 741              		.thumb_func
 742              		.fpu fpv5-d16
 744              	HAL_RTC_DeInit:
 745              	.LFB344:
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   HAL_StatusTypeDef status = HAL_ERROR;
 746              		.loc 1 367 0
 747              		.cfi_startproc
 748              		@ args = 0, pretend = 0, frame = 0
 749              		@ frame_needed = 0, uses_anonymous_args = 0
 750              	.LVL60:
 751 0000 38B5     		push	{r3, r4, r5, lr}
 752              	.LCFI7:
 753              		.cfi_def_cfa_offset 16
 754              		.cfi_offset 3, -16
 755              		.cfi_offset 4, -12
 756              		.cfi_offset 5, -8
 757              		.cfi_offset 14, -4
 758              	.LVL61:
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 759              		.loc 1 372 0
 760 0002 0028     		cmp	r0, #0
 761 0004 5ED0     		beq	.L70
 762 0006 0446     		mov	r4, r0
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 763              		.loc 1 378 0
 764 0008 0223     		movs	r3, #2
 765 000a 80F82130 		strb	r3, [r0, #33]
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Enter Initialization mode */
 766              		.loc 1 381 0
 767 000e 0368     		ldr	r3, [r0]
 768 0010 CA22     		movs	r2, #202
 769 0012 5A62     		str	r2, [r3, #36]
 770 0014 0368     		ldr	r3, [r0]
 771 0016 5322     		movs	r2, #83
 772 0018 5A62     		str	r2, [r3, #36]
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     if (status == HAL_OK)
 773              		.loc 1 383 0
 774 001a FFF7FEFF 		bl	RTC_EnterInitMode
 775              	.LVL62:
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 776              		.loc 1 384 0
 777 001e 0546     		mov	r5, r0
 778 0020 68B1     		cbz	r0, .L72
 779              	.L66:
 780              	.LVL63:
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 781              		.loc 1 440 0
 782 0022 002D     		cmp	r5, #0
 783 0024 4FD1     		bne	.L65
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 784              		.loc 1 449 0
 785 0026 2368     		ldr	r3, [r4]
 786 0028 FF22     		movs	r2, #255
ARM GAS  /tmp/ccTYdMqB.s 			page 51


 787 002a 5A62     		str	r2, [r3, #36]
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
 788              		.loc 1 461 0
 789 002c 2046     		mov	r0, r4
 790 002e FFF7FEFF 		bl	HAL_RTC_MspDeInit
 791              	.LVL64:
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 792              		.loc 1 464 0
 793 0032 0023     		movs	r3, #0
 794 0034 84F82130 		strb	r3, [r4, #33]
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 795              		.loc 1 467 0
 796 0038 84F82030 		strb	r3, [r4, #32]
 797 003c 43E0     		b	.L65
 798              	.LVL65:
 799              	.L72:
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       hrtc->Instance->DR = ((uint32_t)(RTC_DR_WDU_0 | RTC_DR_MU_0 | RTC_DR_DU_0));
 800              		.loc 1 387 0
 801 003e 2368     		ldr	r3, [r4]
 802 0040 0022     		movs	r2, #0
 803 0042 1A60     		str	r2, [r3]
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       /* Reset All CR bits except CR[2:0] */
 804              		.loc 1 388 0
 805 0044 2368     		ldr	r3, [r4]
 806 0046 42F20112 		movw	r2, #8449
 807 004a 5A60     		str	r2, [r3, #4]
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 808              		.loc 1 390 0
 809 004c 2268     		ldr	r2, [r4]
 810 004e 9368     		ldr	r3, [r2, #8]
 811 0050 03F00703 		and	r3, r3, #7
 812 0054 9360     		str	r3, [r2, #8]
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 813              		.loc 1 392 0
 814 0056 FFF7FEFF 		bl	HAL_GetTick
 815              	.LVL66:
 816 005a 0546     		mov	r5, r0
 817              	.LVL67:
 818              	.L68:
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_WUTWF */
 819              		.loc 1 399 0
 820 005c 2368     		ldr	r3, [r4]
 821 005e DB68     		ldr	r3, [r3, #12]
 822 0060 13F0040F 		tst	r3, #4
 823 0064 0CD1     		bne	.L73
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****           {
 824              		.loc 1 402 0
 825 0066 FFF7FEFF 		bl	HAL_GetTick
 826              	.LVL68:
 827 006a 401B     		subs	r0, r0, r5
 828 006c B0F57A7F 		cmp	r0, #1000
 829 0070 F4D9     		bls	.L68
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 830              		.loc 1 405 0
 831 0072 2368     		ldr	r3, [r4]
 832 0074 FF22     		movs	r2, #255
 833 0076 5A62     		str	r2, [r3, #36]
ARM GAS  /tmp/ccTYdMqB.s 			page 52


 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 834              		.loc 1 408 0
 835 0078 0323     		movs	r3, #3
 836 007a 84F82130 		strb	r3, [r4, #33]
 837 007e EDE7     		b	.L68
 838              	.L73:
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       if (status == HAL_OK)
 839              		.loc 1 414 0
 840 0080 2046     		mov	r0, r4
 841 0082 FFF7FEFF 		bl	RTC_ExitInitMode
 842              	.LVL69:
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 843              		.loc 1 415 0
 844 0086 0546     		mov	r5, r0
 845              	.LVL70:
 846 0088 0028     		cmp	r0, #0
 847 008a CAD1     		bne	.L66
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 848              		.loc 1 418 0
 849 008c 2268     		ldr	r2, [r4]
 850 008e 9368     		ldr	r3, [r2, #8]
 851 0090 0023     		movs	r3, #0
 852 0092 9360     		str	r3, [r2, #8]
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->PRER = ((uint32_t)(RTC_PRER_PREDIV_A | 0x000000FFU));
 853              		.loc 1 421 0
 854 0094 2268     		ldr	r2, [r4]
 855 0096 4FF6FF71 		movw	r1, #65535
 856 009a 5161     		str	r1, [r2, #20]
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMAR = 0x00000000U;
 857              		.loc 1 422 0
 858 009c 2268     		ldr	r2, [r4]
 859 009e 0B49     		ldr	r1, .L74
 860 00a0 1161     		str	r1, [r2, #16]
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMBR = 0x00000000U;
 861              		.loc 1 423 0
 862 00a2 2268     		ldr	r2, [r4]
 863 00a4 D361     		str	r3, [r2, #28]
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->SHIFTR = 0x00000000U;
 864              		.loc 1 424 0
 865 00a6 2268     		ldr	r2, [r4]
 866 00a8 1362     		str	r3, [r2, #32]
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->CALR = 0x00000000U;
 867              		.loc 1 425 0
 868 00aa 2268     		ldr	r2, [r4]
 869 00ac D362     		str	r3, [r2, #44]
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMASSR = 0x00000000U;
 870              		.loc 1 426 0
 871 00ae 2268     		ldr	r2, [r4]
 872 00b0 D363     		str	r3, [r2, #60]
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         hrtc->Instance->ALRMBSSR = 0x00000000U;
 873              		.loc 1 427 0
 874 00b2 2268     		ldr	r2, [r4]
 875 00b4 5364     		str	r3, [r2, #68]
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 876              		.loc 1 428 0
 877 00b6 2268     		ldr	r2, [r4]
 878 00b8 9364     		str	r3, [r2, #72]
ARM GAS  /tmp/ccTYdMqB.s 			page 53


 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 879              		.loc 1 432 0
 880 00ba 2268     		ldr	r2, [r4]
 881 00bc 1364     		str	r3, [r2, #64]
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_INIT */
 882              		.loc 1 435 0
 883 00be 2268     		ldr	r2, [r4]
 884 00c0 D364     		str	r3, [r2, #76]
 885 00c2 AEE7     		b	.L66
 886              	.LVL71:
 887              	.L70:
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t          tickstart;
 888              		.loc 1 368 0
 889 00c4 0125     		movs	r5, #1
 890              	.LVL72:
 891              	.L65:
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 892              		.loc 1 473 0
 893 00c6 2846     		mov	r0, r5
 894 00c8 38BD     		pop	{r3, r4, r5, pc}
 895              	.LVL73:
 896              	.L75:
 897 00ca 00BF     		.align	2
 898              	.L74:
 899 00cc FF007F00 		.word	8323327
 900              		.cfi_endproc
 901              	.LFE344:
 903              		.section	.text.RTC_ByteToBcd2,"ax",%progbits
 904              		.align	1
 905              		.global	RTC_ByteToBcd2
 906              		.syntax unified
 907              		.thumb
 908              		.thumb_func
 909              		.fpu fpv5-d16
 911              	RTC_ByteToBcd2:
 912              	.LFB362:
2030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert a 2 digit decimal to BCD format.
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value Byte to be converted
2034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted byte
2035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_ByteToBcd2(uint8_t Value)
2037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 913              		.loc 1 2037 0
 914              		.cfi_startproc
 915              		@ args = 0, pretend = 0, frame = 0
 916              		@ frame_needed = 0, uses_anonymous_args = 0
 917              		@ link register save eliminated.
 918              	.LVL74:
2038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t bcdhigh = 0U;
 919              		.loc 1 2038 0
 920 0000 0023     		movs	r3, #0
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t  bcdlow  = Value;
2040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   while (bcdlow >= 10U)
 921              		.loc 1 2041 0
ARM GAS  /tmp/ccTYdMqB.s 			page 54


 922 0002 02E0     		b	.L77
 923              	.LVL75:
 924              	.L78:
2042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
2043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdhigh++;
 925              		.loc 1 2043 0
 926 0004 0133     		adds	r3, r3, #1
 927              	.LVL76:
2044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     bcdlow -= 10U;
 928              		.loc 1 2044 0
 929 0006 0A38     		subs	r0, r0, #10
 930              	.LVL77:
 931 0008 C0B2     		uxtb	r0, r0
 932              	.LVL78:
 933              	.L77:
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 934              		.loc 1 2041 0
 935 000a 0928     		cmp	r0, #9
 936 000c FAD8     		bhi	.L78
2045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
2046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 937              		.loc 1 2047 0
 938 000e 1B01     		lsls	r3, r3, #4
 939              	.LVL79:
 940 0010 DBB2     		uxtb	r3, r3
2048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 941              		.loc 1 2048 0
 942 0012 1843     		orrs	r0, r0, r3
 943              	.LVL80:
 944 0014 7047     		bx	lr
 945              		.cfi_endproc
 946              	.LFE362:
 948              		.section	.text.HAL_RTC_SetTime,"ax",%progbits
 949              		.align	1
 950              		.global	HAL_RTC_SetTime
 951              		.syntax unified
 952              		.thumb
 953              		.thumb_func
 954              		.fpu fpv5-d16
 956              	HAL_RTC_SetTime:
 957              	.LFB347:
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 958              		.loc 1 840 0
 959              		.cfi_startproc
 960              		@ args = 0, pretend = 0, frame = 0
 961              		@ frame_needed = 0, uses_anonymous_args = 0
 962              	.LVL81:
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 963              		.loc 1 850 0
 964 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 965 0004 012B     		cmp	r3, #1
 966 0006 5ED0     		beq	.L87
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 967              		.loc 1 840 0 discriminator 2
 968 0008 70B5     		push	{r4, r5, r6, lr}
 969              	.LCFI8:
ARM GAS  /tmp/ccTYdMqB.s 			page 55


 970              		.cfi_def_cfa_offset 16
 971              		.cfi_offset 4, -16
 972              		.cfi_offset 5, -12
 973              		.cfi_offset 6, -8
 974              		.cfi_offset 14, -4
 975 000a 1646     		mov	r6, r2
 976 000c 0D46     		mov	r5, r1
 977 000e 0446     		mov	r4, r0
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 978              		.loc 1 850 0 discriminator 2
 979 0010 0123     		movs	r3, #1
 980 0012 80F82030 		strb	r3, [r0, #32]
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 981              		.loc 1 852 0 discriminator 2
 982 0016 0223     		movs	r3, #2
 983 0018 80F82130 		strb	r3, [r0, #33]
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****  /* Enter Initialization mode */
 984              		.loc 1 855 0 discriminator 2
 985 001c 0368     		ldr	r3, [r0]
 986 001e CA22     		movs	r2, #202
 987              	.LVL82:
 988 0020 5A62     		str	r2, [r3, #36]
 989 0022 0368     		ldr	r3, [r0]
 990 0024 5322     		movs	r2, #83
 991 0026 5A62     		str	r2, [r3, #36]
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 992              		.loc 1 857 0 discriminator 2
 993 0028 FFF7FEFF 		bl	RTC_EnterInitMode
 994              	.LVL83:
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 995              		.loc 1 858 0 discriminator 2
 996 002c 0346     		mov	r3, r0
 997 002e 60BB     		cbnz	r0, .L81
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 998              		.loc 1 860 0
 999 0030 002E     		cmp	r6, #0
 1000 0032 36D1     		bne	.L82
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1001              		.loc 1 862 0
 1002 0034 2368     		ldr	r3, [r4]
 1003 0036 9B68     		ldr	r3, [r3, #8]
 1004 0038 13F0400F 		tst	r3, #64
 1005 003c 01D1     		bne	.L83
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(sTime->Hours));
 1006              		.loc 1 869 0
 1007 003e 0023     		movs	r3, #0
 1008 0040 EB70     		strb	r3, [r5, #3]
 1009              	.L83:
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1010              		.loc 1 875 0
 1011 0042 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1012              	.LVL84:
 1013 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1014              	.LVL85:
 1015 0048 0604     		lsls	r6, r0, #16
 1016              	.LVL86:
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
ARM GAS  /tmp/ccTYdMqB.s 			page 56


 1017              		.loc 1 876 0
 1018 004a 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1019 004c FFF7FEFF 		bl	RTC_ByteToBcd2
 1020              	.LVL87:
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1021              		.loc 1 875 0
 1022 0050 46EA0026 		orr	r6, r6, r0, lsl #8
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 1023              		.loc 1 877 0
 1024 0054 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1025 0056 FFF7FEFF 		bl	RTC_ByteToBcd2
 1026              	.LVL88:
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 1027              		.loc 1 876 0
 1028 005a 3043     		orrs	r0, r0, r6
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 1029              		.loc 1 878 0
 1030 005c EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                           ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1031              		.loc 1 875 0
 1032 005e 40EA8350 		orr	r0, r0, r3, lsl #22
 1033              	.LVL89:
 1034              	.L84:
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1035              		.loc 1 901 0
 1036 0062 2268     		ldr	r2, [r4]
 1037 0064 194B     		ldr	r3, .L92
 1038 0066 0340     		ands	r3, r3, r0
 1039 0068 1360     		str	r3, [r2]
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1040              		.loc 1 904 0
 1041 006a 2268     		ldr	r2, [r4]
 1042 006c 9368     		ldr	r3, [r2, #8]
 1043 006e 23F48023 		bic	r3, r3, #262144
 1044 0072 9360     		str	r3, [r2, #8]
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1045              		.loc 1 907 0
 1046 0074 2168     		ldr	r1, [r4]
 1047 0076 8B68     		ldr	r3, [r1, #8]
 1048 0078 EA68     		ldr	r2, [r5, #12]
 1049 007a 2869     		ldr	r0, [r5, #16]
 1050              	.LVL90:
 1051 007c 0243     		orrs	r2, r2, r0
 1052 007e 1343     		orrs	r3, r3, r2
 1053 0080 8B60     		str	r3, [r1, #8]
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1054              		.loc 1 910 0
 1055 0082 2046     		mov	r0, r4
 1056 0084 FFF7FEFF 		bl	RTC_ExitInitMode
 1057              	.LVL91:
 1058 0088 0346     		mov	r3, r0
 1059              	.LVL92:
 1060              	.L81:
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1061              		.loc 1 914 0
 1062 008a 2268     		ldr	r2, [r4]
 1063 008c FF21     		movs	r1, #255
ARM GAS  /tmp/ccTYdMqB.s 			page 57


 1064 008e 5162     		str	r1, [r2, #36]
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1065              		.loc 1 916 0
 1066 0090 13B9     		cbnz	r3, .L86
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1067              		.loc 1 918 0
 1068 0092 0122     		movs	r2, #1
 1069 0094 84F82120 		strb	r2, [r4, #33]
 1070              	.L86:
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1071              		.loc 1 922 0
 1072 0098 0022     		movs	r2, #0
 1073 009a 84F82020 		strb	r2, [r4, #32]
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1074              		.loc 1 925 0
 1075 009e 1846     		mov	r0, r3
 1076 00a0 70BD     		pop	{r4, r5, r6, pc}
 1077              	.LVL93:
 1078              	.L82:
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1079              		.loc 1 882 0
 1080 00a2 2368     		ldr	r3, [r4]
 1081 00a4 9B68     		ldr	r3, [r3, #8]
 1082 00a6 13F0400F 		tst	r3, #64
 1083 00aa 01D1     		bne	.L85
 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****         assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
 1084              		.loc 1 889 0
 1085 00ac 0023     		movs	r3, #0
 1086 00ae EB70     		strb	r3, [r5, #3]
 1087              	.L85:
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1088              		.loc 1 894 0
 1089 00b0 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 1090              		.loc 1 895 0
 1091 00b2 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1092              	.LVL94:
 1093 00b4 0002     		lsls	r0, r0, #8
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1094              		.loc 1 894 0
 1095 00b6 40EA0340 		orr	r0, r0, r3, lsl #16
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 1096              		.loc 1 896 0
 1097 00ba AB78     		ldrb	r3, [r5, #2]	@ zero_extendqisi2
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 1098              		.loc 1 895 0
 1099 00bc 1843     		orrs	r0, r0, r3
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     }
 1100              		.loc 1 897 0
 1101 00be EB78     		ldrb	r3, [r5, #3]	@ zero_extendqisi2
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                 ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 1102              		.loc 1 894 0
 1103 00c0 40EA8350 		orr	r0, r0, r3, lsl #22
 1104              	.LVL95:
 1105 00c4 CDE7     		b	.L84
 1106              	.LVL96:
 1107              	.L87:
ARM GAS  /tmp/ccTYdMqB.s 			page 58


 1108              	.LCFI9:
 1109              		.cfi_def_cfa_offset 0
 1110              		.cfi_restore 4
 1111              		.cfi_restore 5
 1112              		.cfi_restore 6
 1113              		.cfi_restore 14
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1114              		.loc 1 850 0
 1115 00c6 0223     		movs	r3, #2
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1116              		.loc 1 925 0
 1117 00c8 1846     		mov	r0, r3
 1118              	.LVL97:
 1119 00ca 7047     		bx	lr
 1120              	.L93:
 1121              		.align	2
 1122              	.L92:
 1123 00cc 7F7F7F00 		.word	8355711
 1124              		.cfi_endproc
 1125              	.LFE347:
 1127              		.section	.text.HAL_RTC_SetDate,"ax",%progbits
 1128              		.align	1
 1129              		.global	HAL_RTC_SetDate
 1130              		.syntax unified
 1131              		.thumb
 1132              		.thumb_func
 1133              		.fpu fpv5-d16
 1135              	HAL_RTC_SetDate:
 1136              	.LFB349:
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 1137              		.loc 1 993 0
 1138              		.cfi_startproc
 1139              		@ args = 0, pretend = 0, frame = 0
 1140              		@ frame_needed = 0, uses_anonymous_args = 0
 1141              	.LVL98:
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1142              		.loc 1 1001 0
 1143 0000 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1144 0004 012B     		cmp	r3, #1
 1145 0006 4DD0     		beq	.L101
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 1146              		.loc 1 993 0 discriminator 2
 1147 0008 70B5     		push	{r4, r5, r6, lr}
 1148              	.LCFI10:
 1149              		.cfi_def_cfa_offset 16
 1150              		.cfi_offset 4, -16
 1151              		.cfi_offset 5, -12
 1152              		.cfi_offset 6, -8
 1153              		.cfi_offset 14, -4
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1154              		.loc 1 1001 0 discriminator 2
 1155 000a 0123     		movs	r3, #1
 1156 000c 80F82030 		strb	r3, [r0, #32]
1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1157              		.loc 1 1003 0 discriminator 2
 1158 0010 0223     		movs	r3, #2
 1159 0012 80F82130 		strb	r3, [r0, #33]
ARM GAS  /tmp/ccTYdMqB.s 			page 59


1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1160              		.loc 1 1005 0 discriminator 2
 1161 0016 3AB9     		cbnz	r2, .L96
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1162              		.loc 1 1005 0 is_stmt 0 discriminator 1
 1163 0018 4B78     		ldrb	r3, [r1, #1]	@ zero_extendqisi2
 1164 001a 13F0100F 		tst	r3, #16
 1165 001e 03D0     		beq	.L96
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1166              		.loc 1 1007 0 is_stmt 1
 1167 0020 03F0EF03 		and	r3, r3, #239
 1168 0024 0A33     		adds	r3, r3, #10
 1169 0026 4B70     		strb	r3, [r1, #1]
 1170              	.L96:
 1171 0028 0E46     		mov	r6, r1
 1172 002a 0446     		mov	r4, r0
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1173              		.loc 1 1012 0
 1174 002c 32BB     		cbnz	r2, .L97
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1175              		.loc 1 1018 0
 1176 002e C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1177              	.LVL99:
 1178 0030 FFF7FEFF 		bl	RTC_ByteToBcd2
 1179              	.LVL100:
 1180 0034 0504     		lsls	r5, r0, #16
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 1181              		.loc 1 1019 0
 1182 0036 7078     		ldrb	r0, [r6, #1]	@ zero_extendqisi2
 1183 0038 FFF7FEFF 		bl	RTC_ByteToBcd2
 1184              	.LVL101:
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1185              		.loc 1 1018 0
 1186 003c 45EA0025 		orr	r5, r5, r0, lsl #8
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 1187              		.loc 1 1020 0
 1188 0040 B078     		ldrb	r0, [r6, #2]	@ zero_extendqisi2
 1189 0042 FFF7FEFF 		bl	RTC_ByteToBcd2
 1190              	.LVL102:
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 1191              		.loc 1 1019 0
 1192 0046 0543     		orrs	r5, r5, r0
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1193              		.loc 1 1021 0
 1194 0048 3078     		ldrb	r0, [r6]	@ zero_extendqisi2
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 1195              		.loc 1 1018 0
 1196 004a 45EA4035 		orr	r5, r5, r0, lsl #13
 1197              	.LVL103:
 1198              	.L98:
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1199              		.loc 1 1036 0
 1200 004e 2368     		ldr	r3, [r4]
 1201 0050 CA22     		movs	r2, #202
 1202 0052 5A62     		str	r2, [r3, #36]
 1203 0054 2368     		ldr	r3, [r4]
 1204 0056 5322     		movs	r2, #83
ARM GAS  /tmp/ccTYdMqB.s 			page 60


 1205 0058 5A62     		str	r2, [r3, #36]
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   if (status == HAL_OK)
 1206              		.loc 1 1040 0
 1207 005a 2046     		mov	r0, r4
 1208 005c FFF7FEFF 		bl	RTC_EnterInitMode
 1209              	.LVL104:
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1210              		.loc 1 1041 0
 1211 0060 0346     		mov	r3, r0
 1212 0062 B0B1     		cbz	r0, .L106
 1213              	.LVL105:
 1214              	.L99:
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1215              		.loc 1 1052 0
 1216 0064 2268     		ldr	r2, [r4]
 1217 0066 FF21     		movs	r1, #255
 1218 0068 5162     		str	r1, [r2, #36]
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1219              		.loc 1 1054 0
 1220 006a 13B9     		cbnz	r3, .L100
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1221              		.loc 1 1056 0
 1222 006c 0122     		movs	r2, #1
 1223 006e 84F82120 		strb	r2, [r4, #33]
 1224              	.L100:
1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1225              		.loc 1 1060 0
 1226 0072 0022     		movs	r2, #0
 1227 0074 84F82020 		strb	r2, [r4, #32]
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1228              		.loc 1 1065 0
 1229 0078 1846     		mov	r0, r3
 1230 007a 70BD     		pop	{r4, r5, r6, pc}
 1231              	.LVL106:
 1232              	.L97:
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1233              		.loc 1 1029 0
 1234 007c C878     		ldrb	r0, [r1, #3]	@ zero_extendqisi2
 1235              	.LVL107:
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 1236              		.loc 1 1030 0
 1237 007e 4D78     		ldrb	r5, [r1, #1]	@ zero_extendqisi2
 1238 0080 2D02     		lsls	r5, r5, #8
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1239              		.loc 1 1029 0
 1240 0082 45EA0045 		orr	r5, r5, r0, lsl #16
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 1241              		.loc 1 1031 0
 1242 0086 8878     		ldrb	r0, [r1, #2]	@ zero_extendqisi2
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 1243              		.loc 1 1030 0
 1244 0088 0543     		orrs	r5, r5, r0
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1245              		.loc 1 1032 0
 1246 008a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****                   (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 1247              		.loc 1 1029 0
ARM GAS  /tmp/ccTYdMqB.s 			page 61


 1248 008c 45EA4035 		orr	r5, r5, r0, lsl #13
 1249              	.LVL108:
 1250 0090 DDE7     		b	.L98
 1251              	.LVL109:
 1252              	.L106:
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1253              		.loc 1 1044 0
 1254 0092 2268     		ldr	r2, [r4]
 1255 0094 054B     		ldr	r3, .L107
 1256 0096 2B40     		ands	r3, r3, r5
 1257 0098 5360     		str	r3, [r2, #4]
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1258              		.loc 1 1048 0
 1259 009a 2046     		mov	r0, r4
 1260              	.LVL110:
 1261 009c FFF7FEFF 		bl	RTC_ExitInitMode
 1262              	.LVL111:
 1263 00a0 0346     		mov	r3, r0
 1264              	.LVL112:
 1265 00a2 DFE7     		b	.L99
 1266              	.LVL113:
 1267              	.L101:
 1268              	.LCFI11:
 1269              		.cfi_def_cfa_offset 0
 1270              		.cfi_restore 4
 1271              		.cfi_restore 5
 1272              		.cfi_restore 6
 1273              		.cfi_restore 14
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1274              		.loc 1 1001 0
 1275 00a4 0223     		movs	r3, #2
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1276              		.loc 1 1065 0
 1277 00a6 1846     		mov	r0, r3
 1278              	.LVL114:
 1279 00a8 7047     		bx	lr
 1280              	.L108:
 1281 00aa 00BF     		.align	2
 1282              	.L107:
 1283 00ac 3FFFFF00 		.word	16777023
 1284              		.cfi_endproc
 1285              	.LFE349:
 1287              		.section	.text.HAL_RTC_SetAlarm,"ax",%progbits
 1288              		.align	1
 1289              		.global	HAL_RTC_SetAlarm
 1290              		.syntax unified
 1291              		.thumb
 1292              		.thumb_func
 1293              		.fpu fpv5-d16
 1295              	HAL_RTC_SetAlarm:
 1296              	.LFB351:
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
 1297              		.loc 1 1135 0
 1298              		.cfi_startproc
 1299              		@ args = 0, pretend = 0, frame = 0
 1300              		@ frame_needed = 0, uses_anonymous_args = 0
 1301              	.LVL115:
ARM GAS  /tmp/ccTYdMqB.s 			page 62


 1302 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1303              	.LCFI12:
 1304              		.cfi_def_cfa_offset 24
 1305              		.cfi_offset 3, -24
 1306              		.cfi_offset 4, -20
 1307              		.cfi_offset 5, -16
 1308              		.cfi_offset 6, -12
 1309              		.cfi_offset 7, -8
 1310              		.cfi_offset 14, -4
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1311              		.loc 1 1149 0
 1312 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1313 0006 012B     		cmp	r3, #1
 1314 0008 00F0BD80 		beq	.L121
 1315 000c 0D46     		mov	r5, r1
 1316 000e 0446     		mov	r4, r0
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1317              		.loc 1 1149 0 is_stmt 0 discriminator 2
 1318 0010 0123     		movs	r3, #1
 1319 0012 80F82030 		strb	r3, [r0, #32]
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1320              		.loc 1 1151 0 is_stmt 1 discriminator 2
 1321 0016 0223     		movs	r3, #2
 1322 0018 80F82130 		strb	r3, [r0, #33]
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1323              		.loc 1 1153 0 discriminator 2
 1324 001c 002A     		cmp	r2, #0
 1325 001e 55D1     		bne	.L111
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1326              		.loc 1 1155 0
 1327 0020 0368     		ldr	r3, [r0]
 1328 0022 9B68     		ldr	r3, [r3, #8]
 1329 0024 13F0400F 		tst	r3, #64
 1330 0028 01D1     		bne	.L112
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1331              		.loc 1 1162 0
 1332 002a 0023     		movs	r3, #0
 1333 002c CB70     		strb	r3, [r1, #3]
 1334              	.L112:
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1335              		.loc 1 1168 0
 1336 002e EE69     		ldr	r6, [r5, #28]
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1337              		.loc 1 1177 0
 1338 0030 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1339              	.LVL116:
 1340 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1341              	.LVL117:
 1342 0036 0704     		lsls	r7, r0, #16
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1343              		.loc 1 1178 0
 1344 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1345 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1346              	.LVL118:
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1347              		.loc 1 1177 0
 1348 003e 47EA0027 		orr	r7, r7, r0, lsl #8
ARM GAS  /tmp/ccTYdMqB.s 			page 63


1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1349              		.loc 1 1179 0
 1350 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1351 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1352              	.LVL119:
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1353              		.loc 1 1178 0
 1354 0048 0743     		orrs	r7, r7, r0
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1355              		.loc 1 1180 0
 1356 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1357              		.loc 1 1179 0
 1358 004c 47EA8057 		orr	r7, r7, r0, lsl #22
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1359              		.loc 1 1181 0
 1360 0050 95F82000 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 1361 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1362              	.LVL120:
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1363              		.loc 1 1180 0
 1364 0058 47EA0060 		orr	r0, r7, r0, lsl #24
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1365              		.loc 1 1181 0
 1366 005c 0643     		orrs	r6, r6, r0
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1367              		.loc 1 1183 0
 1368 005e 6B69     		ldr	r3, [r5, #20]
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1369              		.loc 1 1177 0
 1370 0060 1E43     		orrs	r6, r6, r3
 1371              	.LVL121:
 1372              	.L113:
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1373              		.loc 1 1220 0
 1374 0062 6F68     		ldr	r7, [r5, #4]
 1375 0064 AB69     		ldr	r3, [r5, #24]
 1376 0066 1F43     		orrs	r7, r7, r3
 1377              	.LVL122:
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1378              		.loc 1 1223 0
 1379 0068 2368     		ldr	r3, [r4]
 1380 006a CA22     		movs	r2, #202
 1381 006c 5A62     		str	r2, [r3, #36]
 1382 006e 2368     		ldr	r3, [r4]
 1383 0070 5322     		movs	r2, #83
 1384 0072 5A62     		str	r2, [r3, #36]
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1385              		.loc 1 1226 0
 1386 0074 6B6A     		ldr	r3, [r5, #36]
 1387 0076 B3F5807F 		cmp	r3, #256
 1388 007a 41D0     		beq	.L123
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm B */
 1389              		.loc 1 1267 0
 1390 007c 2268     		ldr	r2, [r4]
 1391 007e 9368     		ldr	r3, [r2, #8]
 1392 0080 23F40073 		bic	r3, r3, #512
ARM GAS  /tmp/ccTYdMqB.s 			page 64


 1393 0084 9360     		str	r3, [r2, #8]
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
 1394              		.loc 1 1269 0
 1395 0086 2268     		ldr	r2, [r4]
 1396 0088 D368     		ldr	r3, [r2, #12]
 1397 008a DBB2     		uxtb	r3, r3
 1398 008c 63F42073 		orn	r3, r3, #640
 1399 0090 D360     		str	r3, [r2, #12]
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1400              		.loc 1 1271 0
 1401 0092 2268     		ldr	r2, [r4]
 1402 0094 9368     		ldr	r3, [r2, #8]
 1403 0096 23F40053 		bic	r3, r3, #8192
 1404 009a 9360     		str	r3, [r2, #8]
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1405              		.loc 1 1273 0
 1406 009c FFF7FEFF 		bl	HAL_GetTick
 1407              	.LVL123:
 1408 00a0 0546     		mov	r5, r0
 1409              	.LVL124:
 1410              	.L119:
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRBWF */
 1411              		.loc 1 1279 0
 1412 00a2 2368     		ldr	r3, [r4]
 1413 00a4 DA68     		ldr	r2, [r3, #12]
 1414 00a6 12F0020F 		tst	r2, #2
 1415 00aa 5AD1     		bne	.L124
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1416              		.loc 1 1282 0
 1417 00ac FFF7FEFF 		bl	HAL_GetTick
 1418              	.LVL125:
 1419 00b0 401B     		subs	r0, r0, r5
 1420 00b2 B0F57A7F 		cmp	r0, #1000
 1421 00b6 F4D9     		bls	.L119
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1422              		.loc 1 1285 0
 1423 00b8 2368     		ldr	r3, [r4]
 1424 00ba FF22     		movs	r2, #255
 1425 00bc 5A62     		str	r2, [r3, #36]
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1426              		.loc 1 1287 0
 1427 00be 0320     		movs	r0, #3
 1428 00c0 84F82100 		strb	r0, [r4, #33]
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1429              		.loc 1 1290 0
 1430 00c4 0023     		movs	r3, #0
 1431 00c6 84F82030 		strb	r3, [r4, #32]
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1432              		.loc 1 1292 0
 1433 00ca 5BE0     		b	.L110
 1434              	.LVL126:
 1435              	.L111:
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1436              		.loc 1 1187 0
 1437 00cc 0368     		ldr	r3, [r0]
 1438 00ce 9B68     		ldr	r3, [r3, #8]
 1439 00d0 13F0400F 		tst	r3, #64
ARM GAS  /tmp/ccTYdMqB.s 			page 65


 1440 00d4 01D1     		bne	.L114
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1441              		.loc 1 1194 0
 1442 00d6 0023     		movs	r3, #0
 1443 00d8 CB70     		strb	r3, [r1, #3]
 1444              	.L114:
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1445              		.loc 1 1201 0
 1446 00da EA69     		ldr	r2, [r5, #28]
 1447              	.LVL127:
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1448              		.loc 1 1210 0
 1449 00dc 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 1450              	.LVL128:
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1451              		.loc 1 1211 0
 1452 00de 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1453 00e0 1B02     		lsls	r3, r3, #8
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1454              		.loc 1 1210 0
 1455 00e2 43EA0143 		orr	r3, r3, r1, lsl #16
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1456              		.loc 1 1212 0
 1457 00e6 A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1458              		.loc 1 1211 0
 1459 00e8 0B43     		orrs	r3, r3, r1
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1460              		.loc 1 1213 0
 1461 00ea E978     		ldrb	r1, [r5, #3]	@ zero_extendqisi2
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1462              		.loc 1 1212 0
 1463 00ec 43EA8153 		orr	r3, r3, r1, lsl #22
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1464              		.loc 1 1214 0
 1465 00f0 95F82010 		ldrb	r1, [r5, #32]	@ zero_extendqisi2
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1466              		.loc 1 1213 0
 1467 00f4 43EA0163 		orr	r3, r3, r1, lsl #24
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1468              		.loc 1 1214 0
 1469 00f8 1343     		orrs	r3, r3, r2
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1470              		.loc 1 1216 0
 1471 00fa 6E69     		ldr	r6, [r5, #20]
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1472              		.loc 1 1210 0
 1473 00fc 1E43     		orrs	r6, r6, r3
 1474              	.LVL129:
 1475 00fe B0E7     		b	.L113
 1476              	.LVL130:
 1477              	.L123:
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Clear flag alarm A */
 1478              		.loc 1 1229 0
 1479 0100 2268     		ldr	r2, [r4]
 1480 0102 9368     		ldr	r3, [r2, #8]
 1481 0104 23F48073 		bic	r3, r3, #256
ARM GAS  /tmp/ccTYdMqB.s 			page 66


 1482 0108 9360     		str	r3, [r2, #8]
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* In case of interrupt mode is used, the interrupt source must disabled */
 1483              		.loc 1 1231 0
 1484 010a 2268     		ldr	r2, [r4]
 1485 010c D368     		ldr	r3, [r2, #12]
 1486 010e DBB2     		uxtb	r3, r3
 1487 0110 63F4C073 		orn	r3, r3, #384
 1488 0114 D360     		str	r3, [r2, #12]
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1489              		.loc 1 1233 0
 1490 0116 2268     		ldr	r2, [r4]
 1491 0118 9368     		ldr	r3, [r2, #8]
 1492 011a 23F48053 		bic	r3, r3, #4096
 1493 011e 9360     		str	r3, [r2, #8]
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1494              		.loc 1 1235 0
 1495 0120 FFF7FEFF 		bl	HAL_GetTick
 1496              	.LVL131:
 1497 0124 0546     		mov	r5, r0
 1498              	.LVL132:
 1499              	.L116:
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
 1500              		.loc 1 1241 0
 1501 0126 2368     		ldr	r3, [r4]
 1502 0128 DA68     		ldr	r2, [r3, #12]
 1503 012a 12F0010F 		tst	r2, #1
 1504 012e 0FD1     		bne	.L125
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1505              		.loc 1 1244 0
 1506 0130 FFF7FEFF 		bl	HAL_GetTick
 1507              	.LVL133:
 1508 0134 401B     		subs	r0, r0, r5
 1509 0136 B0F57A7F 		cmp	r0, #1000
 1510 013a F4D9     		bls	.L116
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1511              		.loc 1 1247 0
 1512 013c 2368     		ldr	r3, [r4]
 1513 013e FF22     		movs	r2, #255
 1514 0140 5A62     		str	r2, [r3, #36]
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1515              		.loc 1 1249 0
 1516 0142 0320     		movs	r0, #3
 1517 0144 84F82100 		strb	r0, [r4, #33]
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1518              		.loc 1 1252 0
 1519 0148 0023     		movs	r3, #0
 1520 014a 84F82030 		strb	r3, [r4, #32]
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1521              		.loc 1 1254 0
 1522 014e 19E0     		b	.L110
 1523              	.L125:
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1524              		.loc 1 1258 0
 1525 0150 DE61     		str	r6, [r3, #28]
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1526              		.loc 1 1260 0
 1527 0152 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccTYdMqB.s 			page 67


 1528 0154 5F64     		str	r7, [r3, #68]
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1529              		.loc 1 1262 0
 1530 0156 2268     		ldr	r2, [r4]
 1531 0158 9368     		ldr	r3, [r2, #8]
 1532 015a 43F48073 		orr	r3, r3, #256
 1533 015e 9360     		str	r3, [r2, #8]
 1534 0160 07E0     		b	.L118
 1535              	.L124:
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1536              		.loc 1 1296 0
 1537 0162 1E62     		str	r6, [r3, #32]
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1538              		.loc 1 1298 0
 1539 0164 2368     		ldr	r3, [r4]
 1540 0166 9F64     		str	r7, [r3, #72]
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1541              		.loc 1 1300 0
 1542 0168 2268     		ldr	r2, [r4]
 1543 016a 9368     		ldr	r3, [r2, #8]
 1544 016c 43F40073 		orr	r3, r3, #512
 1545 0170 9360     		str	r3, [r2, #8]
 1546              	.L118:
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1547              		.loc 1 1304 0
 1548 0172 2368     		ldr	r3, [r4]
 1549 0174 FF22     		movs	r2, #255
 1550 0176 5A62     		str	r2, [r3, #36]
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1551              		.loc 1 1307 0
 1552 0178 0123     		movs	r3, #1
 1553 017a 84F82130 		strb	r3, [r4, #33]
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1554              		.loc 1 1310 0
 1555 017e 0020     		movs	r0, #0
 1556 0180 84F82000 		strb	r0, [r4, #32]
 1557              	.LVL134:
 1558              	.L110:
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1559              		.loc 1 1313 0
 1560 0184 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1561              	.LVL135:
 1562              	.L121:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1563              		.loc 1 1149 0
 1564 0186 0220     		movs	r0, #2
 1565              	.LVL136:
 1566 0188 FCE7     		b	.L110
 1567              		.cfi_endproc
 1568              	.LFE351:
 1570              		.section	.text.HAL_RTC_SetAlarm_IT,"ax",%progbits
 1571              		.align	1
 1572              		.global	HAL_RTC_SetAlarm_IT
 1573              		.syntax unified
 1574              		.thumb
 1575              		.thumb_func
 1576              		.fpu fpv5-d16
ARM GAS  /tmp/ccTYdMqB.s 			page 68


 1578              	HAL_RTC_SetAlarm_IT:
 1579              	.LFB352:
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tickstart;
 1580              		.loc 1 1329 0
 1581              		.cfi_startproc
 1582              		@ args = 0, pretend = 0, frame = 0
 1583              		@ frame_needed = 0, uses_anonymous_args = 0
 1584              	.LVL137:
 1585 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1586              	.LCFI13:
 1587              		.cfi_def_cfa_offset 24
 1588              		.cfi_offset 3, -24
 1589              		.cfi_offset 4, -20
 1590              		.cfi_offset 5, -16
 1591              		.cfi_offset 6, -12
 1592              		.cfi_offset 7, -8
 1593              		.cfi_offset 14, -4
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1594              		.loc 1 1343 0
 1595 0002 90F82030 		ldrb	r3, [r0, #32]	@ zero_extendqisi2
 1596 0006 012B     		cmp	r3, #1
 1597 0008 00F0C880 		beq	.L138
 1598 000c 0D46     		mov	r5, r1
 1599 000e 0446     		mov	r4, r0
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1600              		.loc 1 1343 0 is_stmt 0 discriminator 2
 1601 0010 0123     		movs	r3, #1
 1602 0012 80F82030 		strb	r3, [r0, #32]
1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1603              		.loc 1 1345 0 is_stmt 1 discriminator 2
 1604 0016 0223     		movs	r3, #2
 1605 0018 80F82130 		strb	r3, [r0, #33]
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1606              		.loc 1 1347 0 discriminator 2
 1607 001c 002A     		cmp	r2, #0
 1608 001e 50D1     		bne	.L128
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1609              		.loc 1 1349 0
 1610 0020 0368     		ldr	r3, [r0]
 1611 0022 9B68     		ldr	r3, [r3, #8]
 1612 0024 13F0400F 		tst	r3, #64
 1613 0028 01D1     		bne	.L129
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
 1614              		.loc 1 1356 0
 1615 002a 0023     		movs	r3, #0
 1616 002c CB70     		strb	r3, [r1, #3]
 1617              	.L129:
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1618              		.loc 1 1362 0
 1619 002e EE69     		ldr	r6, [r5, #28]
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1620              		.loc 1 1371 0
 1621 0030 2878     		ldrb	r0, [r5]	@ zero_extendqisi2
 1622              	.LVL138:
 1623 0032 FFF7FEFF 		bl	RTC_ByteToBcd2
 1624              	.LVL139:
 1625 0036 0704     		lsls	r7, r0, #16
ARM GAS  /tmp/ccTYdMqB.s 			page 69


1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1626              		.loc 1 1372 0
 1627 0038 6878     		ldrb	r0, [r5, #1]	@ zero_extendqisi2
 1628 003a FFF7FEFF 		bl	RTC_ByteToBcd2
 1629              	.LVL140:
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1630              		.loc 1 1371 0
 1631 003e 47EA0027 		orr	r7, r7, r0, lsl #8
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1632              		.loc 1 1373 0
 1633 0042 A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
 1634 0044 FFF7FEFF 		bl	RTC_ByteToBcd2
 1635              	.LVL141:
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos)  | \
 1636              		.loc 1 1372 0
 1637 0048 0743     		orrs	r7, r7, r0
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1638              		.loc 1 1374 0
 1639 004a E878     		ldrb	r0, [r5, #3]	@ zero_extendqisi2
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat              << RTC_ALRMAR_PM_Pos)  | \
 1640              		.loc 1 1373 0
 1641 004c 47EA8057 		orr	r7, r7, r0, lsl #22
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1642              		.loc 1 1375 0
 1643 0050 95F82000 		ldrb	r0, [r5, #32]	@ zero_extendqisi2
 1644 0054 FFF7FEFF 		bl	RTC_ByteToBcd2
 1645              	.LVL142:
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay)  << RTC_ALRMAR_DU_Pos)  | \
 1646              		.loc 1 1374 0
 1647 0058 47EA0060 		orr	r0, r7, r0, lsl #24
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                                     | \
 1648              		.loc 1 1375 0
 1649 005c 0643     		orrs	r6, r6, r0
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1650              		.loc 1 1377 0
 1651 005e 6B69     		ldr	r3, [r5, #20]
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 1652              		.loc 1 1371 0
 1653 0060 1E43     		orrs	r6, r6, r3
 1654              	.LVL143:
 1655              	.L130:
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1656              		.loc 1 1413 0
 1657 0062 6F68     		ldr	r7, [r5, #4]
 1658 0064 AB69     		ldr	r3, [r5, #24]
 1659 0066 1F43     		orrs	r7, r7, r3
 1660              	.LVL144:
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1661              		.loc 1 1416 0
 1662 0068 2368     		ldr	r3, [r4]
 1663 006a CA22     		movs	r2, #202
 1664 006c 5A62     		str	r2, [r3, #36]
 1665 006e 2368     		ldr	r3, [r4]
 1666 0070 5322     		movs	r2, #83
 1667 0072 5A62     		str	r2, [r3, #36]
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1668              		.loc 1 1419 0
ARM GAS  /tmp/ccTYdMqB.s 			page 70


 1669 0074 6B6A     		ldr	r3, [r5, #36]
 1670 0076 B3F5807F 		cmp	r3, #256
 1671 007a 3CD0     		beq	.L140
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1672              		.loc 1 1461 0
 1673 007c 2268     		ldr	r2, [r4]
 1674 007e 9368     		ldr	r3, [r2, #8]
 1675 0080 23F40073 		bic	r3, r3, #512
 1676 0084 9360     		str	r3, [r2, #8]
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1677              		.loc 1 1464 0
 1678 0086 2268     		ldr	r2, [r4]
 1679 0088 D368     		ldr	r3, [r2, #12]
 1680 008a DBB2     		uxtb	r3, r3
 1681 008c 63F42073 		orn	r3, r3, #640
 1682 0090 D360     		str	r3, [r2, #12]
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
 1683              		.loc 1 1466 0
 1684 0092 FFF7FEFF 		bl	HAL_GetTick
 1685              	.LVL145:
 1686 0096 0546     		mov	r5, r0
 1687              	.LVL146:
 1688              	.L136:
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif /* RTC_ISR_ALRBWF */
 1689              		.loc 1 1472 0
 1690 0098 2368     		ldr	r3, [r4]
 1691 009a DA68     		ldr	r2, [r3, #12]
 1692 009c 12F0020F 		tst	r2, #2
 1693 00a0 5AD1     		bne	.L141
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1694              		.loc 1 1475 0
 1695 00a2 FFF7FEFF 		bl	HAL_GetTick
 1696              	.LVL147:
 1697 00a6 401B     		subs	r0, r0, r5
 1698 00a8 B0F57A7F 		cmp	r0, #1000
 1699 00ac F4D9     		bls	.L136
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1700              		.loc 1 1478 0
 1701 00ae 2368     		ldr	r3, [r4]
 1702 00b0 FF22     		movs	r2, #255
 1703 00b2 5A62     		str	r2, [r3, #36]
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1704              		.loc 1 1480 0
 1705 00b4 0320     		movs	r0, #3
 1706 00b6 84F82100 		strb	r0, [r4, #33]
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1707              		.loc 1 1483 0
 1708 00ba 0023     		movs	r3, #0
 1709 00bc 84F82030 		strb	r3, [r4, #32]
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1710              		.loc 1 1485 0
 1711 00c0 6BE0     		b	.L127
 1712              	.LVL148:
 1713              	.L128:
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1714              		.loc 1 1381 0
 1715 00c2 0368     		ldr	r3, [r0]
ARM GAS  /tmp/ccTYdMqB.s 			page 71


 1716 00c4 9B68     		ldr	r3, [r3, #8]
 1717 00c6 13F0400F 		tst	r3, #64
 1718 00ca 01D1     		bne	.L131
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
 1719              		.loc 1 1388 0
 1720 00cc 0023     		movs	r3, #0
 1721 00ce CB70     		strb	r3, [r1, #3]
 1722              	.L131:
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     {
 1723              		.loc 1 1395 0
 1724 00d0 EA69     		ldr	r2, [r5, #28]
 1725              	.LVL149:
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1726              		.loc 1 1404 0
 1727 00d2 2978     		ldrb	r1, [r5]	@ zero_extendqisi2
 1728              	.LVL150:
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1729              		.loc 1 1405 0
 1730 00d4 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
 1731 00d6 1B02     		lsls	r3, r3, #8
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1732              		.loc 1 1404 0
 1733 00d8 43EA0143 		orr	r3, r3, r1, lsl #16
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1734              		.loc 1 1406 0
 1735 00dc A978     		ldrb	r1, [r5, #2]	@ zero_extendqisi2
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Seconds     << RTC_ALRMAR_SU_Pos)  | \
 1736              		.loc 1 1405 0
 1737 00de 0B43     		orrs	r3, r3, r1
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1738              		.loc 1 1407 0
 1739 00e0 E978     		ldrb	r1, [r5, #3]	@ zero_extendqisi2
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.TimeFormat  << RTC_ALRMAR_PM_Pos)  | \
 1740              		.loc 1 1406 0
 1741 00e2 43EA8153 		orr	r3, r3, r1, lsl #22
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1742              		.loc 1 1408 0
 1743 00e6 95F82010 		ldrb	r1, [r5, #32]	@ zero_extendqisi2
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDay      << RTC_ALRMAR_DU_Pos)  | \
 1744              		.loc 1 1407 0
 1745 00ea 43EA0163 		orr	r3, r3, r1, lsl #24
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmDateWeekDaySel)                         | \
 1746              		.loc 1 1408 0
 1747 00ee 1343     		orrs	r3, r3, r2
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1748              		.loc 1 1410 0
 1749 00f0 6E69     		ldr	r6, [r5, #20]
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****               ((uint32_t)sAlarm->AlarmTime.Minutes     << RTC_ALRMAR_MNU_Pos) | \
 1750              		.loc 1 1404 0
 1751 00f2 1E43     		orrs	r6, r6, r3
 1752              	.LVL151:
 1753 00f4 B5E7     		b	.L130
 1754              	.LVL152:
 1755              	.L140:
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1756              		.loc 1 1422 0
 1757 00f6 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccTYdMqB.s 			page 72


 1758 00f8 9368     		ldr	r3, [r2, #8]
 1759 00fa 23F48073 		bic	r3, r3, #256
 1760 00fe 9360     		str	r3, [r2, #8]
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1761              		.loc 1 1425 0
 1762 0100 2268     		ldr	r2, [r4]
 1763 0102 D368     		ldr	r3, [r2, #12]
 1764 0104 DBB2     		uxtb	r3, r3
 1765 0106 63F4C073 		orn	r3, r3, #384
 1766 010a D360     		str	r3, [r2, #12]
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
 1767              		.loc 1 1427 0
 1768 010c FFF7FEFF 		bl	HAL_GetTick
 1769              	.LVL153:
 1770 0110 0546     		mov	r5, r0
 1771              	.LVL154:
 1772              	.L133:
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   #endif /* RTC_ISR_ALRAWF */
 1773              		.loc 1 1433 0
 1774 0112 2368     		ldr	r3, [r4]
 1775 0114 DA68     		ldr	r2, [r3, #12]
 1776 0116 12F0010F 		tst	r2, #1
 1777 011a 0FD1     		bne	.L142
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       {
 1778              		.loc 1 1436 0
 1779 011c FFF7FEFF 		bl	HAL_GetTick
 1780              	.LVL155:
 1781 0120 401B     		subs	r0, r0, r5
 1782 0122 B0F57A7F 		cmp	r0, #1000
 1783 0126 F4D9     		bls	.L133
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1784              		.loc 1 1439 0
 1785 0128 2368     		ldr	r3, [r4]
 1786 012a FF22     		movs	r2, #255
 1787 012c 5A62     		str	r2, [r3, #36]
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1788              		.loc 1 1441 0
 1789 012e 0320     		movs	r0, #3
 1790 0130 84F82100 		strb	r0, [r4, #33]
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1791              		.loc 1 1444 0
 1792 0134 0023     		movs	r3, #0
 1793 0136 84F82030 		strb	r3, [r4, #32]
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****       }
 1794              		.loc 1 1446 0
 1795 013a 2EE0     		b	.L127
 1796              	.L142:
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm A Sub Second register */
 1797              		.loc 1 1450 0
 1798 013c DE61     		str	r6, [r3, #28]
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1799              		.loc 1 1452 0
 1800 013e 2368     		ldr	r3, [r4]
 1801 0140 5F64     		str	r7, [r3, #68]
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1802              		.loc 1 1454 0
 1803 0142 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccTYdMqB.s 			page 73


 1804 0144 9368     		ldr	r3, [r2, #8]
 1805 0146 43F48073 		orr	r3, r3, #256
 1806 014a 9360     		str	r3, [r2, #8]
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1807              		.loc 1 1456 0
 1808 014c 2268     		ldr	r2, [r4]
 1809 014e 9368     		ldr	r3, [r2, #8]
 1810 0150 43F48053 		orr	r3, r3, #4096
 1811 0154 9360     		str	r3, [r2, #8]
 1812 0156 0CE0     		b	.L135
 1813              	.L141:
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm B Sub Second register */
 1814              		.loc 1 1489 0
 1815 0158 1E62     		str	r6, [r3, #32]
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm state: Enable Alarm */
 1816              		.loc 1 1491 0
 1817 015a 2368     		ldr	r3, [r4]
 1818 015c 9F64     		str	r7, [r3, #72]
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     /* Configure the Alarm interrupt */
 1819              		.loc 1 1493 0
 1820 015e 2268     		ldr	r2, [r4]
 1821 0160 9368     		ldr	r3, [r2, #8]
 1822 0162 43F40073 		orr	r3, r3, #512
 1823 0166 9360     		str	r3, [r2, #8]
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1824              		.loc 1 1495 0
 1825 0168 2268     		ldr	r2, [r4]
 1826 016a 9368     		ldr	r3, [r2, #8]
 1827 016c 43F40053 		orr	r3, r3, #8192
 1828 0170 9360     		str	r3, [r2, #8]
 1829              	.L135:
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** #endif
 1830              		.loc 1 1500 0
 1831 0172 0B4A     		ldr	r2, .L143
 1832 0174 1368     		ldr	r3, [r2]
 1833 0176 43F40033 		orr	r3, r3, #131072
 1834 017a 1360     		str	r3, [r2]
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1835              		.loc 1 1503 0
 1836 017c 4FF0B042 		mov	r2, #1476395008
 1837 0180 1368     		ldr	r3, [r2]
 1838 0182 43F40033 		orr	r3, r3, #131072
 1839 0186 1360     		str	r3, [r2]
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1840              		.loc 1 1506 0
 1841 0188 2368     		ldr	r3, [r4]
 1842 018a FF22     		movs	r2, #255
 1843 018c 5A62     		str	r2, [r3, #36]
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1844              		.loc 1 1508 0
 1845 018e 0123     		movs	r3, #1
 1846 0190 84F82130 		strb	r3, [r4, #33]
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1847              		.loc 1 1511 0
 1848 0194 0020     		movs	r0, #0
 1849 0196 84F82000 		strb	r0, [r4, #32]
 1850              	.LVL156:
ARM GAS  /tmp/ccTYdMqB.s 			page 74


 1851              	.L127:
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1852              		.loc 1 1514 0
 1853 019a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1854              	.LVL157:
 1855              	.L138:
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1856              		.loc 1 1343 0
 1857 019c 0220     		movs	r0, #2
 1858              	.LVL158:
 1859 019e FCE7     		b	.L127
 1860              	.L144:
 1861              		.align	2
 1862              	.L143:
 1863 01a0 80000058 		.word	1476395136
 1864              		.cfi_endproc
 1865              	.LFE352:
 1867              		.section	.text.RTC_Bcd2ToByte,"ax",%progbits
 1868              		.align	1
 1869              		.global	RTC_Bcd2ToByte
 1870              		.syntax unified
 1871              		.thumb
 1872              		.thumb_func
 1873              		.fpu fpv5-d16
 1875              	RTC_Bcd2ToByte:
 1876              	.LFB363:
2049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
2050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** /**
2051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @brief  Convert from 2 digit BCD to Binary.
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @param  Value BCD value to be converted
2053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   * @retval Converted word
2054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   */
2055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** uint8_t RTC_Bcd2ToByte(uint8_t Value)
2056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** {
 1877              		.loc 1 2056 0
 1878              		.cfi_startproc
 1879              		@ args = 0, pretend = 0, frame = 0
 1880              		@ frame_needed = 0, uses_anonymous_args = 0
 1881              		@ link register save eliminated.
 1882              	.LVL159:
2057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint8_t tmp;
2058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   tmp = ((Value & 0xF0U) >> 4U) * 10U;
 1883              		.loc 1 2058 0
 1884 0000 0309     		lsrs	r3, r0, #4
 1885 0002 03EB8303 		add	r3, r3, r3, lsl #2
 1886 0006 5A00     		lsls	r2, r3, #1
 1887              	.LVL160:
2059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   return (tmp + (Value & 0x0FU));
 1888              		.loc 1 2059 0
 1889 0008 00F00F00 		and	r0, r0, #15
 1890              	.LVL161:
 1891 000c 1044     		add	r0, r0, r2
2060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** }
 1892              		.loc 1 2060 0
 1893 000e C0B2     		uxtb	r0, r0
 1894 0010 7047     		bx	lr
 1895              		.cfi_endproc
ARM GAS  /tmp/ccTYdMqB.s 			page 75


 1896              	.LFE363:
 1898              		.section	.text.HAL_RTC_GetTime,"ax",%progbits
 1899              		.align	1
 1900              		.global	HAL_RTC_GetTime
 1901              		.syntax unified
 1902              		.thumb
 1903              		.thumb_func
 1904              		.fpu fpv5-d16
 1906              	HAL_RTC_GetTime:
 1907              	.LFB348:
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 1908              		.loc 1 949 0
 1909              		.cfi_startproc
 1910              		@ args = 0, pretend = 0, frame = 0
 1911              		@ frame_needed = 0, uses_anonymous_args = 0
 1912              	.LVL162:
 1913 0000 70B5     		push	{r4, r5, r6, lr}
 1914              	.LCFI14:
 1915              		.cfi_def_cfa_offset 16
 1916              		.cfi_offset 4, -16
 1917              		.cfi_offset 5, -12
 1918              		.cfi_offset 6, -8
 1919              		.cfi_offset 14, -4
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1920              		.loc 1 956 0
 1921 0002 0368     		ldr	r3, [r0]
 1922 0004 9B6A     		ldr	r3, [r3, #40]
 1923 0006 4B60     		str	r3, [r1, #4]
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1924              		.loc 1 959 0
 1925 0008 0368     		ldr	r3, [r0]
 1926 000a 1B69     		ldr	r3, [r3, #16]
 1927 000c C3F30E03 		ubfx	r3, r3, #0, #15
 1928 0010 8B60     		str	r3, [r1, #8]
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1929              		.loc 1 962 0
 1930 0012 0368     		ldr	r3, [r0]
 1931 0014 1868     		ldr	r0, [r3]
 1932              	.LVL163:
 1933 0016 0E4B     		ldr	r3, .L149
 1934 0018 0340     		ands	r3, r3, r0
 1935              	.LVL164:
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 1936              		.loc 1 965 0
 1937 001a C3F30540 		ubfx	r0, r3, #16, #6
 1938 001e 0870     		strb	r0, [r1]
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 1939              		.loc 1 966 0
 1940 0020 C3F30626 		ubfx	r6, r3, #8, #7
 1941 0024 4E70     		strb	r6, [r1, #1]
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 1942              		.loc 1 967 0
 1943 0026 03F07F05 		and	r5, r3, #127
 1944 002a 8D70     		strb	r5, [r1, #2]
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1945              		.loc 1 968 0
 1946 002c 9B0D     		lsrs	r3, r3, #22
ARM GAS  /tmp/ccTYdMqB.s 			page 76


 1947              	.LVL165:
 1948 002e CB70     		strb	r3, [r1, #3]
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 1949              		.loc 1 971 0
 1950 0030 5AB9     		cbnz	r2, .L147
 1951 0032 0C46     		mov	r4, r1
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 1952              		.loc 1 974 0
 1953 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1954              	.LVL166:
 1955 0038 2070     		strb	r0, [r4]
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 1956              		.loc 1 975 0
 1957 003a 3046     		mov	r0, r6
 1958 003c FFF7FEFF 		bl	RTC_Bcd2ToByte
 1959              	.LVL167:
 1960 0040 6070     		strb	r0, [r4, #1]
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 1961              		.loc 1 976 0
 1962 0042 2846     		mov	r0, r5
 1963 0044 FFF7FEFF 		bl	RTC_Bcd2ToByte
 1964              	.LVL168:
 1965 0048 A070     		strb	r0, [r4, #2]
 1966              	.LVL169:
 1967              	.L147:
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 1968              		.loc 1 980 0
 1969 004a 0020     		movs	r0, #0
 1970 004c 70BD     		pop	{r4, r5, r6, pc}
 1971              	.L150:
 1972 004e 00BF     		.align	2
 1973              	.L149:
 1974 0050 7F7F7F00 		.word	8355711
 1975              		.cfi_endproc
 1976              	.LFE348:
 1978              		.section	.text.HAL_RTC_GetDate,"ax",%progbits
 1979              		.align	1
 1980              		.global	HAL_RTC_GetDate
 1981              		.syntax unified
 1982              		.thumb
 1983              		.thumb_func
 1984              		.fpu fpv5-d16
 1986              	HAL_RTC_GetDate:
 1987              	.LFB350:
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t datetmpreg;
 1988              		.loc 1 1081 0
 1989              		.cfi_startproc
 1990              		@ args = 0, pretend = 0, frame = 0
 1991              		@ frame_needed = 0, uses_anonymous_args = 0
 1992              	.LVL170:
 1993 0000 70B5     		push	{r4, r5, r6, lr}
 1994              	.LCFI15:
 1995              		.cfi_def_cfa_offset 16
 1996              		.cfi_offset 4, -16
 1997              		.cfi_offset 5, -12
 1998              		.cfi_offset 6, -8
 1999              		.cfi_offset 14, -4
ARM GAS  /tmp/ccTYdMqB.s 			page 77


1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2000              		.loc 1 1088 0
 2001 0002 0368     		ldr	r3, [r0]
 2002 0004 5868     		ldr	r0, [r3, #4]
 2003              	.LVL171:
 2004 0006 0E4B     		ldr	r3, .L154
 2005 0008 0340     		ands	r3, r3, r0
 2006              	.LVL172:
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 2007              		.loc 1 1091 0
 2008 000a 180C     		lsrs	r0, r3, #16
 2009 000c C870     		strb	r0, [r1, #3]
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 2010              		.loc 1 1092 0
 2011 000e C3F30426 		ubfx	r6, r3, #8, #5
 2012 0012 4E70     		strb	r6, [r1, #1]
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 2013              		.loc 1 1093 0
 2014 0014 03F03F05 		and	r5, r3, #63
 2015 0018 8D70     		strb	r5, [r1, #2]
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2016              		.loc 1 1094 0
 2017 001a C3F34233 		ubfx	r3, r3, #13, #3
 2018              	.LVL173:
 2019 001e 0B70     		strb	r3, [r1]
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2020              		.loc 1 1097 0
 2021 0020 5AB9     		cbnz	r2, .L152
 2022 0022 0C46     		mov	r4, r1
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 2023              		.loc 1 1100 0
 2024 0024 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2025              	.LVL174:
 2026 0028 E070     		strb	r0, [r4, #3]
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 2027              		.loc 1 1101 0
 2028 002a 3046     		mov	r0, r6
 2029 002c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2030              	.LVL175:
 2031 0030 6070     		strb	r0, [r4, #1]
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2032              		.loc 1 1102 0
 2033 0032 2846     		mov	r0, r5
 2034 0034 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2035              	.LVL176:
 2036 0038 A070     		strb	r0, [r4, #2]
 2037              	.LVL177:
 2038              	.L152:
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2039              		.loc 1 1105 0
 2040 003a 0020     		movs	r0, #0
 2041 003c 70BD     		pop	{r4, r5, r6, pc}
 2042              	.L155:
 2043 003e 00BF     		.align	2
 2044              	.L154:
 2045 0040 3FFFFF00 		.word	16777023
 2046              		.cfi_endproc
ARM GAS  /tmp/ccTYdMqB.s 			page 78


 2047              	.LFE350:
 2049              		.section	.text.HAL_RTC_GetAlarm,"ax",%progbits
 2050              		.align	1
 2051              		.global	HAL_RTC_GetAlarm
 2052              		.syntax unified
 2053              		.thumb
 2054              		.thumb_func
 2055              		.fpu fpv5-d16
 2057              	HAL_RTC_GetAlarm:
 2058              	.LFB354:
1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   uint32_t tmpreg;
 2059              		.loc 1 1630 0
 2060              		.cfi_startproc
 2061              		@ args = 0, pretend = 0, frame = 0
 2062              		@ frame_needed = 0, uses_anonymous_args = 0
 2063              	.LVL178:
 2064 0000 10B5     		push	{r4, lr}
 2065              	.LCFI16:
 2066              		.cfi_def_cfa_offset 8
 2067              		.cfi_offset 4, -8
 2068              		.cfi_offset 14, -4
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2069              		.loc 1 1638 0
 2070 0002 B2F5807F 		cmp	r2, #256
 2071 0006 34D0     		beq	.L161
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2072              		.loc 1 1658 0
 2073 0008 4FF40072 		mov	r2, #512
 2074              	.LVL179:
 2075 000c 4A62     		str	r2, [r1, #36]
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMBSSR) & RTC_ALRMBSSR_SS);
 2076              		.loc 1 1660 0
 2077 000e 0068     		ldr	r0, [r0]
 2078              	.LVL180:
 2079 0010 026A     		ldr	r2, [r0, #32]
 2080              	.LVL181:
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2081              		.loc 1 1661 0
 2082 0012 806C     		ldr	r0, [r0, #72]
 2083 0014 C0F30E00 		ubfx	r0, r0, #0, #15
 2084              	.LVL182:
1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMBR_MNT | RTC_ALRMBR_MNU)) >> RTC_AL
 2085              		.loc 1 1664 0
 2086 0018 C2F30544 		ubfx	r4, r2, #16, #6
 2087 001c 0C70     		strb	r4, [r1]
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMBR_ST  | RTC_ALRMBR_SU))  >> RTC_AL
 2088              		.loc 1 1665 0
 2089 001e C2F30624 		ubfx	r4, r2, #8, #7
 2090 0022 4C70     		strb	r4, [r1, #1]
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMBR_PM)                    >> RTC_AL
 2091              		.loc 1 1666 0
 2092 0024 02F07F04 		and	r4, r2, #127
 2093 0028 8C70     		strb	r4, [r1, #2]
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2094              		.loc 1 1667 0
 2095 002a C2F38054 		ubfx	r4, r2, #22, #1
 2096 002e CC70     		strb	r4, [r1, #3]
ARM GAS  /tmp/ccTYdMqB.s 			page 79


1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMBR_DT | RTC_ALRMBR_DU))   >> RTC_AL
 2097              		.loc 1 1668 0
 2098 0030 4860     		str	r0, [r1, #4]
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMBR_WDSEL);
 2099              		.loc 1 1669 0
 2100 0032 C2F30560 		ubfx	r0, r2, #24, #6
 2101              	.LVL183:
 2102 0036 81F82000 		strb	r0, [r1, #32]
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
 2103              		.loc 1 1670 0
 2104 003a 02F08040 		and	r0, r2, #1073741824
 2105 003e C861     		str	r0, [r1, #28]
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2106              		.loc 1 1671 0
 2107 0040 02F08032 		and	r2, r2, #-2139062144
 2108              	.LVL184:
 2109 0044 4A61     		str	r2, [r1, #20]
 2110              	.LVL185:
 2111              	.L158:
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   {
 2112              		.loc 1 1674 0
 2113 0046 93B9     		cbnz	r3, .L159
 2114 0048 0C46     		mov	r4, r1
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes = RTC_Bcd2ToByte(sAlarm->AlarmTime.Minutes);
 2115              		.loc 1 1676 0
 2116 004a 0878     		ldrb	r0, [r1]	@ zero_extendqisi2
 2117 004c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2118              	.LVL186:
 2119 0050 2070     		strb	r0, [r4]
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds = RTC_Bcd2ToByte(sAlarm->AlarmTime.Seconds);
 2120              		.loc 1 1677 0
 2121 0052 6078     		ldrb	r0, [r4, #1]	@ zero_extendqisi2
 2122 0054 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2123              	.LVL187:
 2124 0058 6070     		strb	r0, [r4, #1]
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay = RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay);
 2125              		.loc 1 1678 0
 2126 005a A078     		ldrb	r0, [r4, #2]	@ zero_extendqisi2
 2127 005c FFF7FEFF 		bl	RTC_Bcd2ToByte
 2128              	.LVL188:
 2129 0060 A070     		strb	r0, [r4, #2]
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2130              		.loc 1 1679 0
 2131 0062 94F82000 		ldrb	r0, [r4, #32]	@ zero_extendqisi2
 2132 0066 FFF7FEFF 		bl	RTC_Bcd2ToByte
 2133              	.LVL189:
 2134 006a 84F82000 		strb	r0, [r4, #32]
 2135              	.LVL190:
 2136              	.L159:
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2137              		.loc 1 1683 0
 2138 006e 0020     		movs	r0, #0
 2139 0070 10BD     		pop	{r4, pc}
 2140              	.LVL191:
 2141              	.L161:
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2142              		.loc 1 1641 0
ARM GAS  /tmp/ccTYdMqB.s 			page 80


 2143 0072 4A62     		str	r2, [r1, #36]
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     subsecondtmpreg = (uint32_t)((hrtc->Instance->ALRMASSR) & RTC_ALRMASSR_SS);
 2144              		.loc 1 1643 0
 2145 0074 0068     		ldr	r0, [r0]
 2146              	.LVL192:
 2147 0076 C269     		ldr	r2, [r0, #28]
 2148              	.LVL193:
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c **** 
 2149              		.loc 1 1644 0
 2150 0078 406C     		ldr	r0, [r0, #68]
 2151 007a C0F30E00 		ubfx	r0, r0, #0, #15
 2152              	.LVL194:
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Minutes    = (uint8_t)((tmpreg & (RTC_ALRMAR_MNT | RTC_ALRMAR_MNU)) >> RTC_AL
 2153              		.loc 1 1647 0
 2154 007e C2F30544 		ubfx	r4, r2, #16, #6
 2155 0082 0C70     		strb	r4, [r1]
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.Seconds    = (uint8_t)((tmpreg & (RTC_ALRMAR_ST  | RTC_ALRMAR_SU))  >> RTC_AL
 2156              		.loc 1 1648 0
 2157 0084 C2F30624 		ubfx	r4, r2, #8, #7
 2158 0088 4C70     		strb	r4, [r1, #1]
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.TimeFormat = (uint8_t)((tmpreg &  RTC_ALRMAR_PM)                    >> RTC_AL
 2159              		.loc 1 1649 0
 2160 008a 02F07F04 		and	r4, r2, #127
 2161 008e 8C70     		strb	r4, [r1, #2]
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmTime.SubSeconds = (uint32_t) subsecondtmpreg;
 2162              		.loc 1 1650 0
 2163 0090 C2F38054 		ubfx	r4, r2, #22, #1
 2164 0094 CC70     		strb	r4, [r1, #3]
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDay     = (uint8_t)((tmpreg & (RTC_ALRMAR_DT  | RTC_ALRMAR_DU))  >> RTC_AL
 2165              		.loc 1 1651 0
 2166 0096 4860     		str	r0, [r1, #4]
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmDateWeekDaySel  = (uint32_t)(tmpreg &  RTC_ALRMAR_WDSEL);
 2167              		.loc 1 1652 0
 2168 0098 C2F30560 		ubfx	r0, r2, #24, #6
 2169              	.LVL195:
 2170 009c 81F82000 		strb	r0, [r1, #32]
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****     sAlarm->AlarmMask            = (uint32_t)(tmpreg &  RTC_ALARMMASK_ALL);
 2171              		.loc 1 1653 0
 2172 00a0 02F08040 		and	r0, r2, #1073741824
 2173 00a4 C861     		str	r0, [r1, #28]
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_rtc.c ****   }
 2174              		.loc 1 1654 0
 2175 00a6 02F08032 		and	r2, r2, #-2139062144
 2176              	.LVL196:
 2177 00aa 4A61     		str	r2, [r1, #20]
 2178 00ac CBE7     		b	.L158
 2179              		.cfi_endproc
 2180              	.LFE354:
 2182              		.text
 2183              	.Letext0:
 2184              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 2185              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 2186              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 2187              		.file 5 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 2188              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h723xx.h"
 2189              		.file 7 "/usr/include/newlib/sys/lock.h"
 2190              		.file 8 "/usr/include/newlib/sys/_types.h"
ARM GAS  /tmp/ccTYdMqB.s 			page 81


 2191              		.file 9 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 2192              		.file 10 "/usr/include/newlib/sys/reent.h"
 2193              		.file 11 "/usr/include/newlib/math.h"
 2194              		.file 12 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 2195              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 2196              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc.h"
 2197              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 2198              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 2199              		.file 17 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rtc_ex.h"
ARM GAS  /tmp/ccTYdMqB.s 			page 82


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_rtc.c
     /tmp/ccTYdMqB.s:17     .text.HAL_RTC_MspInit:0000000000000000 $t
     /tmp/ccTYdMqB.s:24     .text.HAL_RTC_MspInit:0000000000000000 HAL_RTC_MspInit
     /tmp/ccTYdMqB.s:39     .text.HAL_RTC_MspDeInit:0000000000000000 $t
     /tmp/ccTYdMqB.s:46     .text.HAL_RTC_MspDeInit:0000000000000000 HAL_RTC_MspDeInit
     /tmp/ccTYdMqB.s:60     .text.HAL_RTC_DeactivateAlarm:0000000000000000 $t
     /tmp/ccTYdMqB.s:67     .text.HAL_RTC_DeactivateAlarm:0000000000000000 HAL_RTC_DeactivateAlarm
     /tmp/ccTYdMqB.s:207    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 $t
     /tmp/ccTYdMqB.s:214    .text.HAL_RTC_AlarmAEventCallback:0000000000000000 HAL_RTC_AlarmAEventCallback
     /tmp/ccTYdMqB.s:228    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 $t
     /tmp/ccTYdMqB.s:235    .text.HAL_RTC_AlarmIRQHandler:0000000000000000 HAL_RTC_AlarmIRQHandler
     /tmp/ccTYdMqB.s:303    .text.HAL_RTC_AlarmIRQHandler:000000000000005c $d
     /tmp/ccTYdMqB.s:308    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 $t
     /tmp/ccTYdMqB.s:315    .text.HAL_RTC_PollForAlarmAEvent:0000000000000000 HAL_RTC_PollForAlarmAEvent
     /tmp/ccTYdMqB.s:378    .text.HAL_RTC_WaitForSynchro:0000000000000000 $t
     /tmp/ccTYdMqB.s:385    .text.HAL_RTC_WaitForSynchro:0000000000000000 HAL_RTC_WaitForSynchro
     /tmp/ccTYdMqB.s:435    .text.HAL_RTC_GetState:0000000000000000 $t
     /tmp/ccTYdMqB.s:442    .text.HAL_RTC_GetState:0000000000000000 HAL_RTC_GetState
     /tmp/ccTYdMqB.s:459    .text.RTC_EnterInitMode:0000000000000000 $t
     /tmp/ccTYdMqB.s:466    .text.RTC_EnterInitMode:0000000000000000 RTC_EnterInitMode
     /tmp/ccTYdMqB.s:528    .text.RTC_ExitInitMode:0000000000000000 $t
     /tmp/ccTYdMqB.s:535    .text.RTC_ExitInitMode:0000000000000000 RTC_ExitInitMode
     /tmp/ccTYdMqB.s:599    .text.RTC_ExitInitMode:000000000000004c $d
     /tmp/ccTYdMqB.s:604    .text.HAL_RTC_Init:0000000000000000 $t
     /tmp/ccTYdMqB.s:611    .text.HAL_RTC_Init:0000000000000000 HAL_RTC_Init
     /tmp/ccTYdMqB.s:732    .text.HAL_RTC_Init:0000000000000098 $d
     /tmp/ccTYdMqB.s:737    .text.HAL_RTC_DeInit:0000000000000000 $t
     /tmp/ccTYdMqB.s:744    .text.HAL_RTC_DeInit:0000000000000000 HAL_RTC_DeInit
     /tmp/ccTYdMqB.s:899    .text.HAL_RTC_DeInit:00000000000000cc $d
     /tmp/ccTYdMqB.s:904    .text.RTC_ByteToBcd2:0000000000000000 $t
     /tmp/ccTYdMqB.s:911    .text.RTC_ByteToBcd2:0000000000000000 RTC_ByteToBcd2
     /tmp/ccTYdMqB.s:949    .text.HAL_RTC_SetTime:0000000000000000 $t
     /tmp/ccTYdMqB.s:956    .text.HAL_RTC_SetTime:0000000000000000 HAL_RTC_SetTime
     /tmp/ccTYdMqB.s:1123   .text.HAL_RTC_SetTime:00000000000000cc $d
     /tmp/ccTYdMqB.s:1128   .text.HAL_RTC_SetDate:0000000000000000 $t
     /tmp/ccTYdMqB.s:1135   .text.HAL_RTC_SetDate:0000000000000000 HAL_RTC_SetDate
     /tmp/ccTYdMqB.s:1283   .text.HAL_RTC_SetDate:00000000000000ac $d
     /tmp/ccTYdMqB.s:1288   .text.HAL_RTC_SetAlarm:0000000000000000 $t
     /tmp/ccTYdMqB.s:1295   .text.HAL_RTC_SetAlarm:0000000000000000 HAL_RTC_SetAlarm
     /tmp/ccTYdMqB.s:1571   .text.HAL_RTC_SetAlarm_IT:0000000000000000 $t
     /tmp/ccTYdMqB.s:1578   .text.HAL_RTC_SetAlarm_IT:0000000000000000 HAL_RTC_SetAlarm_IT
     /tmp/ccTYdMqB.s:1863   .text.HAL_RTC_SetAlarm_IT:00000000000001a0 $d
     /tmp/ccTYdMqB.s:1868   .text.RTC_Bcd2ToByte:0000000000000000 $t
     /tmp/ccTYdMqB.s:1875   .text.RTC_Bcd2ToByte:0000000000000000 RTC_Bcd2ToByte
     /tmp/ccTYdMqB.s:1899   .text.HAL_RTC_GetTime:0000000000000000 $t
     /tmp/ccTYdMqB.s:1906   .text.HAL_RTC_GetTime:0000000000000000 HAL_RTC_GetTime
     /tmp/ccTYdMqB.s:1974   .text.HAL_RTC_GetTime:0000000000000050 $d
     /tmp/ccTYdMqB.s:1979   .text.HAL_RTC_GetDate:0000000000000000 $t
     /tmp/ccTYdMqB.s:1986   .text.HAL_RTC_GetDate:0000000000000000 HAL_RTC_GetDate
     /tmp/ccTYdMqB.s:2045   .text.HAL_RTC_GetDate:0000000000000040 $d
     /tmp/ccTYdMqB.s:2050   .text.HAL_RTC_GetAlarm:0000000000000000 $t
     /tmp/ccTYdMqB.s:2057   .text.HAL_RTC_GetAlarm:0000000000000000 HAL_RTC_GetAlarm

UNDEFINED SYMBOLS
HAL_GetTick
HAL_RTCEx_AlarmBEventCallback
ARM GAS  /tmp/ccTYdMqB.s 			page 83


