ARM GAS  /tmp/ccsDPfHf.s 			page 1


   1              		.cpu cortex-m7
   2              		.eabi_attribute 28, 1
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 1
  10              		.eabi_attribute 34, 1
  11              		.eabi_attribute 18, 4
  12              		.file	"stm32h7xx_hal_uart.c"
  13              		.text
  14              	.Ltext0:
  15              		.cfi_sections	.debug_frame
  16              		.section	.text.UART_EndTxTransfer,"ax",%progbits
  17              		.align	1
  18              		.syntax unified
  19              		.thumb
  20              		.thumb_func
  21              		.fpu fpv5-d16
  23              	UART_EndTxTransfer:
  24              	.LFB389:
  25              		.file 1 "Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c"
   1:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
   2:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   ******************************************************************************
   3:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @file    stm32h7xx_hal_uart.c
   4:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @author  MCD Application Team
   5:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief   UART HAL module driver.
   6:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *          This file provides firmware functions to manage the following
   7:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *          functionalities of the Universal Asynchronous Receiver Transmitter Peripheral (UART).
   8:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           + Initialization and de-initialization functions
   9:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           + IO operation functions
  10:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           + Peripheral Control functions
  11:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
  12:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
  13:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   @verbatim
  14:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
  15:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                         ##### How to use this driver #####
  16:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
  17:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   [..]
  18:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     The UART HAL driver can be used as follows:
  19:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  20:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Declare a UART_HandleTypeDef handle structure (eg. UART_HandleTypeDef huart).
  21:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Initialize the UART low level resources by implementing the HAL_UART_MspInit() API:
  22:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Enable the USARTx interface clock.
  23:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) UART pins configuration:
  24:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Enable the clock for the UART GPIOs.
  25:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Configure these UART pins as alternate function pull-up.
  26:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) NVIC configuration if you need to use interrupt process (HAL_UART_Transmit_IT()
  27:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****              and HAL_UART_Receive_IT() APIs):
  28:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Configure the USARTx interrupt priority.
  29:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Enable the NVIC USART IRQ handle.
  30:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) UART interrupts handling:
  31:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****               -@@-  The specific UART interrupts (Transmission complete interrupt,
  32:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                 RXNE interrupt, RX/TX FIFOs related interrupts and Error Interrupts)
  33:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                 are managed using the macros __HAL_UART_ENABLE_IT() and __HAL_UART_DISABLE_IT()
ARM GAS  /tmp/ccsDPfHf.s 			page 2


  34:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                 inside the transmit and receive processes.
  35:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) DMA Configuration if you need to use DMA process (HAL_UART_Transmit_DMA()
  36:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****              and HAL_UART_Receive_DMA() APIs):
  37:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Declare a DMA handle structure for the Tx/Rx channel.
  38:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Enable the DMAx interface clock.
  39:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Configure the declared DMA handle structure with the required Tx/Rx parameters.
  40:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Configure the DMA Tx/Rx channel.
  41:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Associate the initialized DMA handle to the UART DMA Tx/Rx handle.
  42:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             (+++) Configure the priority and enable the NVIC for the transfer complete interrupt on
  43:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  44:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Program the Baud Rate, Word Length, Stop Bit, Parity, Prescaler value , Hardware
  45:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         flow control and Mode (Receiver/Transmitter) in the huart handle Init structure.
  46:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  47:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) If required, program UART advanced features (TX/RX pins swap, auto Baud rate detection,...)
  48:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         in the huart handle AdvancedInit structure.
  49:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  50:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) For the UART asynchronous mode, initialize the UART registers by calling
  51:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         the HAL_UART_Init() API.
  52:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  53:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) For the UART Half duplex mode, initialize the UART registers by calling
  54:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         the HAL_HalfDuplex_Init() API.
  55:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  56:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) For the UART LIN (Local Interconnection Network) mode, initialize the UART registers
  57:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         by calling the HAL_LIN_Init() API.
  58:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  59:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) For the UART Multiprocessor mode, initialize the UART registers
  60:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         by calling the HAL_MultiProcessor_Init() API.
  61:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  62:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) For the UART RS485 Driver Enabled mode, initialize the UART registers
  63:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         by calling the HAL_RS485Ex_Init() API.
  64:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  65:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
  66:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (@) These API's (HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init(), HAL_MultiProcessor_Ini
  67:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         also configure the low level Hardware GPIO, CLOCK, CORTEX...etc) by
  68:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         calling the customized HAL_UART_MspInit() API.
  69:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  70:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     ##### Callback registration #####
  71:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     ==================================
  72:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  73:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
  74:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     The compilation define USE_HAL_UART_REGISTER_CALLBACKS when set to 1
  75:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     allows the user to configure dynamically the driver callbacks.
  76:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  77:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
  78:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     Use Function @ref HAL_UART_RegisterCallback() to register a user callback.
  79:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     Function @ref HAL_UART_RegisterCallback() allows to register following callbacks:
  80:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
  81:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
  82:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
  83:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
  84:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
  85:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
  86:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
  87:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
  88:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
  89:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
  90:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
ARM GAS  /tmp/ccsDPfHf.s 			page 3


  91:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
  92:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
  93:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     This function takes as parameters the HAL peripheral handle, the Callback ID
  94:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     and a pointer to the user callback function.
  95:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
  96:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
  97:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     Use function @ref HAL_UART_UnRegisterCallback() to reset a callback to the default
  98:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     weak (surcharged) function.
  99:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     @ref HAL_UART_UnRegisterCallback() takes as parameters the HAL peripheral handle,
 100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     and the Callback ID.
 101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     This function allows to reset following callbacks:
 102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) TxHalfCpltCallback        : Tx Half Complete Callback.
 103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) TxCpltCallback            : Tx Complete Callback.
 104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) RxHalfCpltCallback        : Rx Half Complete Callback.
 105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) RxCpltCallback            : Rx Complete Callback.
 106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) ErrorCallback             : Error Callback.
 107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) AbortCpltCallback         : Abort Complete Callback.
 108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) AbortTransmitCpltCallback : Abort Transmit Complete Callback.
 109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) AbortReceiveCpltCallback  : Abort Receive Complete Callback.
 110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) WakeupCallback            : Wakeup Callback.
 111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) RxFifoFullCallback        : Rx Fifo Full Callback.
 112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) TxFifoEmptyCallback       : Tx Fifo Empty Callback.
 113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) MspInitCallback           : UART MspInit.
 114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (+) MspDeInitCallback         : UART MspDeInit.
 115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
 117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     By default, after the @ref HAL_UART_Init() and when the state is HAL_UART_STATE_RESET
 118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     all callbacks are set to the corresponding weak (surcharged) functions:
 119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     examples @ref HAL_UART_TxCpltCallback(), @ref HAL_UART_RxHalfCpltCallback().
 120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     Exception done for MspInit and MspDeInit functions that are respectively
 121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     reset to the legacy weak (surcharged) functions in the @ref HAL_UART_Init()
 122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     and @ref HAL_UART_DeInit() only when these callbacks are null (not registered beforehand).
 123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     If not, MspInit or MspDeInit are not null, the @ref HAL_UART_Init() and @ref HAL_UART_DeInit()
 124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     keep and use the user MspInit/MspDeInit callbacks (registered beforehand).
 125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
 127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     Callbacks can be registered/unregistered in HAL_UART_STATE_READY state only.
 128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     Exception done MspInit/MspDeInit that can be registered/unregistered
 129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     in HAL_UART_STATE_READY or HAL_UART_STATE_RESET state, thus registered (user)
 130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MspInit/DeInit callbacks can be used during the Init/DeInit.
 131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     In that case first register the MspInit/MspDeInit user callbacks
 132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     using @ref HAL_UART_RegisterCallback() before calling @ref HAL_UART_DeInit()
 133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     or @ref HAL_UART_Init() function.
 134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
 136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     When The compilation define USE_HAL_UART_REGISTER_CALLBACKS is set to 0 or
 137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     not defined, the callback registration feature is not available
 138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     and weak (surcharged) callbacks are used.
 139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   @endverbatim
 142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   ******************************************************************************
 143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @attention
 144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
 145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * All rights reserved.</center></h2>
 147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
ARM GAS  /tmp/ccsDPfHf.s 			page 4


 148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * the "License"; You may not use this file except in compliance with the
 150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * License. You may obtain a copy of the License at:
 151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *                        opensource.org/licenses/BSD-3-Clause
 152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
 153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   ******************************************************************************
 154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Includes ------------------------------------------------------------------*/
 157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #include "stm32h7xx_hal.h"
 158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @addtogroup STM32H7xx_HAL_Driver
 160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
 161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART UART
 164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief HAL UART module driver
 165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
 166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #ifdef HAL_UART_MODULE_ENABLED
 169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Private typedef -----------------------------------------------------------*/
 171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Private define ------------------------------------------------------------*/
 172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Private_Constants UART Private Constants
 173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
 174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #define USART_CR1_FIELDS  ((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | \
 176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                                       USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8| \
 177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                                       USART_CR1_FIFOEN ))                      /*!< UART or USART C
 178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #define USART_CR3_FIELDS  ((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT| \
 180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                                       USART_CR3_TXFTCFG | USART_CR3_RXFTCFG ))  /*!< UART or USART 
 181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #define LPUART_BRR_MIN  0x00000300U  /* LPUART BRR minimum authorized value */
 183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #define LPUART_BRR_MAX  0x000FFFFFU  /* LPUART BRR maximum authorized value */
 184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #define UART_BRR_MIN    0x10U        /* UART BRR minimum authorized value */
 186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #define UART_BRR_MAX    0x0000FFFFU  /* UART BRR maximum authorized value */
 187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
 190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Private macros ------------------------------------------------------------*/
 193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Private variables ---------------------------------------------------------*/
 194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** const uint16_t UARTPrescTable[12] = {1U, 2U, 4U, 6U, 8U, 10U, 12U, 16U, 32U, 64U, 128U, 256U};
 195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Private function prototypes -----------------------------------------------*/
 197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @addtogroup UART_Private_Functions
 198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
 199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart);
 201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart);
 202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma);
 203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma);
 204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma);
ARM GAS  /tmp/ccsDPfHf.s 			page 5


 205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma);
 206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma);
 207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma);
 208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma);
 209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma);
 210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma);
 212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart);
 213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart);
 214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart);
 215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart);
 216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart);
 217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart);
 218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart);
 219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart);
 220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart);
 221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
 223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /* Exported functions --------------------------------------------------------*/
 226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions UART Exported Functions
 228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
 229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group1 Initialization and de-initialization functions
 232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  @brief    Initialization and Configuration functions
 233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
 234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @verbatim
 235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** ===============================================================================
 236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             ##### Initialization and Configuration functions #####
 237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
 238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
 239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     This subsection provides a set of functions allowing to initialize the USARTx or the UARTy
 240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     in asynchronous mode.
 241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (+) For the asynchronous mode the parameters below can be configured:
 242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Baud Rate
 243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Word Length
 244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Stop Bit
 245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Parity: If the parity is enabled, then the MSB bit of the data written
 246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****              in the data register is transmitted but is changed by the parity bit.
 247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Hardware flow control
 248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Receiver/transmitter modes
 249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) Over Sampling Method
 250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) One-Bit Sampling Method
 251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (+) For the asynchronous mode, the following advanced features can be configured as well:
 252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) TX and/or RX pin level inversion
 253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) data logical level inversion
 254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) RX and TX pins swap
 255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) RX overrun detection disabling
 256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) DMA disabling on RX error
 257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) MSB first on communication line
 258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (++) auto Baud rate detection
 259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
 260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     The HAL_UART_Init(), HAL_HalfDuplex_Init(), HAL_LIN_Init()and HAL_MultiProcessor_Init()API
 261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     follow respectively the UART asynchronous, UART Half duplex, UART LIN mode
ARM GAS  /tmp/ccsDPfHf.s 			page 6


 262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     and UART multiprocessor mode configuration procedures (details for the procedures
 263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     are available in reference manual).
 264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @endverbatim
 266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   Depending on the frame length defined by the M1 and M0 bits (7-bit,
 268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   8-bit or 9-bit), the possible UART formats are listed in the
 269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   following table.
 270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   Table 1. UART frame format.
 272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |  M1 bit |  M0 bit |  PCE bit  |             UART frame                |
 274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |    0    |    0    |    0      |    | SB |    8 bit data   | STB |     |
 276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |    0    |    0    |    1      |    | SB | 7 bit data | PB | STB |     |
 278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |    0    |    1    |    0      |    | SB |    9 bit data   | STB |     |
 280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |    0    |    1    |    1      |    | SB | 8 bit data | PB | STB |     |
 282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |    1    |    0    |    0      |    | SB |    7 bit data   | STB |     |
 284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |---------|---------|-----------|---------------------------------------|
 285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     |    1    |    0    |    1      |    | SB | 6 bit data | PB | STB |     |
 286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     +-----------------------------------------------------------------------+
 287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
 289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Initialize the UART mode according to the specified
 293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
 295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart == NULL)
 301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Check the parameters */
 308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
 311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Check the parameters */
 313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
ARM GAS  /tmp/ccsDPfHf.s 			page 7


 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware */
 330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
 332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* In asynchronous mode, the following bits must be kept cleared:
 353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Initialize the half-duplex mode according to the specified
 366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
 368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart == NULL)
 374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
ARM GAS  /tmp/ccsDPfHf.s 			page 8


 376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check UART instance */
 379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));
 380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware */
 395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
 397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* In half-duplex mode, the following bits must be kept cleared:
 418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 9


 433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Initialize the LIN mode according to the specified
 435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and creates the associated handle.
 436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart             UART handle.
 437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param BreakDetectLength Specifies the LIN break detection length.
 438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_10B 10-bit break detection
 440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *          @arg @ref UART_LINBREAKDETECTLENGTH_11B 11-bit break detection
 441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_Init(UART_HandleTypeDef *huart, uint32_t BreakDetectLength)
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart == NULL)
 447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the LIN UART instance */
 452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
 453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the Break detection length parameter */
 454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_LIN_BREAK_DETECT_LENGTH(BreakDetectLength));
 455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* LIN mode limited to 16-bit oversampling only */
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* LIN mode limited to 8-bit data length */
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->Init.WordLength != UART_WORDLENGTH_8B)
 463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware */
 481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
 483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 10


 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* In LIN mode, the following bits must be kept cleared:
 504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - SCEN and IREN bits in the USART_CR3 register.*/
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR2, USART_CR2_LINEN);
 511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Set the USART LIN Break detection length. */
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_LBDL, BreakDetectLength);
 514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Initialize the multiprocessor mode according to the specified
 524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        parameters in the UART_InitTypeDef and initialize the associated handle.
 525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart        UART handle.
 526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Address      UART node address (4-, 6-, 7- or 8-bit long).
 527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param WakeUpMethod Specifies the UART wakeup method.
 528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        This parameter can be one of the following values:
 529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_IDLELINE WakeUp by an idle line detection
 530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *          @arg @ref UART_WAKEUPMETHOD_ADDRESSMARK WakeUp by an address mark
 531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note  If the user resorts to idle line detection wake up, the Address parameter
 532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        is useless and ignored by the initialization function.
 533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note  If the user resorts to address mark wake up, the address length detection
 534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        is configured by default to 4 bits only. For the UART to be able to
 535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        manage 6-, 7- or 8-bit long addresses detection, the API
 536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
 537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *        HAL_MultiProcessor_Init().
 538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t Wake
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart == NULL)
 544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccsDPfHf.s 			page 11


 547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the wake up method parameter */
 549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
 550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_RESET)
 552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Allocate lock resource and initialize it */
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->Lock = HAL_UNLOCKED;
 555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_InitCallbacksToDefault(huart);
 558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->MspInitCallback == NULL)
 560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->MspInitCallback = HAL_UART_MspInit;
 562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware */
 565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->MspInitCallback(huart);
 566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
 567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init the low level hardware : GPIO, CLOCK */
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_MspInit(huart);
 569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Set the UART Communication parameters */
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (UART_SetConfig(huart) == HAL_ERROR)
 578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_AdvFeatureConfig(huart);
 585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* In multiprocessor mode, the following bits must be kept cleared:
 588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - LINEN and CLKEN bits in the USART_CR2 register,
 589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* If address mark wake up method is chosen, set the USART address node */
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS)
 597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Set the wake up method by setting the WAKE bit in the CR1 register */
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_ENABLE(huart);
 603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 12


 604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DeInitialize the UART peripheral.
 611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
 612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart == NULL)
 618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the parameters */
 623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_DISABLE(huart);
 628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->Instance->CR1 = 0x0U;
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->MspDeInitCallback == NULL)
 635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->MspDeInitCallback = HAL_UART_MspDeInit;
 637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DeInit the low level hardware */
 639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->MspDeInitCallback(huart);
 640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
 641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DeInit the low level hardware */
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_MspDeInit(huart);
 643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Initialize the UART MSP.
 656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
 657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
 658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
ARM GAS  /tmp/ccsDPfHf.s 			page 13


 661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
 663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_MspInit can be implemented in the user file
 666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DeInitialize the UART MSP.
 671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
 672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
 673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_MspDeInit(UART_HandleTypeDef *huart)
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
 678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
 680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_MspDeInit can be implemented in the user file
 681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
 685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Register a User UART Callback
 687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         To be used instead of the weak predefined callback
 688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart uart handle
 689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be registered
 690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
 702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  pCallback pointer to the Callback function
 705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef C
 708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                                             pUART_CallbackTypeDef pCallback)
 709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (pCallback == NULL)
 713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
 717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccsDPfHf.s 			page 14


 718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
 722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (CallbackID)
 724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxHalfCpltCallback = pCallback;
 727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxCpltCallback = pCallback;
 731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxHalfCpltCallback = pCallback;
 735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxCpltCallback = pCallback;
 739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCallback = pCallback;
 743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->AbortCpltCallback = pCallback;
 747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = pCallback;
 751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = pCallback;
 755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->WakeupCallback = pCallback;
 759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_RX_FIFO_FULL_CB_ID :
 762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxFifoFullCallback = pCallback;
 763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_TX_FIFO_EMPTY_CB_ID :
 766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxFifoEmptyCallback = pCallback;
 767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
ARM GAS  /tmp/ccsDPfHf.s 			page 15


 775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default :
 778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         status =  HAL_ERROR;
 781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else if (huart->gState == HAL_UART_STATE_RESET)
 785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (CallbackID)
 787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspInitCallback = pCallback;
 790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspDeInitCallback = pCallback;
 794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default :
 797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         status =  HAL_ERROR;
 800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
 804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     status =  HAL_ERROR;
 808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return status;
 813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Unregister an UART Callback
 817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         UART callaback is redirected to the weak predefined callback
 818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart uart handle
 819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  CallbackID ID of the callback to be unregistered
 820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This parameter can be one of the following values:
 821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_HALFCOMPLETE_CB_ID Tx Half Complete Callback ID
 822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_COMPLETE_CB_ID Tx Complete Callback ID
 823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_HALFCOMPLETE_CB_ID Rx Half Complete Callback ID
 824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_COMPLETE_CB_ID Rx Complete Callback ID
 825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ERROR_CB_ID Error Callback ID
 826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_COMPLETE_CB_ID Abort Complete Callback ID
 827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID Abort Transmit Complete Callback ID
 828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID Abort Receive Complete Callback ID
 829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_WAKEUP_CB_ID Wakeup Callback ID
 830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_RX_FIFO_FULL_CB_ID Rx Fifo Full Callback ID
 831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_TX_FIFO_EMPTY_CB_ID Tx Fifo Empty Callback ID
ARM GAS  /tmp/ccsDPfHf.s 			page 16


 832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPINIT_CB_ID MspInit Callback ID
 833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           @arg @ref HAL_UART_MSPDEINIT_CB_ID MspDeInit Callback ID
 834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
 835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_UnRegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef
 837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_StatusTypeDef status = HAL_OK;
 839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_UART_STATE_READY == huart->gState)
 843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (CallbackID)
 845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_TX_HALFCOMPLETE_CB_ID :
 847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxHalfCpltCallback = HAL_UART_TxHalfCpltCallback;               /* Legacy weak  TxHa
 848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_TX_COMPLETE_CB_ID :
 851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxCpltCallback = HAL_UART_TxCpltCallback;                       /* Legacy weak TxCpl
 852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_RX_HALFCOMPLETE_CB_ID :
 855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxHalfCpltCallback = HAL_UART_RxHalfCpltCallback;               /* Legacy weak RxHal
 856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_RX_COMPLETE_CB_ID :
 859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxCpltCallback = HAL_UART_RxCpltCallback;                       /* Legacy weak RxCpl
 860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ERROR_CB_ID :
 863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCallback = HAL_UART_ErrorCallback;                         /* Legacy weak Error
 864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ABORT_COMPLETE_CB_ID :
 867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->AbortCpltCallback = HAL_UART_AbortCpltCallback;                 /* Legacy weak Abort
 868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
 871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak Abort
 872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
 875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->AbortReceiveCpltCallback = HAL_UART_AbortReceiveCpltCallback;   /* Legacy weak Abort
 876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_WAKEUP_CB_ID :
 879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->WakeupCallback = HAL_UARTEx_WakeupCallback;                     /* Legacy weak Wakeu
 880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_RX_FIFO_FULL_CB_ID :
 883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxFifoFullCallback = HAL_UARTEx_RxFifoFullCallback;             /* Legacy weak RxFif
 884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_TX_FIFO_EMPTY_CB_ID :
 887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxFifoEmptyCallback = HAL_UARTEx_TxFifoEmptyCallback;           /* Legacy weak TxFif
 888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
ARM GAS  /tmp/ccsDPfHf.s 			page 17


 889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;                             /* Legacy weak MspIn
 892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;                         /* Legacy weak MspDe
 896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default :
 899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         status =  HAL_ERROR;
 902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else if (HAL_UART_STATE_RESET == huart->gState)
 906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (CallbackID)
 908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPINIT_CB_ID :
 910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspInitCallback = HAL_UART_MspInit;
 911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case HAL_UART_MSPDEINIT_CB_ID :
 914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->MspDeInitCallback = HAL_UART_MspDeInit;
 915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default :
 918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         status =  HAL_ERROR;
 921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
 925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     status =  HAL_ERROR;
 929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
 932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return status;
 934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
 939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
 940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group2 IO operation functions
 942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief UART Transmit/Receive functions
 943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
 944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @verbatim
 945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
ARM GAS  /tmp/ccsDPfHf.s 			page 18


 946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                       ##### IO operation functions #####
 947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
 948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     This subsection provides a set of functions allowing to manage the UART asynchronous
 949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     and Half duplex data transfers.
 950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) There are two mode of transfer:
 952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        (+) Blocking mode: The communication is performed in polling mode.
 953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            The HAL status of all data processing is returned by the same function
 954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            after finishing transfer.
 955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        (+) Non-Blocking mode: The communication is performed using Interrupts
 956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            or DMA, These API's return the HAL status.
 957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            The end of the data processing will be indicated through the
 958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            dedicated UART IRQ when using Interrupt mode or the DMA IRQ when
 959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            using DMA mode.
 960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            The HAL_UART_TxCpltCallback(), HAL_UART_RxCpltCallback() user callbacks
 961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            will be executed respectively at the end of the transmit or Receive process
 962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            The HAL_UART_ErrorCallback()user callback will be executed when a communication error is
 963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Blocking mode API's are :
 965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Transmit()
 966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Receive()
 967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Non-Blocking mode API's with Interrupt are :
 969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Transmit_IT()
 970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Receive_IT()
 971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_IRQHandler()
 972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Non-Blocking mode API's with DMA are :
 974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Transmit_DMA()
 975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Receive_DMA()
 976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_DMAPause()
 977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_DMAResume()
 978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_DMAStop()
 979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) A set of Transfer Complete Callbacks are provided in Non_Blocking mode:
 981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_TxHalfCpltCallback()
 982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_TxCpltCallback()
 983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_RxHalfCpltCallback()
 984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_RxCpltCallback()
 985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_ErrorCallback()
 986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) Non-Blocking mode transfers could be aborted using Abort API's :
 988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Abort()
 989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit()
 990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive()
 991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_Abort_IT()
 992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmit_IT()
 993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortReceive_IT()
 994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) For Abort services based on interrupts (HAL_UART_Abortxxx_IT), a set of Abort Complete Call
 996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortCpltCallback()
 997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortTransmitCpltCallback()
 998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         (+) HAL_UART_AbortReceiveCpltCallback()
 999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     (#) In Non-Blocking mode transfers, possible errors are split into 2 categories.
1001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         Errors are handled as follows :
1002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        (+) Error is considered as Recoverable and non blocking : Transfer could go till end, but er
ARM GAS  /tmp/ccsDPfHf.s 			page 19


1003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            to be evaluated by user : this concerns Frame Error, Parity Error or Noise Error in Inte
1004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            Received character is then retrieved and stored in Rx buffer, Error code is set to allow
1005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            and HAL_UART_ErrorCallback() user callback is executed. Transfer is kept ongoing on UART
1006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            If user wants to abort it, Abort services should be called by user.
1007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        (+) Error is considered as Blocking : Transfer could not be completed properly and is aborte
1008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            This concerns Overrun Error In Interrupt mode reception and all errors in DMA mode.
1009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            Error code is set to allow user to identify error type, and HAL_UART_ErrorCallback() use
1010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     -@- In the Half duplex communication, it is forbidden to run the transmit
1012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         and receive process in parallel, the UART state HAL_UART_STATE_BUSY_TX_RX can't be useful.
1013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @endverbatim
1015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
1016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Send an amount of data in blocking mode.
1020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         of u16 provided through pData.
1023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note When FIFO mode is enabled, writing a data in the TDR register adds one
1024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *       data to the TXFIFO. Write operations to the TDR register are performed
1025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *       when TXFNF flag is set. From hardware perspective, TXFNF flag and
1026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *       TXE are mapped on the same bit-field.
1027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart   UART handle.
1028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be sent.
1030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint3
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t *pdata16bits;
1037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t tickstart;
1038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return  HAL_ERROR;
1045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_LOCK(huart);
1048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = Size;
1057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
ARM GAS  /tmp/ccsDPfHf.s 			page 20


1060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata8bits  = NULL;
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
1065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata8bits  = pData;
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata16bits = NULL;
1068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     while (huart->TxXferCount > 0U)
1073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
1075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         return HAL_TIMEOUT;
1077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (pdata8bits == NULL)
1079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
1081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata16bits++;
1082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
1086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata8bits++;
1087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxXferCount--;
1089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
1092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_TIMEOUT;
1094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* At end of Tx process, restore huart->gState to Ready */
1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
1098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_OK;
1100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
1102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_BUSY;
1104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Receive an amount of data in blocking mode.
1109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         of u16 available through pData.
1112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note When FIFO mode is enabled, the RXFNE flag is set as long as the RXFIFO
1113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *       is not empty. Read operations from the RDR register are performed when
1114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *       RXFNE flag is set. From hardware perspective, RXFNE flag and
1115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *       RXNE are mapped on the same bit-field.
1116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart   UART handle.
ARM GAS  /tmp/ccsDPfHf.s 			page 21


1117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param pData   Pointer to data buffer (u8 or u16 data elements).
1118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Size    Amount of data elements (u8 or u16) to be received.
1119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Timeout Timeout duration.
1120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint8_t  *pdata8bits;
1125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t *pdata16bits;
1126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t uhMask;
1127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t tickstart;
1128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return  HAL_ERROR;
1135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_LOCK(huart);
1138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Init tickstart for timeout managment*/
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     tickstart = HAL_GetTick();
1144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = Size;
1147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
1151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
1154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata8bits  = NULL;
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
1157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
1159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata8bits  = pData;
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata16bits = NULL;
1162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* as long as data have to be received */
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     while (huart->RxXferCount > 0U)
1168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
1170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         return HAL_TIMEOUT;
1172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (pdata8bits == NULL)
ARM GAS  /tmp/ccsDPfHf.s 			page 22


1174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
1176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata16bits++;
1177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
1181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata8bits++;
1182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxXferCount--;
1184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_OK;
1190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
1192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_BUSY;
1194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Send an amount of data in interrupt mode.
1199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         of u16 provided through pData.
1202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
1203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_ERROR;
1215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_LOCK(huart);
1218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = Size;
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxISR       = NULL;
1223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Configure Tx interrupt processing */
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->FifoMode == UART_FIFOMODE_ENABLE)
1229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the Tx ISR function pointer according to the data word length */
ARM GAS  /tmp/ccsDPfHf.s 			page 23


1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
1232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxISR = UART_TxISR_16BIT_FIFOEN;
1234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxISR = UART_TxISR_8BIT_FIFOEN;
1238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
1241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the TX FIFO threshold interrupt */
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
1244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
1246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the Tx ISR function pointer according to the data word length */
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
1249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxISR = UART_TxISR_16BIT;
1251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxISR = UART_TxISR_8BIT;
1255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
1258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the Transmit Data Register Empty interrupt */
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
1261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_OK;
1264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
1266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_BUSY;
1268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Receive an amount of data in interrupt mode.
1273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         of u16 available through pData.
1276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
1277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccsDPfHf.s 			page 24


1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_ERROR;
1289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_LOCK(huart);
1292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr  = pData;
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferSize  = Size;
1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = Size;
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxISR       = NULL;
1297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Computation of UART mask to apply to RDR register */
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_MASK_COMPUTATION(huart);
1300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Configure Rx interrupt processing*/
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
1309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the Rx ISR function pointer according to the data word length */
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
1312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR = UART_RxISR_16BIT_FIFOEN;
1314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR = UART_RxISR_8BIT_FIFOEN;
1318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
1321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
1325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
1327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the Rx ISR function pointer according to the data word length */
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE
1330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR = UART_RxISR_16BIT;
1332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR = UART_RxISR_8BIT;
1336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
1339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
1342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_OK;
ARM GAS  /tmp/ccsDPfHf.s 			page 25


1345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
1347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_BUSY;
1349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Send an amount of data in DMA mode.
1354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the sent data is handled as a set of u16. In this case, Size must indicate the number
1356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         of u16 provided through pData.
1357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
1358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be sent.
1360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_READY)
1366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_ERROR;
1370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_LOCK(huart);
1373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pTxBuffPtr  = pData;
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferSize  = Size;
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = Size;
1377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
1380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
1385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
1388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the DMA error callback */
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferErrorCallback = UART_DMAError;
1391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the DMA abort callback */
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART transmit DMA channel */
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->
1397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Set error code to DMA */
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
ARM GAS  /tmp/ccsDPfHf.s 			page 26


1402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
1405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         return HAL_ERROR;
1407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear the TC flag in the ICR register */
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
1411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the DMA transfer for transmit request by setting the DMAT bit
1415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     in the UART CR3 register */
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_OK;
1419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
1421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_BUSY;
1423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Receive an amount of data in DMA mode.
1428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When the UART parity is enabled (PCE = 1), the received data contain
1429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the parity bit (MSB position).
1430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When UART parity is not enabled (PCE = 0), and Word Length is configured to 9 bits (M1-
1431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         the received data is handled as a set of u16. In this case, Size must indicate the numb
1432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         of u16 available through pData.
1433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
1434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param pData Pointer to data buffer (u8 or u16 data elements).
1435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Size  Amount of data elements (u8 or u16) to be received.
1436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_READY)
1442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((pData == NULL) || (Size == 0U))
1444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_ERROR;
1446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_LOCK(huart);
1449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr = pData;
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferSize = Size;
1452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
1455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA transfer complete callback */
ARM GAS  /tmp/ccsDPfHf.s 			page 27


1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
1460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Half transfer complete callback */
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
1463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the DMA error callback */
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferErrorCallback = UART_DMAError;
1466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the DMA abort callback */
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the DMA channel */
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuff
1472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Set error code to DMA */
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_DMA;
1475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
1477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Restore huart->gState to ready */
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
1480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         return HAL_ERROR;
1482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UNLOCK(huart);
1485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the UART Parity Error Interrupt */
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the DMA transfer for the receiver request by setting the DMAR bit
1493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     in the UART CR3 register */
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_OK;
1497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
1499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_BUSY;
1501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Pause the DMA Transfer.
1506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
1507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAPause(UART_HandleTypeDef *huart)
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
1515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 28


1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable the UART DMA Tx request */
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
1528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable the UART DMA Rx request */
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Resume the DMA Transfer.
1540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
1541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAResume(UART_HandleTypeDef *huart)
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
1546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
1548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the UART DMA Tx request */
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
1553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear the Overrun flag before resuming the Rx transfer */
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
1556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Reenable PE and ERR (Frame error, noise error, overrun error) interrupts */
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
1560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the UART DMA Rx request */
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
1566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Stop the DMA Transfer.
1572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
ARM GAS  /tmp/ccsDPfHf.s 			page 29


1573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
1578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      to call the HAL UART API under callbacks HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
1579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
1580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
1581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
1582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      the stream and the corresponding call back is executed. */
1583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
1586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
1589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
1590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel */
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
1600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Set error code to DMA */
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
1604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
1605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
1609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
1613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
1614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel */
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
1624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Set error code to DMA */
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
1628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
1629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
ARM GAS  /tmp/ccsDPfHf.s 			page 30


1630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
1633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (blocking mode).
1640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
1641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This procedure performs following operations :
1643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Set handle State to READY
1647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interr
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFN
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
1655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
1672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Set error code to DMA */
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
1676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
1677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
ARM GAS  /tmp/ccsDPfHf.s 			page 31


1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
1697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Set error code to DMA */
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
1701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
1702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Reset Tx and Rx transfer counters */
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Flush the whole TX FIFO (if needed) */
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->FifoMode == UART_FIFOMODE_ENABLE)
1715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
1717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Discard the received data */
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
1727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (blocking mode).
1733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
1734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This procedure performs following operations :
1736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Set handle State to READY
1740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
ARM GAS  /tmp/ccsDPfHf.s 			page 32


1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable TCIE, TXEIE and TXFTIE interrupts */
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
1748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
1762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
1764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
1765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Set error code to DMA */
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
1769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
1770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Reset Tx transfer counter */
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
1776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Flush the whole TX FIFO (if needed) */
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->FifoMode == UART_FIFOMODE_ENABLE)
1779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
1781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
1785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (blocking mode).
1791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
1792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
1793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This procedure performs following operations :
1794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
1795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort (in case of transfer in DMA mode)
1797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Set handle State to READY
1798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure is executed in blocking mode : when exiting function, Abort is considere
1799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
ARM GAS  /tmp/ccsDPfHf.s 			page 33


1801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
1806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Abort callback to Null.
1816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          No call back execution at end of DMA abort procedure */
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
1820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
1822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
1823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Set error code to DMA */
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_DMA;
1825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
1827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
1828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Reset Rx transfer counter */
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
1834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
1837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Discard the received data */
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
1843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Abort ongoing transfers (Interrupt mode).
1849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
1850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing transfer started in Interrupt or 
1851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This procedure performs following operations :
1852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx and Rx)
1853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Set handle State to READY
1856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
1857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
ARM GAS  /tmp/ccsDPfHf.s 			page 34


1858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
1859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
1860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
1861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
1864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable interrupts */
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_TCIE | USART_CR1_RXNEIE_RXFNEIE | USA
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
1868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks sh
1870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      before any call to DMA Abort functions */
1871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DMA Tx Handle is valid */
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
1873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
1875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        Otherwise, set it to NULL */
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
1879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
1881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = NULL;
1883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DMA Rx Handle is valid */
1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
1887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
1889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        Otherwise, set it to NULL */
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
1893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
1895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = NULL;
1897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
1902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable DMA Tx at UART level */
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
1905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
1908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* UART Tx DMA Abort callback has already been initialised :
1910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Abort DMA TX */
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
1914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
ARM GAS  /tmp/ccsDPfHf.s 			page 35


1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback = NULL;
1916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         abortcplt = 0U;
1920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
1926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
1928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
1931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* UART Rx DMA Abort callback has already been initialised :
1933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
1934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Abort DMA RX */
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
1937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback = NULL;
1939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         abortcplt = 1U;
1940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
1942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
1943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         abortcplt = 0U;
1944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
1945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if no DMA abort complete callback execution is required => call user Abort Complete callback *
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (abortcplt == 1U)
1950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
1951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Reset Tx and Rx transfer counters */
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = 0U;
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = 0U;
1954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear ISR function pointers */
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxISR = NULL;
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxISR = NULL;
1958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Reset errorCode */
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->ErrorCode = HAL_UART_ERROR_NONE;
1961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
1964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Flush the whole TX FIFO (if needed) */
1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->FifoMode == UART_FIFOMODE_ENABLE)
1967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
1969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
1970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Discard the received data */
ARM GAS  /tmp/ccsDPfHf.s 			page 36


1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
1973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Restore huart->gState and huart->RxState to Ready */
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState  = HAL_UART_STATE_READY;
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
1977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
1979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
1980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call registered Abort complete callback */
1981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->AbortCpltCallback(huart);
1982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
1983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call legacy weak Abort complete callback */
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_AbortCpltCallback(huart);
1985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
1986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
1987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
1990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
1991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
1992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Abort ongoing Transmit transfer (Interrupt mode).
1993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
1994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Tx transfer started in Interrupt 
1995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This procedure performs following operations :
1996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable UART Interrupts (Tx)
1997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
1998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
1999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Set handle State to READY
2000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortTransmit_IT(UART_HandleTypeDef *huart)
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable interrupts */
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TCIE | USART_CR1_TXEIE_TXFNFIE));
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
2010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Tx request if enabled */
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
2013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
2015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx != NULL)
2018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmatx->XferAbortCallback = UART_DMATxOnlyAbortCallback;
2022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Abort DMA TX */
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
2025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Call Directly huart->hdmatx->XferAbortCallback function in case of error */
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->hdmatx->XferAbortCallback(huart->hdmatx);
2028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
ARM GAS  /tmp/ccsDPfHf.s 			page 37


2029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
2031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Reset Tx transfer counter */
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxXferCount = 0U;
2034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Clear TxISR function pointers */
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxISR = NULL;
2037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Restore huart->gState to Ready */
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
2040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Call registered Abort Transmit Complete Callback */
2044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->AbortTransmitCpltCallback(huart);
2045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Call legacy weak Abort Transmit Complete Callback */
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       HAL_UART_AbortTransmitCpltCallback(huart);
2048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
2052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Reset Tx transfer counter */
2054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = 0U;
2055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear TxISR function pointers */
2057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxISR = NULL;
2058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Flush the whole TX FIFO (if needed) */
2060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->FifoMode == UART_FIFOMODE_ENABLE)
2061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
2063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Restore huart->gState to Ready */
2066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_READY;
2067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call registered Abort Transmit Complete Callback */
2071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->AbortTransmitCpltCallback(huart);
2072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call legacy weak Abort Transmit Complete Callback */
2074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_AbortTransmitCpltCallback(huart);
2075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
2079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Abort ongoing Receive transfer (Interrupt mode).
2083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure could be used for aborting any ongoing Rx transfer started in Interrupt 
2085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         This procedure performs following operations :
ARM GAS  /tmp/ccsDPfHf.s 			page 38


2086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable UART Interrupts (Rx)
2087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Disable the DMA transfer in the peripheral register (if enabled)
2088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Abort DMA transfer by calling HAL_DMA_Abort_IT (in case of transfer in DMA mode)
2089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - Set handle State to READY
2090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *           - At abort completion, call user abort complete callback
2091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
2092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         considered as completed only when user abort complete callback is executed (not when ex
2093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
2096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
2098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
2100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART DMA Rx request if enabled */
2102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
2107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx != NULL)
2108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the UART DMA Abort callback :
2110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****          will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
2111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
2112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Abort DMA RX */
2114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->hdmarx->XferAbortCallback(huart->hdmarx);
2118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
2119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
2121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Reset Rx transfer counter */
2123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxXferCount = 0U;
2124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Clear RxISR function pointer */
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pRxBuffPtr = NULL;
2127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Clear the Error flags in the ICR register */
2129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_F
2130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Discard the received data */
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
2133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Restore huart->RxState to Ready */
2135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
2136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* As no DMA to be aborted, call directly user Abort complete callback */
2138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Call registered Abort Receive Complete Callback */
2140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->AbortReceiveCpltCallback(huart);
2141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Call legacy weak Abort Receive Complete Callback */
ARM GAS  /tmp/ccsDPfHf.s 			page 39


2143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       HAL_UART_AbortReceiveCpltCallback(huart);
2144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
2148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Reset Rx transfer counter */
2150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = 0U;
2151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear RxISR function pointer */
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr = NULL;
2154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear the Error flags in the ICR register */
2156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF
2157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Restore huart->RxState to Ready */
2159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
2160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* As no DMA to be aborted, call directly user Abort complete callback */
2162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call registered Abort Receive Complete Callback */
2164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->AbortReceiveCpltCallback(huart);
2165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call legacy weak Abort Receive Complete Callback */
2167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_AbortReceiveCpltCallback(huart);
2168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
2172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Handle UART interrupt request.
2176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
2177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
2180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
2182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
2183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
2184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t errorflags;
2186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t errorcode;
2187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* If no error occurs */
2189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | 
2190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (errorflags == 0U)
2191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART in mode Receiver ---------------------------------------------------*/
2193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
2194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
2195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             || ((cr3its & USART_CR3_RXFTIE) != 0U)))
2196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (huart->RxISR != NULL)
2198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR(huart);
ARM GAS  /tmp/ccsDPfHf.s 			page 40


2200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
2201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return;
2202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* If some errors occur */
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((errorflags != 0U)
2207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
2208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
2209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART parity error interrupt occurred -------------------------------------*/
2211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
2212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
2214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_PE;
2216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART frame error interrupt occurred --------------------------------------*/
2219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
2222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_FE;
2224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART noise error interrupt occurred --------------------------------------*/
2227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
2228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
2230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_NE;
2232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART Over-Run interrupt occurred -----------------------------------------*/
2235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (((isrflags & USART_ISR_ORE) != 0U)
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
2237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
2238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
2240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_ORE;
2242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART Receiver Timeout interrupt occurred ---------------------------------*/
2245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
2246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
2248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->ErrorCode |= HAL_UART_ERROR_RTO;
2250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call UART Error Call back function if need be ----------------------------*/
2253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->ErrorCode != HAL_UART_ERROR_NONE)
2254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* UART in mode Receiver --------------------------------------------------*/
2256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
ARM GAS  /tmp/ccsDPfHf.s 			page 41


2257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
2258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****               || ((cr3its & USART_CR3_RXFTIE) != 0U)))
2259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (huart->RxISR != NULL)
2261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
2262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->RxISR(huart);
2263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
2265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* If Error is to be considered as blocking :
2267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           - Receiver Timeout error in Reception
2268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           - Overrun error in Reception
2269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           - any error occurs in DMA mode reception
2270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       */
2271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       errorcode = huart->ErrorCode;
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
2273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
2274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Blocking error : transfer is aborted
2276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            Set the UART state ready to be able to start again the process,
2277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
2278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         UART_EndRxTransfer(huart);
2279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the UART DMA Rx request if enabled */
2281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
2282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
2283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
2284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Abort the UART DMA Rx channel */
2286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           if (huart->hdmarx != NULL)
2287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           {
2288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             /* Set the UART DMA Abort callback :
2289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
2290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
2291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             /* Abort DMA RX */
2293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
2294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             {
2295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****               /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
2296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****               huart->hdmarx->XferAbortCallback(huart->hdmarx);
2297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             }
2298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           }
2299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           else
2300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           {
2301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             /* Call user error callback */
2302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             /*Call registered error callback*/
2304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             huart->ErrorCallback(huart);
2305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             /*Call legacy weak error callback*/
2307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             HAL_UART_ErrorCallback(huart);
2308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           }
2311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         else
2313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
ARM GAS  /tmp/ccsDPfHf.s 			page 42


2314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Call user error callback */
2315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /*Call registered error callback*/
2317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCallback(huart);
2318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /*Call legacy weak error callback*/
2320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           HAL_UART_ErrorCallback(huart);
2321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
2324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
2325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Non Blocking error : transfer could go on.
2327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            Error is notified to user through user error callback */
2328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /*Call registered error callback*/
2330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCallback(huart);
2331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /*Call legacy weak error callback*/
2333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_UART_ErrorCallback(huart);
2334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->ErrorCode = HAL_UART_ERROR_NONE;
2336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
2337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
2339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   } /* End if some error occurs */
2341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
2343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
2344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
2346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* UART Rx state is not reset as a reception process might be ongoing.
2348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        If UART handle state fields need to be reset to READY, this could be done in Wakeup callback
2349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call registered Wakeup Callback */
2352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->WakeupCallback(huart);
2353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call legacy weak Wakeup Callback */
2355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UARTEx_WakeupCallback(huart);
2356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
2358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* UART in mode Transmitter ------------------------------------------------*/
2361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
2362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
2363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           || ((cr3its & USART_CR3_TXFTIE) != 0U)))
2364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->TxISR != NULL)
2366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxISR(huart);
2368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
2370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccsDPfHf.s 			page 43


2371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* UART in mode Transmitter (transmission end) -----------------------------*/
2373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
2374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndTransmit_IT(huart);
2376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
2377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* UART TX Fifo Empty occurred ----------------------------------------------*/
2380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
2381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call registered Tx Fifo Empty Callback */
2384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxFifoEmptyCallback(huart);
2385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call legacy weak Tx Fifo Empty Callback */
2387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UARTEx_TxFifoEmptyCallback(huart);
2388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
2390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* UART RX Fifo Full occurred ----------------------------------------------*/
2393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
2394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call registered Rx Fifo Full Callback */
2397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxFifoFullCallback(huart);
2398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
2399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Call legacy weak Rx Fifo Full Callback */
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UARTEx_RxFifoFullCallback(huart);
2401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
2403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Tx Transfer completed callback.
2408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
2409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
2412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_TxCpltCallback can be implemented in the user file.
2418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Tx Half Transfer completed callback.
2423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
2427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
ARM GAS  /tmp/ccsDPfHf.s 			page 44


2428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
2433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Rx Transfer completed callback.
2438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
2442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_RxCpltCallback can be implemented in the user file.
2448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Rx Half Transfer completed callback.
2453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
2457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE: This function should not be modified, when the callback is needed,
2462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
2463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  UART error callback.
2468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
2472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_ErrorCallback can be implemented in the user file.
2478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
ARM GAS  /tmp/ccsDPfHf.s 			page 45


2485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
2487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_AbortCpltCallback can be implemented in the user file.
2493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  UART Abort Complete callback.
2498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
2502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
2508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  UART Abort Receive Complete callback.
2513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** __weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
2517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
2519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UNUSED(huart);
2520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* NOTE : This function should not be modified, when the callback is needed,
2522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
2523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****    */
2524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
2528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group3 Peripheral Control functions
2531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  @brief   UART control functions
2532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
2533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @verbatim
2534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
2535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                       ##### Peripheral Control functions #####
2536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****  ===============================================================================
2537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
2538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     This subsection provides a set of functions allowing to control the UART.
2539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_UART_ReceiverTimeout_Config() API allows to configure the receiver timeout value on th
2540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_UART_EnableReceiverTimeout() API enables the receiver timeout feature
2541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_UART_DisableReceiverTimeout() API disables the receiver timeout feature
ARM GAS  /tmp/ccsDPfHf.s 			page 46


2542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnableMuteMode() API enables mute mode
2543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_MultiProcessor_DisableMuteMode() API disables mute mode
2544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_MultiProcessor_EnterMuteMode() API enters mute mode
2545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) UART_SetConfig() API configures the UART peripheral
2546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) UART_AdvFeatureConfig() API optionally configures the UART advanced features
2547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) UART_CheckIdleState() API ensures that TEACK and/or REACK are set after initialization
2548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableTransmitter() API disables receiver and enables transmitter
2549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_HalfDuplex_EnableReceiver() API disables transmitter and enables receiver
2550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****      (+) HAL_LIN_SendBreak() API transmits the break characters
2551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @endverbatim
2552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
2553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Update on the fly the receiver timeout value in RTOR register.
2557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
2560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *                     value must be less or equal to 0x0FFFFFFFF.
2561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
2564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(IS_LPUART_INSTANCE(huart->Instance)))
2566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
2568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
2569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Enable the UART receiver timeout feature.
2574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
2579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(IS_LPUART_INSTANCE(huart->Instance)))
2581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->gState == HAL_UART_STATE_READY)
2583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Process Locked */
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_LOCK(huart);
2586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_BUSY;
2588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Set the USART RTOEN bit */
2590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
2591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
2593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Process Unlocked */
2595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
2596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_OK;
2598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccsDPfHf.s 			page 47


2599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
2600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_BUSY;
2602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
2605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
2607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Disable the UART receiver timeout feature.
2612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *                    the configuration information for the specified UART module.
2614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_UART_DisableReceiverTimeout(UART_HandleTypeDef *huart)
2617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(IS_LPUART_INSTANCE(huart->Instance)))
2619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->gState == HAL_UART_STATE_READY)
2621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Process Locked */
2623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_LOCK(huart);
2624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_BUSY;
2626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Clear the USART RTOEN bit */
2628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
2629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->gState = HAL_UART_STATE_READY;
2631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Process Unlocked */
2633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       __HAL_UNLOCK(huart);
2634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_OK;
2636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
2638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_BUSY;
2640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
2643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return HAL_ERROR;
2645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Enable UART in mute mode (does not mean UART enters mute mode;
2650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         to enter mute mode, HAL_MultiProcessor_EnterMuteMode() API must be called).
2651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_EnableMuteMode(UART_HandleTypeDef *huart)
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
ARM GAS  /tmp/ccsDPfHf.s 			page 48


2656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
2657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Enable USART mute mode by setting the MME bit in the CR1 register */
2661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_MME);
2662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Disable UART mute mode (does not mean the UART actually exits mute mode
2670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         as it may not have been in mute mode at this very moment).
2671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_MultiProcessor_DisableMuteMode(UART_HandleTypeDef *huart)
2675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
2677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable USART mute mode by clearing the MME bit in the CR1 register */
2681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_MME);
2682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (UART_CheckIdleState(huart));
2686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Enter UART mute mode (means UART actually enters mute mode).
2690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note  To exit from mute mode, HAL_MultiProcessor_DisableMuteMode() API must be called.
2691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
2692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
2693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** void HAL_MultiProcessor_EnterMuteMode(UART_HandleTypeDef *huart)
2695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
2697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Enable the UART transmitter and disable the UART receiver.
2701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableTransmitter(UART_HandleTypeDef *huart)
2705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
2707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear TE and RE bits */
2710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Enable the USART's transmit interface by setting the TE bit in the USART CR1 register */
ARM GAS  /tmp/ccsDPfHf.s 			page 49


2713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_TE);
2714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
2720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Enable the UART receiver and disable the UART transmitter.
2724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status.
2726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_HalfDuplex_EnableReceiver(UART_HandleTypeDef *huart)
2728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
2730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear TE and RE bits */
2733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
2734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Enable the USART's receive interface by setting the RE bit in the USART CR1 register */
2736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   SET_BIT(huart->Instance->CR1, USART_CR1_RE);
2737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
2743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Transmit break characters.
2748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef HAL_LIN_SendBreak(UART_HandleTypeDef *huart)
2752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the parameters */
2754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_LIN_INSTANCE(huart->Instance));
2755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
2757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
2759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Send break characters */
2761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_SENDBREAK_REQUEST);
2762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
2764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
2766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
2768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 50


2770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
2772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Exported_Functions_Group4 Peripheral State and Error functions
2775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  @brief   UART Peripheral State functions
2776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *
2777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @verbatim
2778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   ==============================================================================
2779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             ##### Peripheral State and Error functions #####
2780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   ==============================================================================
2781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     [..]
2782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     This subsection provides functions allowing to :
2783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (+) Return the UART handle state.
2784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (+) Return the UART handle error code
2785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** @endverbatim
2787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
2788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Return the UART handle state.
2792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL state
2795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
2797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t temp1;
2799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t temp2;
2800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   temp1 = huart->gState;
2801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   temp2 = huart->RxState;
2802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return (HAL_UART_StateTypeDef)(temp1 | temp2);
2804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Return the UART handle error code.
2808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart Pointer to a UART_HandleTypeDef structure that contains
2809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *               the configuration information for the specified UART.
2810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval UART Error Code
2811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
2813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return huart->ErrorCode;
2815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
2818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @}
2822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /** @defgroup UART_Private_Functions UART Private Functions
2825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @{
2826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
ARM GAS  /tmp/ccsDPfHf.s 			page 51


2827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Initialize the callbacks to their default values.
2830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
2831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval none
2832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
2834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
2835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Init the UART Callback settings */
2837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltC
2838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallb
2839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltC
2840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallb
2841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallba
2842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCa
2843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransm
2844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiv
2845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallb
2846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullC
2847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmpty
2848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
2850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
2851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
2853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Configure the UART peripheral.
2854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
2855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
2856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
2857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
2858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
2859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t tmpreg;
2860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t brrtemp;
2861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_ClockSourceTypeDef clocksource;
2862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t usartdiv;
2863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_StatusTypeDef ret               = HAL_OK;
2864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t lpuart_ker_ck_pres;
2865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   PLL2_ClocksTypeDef pll2_clocks;
2866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   PLL3_ClocksTypeDef pll3_clocks;
2867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t pclk;
2868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the parameters */
2870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
2871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
2872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (UART_INSTANCE_LOWPOWER(huart))
2873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
2875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
2877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
2879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
2880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_PARITY(huart->Init.Parity));
2883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_MODE(huart->Init.Mode));
ARM GAS  /tmp/ccsDPfHf.s 			page 52


2884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
2885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
2886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
2887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*-------------------------- USART CR1 Configuration -----------------------*/
2889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear M, PCE, PS, TE, RE and OVER8 bits and configure
2890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  the UART Word Length, Parity, Mode and oversampling:
2891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  set the M bits according to huart->Init.WordLength value
2892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  set PCE and PS bits according to huart->Init.Parity value
2893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  set TE and RE bits according to huart->Init.Mode value
2894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *  set OVER8 bit according to huart->Init.OverSampling value */
2895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.O
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->FifoMode;
2897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
2898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*-------------------------- USART CR2 Configuration -----------------------*/
2900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Configure the UART Stop Bits: Set STOP[13:12] bits according
2901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * to huart->Init.StopBits value */
2902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
2903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*-------------------------- USART CR3 Configuration -----------------------*/
2905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Configure
2906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * - UART HardWare Flow Control: set CTSE and RTSE bits according
2907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *   to huart->Init.HwFlowCtl value
2908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * - one-bit sampling method versus three samples' majority rule according
2909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *   to huart->Init.OneBitSampling (not applicable to LPUART) */
2910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   tmpreg = (uint32_t)huart->Init.HwFlowCtl;
2911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(UART_INSTANCE_LOWPOWER(huart)))
2913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     tmpreg |= huart->Init.OneBitSampling;
2915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
2917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*-------------------------- USART PRESC Configuration -----------------------*/
2919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Configure
2920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
2921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
2922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*-------------------------- USART BRR Configuration -----------------------*/
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_GETCLOCKSOURCE(huart, clocksource);
2925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check LPUART instance */
2927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (UART_INSTANCE_LOWPOWER(huart))
2928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Retrieve frequency clock */
2930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (clocksource)
2931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_D3PCLK1:
2933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = HAL_RCCEx_GetD3PCLK1Freq();
2934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL2:
2936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
2937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll2_clocks.PLL2_Q_Frequency;
2938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL3:
2940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
ARM GAS  /tmp/ccsDPfHf.s 			page 53


2941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll3_clocks.PLL3_Q_Frequency;
2942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
2944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
2945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
2946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
2947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         else
2949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
2950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           pclk = (uint32_t) HSI_VALUE;
2951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_CSI:
2954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = (uint32_t) CSI_VALUE;
2955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
2957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
2958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default:
2960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = 0U;
2961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         ret = HAL_ERROR;
2962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
2963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
2964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* If proper clock source reported */
2966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (pclk != 0U)
2967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
2968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Compute clock after Prescaler */
2969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
2970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
2971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
2972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
2973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
2974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         ret = HAL_ERROR;
2976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
2977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
2978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
2979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Check computed UsartDiv value is in allocated range
2980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
2981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.Clo
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
2983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
2984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->Instance->BRR = usartdiv;
2985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         else
2987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
2988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           ret = HAL_ERROR;
2989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
2990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 *
2991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     } /* if (pclk != 0) */
2992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
2993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check UART Over Sampling to set Baud Rate Register */
2994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
2995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
2996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (clocksource)
2997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccsDPfHf.s 			page 54


2998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_D2PCLK1:
2999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
3000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_D2PCLK2:
3002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
3003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL2:
3005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
3006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll2_clocks.PLL2_Q_Frequency;
3007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL3:
3009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
3010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll3_clocks.PLL3_Q_Frequency;
3011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
3013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
3014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
3015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
3016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
3017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         else
3018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
3019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           pclk = (uint32_t) HSI_VALUE;
3020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
3021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_CSI:
3023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = (uint32_t) CSI_VALUE;
3024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
3027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default:
3029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = 0U;
3030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         ret = HAL_ERROR;
3031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* USARTDIV must be greater than or equal to 0d16 */
3035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (pclk != 0U)
3036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescal
3038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
3041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
3042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->BRR = brrtemp;
3043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
3045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         ret = HAL_ERROR;
3047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
3051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     switch (clocksource)
3053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_D2PCLK1:
ARM GAS  /tmp/ccsDPfHf.s 			page 55


3055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK1Freq();
3056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_D2PCLK2:
3058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = HAL_RCC_GetPCLK2Freq();
3059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL2:
3061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
3062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll2_clocks.PLL2_Q_Frequency;
3063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL3:
3065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
3066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll3_clocks.PLL3_Q_Frequency;
3067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
3069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
3070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
3071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
3072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
3073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         else
3074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
3075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           pclk = (uint32_t) HSI_VALUE;
3076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
3077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_CSI:
3079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = (uint32_t) CSI_VALUE;
3080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3081:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_LSE:
3082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = (uint32_t) LSE_VALUE;
3083:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3084:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       default:
3085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = 0U;
3086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         ret = HAL_ERROR;
3087:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
3088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3089:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (pclk != 0U)
3091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3092:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* USARTDIV must be greater than or equal to 0d16 */
3093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPresca
3094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
3095:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->BRR = usartdiv;
3097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
3099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         ret = HAL_ERROR;
3101:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Initialize the number of data to process during RX/TX ISR execution */
3106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->NbTxDataToProcess = 1;
3107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->NbRxDataToProcess = 1;
3108:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3109:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear ISR function pointers */
3110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxISR = NULL;
3111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxISR = NULL;
ARM GAS  /tmp/ccsDPfHf.s 			page 56


3112:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3113:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return ret;
3114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3115:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3116:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Configure the UART peripheral advanced features.
3118:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3119:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3120:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3121:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
3122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
3124:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
3125:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure TX pin active level inversion */
3127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3128:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
3130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
3131:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3133:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure RX pin active level inversion */
3134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
3135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3136:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
3137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
3138:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure data inversion */
3141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
3142:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
3145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3147:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure RX/TX pins swap */
3148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
3149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3152:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3154:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure RX overrun detection disabling */
3155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
3156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3157:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
3158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
3159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3160:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure DMA disabling on reception error */
3162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
3163:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
3165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
3166:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3168:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure auto Baud rate detection scheme */
ARM GAS  /tmp/ccsDPfHf.s 			page 57


3169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
3170:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
3173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
3174:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
3175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
3176:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3177:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
3178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
3179:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* if required, configure MSB first on communication line */
3183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
3184:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3185:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
3186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
3187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3191:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief Check the UART Idle State.
3192:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
3194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
3196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t tickstart;
3198:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Initialize the UART ErrorCode */
3200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3201:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3202:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Init tickstart for timeout managment*/
3203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   tickstart = HAL_GetTick();
3204:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3205:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check if the Transmitter is enabled */
3206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
3207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Wait until TEACK flag is set */
3209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
3210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Timeout occurred */
3212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_TIMEOUT;
3213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3216:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check if the Receiver is enabled */
3217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
3218:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Wait until REACK flag is set */
3220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALU
3221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Timeout occurred */
3223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return HAL_TIMEOUT;
3224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccsDPfHf.s 			page 58


3226:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Initialize the UART State */
3228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
3229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3230:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UNLOCK(huart);
3232:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
3234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Handle UART Communication Timeout.
3238:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart     UART handle.
3239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Flag      Specifies the UART flag to check
3240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Status    Flag status (SET or RESET)
3241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Tickstart Tick start value
3242:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param Timeout   Timeout duration
3243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval HAL status
3244:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus 
3246:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****                                               uint32_t Tickstart, uint32_t Timeout)
3247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Wait until flag is set */
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
3250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3251:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Check for the Timeout */
3252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (Timeout != HAL_MAX_DELAY)
3253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3255:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for t
3257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEI
3258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3259:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->gState = HAL_UART_STATE_READY;
3261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
3262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         __HAL_UNLOCK(huart);
3264:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         return HAL_TIMEOUT;
3266:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
3269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
3271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
3272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Clear Receiver Timeout flag*/
3273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
3274:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3275:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for
3276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TX
3277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->gState = HAL_UART_STATE_READY;
3280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
3281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
3282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 59


3283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           /* Process Unlocked */
3284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           __HAL_UNLOCK(huart);
3285:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           return HAL_TIMEOUT;
3287:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
3288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3289:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return HAL_OK;
3292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit compl
3297:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
3298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
3301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
  26              		.loc 1 3301 0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 0
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30              		@ link register save eliminated.
  31              	.LVL0:
3302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable TXEIE, TCIE, TXFT interrupts */
3303:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  32              		.loc 1 3303 0
  33 0000 0268     		ldr	r2, [r0]
  34 0002 1368     		ldr	r3, [r2]
  35 0004 23F0C003 		bic	r3, r3, #192
  36 0008 1360     		str	r3, [r2]
3304:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
  37              		.loc 1 3304 0
  38 000a 0268     		ldr	r2, [r0]
  39 000c 9368     		ldr	r3, [r2, #8]
  40 000e 23F40003 		bic	r3, r3, #8388608
  41 0012 9360     		str	r3, [r2, #8]
3305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3306:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* At end of Tx process, restore huart->gState to Ready */
3307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
  42              		.loc 1 3307 0
  43 0014 2023     		movs	r3, #32
  44 0016 C0F88030 		str	r3, [r0, #128]
3308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
  45              		.loc 1 3308 0
  46 001a 7047     		bx	lr
  47              		.cfi_endproc
  48              	.LFE389:
  50              		.section	.text.UART_EndRxTransfer,"ax",%progbits
  51              		.align	1
  52              		.syntax unified
  53              		.thumb
  54              		.thumb_func
  55              		.fpu fpv5-d16
  57              	UART_EndRxTransfer:
  58              	.LFB390:
ARM GAS  /tmp/ccsDPfHf.s 			page 60


3309:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3310:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3312:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception comp
3313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart UART handle.
3314:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3315:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
3317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
  59              		.loc 1 3317 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  64              	.LVL1:
3318:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
3319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  65              		.loc 1 3319 0
  66 0000 0268     		ldr	r2, [r0]
  67 0002 1368     		ldr	r3, [r2]
  68 0004 23F49073 		bic	r3, r3, #288
  69 0008 1360     		str	r3, [r2]
3320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
  70              		.loc 1 3320 0
  71 000a 0268     		ldr	r2, [r0]
  72 000c 9168     		ldr	r1, [r2, #8]
  73 000e 044B     		ldr	r3, .L3
  74 0010 0B40     		ands	r3, r3, r1
  75 0012 9360     		str	r3, [r2, #8]
3321:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3322:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* At end of Rx process, restore huart->RxState to Ready */
3323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
  76              		.loc 1 3323 0
  77 0014 2023     		movs	r3, #32
  78 0016 C0F88430 		str	r3, [r0, #132]
3324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3325:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Reset RxIsr function pointer */
3326:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxISR = NULL;
  79              		.loc 1 3326 0
  80 001a 0023     		movs	r3, #0
  81 001c C366     		str	r3, [r0, #108]
3327:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
  82              		.loc 1 3327 0
  83 001e 7047     		bx	lr
  84              	.L4:
  85              		.align	2
  86              	.L3:
  87 0020 FEFFFFEF 		.word	-268435458
  88              		.cfi_endproc
  89              	.LFE390:
  91              		.section	.text.UART_TxISR_8BIT,"ax",%progbits
  92              		.align	1
  93              		.syntax unified
  94              		.thumb
  95              		.thumb_func
  96              		.fpu fpv5-d16
  98              	UART_TxISR_8BIT:
ARM GAS  /tmp/ccsDPfHf.s 			page 61


  99              	.LFB401:
3328:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3330:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DMA UART transmit process complete callback.
3332:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param hdma DMA handle.
3333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3334:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
3336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DMA Normal mode */
3340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable the DMA transfer for transmit request by resetting the DMAT bit
3345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        in the UART CR3 register */
3346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
3347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Enable the UART Transmit Complete Interrupt */
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3351:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DMA Circular mode */
3352:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
3353:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3354:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /*Call registered Tx complete callback*/
3356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxCpltCallback(huart);
3357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /*Call legacy weak Tx complete callback*/
3359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     HAL_UART_TxCpltCallback(huart);
3360:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3364:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DMA UART transmit process half complete callback.
3366:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param hdma DMA handle.
3367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3368:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
3370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call registered Tx Half complete callback*/
3375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxHalfCpltCallback(huart);
3376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3377:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call legacy weak Tx Half complete callback*/
3378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_TxHalfCpltCallback(huart);
3379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3382:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3383:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DMA UART receive process complete callback.
ARM GAS  /tmp/ccsDPfHf.s 			page 62


3384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param hdma DMA handle.
3385:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3386:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
3388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3391:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* DMA Normal mode */
3392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (hdma->Init.Mode != DMA_CIRCULAR)
3393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3395:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
3397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
3398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
3401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****        in the UART CR3 register */
3402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
3403:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* At end of Rx process, restore huart->RxState to Ready */
3405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
3406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3408:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3409:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call registered Rx complete callback*/
3410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxCpltCallback(huart);
3411:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call legacy weak Rx complete callback*/
3413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_RxCpltCallback(huart);
3414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3417:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DMA UART receive process half complete callback.
3419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param hdma DMA handle.
3420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
3423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3425:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call registered Rx Half complete callback*/
3428:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxHalfCpltCallback(huart);
3429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call legacy weak Rx Half complete callback*/
3431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_RxHalfCpltCallback(huart);
3432:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3435:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3436:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief DMA UART communication error callback.
3437:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param hdma DMA handle.
3438:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3440:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMAError(DMA_HandleTypeDef *hdma)
ARM GAS  /tmp/ccsDPfHf.s 			page 63


3441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
3445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
3446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3447:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Stop UART DMA Tx request if ongoing */
3448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
3449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
3450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = 0U;
3452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
3453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3455:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Stop UART DMA Rx request if ongoing */
3456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
3457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
3458:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = 0U;
3460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
3461:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCode |= HAL_UART_ERROR_DMA;
3464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3466:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call registered error callback*/
3467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3469:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3473:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3475:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  DMA UART communication abort callback, when initiated by HAL services on Error
3476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         (To be called at end of DMA Abort procedure following error occurrence).
3477:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  hdma DMA handle.
3478:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3480:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
3481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3485:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3486:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call registered error callback*/
3488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCallback(huart);
3489:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call legacy weak error callback*/
3491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_ErrorCallback(huart);
3492:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3495:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user
3497:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         (To be called at end of DMA Tx Abort procedure following user abort request).
ARM GAS  /tmp/ccsDPfHf.s 			page 64


3498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3499:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         Abort still ongoing for Rx DMA Handle.
3500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  hdma DMA handle.
3501:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3503:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
3504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->hdmatx->XferAbortCallback = NULL;
3508:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->hdmarx != NULL)
3511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmarx->XferAbortCallback != NULL)
3513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return;
3515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3521:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Reset errorCode */
3523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3525:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3528:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Flush the whole TX FIFO (if needed) */
3529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->FifoMode == UART_FIFOMODE_ENABLE)
3530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
3532:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3534:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3537:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3538:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call user Abort complete callback */
3539:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3540:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3542:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3548:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3549:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user
3551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         (To be called at end of DMA Rx Abort procedure following user abort request).
3552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   When this callback is executed, User Abort complete call back is called only if no
3553:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         Abort still ongoing for Tx DMA Handle.
3554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  hdma DMA handle.
ARM GAS  /tmp/ccsDPfHf.s 			page 65


3555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3556:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3557:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
3558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3560:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->hdmarx->XferAbortCallback = NULL;
3562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3563:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check if an Abort process is still ongoing */
3564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->hdmatx != NULL)
3565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->hdmatx->XferAbortCallback != NULL)
3567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       return;
3569:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3571:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callba
3573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3575:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Reset errorCode */
3577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->ErrorCode = HAL_UART_ERROR_NONE;
3578:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3581:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Discard the received data */
3583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->gState and huart->RxState to Ready */
3586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState  = HAL_UART_STATE_READY;
3587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3589:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call user Abort complete callback */
3590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call registered Abort complete callback */
3592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortCpltCallback(huart);
3593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call legacy weak Abort complete callback */
3595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_AbortCpltCallback(huart);
3596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3599:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  DMA UART Tx communication abort callback, when initiated by user by a call to
3602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         HAL_UART_AbortTransmit_IT API (Abort only Tx transfer)
3603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Tx Abort procedure following user abort reques
3604:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         and leads to user Tx Abort Complete callback execution).
3605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  hdma DMA handle.
3606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3607:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMATxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
3611:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 66


3612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
3613:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3614:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Flush the whole TX FIFO (if needed) */
3615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->FifoMode == UART_FIFOMODE_ENABLE)
3616:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
3618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->gState to Ready */
3621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
3622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call user Abort complete callback */
3624:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call registered Abort Transmit Complete Callback */
3626:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortTransmitCpltCallback(huart);
3627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call legacy weak Abort Transmit Complete Callback */
3629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_AbortTransmitCpltCallback(huart);
3630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3634:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  DMA UART Rx communication abort callback, when initiated by user by a call to
3635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         HAL_UART_AbortReceive_IT API (Abort only Rx transfer)
3636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         (This callback is executed at end of DMA Rx Abort procedure following user abort reques
3637:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         and leads to user Rx Abort Complete callback execution).
3638:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  hdma DMA handle.
3639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3640:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3641:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
3642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
3643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
3644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
3646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Clear the Error flags in the ICR register */
3648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
3649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3650:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Discard the received data */
3651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
3652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Restore huart->RxState to Ready */
3654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
3655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call user Abort complete callback */
3657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call registered Abort Receive Complete Callback */
3659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->AbortReceiveCpltCallback(huart);
3660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Call legacy weak Abort Receive Complete Callback */
3662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_AbortReceiveCpltCallback(huart);
3663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
3665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief TX interrrupt handler for 7 or 8 bits data word length .
3668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
ARM GAS  /tmp/ccsDPfHf.s 			page 67


3669:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3671:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3672:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
3674:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 100              		.loc 1 3674 0
 101              		.cfi_startproc
 102              		@ args = 0, pretend = 0, frame = 0
 103              		@ frame_needed = 0, uses_anonymous_args = 0
 104              		@ link register save eliminated.
 105              	.LVL2:
3675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 106              		.loc 1 3676 0
 107 0000 D0F88030 		ldr	r3, [r0, #128]
 108 0004 212B     		cmp	r3, #33
 109 0006 00D0     		beq	.L8
 110              	.L5:
3677:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
3679:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3680:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
3682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
3687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
3689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pTxBuffPtr++;
3690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxXferCount--;
3691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3692:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 111              		.loc 1 3693 0
 112 0008 7047     		bx	lr
 113              	.L8:
3678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 114              		.loc 1 3678 0
 115 000a B0F85630 		ldrh	r3, [r0, #86]
 116 000e 9BB2     		uxth	r3, r3
 117 0010 6BB1     		cbz	r3, .L9
3688:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pTxBuffPtr++;
 118              		.loc 1 3688 0
 119 0012 036D     		ldr	r3, [r0, #80]
 120 0014 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 121 0016 0368     		ldr	r3, [r0]
 122 0018 9A62     		str	r2, [r3, #40]
3689:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxXferCount--;
 123              		.loc 1 3689 0
 124 001a 036D     		ldr	r3, [r0, #80]
 125 001c 0133     		adds	r3, r3, #1
 126 001e 0365     		str	r3, [r0, #80]
3690:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 127              		.loc 1 3690 0
ARM GAS  /tmp/ccsDPfHf.s 			page 68


 128 0020 B0F85630 		ldrh	r3, [r0, #86]
 129 0024 013B     		subs	r3, r3, #1
 130 0026 9BB2     		uxth	r3, r3
 131 0028 A0F85630 		strh	r3, [r0, #86]	@ movhi
 132              		.loc 1 3693 0
 133 002c ECE7     		b	.L5
 134              	.L9:
3681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 135              		.loc 1 3681 0
 136 002e 0268     		ldr	r2, [r0]
 137 0030 1368     		ldr	r3, [r2]
 138 0032 23F08003 		bic	r3, r3, #128
 139 0036 1360     		str	r3, [r2]
3684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 140              		.loc 1 3684 0
 141 0038 0268     		ldr	r2, [r0]
 142 003a 1368     		ldr	r3, [r2]
 143 003c 43F04003 		orr	r3, r3, #64
 144 0040 1360     		str	r3, [r2]
 145 0042 7047     		bx	lr
 146              		.cfi_endproc
 147              	.LFE401:
 149              		.section	.text.UART_TxISR_16BIT,"ax",%progbits
 150              		.align	1
 151              		.syntax unified
 152              		.thumb
 153              		.thumb_func
 154              		.fpu fpv5-d16
 156              	UART_TxISR_16BIT:
 157              	.LFB402:
3694:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief TX interrrupt handler for 9 bits data word length.
3697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3699:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3701:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3702:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
3703:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 158              		.loc 1 3703 0
 159              		.cfi_startproc
 160              		@ args = 0, pretend = 0, frame = 0
 161              		@ frame_needed = 0, uses_anonymous_args = 0
 162              		@ link register save eliminated.
 163              	.LVL3:
3704:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t *tmp;
3705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 164              		.loc 1 3707 0
 165 0000 D0F88030 		ldr	r3, [r0, #128]
 166 0004 212B     		cmp	r3, #33
 167 0006 00D0     		beq	.L13
 168              	.L10:
3708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->TxXferCount == 0U)
ARM GAS  /tmp/ccsDPfHf.s 			page 69


3710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART Transmit Data Register Empty Interrupt */
3712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
3713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART Transmit Complete Interrupt */
3715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     else
3718:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       tmp = (uint16_t *) huart->pTxBuffPtr;
3720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
3721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
3722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxXferCount--;
3723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3725:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 169              		.loc 1 3725 0
 170 0008 7047     		bx	lr
 171              	.L13:
3709:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 172              		.loc 1 3709 0
 173 000a B0F85630 		ldrh	r3, [r0, #86]
 174 000e 9BB2     		uxth	r3, r3
 175 0010 7BB1     		cbz	r3, .L14
3719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 176              		.loc 1 3719 0
 177 0012 036D     		ldr	r3, [r0, #80]
 178              	.LVL4:
3720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pTxBuffPtr += 2U;
 179              		.loc 1 3720 0
 180 0014 1B88     		ldrh	r3, [r3]
 181              	.LVL5:
 182 0016 0268     		ldr	r2, [r0]
 183 0018 C3F30803 		ubfx	r3, r3, #0, #9
 184 001c 9362     		str	r3, [r2, #40]
 185              	.LVL6:
3721:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->TxXferCount--;
 186              		.loc 1 3721 0
 187 001e 036D     		ldr	r3, [r0, #80]
 188 0020 0233     		adds	r3, r3, #2
 189 0022 0365     		str	r3, [r0, #80]
3722:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 190              		.loc 1 3722 0
 191 0024 B0F85630 		ldrh	r3, [r0, #86]
 192 0028 013B     		subs	r3, r3, #1
 193 002a 9BB2     		uxth	r3, r3
 194 002c A0F85630 		strh	r3, [r0, #86]	@ movhi
 195              		.loc 1 3725 0
 196 0030 EAE7     		b	.L10
 197              	.L14:
3712:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 198              		.loc 1 3712 0
 199 0032 0268     		ldr	r2, [r0]
 200 0034 1368     		ldr	r3, [r2]
 201 0036 23F08003 		bic	r3, r3, #128
 202 003a 1360     		str	r3, [r2]
3715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccsDPfHf.s 			page 70


 203              		.loc 1 3715 0
 204 003c 0268     		ldr	r2, [r0]
 205 003e 1368     		ldr	r3, [r2]
 206 0040 43F04003 		orr	r3, r3, #64
 207 0044 1360     		str	r3, [r2]
 208 0046 7047     		bx	lr
 209              		.cfi_endproc
 210              	.LFE402:
 212              		.section	.text.UART_TxISR_8BIT_FIFOEN,"ax",%progbits
 213              		.align	1
 214              		.syntax unified
 215              		.thumb
 216              		.thumb_func
 217              		.fpu fpv5-d16
 219              	UART_TxISR_8BIT_FIFOEN:
 220              	.LFB403:
3726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3727:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief TX interrrupt handler for 7 or 8 bits data word length and FIFO mode is enabled.
3729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3731:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3732:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3734:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
3735:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 221              		.loc 1 3735 0
 222              		.cfi_startproc
 223              		@ args = 0, pretend = 0, frame = 0
 224              		@ frame_needed = 0, uses_anonymous_args = 0
 225              		@ link register save eliminated.
 226              	.LVL7:
3736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  nb_tx_data;
3737:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3739:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 227              		.loc 1 3739 0
 228 0000 D0F88030 		ldr	r3, [r0, #128]
 229 0004 212B     		cmp	r3, #33
 230 0006 00D0     		beq	.L21
 231              	.L15:
3740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
3742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (huart->TxXferCount == 0U)
3744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3745:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the TX FIFO threshold interrupt */
3746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
3747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3748:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Enable the UART Transmit Complete Interrupt */
3749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break; /* force exit loop */
3752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
3754:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
ARM GAS  /tmp/ccsDPfHf.s 			page 71


3756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->pTxBuffPtr++;
3757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxXferCount--;
3758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
3760:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Nothing to do */
3762:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3764:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 232              		.loc 1 3765 0
 233 0008 7047     		bx	lr
 234              	.L21:
3741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 235              		.loc 1 3741 0
 236 000a B0F86A30 		ldrh	r3, [r0, #106]
 237              	.LVL8:
 238 000e 0CE0     		b	.L17
 239              	.L22:
3746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 240              		.loc 1 3746 0
 241 0010 0268     		ldr	r2, [r0]
 242 0012 9368     		ldr	r3, [r2, #8]
 243              	.LVL9:
 244 0014 23F40003 		bic	r3, r3, #8388608
 245 0018 9360     		str	r3, [r2, #8]
3749:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 246              		.loc 1 3749 0
 247 001a 0268     		ldr	r2, [r0]
 248 001c 1368     		ldr	r3, [r2]
 249 001e 43F04003 		orr	r3, r3, #64
 250 0022 1360     		str	r3, [r2]
3751:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 251              		.loc 1 3751 0
 252 0024 7047     		bx	lr
 253              	.LVL10:
 254              	.L19:
3741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 255              		.loc 1 3741 0 discriminator 2
 256 0026 013B     		subs	r3, r3, #1
 257              	.LVL11:
 258 0028 9BB2     		uxth	r3, r3
 259              	.LVL12:
 260              	.L17:
3741:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 261              		.loc 1 3741 0 is_stmt 0 discriminator 1
 262 002a 002B     		cmp	r3, #0
 263 002c ECD0     		beq	.L15
3743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 264              		.loc 1 3743 0 is_stmt 1
 265 002e B0F85620 		ldrh	r2, [r0, #86]
 266 0032 92B2     		uxth	r2, r2
 267 0034 002A     		cmp	r2, #0
 268 0036 EBD0     		beq	.L22
3753:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 269              		.loc 1 3753 0
 270 0038 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccsDPfHf.s 			page 72


 271 003a D169     		ldr	r1, [r2, #28]
 272 003c 11F0800F 		tst	r1, #128
 273 0040 F1D0     		beq	.L19
3755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->pTxBuffPtr++;
 274              		.loc 1 3755 0
 275 0042 016D     		ldr	r1, [r0, #80]
 276 0044 0978     		ldrb	r1, [r1]	@ zero_extendqisi2
 277 0046 9162     		str	r1, [r2, #40]
3756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxXferCount--;
 278              		.loc 1 3756 0
 279 0048 026D     		ldr	r2, [r0, #80]
 280 004a 0132     		adds	r2, r2, #1
 281 004c 0265     		str	r2, [r0, #80]
3757:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 282              		.loc 1 3757 0
 283 004e B0F85620 		ldrh	r2, [r0, #86]
 284 0052 013A     		subs	r2, r2, #1
 285 0054 92B2     		uxth	r2, r2
 286 0056 A0F85620 		strh	r2, [r0, #86]	@ movhi
 287 005a E4E7     		b	.L19
 288              		.cfi_endproc
 289              	.LFE403:
 291              		.section	.text.UART_TxISR_16BIT_FIFOEN,"ax",%progbits
 292              		.align	1
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu fpv5-d16
 298              	UART_TxISR_16BIT_FIFOEN:
 299              	.LFB404:
3766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief TX interrrupt handler for 9 bits data word length and FIFO mode is enabled.
3769:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3770:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Transmit_IT().
3771:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3772:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3773:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3774:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
3775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 300              		.loc 1 3775 0
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 0
 303              		@ frame_needed = 0, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305              	.LVL13:
3776:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t *tmp;
3777:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  nb_tx_data;
3778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3779:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is ongoing */
3780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->gState == HAL_UART_STATE_BUSY_TX)
 306              		.loc 1 3780 0
 307 0000 D0F88030 		ldr	r3, [r0, #128]
 308 0004 212B     		cmp	r3, #33
 309 0006 00D0     		beq	.L29
 310              	.L23:
3781:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
ARM GAS  /tmp/ccsDPfHf.s 			page 73


3782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
3783:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (huart->TxXferCount == 0U)
3785:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the TX FIFO threshold interrupt */
3787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
3788:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3789:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Enable the UART Transmit Complete Interrupt */
3790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
3791:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break; /* force exit loop */
3793:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
3795:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         tmp = (uint16_t *) huart->pTxBuffPtr;
3797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
3798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
3799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxXferCount--;
3800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       else
3802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3803:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Nothing to do */
3804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3806:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3807:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 311              		.loc 1 3807 0
 312 0008 7047     		bx	lr
 313              	.L29:
3782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 314              		.loc 1 3782 0
 315 000a B0F86A30 		ldrh	r3, [r0, #106]
 316              	.LVL14:
 317 000e 0CE0     		b	.L25
 318              	.L30:
3787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 319              		.loc 1 3787 0
 320 0010 0268     		ldr	r2, [r0]
 321 0012 9368     		ldr	r3, [r2, #8]
 322              	.LVL15:
 323 0014 23F40003 		bic	r3, r3, #8388608
 324 0018 9360     		str	r3, [r2, #8]
3790:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 325              		.loc 1 3790 0
 326 001a 0268     		ldr	r2, [r0]
 327 001c 1368     		ldr	r3, [r2]
 328 001e 43F04003 		orr	r3, r3, #64
 329 0022 1360     		str	r3, [r2]
3792:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 330              		.loc 1 3792 0
 331 0024 7047     		bx	lr
 332              	.LVL16:
 333              	.L27:
3782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 334              		.loc 1 3782 0 discriminator 2
 335 0026 013B     		subs	r3, r3, #1
 336              	.LVL17:
ARM GAS  /tmp/ccsDPfHf.s 			page 74


 337 0028 9BB2     		uxth	r3, r3
 338              	.LVL18:
 339              	.L25:
3782:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 340              		.loc 1 3782 0 is_stmt 0 discriminator 1
 341 002a 002B     		cmp	r3, #0
 342 002c ECD0     		beq	.L23
3784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 343              		.loc 1 3784 0 is_stmt 1
 344 002e B0F85620 		ldrh	r2, [r0, #86]
 345 0032 92B2     		uxth	r2, r2
 346 0034 002A     		cmp	r2, #0
 347 0036 EBD0     		beq	.L30
3794:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 348              		.loc 1 3794 0
 349 0038 0268     		ldr	r2, [r0]
 350 003a D169     		ldr	r1, [r2, #28]
 351 003c 11F0800F 		tst	r1, #128
 352 0040 F1D0     		beq	.L27
3796:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 353              		.loc 1 3796 0
 354 0042 016D     		ldr	r1, [r0, #80]
 355              	.LVL19:
3797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->pTxBuffPtr += 2U;
 356              		.loc 1 3797 0
 357 0044 0988     		ldrh	r1, [r1]
 358              	.LVL20:
 359 0046 C1F30801 		ubfx	r1, r1, #0, #9
 360 004a 9162     		str	r1, [r2, #40]
 361              	.LVL21:
3798:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->TxXferCount--;
 362              		.loc 1 3798 0
 363 004c 026D     		ldr	r2, [r0, #80]
 364 004e 0232     		adds	r2, r2, #2
 365 0050 0265     		str	r2, [r0, #80]
3799:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 366              		.loc 1 3799 0
 367 0052 B0F85620 		ldrh	r2, [r0, #86]
 368 0056 013A     		subs	r2, r2, #1
 369 0058 92B2     		uxth	r2, r2
 370 005a A0F85620 		strh	r2, [r0, #86]	@ movhi
 371 005e E2E7     		b	.L27
 372              		.cfi_endproc
 373              	.LFE404:
 375              		.section	.text.HAL_UART_MspInit,"ax",%progbits
 376              		.align	1
 377              		.weak	HAL_UART_MspInit
 378              		.syntax unified
 379              		.thumb
 380              		.thumb_func
 381              		.fpu fpv5-d16
 383              	HAL_UART_MspInit:
 384              	.LFB348:
 660:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 385              		.loc 1 660 0
 386              		.cfi_startproc
 387              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 75


 388              		@ frame_needed = 0, uses_anonymous_args = 0
 389              		@ link register save eliminated.
 390              	.LVL22:
 667:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 391              		.loc 1 667 0
 392 0000 7047     		bx	lr
 393              		.cfi_endproc
 394              	.LFE348:
 396              		.section	.text.HAL_UART_MspDeInit,"ax",%progbits
 397              		.align	1
 398              		.weak	HAL_UART_MspDeInit
 399              		.syntax unified
 400              		.thumb
 401              		.thumb_func
 402              		.fpu fpv5-d16
 404              	HAL_UART_MspDeInit:
 405              	.LFB349:
 675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 406              		.loc 1 675 0
 407              		.cfi_startproc
 408              		@ args = 0, pretend = 0, frame = 0
 409              		@ frame_needed = 0, uses_anonymous_args = 0
 410              		@ link register save eliminated.
 411              	.LVL23:
 682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 412              		.loc 1 682 0
 413 0000 7047     		bx	lr
 414              		.cfi_endproc
 415              	.LFE349:
 417              		.section	.text.HAL_UART_DeInit,"ax",%progbits
 418              		.align	1
 419              		.global	HAL_UART_DeInit
 420              		.syntax unified
 421              		.thumb
 422              		.thumb_func
 423              		.fpu fpv5-d16
 425              	HAL_UART_DeInit:
 426              	.LFB347:
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 427              		.loc 1 615 0
 428              		.cfi_startproc
 429              		@ args = 0, pretend = 0, frame = 0
 430              		@ frame_needed = 0, uses_anonymous_args = 0
 431              	.LVL24:
 617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 432              		.loc 1 617 0
 433 0000 E0B1     		cbz	r0, .L35
 615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 434              		.loc 1 615 0
 435 0002 38B5     		push	{r3, r4, r5, lr}
 436              	.LCFI0:
 437              		.cfi_def_cfa_offset 16
 438              		.cfi_offset 3, -16
 439              		.cfi_offset 4, -12
 440              		.cfi_offset 5, -8
 441              		.cfi_offset 14, -4
 442 0004 0446     		mov	r4, r0
ARM GAS  /tmp/ccsDPfHf.s 			page 76


 625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 443              		.loc 1 625 0
 444 0006 2423     		movs	r3, #36
 445 0008 C0F88030 		str	r3, [r0, #128]
 627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 446              		.loc 1 627 0
 447 000c 0268     		ldr	r2, [r0]
 448 000e 1368     		ldr	r3, [r2]
 449 0010 23F00103 		bic	r3, r3, #1
 450 0014 1360     		str	r3, [r2]
 629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->Instance->CR2 = 0x0U;
 451              		.loc 1 629 0
 452 0016 0368     		ldr	r3, [r0]
 453 0018 0025     		movs	r5, #0
 454 001a 1D60     		str	r5, [r3]
 630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->Instance->CR3 = 0x0U;
 455              		.loc 1 630 0
 456 001c 0368     		ldr	r3, [r0]
 457 001e 5D60     		str	r5, [r3, #4]
 631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 458              		.loc 1 631 0
 459 0020 0368     		ldr	r3, [r0]
 460 0022 9D60     		str	r5, [r3, #8]
 642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 461              		.loc 1 642 0
 462 0024 FFF7FEFF 		bl	HAL_UART_MspDeInit
 463              	.LVL25:
 645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_RESET;
 464              		.loc 1 645 0
 465 0028 C4F88850 		str	r5, [r4, #136]
 646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_RESET;
 466              		.loc 1 646 0
 467 002c C4F88050 		str	r5, [r4, #128]
 647:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 468              		.loc 1 647 0
 469 0030 C4F88450 		str	r5, [r4, #132]
 649:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 470              		.loc 1 649 0
 471 0034 84F87C50 		strb	r5, [r4, #124]
 651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 472              		.loc 1 651 0
 473 0038 2846     		mov	r0, r5
 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 474              		.loc 1 652 0
 475 003a 38BD     		pop	{r3, r4, r5, pc}
 476              	.LVL26:
 477              	.L35:
 478              	.LCFI1:
 479              		.cfi_def_cfa_offset 0
 480              		.cfi_restore 3
 481              		.cfi_restore 4
 482              		.cfi_restore 5
 483              		.cfi_restore 14
 619:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 484              		.loc 1 619 0
 485 003c 0120     		movs	r0, #1
 486              	.LVL27:
ARM GAS  /tmp/ccsDPfHf.s 			page 77


 652:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 487              		.loc 1 652 0
 488 003e 7047     		bx	lr
 489              		.cfi_endproc
 490              	.LFE347:
 492              		.section	.text.HAL_UART_Transmit_IT,"ax",%progbits
 493              		.align	1
 494              		.global	HAL_UART_Transmit_IT
 495              		.syntax unified
 496              		.thumb
 497              		.thumb_func
 498              		.fpu fpv5-d16
 500              	HAL_UART_Transmit_IT:
 501              	.LFB352:
1208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 502              		.loc 1 1208 0
 503              		.cfi_startproc
 504              		@ args = 0, pretend = 0, frame = 0
 505              		@ frame_needed = 0, uses_anonymous_args = 0
 506              		@ link register save eliminated.
 507              	.LVL28:
1210:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 508              		.loc 1 1210 0
 509 0000 D0F88030 		ldr	r3, [r0, #128]
 510 0004 202B     		cmp	r3, #32
 511 0006 4AD1     		bne	.L47
1212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 512              		.loc 1 1212 0
 513 0008 B2FA82F3 		clz	r3, r2
 514 000c 5B09     		lsrs	r3, r3, #5
 515 000e 0029     		cmp	r1, #0
 516 0010 08BF     		it	eq
 517 0012 0123     		moveq	r3, #1
 518 0014 002B     		cmp	r3, #0
 519 0016 44D1     		bne	.L48
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 520              		.loc 1 1217 0
 521 0018 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 522 001c 012B     		cmp	r3, #1
 523 001e 42D0     		beq	.L49
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 524              		.loc 1 1217 0 is_stmt 0 discriminator 2
 525 0020 0123     		movs	r3, #1
 526 0022 80F87C30 		strb	r3, [r0, #124]
1219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 527              		.loc 1 1219 0 is_stmt 1 discriminator 2
 528 0026 0165     		str	r1, [r0, #80]
1220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = Size;
 529              		.loc 1 1220 0 discriminator 2
 530 0028 A0F85420 		strh	r2, [r0, #84]	@ movhi
1221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxISR       = NULL;
 531              		.loc 1 1221 0 discriminator 2
 532 002c A0F85620 		strh	r2, [r0, #86]	@ movhi
1222:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 533              		.loc 1 1222 0 discriminator 2
 534 0030 0023     		movs	r3, #0
 535 0032 0367     		str	r3, [r0, #112]
ARM GAS  /tmp/ccsDPfHf.s 			page 78


1224:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 536              		.loc 1 1224 0 discriminator 2
 537 0034 C0F88830 		str	r3, [r0, #136]
1225:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 538              		.loc 1 1225 0 discriminator 2
 539 0038 2123     		movs	r3, #33
 540 003a C0F88030 		str	r3, [r0, #128]
1228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 541              		.loc 1 1228 0 discriminator 2
 542 003e 436E     		ldr	r3, [r0, #100]
 543 0040 B3F1005F 		cmp	r3, #536870912
 544 0044 0FD0     		beq	.L50
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 545              		.loc 1 1248 0
 546 0046 8368     		ldr	r3, [r0, #8]
 547 0048 B3F5805F 		cmp	r3, #4096
 548 004c 21D0     		beq	.L51
 549              	.L45:
1254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 550              		.loc 1 1254 0
 551 004e 174B     		ldr	r3, .L53
 552 0050 0367     		str	r3, [r0, #112]
 553              	.L46:
1257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 554              		.loc 1 1257 0
 555 0052 0023     		movs	r3, #0
 556 0054 80F87C30 		strb	r3, [r0, #124]
1260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 557              		.loc 1 1260 0
 558 0058 0168     		ldr	r1, [r0]
 559              	.LVL29:
 560 005a 0A68     		ldr	r2, [r1]
 561              	.LVL30:
 562 005c 42F08002 		orr	r2, r2, #128
 563 0060 0A60     		str	r2, [r1]
 564              	.LVL31:
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 565              		.loc 1 1263 0
 566 0062 1846     		mov	r0, r3
 567              	.LVL32:
 568 0064 7047     		bx	lr
 569              	.LVL33:
 570              	.L50:
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 571              		.loc 1 1231 0
 572 0066 8368     		ldr	r3, [r0, #8]
 573 0068 B3F5805F 		cmp	r3, #4096
 574 006c 0BD0     		beq	.L52
 575              	.L43:
1237:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 576              		.loc 1 1237 0
 577 006e 104B     		ldr	r3, .L53+4
 578 0070 0367     		str	r3, [r0, #112]
 579              	.L44:
1240:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 580              		.loc 1 1240 0
 581 0072 0023     		movs	r3, #0
ARM GAS  /tmp/ccsDPfHf.s 			page 79


 582 0074 80F87C30 		strb	r3, [r0, #124]
1243:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 583              		.loc 1 1243 0
 584 0078 0168     		ldr	r1, [r0]
 585              	.LVL34:
 586 007a 8A68     		ldr	r2, [r1, #8]
 587              	.LVL35:
 588 007c 42F40002 		orr	r2, r2, #8388608
 589 0080 8A60     		str	r2, [r1, #8]
 590              	.LVL36:
1263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 591              		.loc 1 1263 0
 592 0082 1846     		mov	r0, r3
 593              	.LVL37:
 594 0084 7047     		bx	lr
 595              	.LVL38:
 596              	.L52:
1231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 597              		.loc 1 1231 0 discriminator 1
 598 0086 0369     		ldr	r3, [r0, #16]
 599 0088 002B     		cmp	r3, #0
 600 008a F0D1     		bne	.L43
1233:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 601              		.loc 1 1233 0
 602 008c 094B     		ldr	r3, .L53+8
 603 008e 0367     		str	r3, [r0, #112]
 604 0090 EFE7     		b	.L44
 605              	.L51:
1248:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 606              		.loc 1 1248 0 discriminator 1
 607 0092 0369     		ldr	r3, [r0, #16]
 608 0094 002B     		cmp	r3, #0
 609 0096 DAD1     		bne	.L45
1250:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 610              		.loc 1 1250 0
 611 0098 074B     		ldr	r3, .L53+12
 612 009a 0367     		str	r3, [r0, #112]
 613 009c D9E7     		b	.L46
 614              	.L47:
1267:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 615              		.loc 1 1267 0
 616 009e 0220     		movs	r0, #2
 617              	.LVL39:
 618 00a0 7047     		bx	lr
 619              	.LVL40:
 620              	.L48:
1214:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 621              		.loc 1 1214 0
 622 00a2 0120     		movs	r0, #1
 623              	.LVL41:
 624 00a4 7047     		bx	lr
 625              	.LVL42:
 626              	.L49:
1217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 627              		.loc 1 1217 0
 628 00a6 0220     		movs	r0, #2
 629              	.LVL43:
ARM GAS  /tmp/ccsDPfHf.s 			page 80


1269:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 630              		.loc 1 1269 0
 631 00a8 7047     		bx	lr
 632              	.L54:
 633 00aa 00BF     		.align	2
 634              	.L53:
 635 00ac 00000000 		.word	UART_TxISR_8BIT
 636 00b0 00000000 		.word	UART_TxISR_8BIT_FIFOEN
 637 00b4 00000000 		.word	UART_TxISR_16BIT_FIFOEN
 638 00b8 00000000 		.word	UART_TxISR_16BIT
 639              		.cfi_endproc
 640              	.LFE352:
 642              		.section	.text.HAL_UART_Receive_IT,"ax",%progbits
 643              		.align	1
 644              		.global	HAL_UART_Receive_IT
 645              		.syntax unified
 646              		.thumb
 647              		.thumb_func
 648              		.fpu fpv5-d16
 650              	HAL_UART_Receive_IT:
 651              	.LFB353:
1282:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 652              		.loc 1 1282 0
 653              		.cfi_startproc
 654              		@ args = 0, pretend = 0, frame = 0
 655              		@ frame_needed = 0, uses_anonymous_args = 0
 656              		@ link register save eliminated.
 657              	.LVL44:
1284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 658              		.loc 1 1284 0
 659 0000 D0F88430 		ldr	r3, [r0, #132]
 660 0004 202B     		cmp	r3, #32
 661 0006 40F08480 		bne	.L69
1286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 662              		.loc 1 1286 0
 663 000a B2FA82F3 		clz	r3, r2
 664 000e 5B09     		lsrs	r3, r3, #5
 665 0010 0029     		cmp	r1, #0
 666 0012 08BF     		it	eq
 667 0014 0123     		moveq	r3, #1
 668 0016 002B     		cmp	r3, #0
 669 0018 7DD1     		bne	.L70
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 670              		.loc 1 1291 0
 671 001a 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 672 001e 012B     		cmp	r3, #1
 673 0020 7BD0     		beq	.L71
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 674              		.loc 1 1291 0 is_stmt 0 discriminator 2
 675 0022 0123     		movs	r3, #1
 676 0024 80F87C30 		strb	r3, [r0, #124]
1293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferSize  = Size;
 677              		.loc 1 1293 0 is_stmt 1 discriminator 2
 678 0028 8165     		str	r1, [r0, #88]
1294:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = Size;
 679              		.loc 1 1294 0 discriminator 2
 680 002a A0F85C20 		strh	r2, [r0, #92]	@ movhi
ARM GAS  /tmp/ccsDPfHf.s 			page 81


1295:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxISR       = NULL;
 681              		.loc 1 1295 0 discriminator 2
 682 002e A0F85E20 		strh	r2, [r0, #94]	@ movhi
1296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 683              		.loc 1 1296 0 discriminator 2
 684 0032 0023     		movs	r3, #0
 685 0034 C366     		str	r3, [r0, #108]
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 686              		.loc 1 1299 0 discriminator 2
 687 0036 8368     		ldr	r3, [r0, #8]
 688 0038 B3F5805F 		cmp	r3, #4096
 689 003c 06D0     		beq	.L72
 690 003e A3B9     		cbnz	r3, .L60
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 691              		.loc 1 1299 0 is_stmt 0 discriminator 5
 692 0040 0369     		ldr	r3, [r0, #16]
 693 0042 73B9     		cbnz	r3, .L61
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 694              		.loc 1 1299 0 discriminator 7
 695 0044 FF23     		movs	r3, #255
 696 0046 A0F86030 		strh	r3, [r0, #96]	@ movhi
 697 004a 14E0     		b	.L59
 698              	.L72:
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 699              		.loc 1 1299 0 discriminator 1
 700 004c 0369     		ldr	r3, [r0, #16]
 701 004e 23B9     		cbnz	r3, .L58
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 702              		.loc 1 1299 0 discriminator 3
 703 0050 40F2FF13 		movw	r3, #511
 704 0054 A0F86030 		strh	r3, [r0, #96]	@ movhi
 705 0058 0DE0     		b	.L59
 706              	.L58:
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 707              		.loc 1 1299 0 discriminator 4
 708 005a FF23     		movs	r3, #255
 709 005c A0F86030 		strh	r3, [r0, #96]	@ movhi
 710 0060 09E0     		b	.L59
 711              	.L61:
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 712              		.loc 1 1299 0 discriminator 8
 713 0062 7F23     		movs	r3, #127
 714 0064 A0F86030 		strh	r3, [r0, #96]	@ movhi
 715 0068 05E0     		b	.L59
 716              	.L60:
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 717              		.loc 1 1299 0 discriminator 6
 718 006a B3F1805F 		cmp	r3, #268435456
 719 006e 21D0     		beq	.L73
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 720              		.loc 1 1299 0 discriminator 10
 721 0070 0023     		movs	r3, #0
 722 0072 A0F86030 		strh	r3, [r0, #96]	@ movhi
 723              	.L59:
1301:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 724              		.loc 1 1301 0 is_stmt 1
 725 0076 0023     		movs	r3, #0
ARM GAS  /tmp/ccsDPfHf.s 			page 82


 726 0078 C0F88830 		str	r3, [r0, #136]
1302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 727              		.loc 1 1302 0
 728 007c 2223     		movs	r3, #34
 729 007e C0F88430 		str	r3, [r0, #132]
1305:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 730              		.loc 1 1305 0
 731 0082 0168     		ldr	r1, [r0]
 732              	.LVL45:
 733 0084 8B68     		ldr	r3, [r1, #8]
 734 0086 43F00103 		orr	r3, r3, #1
 735 008a 8B60     		str	r3, [r1, #8]
 736              	.LVL46:
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 737              		.loc 1 1308 0
 738 008c 436E     		ldr	r3, [r0, #100]
 739 008e B3F1005F 		cmp	r3, #536870912
 740 0092 19D0     		beq	.L74
 741              	.L64:
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 742              		.loc 1 1329 0
 743 0094 8368     		ldr	r3, [r0, #8]
 744 0096 B3F5805F 		cmp	r3, #4096
 745 009a 34D0     		beq	.L75
 746              	.L67:
1335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 747              		.loc 1 1335 0
 748 009c 204B     		ldr	r3, .L77
 749 009e C366     		str	r3, [r0, #108]
 750              	.L68:
1338:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 751              		.loc 1 1338 0
 752 00a0 0023     		movs	r3, #0
 753 00a2 80F87C30 		strb	r3, [r0, #124]
1341:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 754              		.loc 1 1341 0
 755 00a6 0168     		ldr	r1, [r0]
 756 00a8 0A68     		ldr	r2, [r1]
 757              	.LVL47:
 758 00aa 42F49072 		orr	r2, r2, #288
 759 00ae 0A60     		str	r2, [r1]
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 760              		.loc 1 1344 0
 761 00b0 1846     		mov	r0, r3
 762              	.LVL48:
 763 00b2 7047     		bx	lr
 764              	.LVL49:
 765              	.L73:
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 766              		.loc 1 1299 0 discriminator 9
 767 00b4 0369     		ldr	r3, [r0, #16]
 768 00b6 1BB9     		cbnz	r3, .L63
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 769              		.loc 1 1299 0 is_stmt 0 discriminator 11
 770 00b8 7F23     		movs	r3, #127
 771 00ba A0F86030 		strh	r3, [r0, #96]	@ movhi
 772 00be DAE7     		b	.L59
ARM GAS  /tmp/ccsDPfHf.s 			page 83


 773              	.L63:
1299:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 774              		.loc 1 1299 0 discriminator 12
 775 00c0 3F23     		movs	r3, #63
 776 00c2 A0F86030 		strh	r3, [r0, #96]	@ movhi
 777 00c6 D6E7     		b	.L59
 778              	.LVL50:
 779              	.L74:
1308:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 780              		.loc 1 1308 0 is_stmt 1 discriminator 1
 781 00c8 B0F86830 		ldrh	r3, [r0, #104]
 782 00cc 9342     		cmp	r3, r2
 783 00ce E1D8     		bhi	.L64
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 784              		.loc 1 1311 0
 785 00d0 8368     		ldr	r3, [r0, #8]
 786 00d2 B3F5805F 		cmp	r3, #4096
 787 00d6 10D0     		beq	.L76
 788              	.L65:
1317:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 789              		.loc 1 1317 0
 790 00d8 124B     		ldr	r3, .L77+4
 791 00da C366     		str	r3, [r0, #108]
 792              	.L66:
1320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 793              		.loc 1 1320 0
 794 00dc 0023     		movs	r3, #0
 795 00de 80F87C30 		strb	r3, [r0, #124]
1323:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 796              		.loc 1 1323 0
 797 00e2 0168     		ldr	r1, [r0]
 798 00e4 0A68     		ldr	r2, [r1]
 799              	.LVL51:
 800 00e6 42F48072 		orr	r2, r2, #256
 801 00ea 0A60     		str	r2, [r1]
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 802              		.loc 1 1324 0
 803 00ec 0168     		ldr	r1, [r0]
 804 00ee 8A68     		ldr	r2, [r1, #8]
 805 00f0 42F08052 		orr	r2, r2, #268435456
 806 00f4 8A60     		str	r2, [r1, #8]
1344:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 807              		.loc 1 1344 0
 808 00f6 1846     		mov	r0, r3
 809              	.LVL52:
1324:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 810              		.loc 1 1324 0
 811 00f8 7047     		bx	lr
 812              	.LVL53:
 813              	.L76:
1311:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 814              		.loc 1 1311 0 discriminator 1
 815 00fa 0369     		ldr	r3, [r0, #16]
 816 00fc 002B     		cmp	r3, #0
 817 00fe EBD1     		bne	.L65
1313:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 818              		.loc 1 1313 0
ARM GAS  /tmp/ccsDPfHf.s 			page 84


 819 0100 094B     		ldr	r3, .L77+8
 820 0102 C366     		str	r3, [r0, #108]
 821 0104 EAE7     		b	.L66
 822              	.L75:
1329:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 823              		.loc 1 1329 0 discriminator 1
 824 0106 0369     		ldr	r3, [r0, #16]
 825 0108 002B     		cmp	r3, #0
 826 010a C7D1     		bne	.L67
1331:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 827              		.loc 1 1331 0
 828 010c 074B     		ldr	r3, .L77+12
 829 010e C366     		str	r3, [r0, #108]
 830 0110 C6E7     		b	.L68
 831              	.LVL54:
 832              	.L69:
1348:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 833              		.loc 1 1348 0
 834 0112 0220     		movs	r0, #2
 835              	.LVL55:
 836 0114 7047     		bx	lr
 837              	.LVL56:
 838              	.L70:
1288:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 839              		.loc 1 1288 0
 840 0116 0120     		movs	r0, #1
 841              	.LVL57:
 842 0118 7047     		bx	lr
 843              	.LVL58:
 844              	.L71:
1291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 845              		.loc 1 1291 0
 846 011a 0220     		movs	r0, #2
 847              	.LVL59:
1350:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 848              		.loc 1 1350 0
 849 011c 7047     		bx	lr
 850              	.L78:
 851 011e 00BF     		.align	2
 852              	.L77:
 853 0120 00000000 		.word	UART_RxISR_8BIT
 854 0124 00000000 		.word	UART_RxISR_8BIT_FIFOEN
 855 0128 00000000 		.word	UART_RxISR_16BIT_FIFOEN
 856 012c 00000000 		.word	UART_RxISR_16BIT
 857              		.cfi_endproc
 858              	.LFE353:
 860              		.section	.text.HAL_UART_Transmit_DMA,"ax",%progbits
 861              		.align	1
 862              		.global	HAL_UART_Transmit_DMA
 863              		.syntax unified
 864              		.thumb
 865              		.thumb_func
 866              		.fpu fpv5-d16
 868              	HAL_UART_Transmit_DMA:
 869              	.LFB354:
1363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Tx process is not already ongoing */
 870              		.loc 1 1363 0
ARM GAS  /tmp/ccsDPfHf.s 			page 85


 871              		.cfi_startproc
 872              		@ args = 0, pretend = 0, frame = 0
 873              		@ frame_needed = 0, uses_anonymous_args = 0
 874              	.LVL60:
 875 0000 38B5     		push	{r3, r4, r5, lr}
 876              	.LCFI2:
 877              		.cfi_def_cfa_offset 16
 878              		.cfi_offset 3, -16
 879              		.cfi_offset 4, -12
 880              		.cfi_offset 5, -8
 881              		.cfi_offset 14, -4
1365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 882              		.loc 1 1365 0
 883 0002 D0F88040 		ldr	r4, [r0, #128]
 884 0006 202C     		cmp	r4, #32
 885 0008 46D1     		bne	.L82
1367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 886              		.loc 1 1367 0
 887 000a B2FA82F5 		clz	r5, r2
 888 000e 6D09     		lsrs	r5, r5, #5
 889 0010 0029     		cmp	r1, #0
 890 0012 08BF     		it	eq
 891 0014 0125     		moveq	r5, #1
 892 0016 002D     		cmp	r5, #0
 893 0018 40D1     		bne	.L83
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 894              		.loc 1 1372 0
 895 001a 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 896 001e 012B     		cmp	r3, #1
 897 0020 3ED0     		beq	.L84
 898 0022 1346     		mov	r3, r2
 899 0024 0446     		mov	r4, r0
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 900              		.loc 1 1372 0 is_stmt 0 discriminator 2
 901 0026 0122     		movs	r2, #1
 902              	.LVL61:
 903 0028 80F87C20 		strb	r2, [r0, #124]
1374:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferSize  = Size;
 904              		.loc 1 1374 0 is_stmt 1 discriminator 2
 905 002c 0165     		str	r1, [r0, #80]
1375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = Size;
 906              		.loc 1 1375 0 discriminator 2
 907 002e A0F85430 		strh	r3, [r0, #84]	@ movhi
1376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 908              		.loc 1 1376 0 discriminator 2
 909 0032 A0F85630 		strh	r3, [r0, #86]	@ movhi
1378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 910              		.loc 1 1378 0 discriminator 2
 911 0036 0022     		movs	r2, #0
 912 0038 C0F88820 		str	r2, [r0, #136]
1379:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 913              		.loc 1 1379 0 discriminator 2
 914 003c 2122     		movs	r2, #33
 915 003e C0F88020 		str	r2, [r0, #128]
1381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 916              		.loc 1 1381 0 discriminator 2
 917 0042 426F     		ldr	r2, [r0, #116]
ARM GAS  /tmp/ccsDPfHf.s 			page 86


 918 0044 8AB1     		cbz	r2, .L81
1384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 919              		.loc 1 1384 0
 920 0046 1749     		ldr	r1, .L87
 921              	.LVL62:
 922 0048 D163     		str	r1, [r2, #60]
 923              	.LVL63:
1387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 924              		.loc 1 1387 0
 925 004a 426F     		ldr	r2, [r0, #116]
 926 004c 1649     		ldr	r1, .L87+4
 927 004e 1164     		str	r1, [r2, #64]
1390:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 928              		.loc 1 1390 0
 929 0050 426F     		ldr	r2, [r0, #116]
 930 0052 1649     		ldr	r1, .L87+8
 931 0054 D164     		str	r1, [r2, #76]
1393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 932              		.loc 1 1393 0
 933 0056 426F     		ldr	r2, [r0, #116]
 934 0058 0021     		movs	r1, #0
 935 005a 1165     		str	r1, [r2, #80]
1396:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 936              		.loc 1 1396 0
 937 005c 0268     		ldr	r2, [r0]
 938 005e 2832     		adds	r2, r2, #40
 939 0060 016D     		ldr	r1, [r0, #80]
 940 0062 406F     		ldr	r0, [r0, #116]
 941              	.LVL64:
 942 0064 FFF7FEFF 		bl	HAL_DMA_Start_IT
 943              	.LVL65:
 944 0068 58B9     		cbnz	r0, .L86
 945              	.L81:
1410:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 946              		.loc 1 1410 0
 947 006a 2368     		ldr	r3, [r4]
 948 006c 4022     		movs	r2, #64
 949 006e 1A62     		str	r2, [r3, #32]
1412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 950              		.loc 1 1412 0
 951 0070 0020     		movs	r0, #0
 952 0072 84F87C00 		strb	r0, [r4, #124]
1416:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 953              		.loc 1 1416 0
 954 0076 2268     		ldr	r2, [r4]
 955 0078 9368     		ldr	r3, [r2, #8]
 956 007a 43F08003 		orr	r3, r3, #128
 957 007e 9360     		str	r3, [r2, #8]
1418:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 958              		.loc 1 1418 0
 959 0080 0BE0     		b	.L80
 960              	.L86:
1399:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 961              		.loc 1 1399 0
 962 0082 1023     		movs	r3, #16
 963 0084 C4F88830 		str	r3, [r4, #136]
1401:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 87


 964              		.loc 1 1401 0
 965 0088 0023     		movs	r3, #0
 966 008a 84F87C30 		strb	r3, [r4, #124]
1404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 967              		.loc 1 1404 0
 968 008e 2023     		movs	r3, #32
 969 0090 C4F88030 		str	r3, [r4, #128]
1406:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 970              		.loc 1 1406 0
 971 0094 0120     		movs	r0, #1
 972 0096 00E0     		b	.L80
 973              	.LVL66:
 974              	.L82:
1422:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 975              		.loc 1 1422 0
 976 0098 0220     		movs	r0, #2
 977              	.LVL67:
 978              	.L80:
1424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 979              		.loc 1 1424 0
 980 009a 38BD     		pop	{r3, r4, r5, pc}
 981              	.LVL68:
 982              	.L83:
1369:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 983              		.loc 1 1369 0
 984 009c 0120     		movs	r0, #1
 985              	.LVL69:
 986 009e FCE7     		b	.L80
 987              	.LVL70:
 988              	.L84:
1372:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 989              		.loc 1 1372 0
 990 00a0 0220     		movs	r0, #2
 991              	.LVL71:
 992 00a2 FAE7     		b	.L80
 993              	.L88:
 994              		.align	2
 995              	.L87:
 996 00a4 00000000 		.word	UART_DMATransmitCplt
 997 00a8 00000000 		.word	UART_DMATxHalfCplt
 998 00ac 00000000 		.word	UART_DMAError
 999              		.cfi_endproc
 1000              	.LFE354:
 1002              		.section	.text.HAL_UART_Receive_DMA,"ax",%progbits
 1003              		.align	1
 1004              		.global	HAL_UART_Receive_DMA
 1005              		.syntax unified
 1006              		.thumb
 1007              		.thumb_func
 1008              		.fpu fpv5-d16
 1010              	HAL_UART_Receive_DMA:
 1011              	.LFB355:
1439:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is not already ongoing */
 1012              		.loc 1 1439 0
 1013              		.cfi_startproc
 1014              		@ args = 0, pretend = 0, frame = 0
 1015              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 88


 1016              	.LVL72:
 1017 0000 38B5     		push	{r3, r4, r5, lr}
 1018              	.LCFI3:
 1019              		.cfi_def_cfa_offset 16
 1020              		.cfi_offset 3, -16
 1021              		.cfi_offset 4, -12
 1022              		.cfi_offset 5, -8
 1023              		.cfi_offset 14, -4
1441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1024              		.loc 1 1441 0
 1025 0002 D0F88440 		ldr	r4, [r0, #132]
 1026 0006 202C     		cmp	r4, #32
 1027 0008 4BD1     		bne	.L92
1443:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1028              		.loc 1 1443 0
 1029 000a B2FA82F5 		clz	r5, r2
 1030 000e 6D09     		lsrs	r5, r5, #5
 1031 0010 0029     		cmp	r1, #0
 1032 0012 08BF     		it	eq
 1033 0014 0125     		moveq	r5, #1
 1034 0016 002D     		cmp	r5, #0
 1035 0018 45D1     		bne	.L93
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1036              		.loc 1 1448 0
 1037 001a 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1038 001e 012B     		cmp	r3, #1
 1039 0020 43D0     		beq	.L94
 1040 0022 1346     		mov	r3, r2
 1041 0024 0446     		mov	r4, r0
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1042              		.loc 1 1448 0 is_stmt 0 discriminator 2
 1043 0026 0122     		movs	r2, #1
 1044              	.LVL73:
 1045 0028 80F87C20 		strb	r2, [r0, #124]
1450:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferSize = Size;
 1046              		.loc 1 1450 0 is_stmt 1 discriminator 2
 1047 002c 8165     		str	r1, [r0, #88]
1451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1048              		.loc 1 1451 0 discriminator 2
 1049 002e A0F85C30 		strh	r3, [r0, #92]	@ movhi
1453:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 1050              		.loc 1 1453 0 discriminator 2
 1051 0032 0022     		movs	r2, #0
 1052 0034 C0F88820 		str	r2, [r0, #136]
1454:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1053              		.loc 1 1454 0 discriminator 2
 1054 0038 2222     		movs	r2, #34
 1055 003a C0F88420 		str	r2, [r0, #132]
1456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1056              		.loc 1 1456 0 discriminator 2
 1057 003e 826F     		ldr	r2, [r0, #120]
 1058 0040 8AB1     		cbz	r2, .L91
1459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1059              		.loc 1 1459 0
 1060 0042 1B49     		ldr	r1, .L97
 1061              	.LVL74:
 1062 0044 D163     		str	r1, [r2, #60]
ARM GAS  /tmp/ccsDPfHf.s 			page 89


 1063              	.LVL75:
1462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1064              		.loc 1 1462 0
 1065 0046 826F     		ldr	r2, [r0, #120]
 1066 0048 1A49     		ldr	r1, .L97+4
 1067 004a 1164     		str	r1, [r2, #64]
1465:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1068              		.loc 1 1465 0
 1069 004c 826F     		ldr	r2, [r0, #120]
 1070 004e 1A49     		ldr	r1, .L97+8
 1071 0050 D164     		str	r1, [r2, #76]
1468:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1072              		.loc 1 1468 0
 1073 0052 826F     		ldr	r2, [r0, #120]
 1074 0054 0021     		movs	r1, #0
 1075 0056 1165     		str	r1, [r2, #80]
1471:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1076              		.loc 1 1471 0
 1077 0058 0168     		ldr	r1, [r0]
 1078 005a 826D     		ldr	r2, [r0, #88]
 1079 005c 2431     		adds	r1, r1, #36
 1080 005e 806F     		ldr	r0, [r0, #120]
 1081              	.LVL76:
 1082 0060 FFF7FEFF 		bl	HAL_DMA_Start_IT
 1083              	.LVL77:
 1084 0064 90B9     		cbnz	r0, .L96
 1085              	.L91:
1484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1086              		.loc 1 1484 0
 1087 0066 0020     		movs	r0, #0
 1088 0068 84F87C00 		strb	r0, [r4, #124]
1487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1089              		.loc 1 1487 0
 1090 006c 2268     		ldr	r2, [r4]
 1091 006e 1368     		ldr	r3, [r2]
 1092 0070 43F48073 		orr	r3, r3, #256
 1093 0074 1360     		str	r3, [r2]
1490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1094              		.loc 1 1490 0
 1095 0076 2268     		ldr	r2, [r4]
 1096 0078 9368     		ldr	r3, [r2, #8]
 1097 007a 43F00103 		orr	r3, r3, #1
 1098 007e 9360     		str	r3, [r2, #8]
1494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1099              		.loc 1 1494 0
 1100 0080 2268     		ldr	r2, [r4]
 1101 0082 9368     		ldr	r3, [r2, #8]
 1102 0084 43F04003 		orr	r3, r3, #64
 1103 0088 9360     		str	r3, [r2, #8]
1496:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1104              		.loc 1 1496 0
 1105 008a 0BE0     		b	.L90
 1106              	.L96:
1474:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1107              		.loc 1 1474 0
 1108 008c 1023     		movs	r3, #16
 1109 008e C4F88830 		str	r3, [r4, #136]
ARM GAS  /tmp/ccsDPfHf.s 			page 90


1476:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1110              		.loc 1 1476 0
 1111 0092 0023     		movs	r3, #0
 1112 0094 84F87C30 		strb	r3, [r4, #124]
1479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1113              		.loc 1 1479 0
 1114 0098 2023     		movs	r3, #32
 1115 009a C4F88030 		str	r3, [r4, #128]
1481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 1116              		.loc 1 1481 0
 1117 009e 0120     		movs	r0, #1
 1118 00a0 00E0     		b	.L90
 1119              	.LVL78:
 1120              	.L92:
1500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1121              		.loc 1 1500 0
 1122 00a2 0220     		movs	r0, #2
 1123              	.LVL79:
 1124              	.L90:
1502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1125              		.loc 1 1502 0
 1126 00a4 38BD     		pop	{r3, r4, r5, pc}
 1127              	.LVL80:
 1128              	.L93:
1445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 1129              		.loc 1 1445 0
 1130 00a6 0120     		movs	r0, #1
 1131              	.LVL81:
 1132 00a8 FCE7     		b	.L90
 1133              	.LVL82:
 1134              	.L94:
1448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1135              		.loc 1 1448 0
 1136 00aa 0220     		movs	r0, #2
 1137              	.LVL83:
 1138 00ac FAE7     		b	.L90
 1139              	.L98:
 1140 00ae 00BF     		.align	2
 1141              	.L97:
 1142 00b0 00000000 		.word	UART_DMAReceiveCplt
 1143 00b4 00000000 		.word	UART_DMARxHalfCplt
 1144 00b8 00000000 		.word	UART_DMAError
 1145              		.cfi_endproc
 1146              	.LFE355:
 1148              		.section	.text.HAL_UART_DMAPause,"ax",%progbits
 1149              		.align	1
 1150              		.global	HAL_UART_DMAPause
 1151              		.syntax unified
 1152              		.thumb
 1153              		.thumb_func
 1154              		.fpu fpv5-d16
 1156              	HAL_UART_DMAPause:
 1157              	.LFB356:
1510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef gstate = huart->gState;
 1158              		.loc 1 1510 0
 1159              		.cfi_startproc
 1160              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 91


 1161              		@ frame_needed = 0, uses_anonymous_args = 0
 1162              		@ link register save eliminated.
 1163              	.LVL84:
 1164 0000 10B4     		push	{r4}
 1165              	.LCFI4:
 1166              		.cfi_def_cfa_offset 4
 1167              		.cfi_offset 4, -4
1511:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1168              		.loc 1 1511 0
 1169 0002 D0F88040 		ldr	r4, [r0, #128]
 1170              	.LVL85:
1512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1171              		.loc 1 1512 0
 1172 0006 D0F88410 		ldr	r1, [r0, #132]
 1173              	.LVL86:
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1174              		.loc 1 1514 0
 1175 000a 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1176 000e 012B     		cmp	r3, #1
 1177 0010 2BD0     		beq	.L103
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1178              		.loc 1 1514 0 is_stmt 0 discriminator 2
 1179 0012 0123     		movs	r3, #1
 1180 0014 80F87C30 		strb	r3, [r0, #124]
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1181              		.loc 1 1516 0 is_stmt 1 discriminator 2
 1182 0018 0368     		ldr	r3, [r0]
 1183 001a 9A68     		ldr	r2, [r3, #8]
 1184 001c 12F0800F 		tst	r2, #128
 1185 0020 01D0     		beq	.L101
1516:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1186              		.loc 1 1516 0 is_stmt 0 discriminator 1
 1187 0022 212C     		cmp	r4, #33
 1188 0024 0DD0     		beq	.L105
 1189              	.L101:
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1190              		.loc 1 1522 0 is_stmt 1
 1191 0026 0368     		ldr	r3, [r0]
 1192 0028 9A68     		ldr	r2, [r3, #8]
 1193 002a 12F0400F 		tst	r2, #64
 1194 002e 01D0     		beq	.L102
1522:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1195              		.loc 1 1522 0 is_stmt 0 discriminator 1
 1196 0030 2229     		cmp	r1, #34
 1197 0032 0BD0     		beq	.L106
 1198              	.L102:
1533:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1199              		.loc 1 1533 0 is_stmt 1
 1200 0034 0023     		movs	r3, #0
 1201 0036 80F87C30 		strb	r3, [r0, #124]
1535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1202              		.loc 1 1535 0
 1203 003a 1846     		mov	r0, r3
 1204              	.LVL87:
 1205              	.L100:
1536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1206              		.loc 1 1536 0
ARM GAS  /tmp/ccsDPfHf.s 			page 92


 1207 003c 5DF8044B 		ldr	r4, [sp], #4
 1208              	.LCFI5:
 1209              		.cfi_remember_state
 1210              		.cfi_restore 4
 1211              		.cfi_def_cfa_offset 0
 1212              	.LVL88:
 1213 0040 7047     		bx	lr
 1214              	.LVL89:
 1215              	.L105:
 1216              	.LCFI6:
 1217              		.cfi_restore_state
1520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1218              		.loc 1 1520 0
 1219 0042 9A68     		ldr	r2, [r3, #8]
 1220 0044 22F08002 		bic	r2, r2, #128
 1221 0048 9A60     		str	r2, [r3, #8]
 1222 004a ECE7     		b	.L101
 1223              	.L106:
1526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1224              		.loc 1 1526 0
 1225 004c 1A68     		ldr	r2, [r3]
 1226 004e 22F48072 		bic	r2, r2, #256
 1227 0052 1A60     		str	r2, [r3]
1527:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1228              		.loc 1 1527 0
 1229 0054 0268     		ldr	r2, [r0]
 1230 0056 9368     		ldr	r3, [r2, #8]
 1231 0058 23F00103 		bic	r3, r3, #1
 1232 005c 9360     		str	r3, [r2, #8]
1530:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1233              		.loc 1 1530 0
 1234 005e 0268     		ldr	r2, [r0]
 1235 0060 9368     		ldr	r3, [r2, #8]
 1236 0062 23F04003 		bic	r3, r3, #64
 1237 0066 9360     		str	r3, [r2, #8]
 1238 0068 E4E7     		b	.L102
 1239              	.L103:
1514:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1240              		.loc 1 1514 0
 1241 006a 0220     		movs	r0, #2
 1242              	.LVL90:
 1243 006c E6E7     		b	.L100
 1244              		.cfi_endproc
 1245              	.LFE356:
 1247              		.section	.text.HAL_UART_DMAResume,"ax",%progbits
 1248              		.align	1
 1249              		.global	HAL_UART_DMAResume
 1250              		.syntax unified
 1251              		.thumb
 1252              		.thumb_func
 1253              		.fpu fpv5-d16
 1255              	HAL_UART_DMAResume:
 1256              	.LFB357:
1544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 1257              		.loc 1 1544 0
 1258              		.cfi_startproc
 1259              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 93


 1260              		@ frame_needed = 0, uses_anonymous_args = 0
 1261              		@ link register save eliminated.
 1262              	.LVL91:
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1263              		.loc 1 1545 0
 1264 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 1265 0004 012B     		cmp	r3, #1
 1266 0006 28D0     		beq	.L111
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1267              		.loc 1 1545 0 is_stmt 0 discriminator 2
 1268 0008 0123     		movs	r3, #1
 1269 000a 80F87C30 		strb	r3, [r0, #124]
1547:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1270              		.loc 1 1547 0 is_stmt 1 discriminator 2
 1271 000e D0F88030 		ldr	r3, [r0, #128]
 1272 0012 212B     		cmp	r3, #33
 1273 0014 08D0     		beq	.L112
 1274              	.L109:
1552:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1275              		.loc 1 1552 0
 1276 0016 D0F88430 		ldr	r3, [r0, #132]
 1277 001a 222B     		cmp	r3, #34
 1278 001c 0AD0     		beq	.L113
 1279              	.L110:
1565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1280              		.loc 1 1565 0
 1281 001e 0023     		movs	r3, #0
 1282 0020 80F87C30 		strb	r3, [r0, #124]
1567:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1283              		.loc 1 1567 0
 1284 0024 1846     		mov	r0, r3
 1285              	.LVL92:
 1286 0026 7047     		bx	lr
 1287              	.LVL93:
 1288              	.L112:
1550:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1289              		.loc 1 1550 0
 1290 0028 0268     		ldr	r2, [r0]
 1291 002a 9368     		ldr	r3, [r2, #8]
 1292 002c 43F08003 		orr	r3, r3, #128
 1293 0030 9360     		str	r3, [r2, #8]
 1294 0032 F0E7     		b	.L109
 1295              	.L113:
1555:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1296              		.loc 1 1555 0
 1297 0034 0368     		ldr	r3, [r0]
 1298 0036 0822     		movs	r2, #8
 1299 0038 1A62     		str	r2, [r3, #32]
1558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 1300              		.loc 1 1558 0
 1301 003a 0268     		ldr	r2, [r0]
 1302 003c 1368     		ldr	r3, [r2]
 1303 003e 43F48073 		orr	r3, r3, #256
 1304 0042 1360     		str	r3, [r2]
1559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1305              		.loc 1 1559 0
 1306 0044 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccsDPfHf.s 			page 94


 1307 0046 9368     		ldr	r3, [r2, #8]
 1308 0048 43F00103 		orr	r3, r3, #1
 1309 004c 9360     		str	r3, [r2, #8]
1562:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1310              		.loc 1 1562 0
 1311 004e 0268     		ldr	r2, [r0]
 1312 0050 9368     		ldr	r3, [r2, #8]
 1313 0052 43F04003 		orr	r3, r3, #64
 1314 0056 9360     		str	r3, [r2, #8]
 1315 0058 E1E7     		b	.L110
 1316              	.L111:
1545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1317              		.loc 1 1545 0
 1318 005a 0220     		movs	r0, #2
 1319              	.LVL94:
1568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1320              		.loc 1 1568 0
 1321 005c 7047     		bx	lr
 1322              		.cfi_endproc
 1323              	.LFE357:
 1325              		.section	.text.HAL_UART_DMAStop,"ax",%progbits
 1326              		.align	1
 1327              		.global	HAL_UART_DMAStop
 1328              		.syntax unified
 1329              		.thumb
 1330              		.thumb_func
 1331              		.fpu fpv5-d16
 1333              	HAL_UART_DMAStop:
 1334              	.LFB358:
1576:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* The Lock is not implemented on this API to allow the user application
 1335              		.loc 1 1576 0
 1336              		.cfi_startproc
 1337              		@ args = 0, pretend = 0, frame = 0
 1338              		@ frame_needed = 0, uses_anonymous_args = 0
 1339              	.LVL95:
 1340 0000 38B5     		push	{r3, r4, r5, lr}
 1341              	.LCFI7:
 1342              		.cfi_def_cfa_offset 16
 1343              		.cfi_offset 3, -16
 1344              		.cfi_offset 4, -12
 1345              		.cfi_offset 5, -8
 1346              		.cfi_offset 14, -4
 1347 0002 0446     		mov	r4, r0
1584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 1348              		.loc 1 1584 0
 1349 0004 D0F88010 		ldr	r1, [r0, #128]
 1350              	.LVL96:
1585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1351              		.loc 1 1585 0
 1352 0008 D0F88450 		ldr	r5, [r0, #132]
 1353              	.LVL97:
1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1354              		.loc 1 1588 0
 1355 000c 0368     		ldr	r3, [r0]
 1356 000e 9A68     		ldr	r2, [r3, #8]
 1357 0010 12F0800F 		tst	r2, #128
 1358 0014 01D0     		beq	.L115
ARM GAS  /tmp/ccsDPfHf.s 			page 95


1588:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 1359              		.loc 1 1588 0 is_stmt 0 discriminator 1
 1360 0016 2129     		cmp	r1, #33
 1361 0018 08D0     		beq	.L122
 1362              	.LVL98:
 1363              	.L115:
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1364              		.loc 1 1612 0 is_stmt 1
 1365 001a 2368     		ldr	r3, [r4]
 1366 001c 9A68     		ldr	r2, [r3, #8]
 1367 001e 12F0400F 		tst	r2, #64
 1368 0022 32D0     		beq	.L119
1612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 1369              		.loc 1 1612 0 is_stmt 0 discriminator 1
 1370 0024 222D     		cmp	r5, #34
 1371 0026 18D0     		beq	.L123
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1372              		.loc 1 1635 0 is_stmt 1
 1373 0028 0020     		movs	r0, #0
 1374 002a 2FE0     		b	.L117
 1375              	.LVL99:
 1376              	.L122:
1591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1377              		.loc 1 1591 0
 1378 002c 9A68     		ldr	r2, [r3, #8]
 1379 002e 22F08002 		bic	r2, r2, #128
 1380 0032 9A60     		str	r2, [r3, #8]
1594:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1381              		.loc 1 1594 0
 1382 0034 406F     		ldr	r0, [r0, #116]
 1383              	.LVL100:
 1384 0036 10B1     		cbz	r0, .L116
1596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1385              		.loc 1 1596 0
 1386 0038 FFF7FEFF 		bl	HAL_DMA_Abort
 1387              	.LVL101:
 1388 003c 18B9     		cbnz	r0, .L124
 1389              	.L116:
1608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1390              		.loc 1 1608 0
 1391 003e 2046     		mov	r0, r4
 1392 0040 FFF7FEFF 		bl	UART_EndTxTransfer
 1393              	.LVL102:
 1394 0044 E9E7     		b	.L115
 1395              	.L124:
1598:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 1396              		.loc 1 1598 0
 1397 0046 606F     		ldr	r0, [r4, #116]
 1398 0048 FFF7FEFF 		bl	HAL_DMA_GetError
 1399              	.LVL103:
 1400 004c 2028     		cmp	r0, #32
 1401 004e F6D1     		bne	.L116
1601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1402              		.loc 1 1601 0
 1403 0050 1023     		movs	r3, #16
 1404 0052 C4F88830 		str	r3, [r4, #136]
1603:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
ARM GAS  /tmp/ccsDPfHf.s 			page 96


 1405              		.loc 1 1603 0
 1406 0056 0320     		movs	r0, #3
 1407 0058 18E0     		b	.L117
 1408              	.L123:
1615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1409              		.loc 1 1615 0
 1410 005a 9A68     		ldr	r2, [r3, #8]
 1411 005c 22F04002 		bic	r2, r2, #64
 1412 0060 9A60     		str	r2, [r3, #8]
1618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1413              		.loc 1 1618 0
 1414 0062 A06F     		ldr	r0, [r4, #120]
 1415 0064 10B1     		cbz	r0, .L118
1620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1416              		.loc 1 1620 0
 1417 0066 FFF7FEFF 		bl	HAL_DMA_Abort
 1418              	.LVL104:
 1419 006a 20B9     		cbnz	r0, .L125
 1420              	.L118:
1632:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1421              		.loc 1 1632 0
 1422 006c 2046     		mov	r0, r4
 1423 006e FFF7FEFF 		bl	UART_EndRxTransfer
 1424              	.LVL105:
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1425              		.loc 1 1635 0
 1426 0072 0020     		movs	r0, #0
 1427 0074 0AE0     		b	.L117
 1428              	.L125:
1622:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 1429              		.loc 1 1622 0
 1430 0076 A06F     		ldr	r0, [r4, #120]
 1431 0078 FFF7FEFF 		bl	HAL_DMA_GetError
 1432              	.LVL106:
 1433 007c 2028     		cmp	r0, #32
 1434 007e F5D1     		bne	.L118
1625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1435              		.loc 1 1625 0
 1436 0080 1023     		movs	r3, #16
 1437 0082 C4F88830 		str	r3, [r4, #136]
1627:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 1438              		.loc 1 1627 0
 1439 0086 0320     		movs	r0, #3
 1440 0088 00E0     		b	.L117
 1441              	.L119:
1635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1442              		.loc 1 1635 0
 1443 008a 0020     		movs	r0, #0
 1444              	.L117:
1636:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1445              		.loc 1 1636 0
 1446 008c 38BD     		pop	{r3, r4, r5, pc}
 1447              		.cfi_endproc
 1448              	.LFE358:
 1450              		.section	.text.HAL_UART_Abort,"ax",%progbits
 1451              		.align	1
 1452              		.global	HAL_UART_Abort
ARM GAS  /tmp/ccsDPfHf.s 			page 97


 1453              		.syntax unified
 1454              		.thumb
 1455              		.thumb_func
 1456              		.fpu fpv5-d16
 1458              	HAL_UART_Abort:
 1459              	.LFB359:
1651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interr
 1460              		.loc 1 1651 0
 1461              		.cfi_startproc
 1462              		@ args = 0, pretend = 0, frame = 0
 1463              		@ frame_needed = 0, uses_anonymous_args = 0
 1464              	.LVL107:
 1465 0000 10B5     		push	{r4, lr}
 1466              	.LCFI8:
 1467              		.cfi_def_cfa_offset 8
 1468              		.cfi_offset 4, -8
 1469              		.cfi_offset 14, -4
 1470 0002 0446     		mov	r4, r0
1653:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 1471              		.loc 1 1653 0
 1472 0004 0268     		ldr	r2, [r0]
 1473 0006 1368     		ldr	r3, [r2]
 1474 0008 23F4F073 		bic	r3, r3, #480
 1475 000c 1360     		str	r3, [r2]
1654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1476              		.loc 1 1654 0
 1477 000e 0268     		ldr	r2, [r0]
 1478 0010 9168     		ldr	r1, [r2, #8]
 1479 0012 2C4B     		ldr	r3, .L135
 1480 0014 0B40     		ands	r3, r3, r1
 1481 0016 9360     		str	r3, [r2, #8]
1657:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1482              		.loc 1 1657 0
 1483 0018 0368     		ldr	r3, [r0]
 1484 001a 9A68     		ldr	r2, [r3, #8]
 1485 001c 12F0800F 		tst	r2, #128
 1486 0020 0BD0     		beq	.L127
1659:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1487              		.loc 1 1659 0
 1488 0022 9A68     		ldr	r2, [r3, #8]
 1489 0024 22F08002 		bic	r2, r2, #128
 1490 0028 9A60     		str	r2, [r3, #8]
1662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1491              		.loc 1 1662 0
 1492 002a 436F     		ldr	r3, [r0, #116]
 1493 002c 2BB1     		cbz	r3, .L127
1666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1494              		.loc 1 1666 0
 1495 002e 0022     		movs	r2, #0
 1496 0030 1A65     		str	r2, [r3, #80]
1668:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1497              		.loc 1 1668 0
 1498 0032 406F     		ldr	r0, [r0, #116]
 1499              	.LVL108:
 1500 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1501              	.LVL109:
 1502 0038 50BB     		cbnz	r0, .L132
ARM GAS  /tmp/ccsDPfHf.s 			page 98


 1503              	.L127:
1682:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1504              		.loc 1 1682 0
 1505 003a 2368     		ldr	r3, [r4]
 1506 003c 9A68     		ldr	r2, [r3, #8]
 1507 003e 12F0400F 		tst	r2, #64
 1508 0042 0BD0     		beq	.L129
1684:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1509              		.loc 1 1684 0
 1510 0044 9A68     		ldr	r2, [r3, #8]
 1511 0046 22F04002 		bic	r2, r2, #64
 1512 004a 9A60     		str	r2, [r3, #8]
1687:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1513              		.loc 1 1687 0
 1514 004c A36F     		ldr	r3, [r4, #120]
 1515 004e 2BB1     		cbz	r3, .L129
1691:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1516              		.loc 1 1691 0
 1517 0050 0022     		movs	r2, #0
 1518 0052 1A65     		str	r2, [r3, #80]
1693:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1519              		.loc 1 1693 0
 1520 0054 A06F     		ldr	r0, [r4, #120]
 1521 0056 FFF7FEFF 		bl	HAL_DMA_Abort
 1522              	.LVL110:
 1523 005a 18BB     		cbnz	r0, .L133
 1524              	.L129:
1707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 1525              		.loc 1 1707 0
 1526 005c 0023     		movs	r3, #0
 1527 005e A4F85630 		strh	r3, [r4, #86]	@ movhi
1708:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1528              		.loc 1 1708 0
 1529 0062 A4F85E30 		strh	r3, [r4, #94]	@ movhi
1711:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1530              		.loc 1 1711 0
 1531 0066 2368     		ldr	r3, [r4]
 1532 0068 0F22     		movs	r2, #15
 1533 006a 1A62     		str	r2, [r3, #32]
1714:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1534              		.loc 1 1714 0
 1535 006c 636E     		ldr	r3, [r4, #100]
 1536 006e B3F1005F 		cmp	r3, #536870912
 1537 0072 21D0     		beq	.L134
 1538              	.L130:
1720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1539              		.loc 1 1720 0
 1540 0074 2268     		ldr	r2, [r4]
 1541 0076 9369     		ldr	r3, [r2, #24]
 1542 0078 43F00803 		orr	r3, r3, #8
 1543 007c 9361     		str	r3, [r2, #24]
1723:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 1544              		.loc 1 1723 0
 1545 007e 2023     		movs	r3, #32
 1546 0080 C4F88030 		str	r3, [r4, #128]
1724:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1547              		.loc 1 1724 0
ARM GAS  /tmp/ccsDPfHf.s 			page 99


 1548 0084 C4F88430 		str	r3, [r4, #132]
1726:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1549              		.loc 1 1726 0
 1550 0088 0020     		movs	r0, #0
 1551 008a C4F88800 		str	r0, [r4, #136]
 1552              	.L128:
1729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1553              		.loc 1 1729 0
 1554 008e 10BD     		pop	{r4, pc}
 1555              	.LVL111:
 1556              	.L132:
1670:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 1557              		.loc 1 1670 0
 1558 0090 606F     		ldr	r0, [r4, #116]
 1559 0092 FFF7FEFF 		bl	HAL_DMA_GetError
 1560              	.LVL112:
 1561 0096 2028     		cmp	r0, #32
 1562 0098 CFD1     		bne	.L127
1673:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1563              		.loc 1 1673 0
 1564 009a 1023     		movs	r3, #16
 1565 009c C4F88830 		str	r3, [r4, #136]
1675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 1566              		.loc 1 1675 0
 1567 00a0 0320     		movs	r0, #3
 1568 00a2 F4E7     		b	.L128
 1569              	.L133:
1695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 1570              		.loc 1 1695 0
 1571 00a4 A06F     		ldr	r0, [r4, #120]
 1572 00a6 FFF7FEFF 		bl	HAL_DMA_GetError
 1573              	.LVL113:
 1574 00aa 2028     		cmp	r0, #32
 1575 00ac D6D1     		bne	.L129
1698:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1576              		.loc 1 1698 0
 1577 00ae 1023     		movs	r3, #16
 1578 00b0 C4F88830 		str	r3, [r4, #136]
1700:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 1579              		.loc 1 1700 0
 1580 00b4 0320     		movs	r0, #3
 1581 00b6 EAE7     		b	.L128
 1582              	.L134:
1716:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1583              		.loc 1 1716 0
 1584 00b8 2268     		ldr	r2, [r4]
 1585 00ba 9369     		ldr	r3, [r2, #24]
 1586 00bc 43F01003 		orr	r3, r3, #16
 1587 00c0 9361     		str	r3, [r2, #24]
 1588 00c2 D7E7     		b	.L130
 1589              	.L136:
 1590              		.align	2
 1591              	.L135:
 1592 00c4 FEFF7FEF 		.word	-276824066
 1593              		.cfi_endproc
 1594              	.LFE359:
 1596              		.section	.text.HAL_UART_AbortTransmit,"ax",%progbits
ARM GAS  /tmp/ccsDPfHf.s 			page 100


 1597              		.align	1
 1598              		.global	HAL_UART_AbortTransmit
 1599              		.syntax unified
 1600              		.thumb
 1601              		.thumb_func
 1602              		.fpu fpv5-d16
 1604              	HAL_UART_AbortTransmit:
 1605              	.LFB360:
1744:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable TCIE, TXEIE and TXFTIE interrupts */
 1606              		.loc 1 1744 0
 1607              		.cfi_startproc
 1608              		@ args = 0, pretend = 0, frame = 0
 1609              		@ frame_needed = 0, uses_anonymous_args = 0
 1610              	.LVL114:
 1611 0000 10B5     		push	{r4, lr}
 1612              	.LCFI9:
 1613              		.cfi_def_cfa_offset 8
 1614              		.cfi_offset 4, -8
 1615              		.cfi_offset 14, -4
 1616 0002 0446     		mov	r4, r0
1746:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 1617              		.loc 1 1746 0
 1618 0004 0268     		ldr	r2, [r0]
 1619 0006 1368     		ldr	r3, [r2]
 1620 0008 23F0C003 		bic	r3, r3, #192
 1621 000c 1360     		str	r3, [r2]
1747:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1622              		.loc 1 1747 0
 1623 000e 0268     		ldr	r2, [r0]
 1624 0010 9368     		ldr	r3, [r2, #8]
 1625 0012 23F40003 		bic	r3, r3, #8388608
 1626 0016 9360     		str	r3, [r2, #8]
1750:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1627              		.loc 1 1750 0
 1628 0018 0368     		ldr	r3, [r0]
 1629 001a 9A68     		ldr	r2, [r3, #8]
 1630 001c 12F0800F 		tst	r2, #128
 1631 0020 0BD0     		beq	.L138
1752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1632              		.loc 1 1752 0
 1633 0022 9A68     		ldr	r2, [r3, #8]
 1634 0024 22F08002 		bic	r2, r2, #128
 1635 0028 9A60     		str	r2, [r3, #8]
1755:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1636              		.loc 1 1755 0
 1637 002a 436F     		ldr	r3, [r0, #116]
 1638 002c 2BB1     		cbz	r3, .L138
1759:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1639              		.loc 1 1759 0
 1640 002e 0022     		movs	r2, #0
 1641 0030 1A65     		str	r2, [r3, #80]
1761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1642              		.loc 1 1761 0
 1643 0032 406F     		ldr	r0, [r0, #116]
 1644              	.LVL115:
 1645 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1646              	.LVL116:
ARM GAS  /tmp/ccsDPfHf.s 			page 101


 1647 0038 58B9     		cbnz	r0, .L142
 1648              	.L138:
1775:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1649              		.loc 1 1775 0
 1650 003a 0023     		movs	r3, #0
 1651 003c A4F85630 		strh	r3, [r4, #86]	@ movhi
1778:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1652              		.loc 1 1778 0
 1653 0040 636E     		ldr	r3, [r4, #100]
 1654 0042 B3F1005F 		cmp	r3, #536870912
 1655 0046 0ED0     		beq	.L143
 1656              	.L140:
1784:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1657              		.loc 1 1784 0
 1658 0048 2023     		movs	r3, #32
 1659 004a C4F88030 		str	r3, [r4, #128]
1786:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1660              		.loc 1 1786 0
 1661 004e 0020     		movs	r0, #0
 1662              	.L139:
1787:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1663              		.loc 1 1787 0
 1664 0050 10BD     		pop	{r4, pc}
 1665              	.LVL117:
 1666              	.L142:
1763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 1667              		.loc 1 1763 0
 1668 0052 606F     		ldr	r0, [r4, #116]
 1669 0054 FFF7FEFF 		bl	HAL_DMA_GetError
 1670              	.LVL118:
 1671 0058 2028     		cmp	r0, #32
 1672 005a EED1     		bne	.L138
1766:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1673              		.loc 1 1766 0
 1674 005c 1023     		movs	r3, #16
 1675 005e C4F88830 		str	r3, [r4, #136]
1768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 1676              		.loc 1 1768 0
 1677 0062 0320     		movs	r0, #3
 1678 0064 F4E7     		b	.L139
 1679              	.L143:
1780:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1680              		.loc 1 1780 0
 1681 0066 2268     		ldr	r2, [r4]
 1682 0068 9369     		ldr	r3, [r2, #24]
 1683 006a 43F01003 		orr	r3, r3, #16
 1684 006e 9361     		str	r3, [r2, #24]
 1685 0070 EAE7     		b	.L140
 1686              		.cfi_endproc
 1687              	.LFE360:
 1689              		.section	.text.HAL_UART_AbortReceive,"ax",%progbits
 1690              		.align	1
 1691              		.global	HAL_UART_AbortReceive
 1692              		.syntax unified
 1693              		.thumb
 1694              		.thumb_func
 1695              		.fpu fpv5-d16
ARM GAS  /tmp/ccsDPfHf.s 			page 102


 1697              	HAL_UART_AbortReceive:
 1698              	.LFB361:
1802:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
 1699              		.loc 1 1802 0
 1700              		.cfi_startproc
 1701              		@ args = 0, pretend = 0, frame = 0
 1702              		@ frame_needed = 0, uses_anonymous_args = 0
 1703              	.LVL119:
 1704 0000 10B5     		push	{r4, lr}
 1705              	.LCFI10:
 1706              		.cfi_def_cfa_offset 8
 1707              		.cfi_offset 4, -8
 1708              		.cfi_offset 14, -4
 1709 0002 0446     		mov	r4, r0
1804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 1710              		.loc 1 1804 0
 1711 0004 0268     		ldr	r2, [r0]
 1712 0006 1368     		ldr	r3, [r2]
 1713 0008 23F49073 		bic	r3, r3, #288
 1714 000c 1360     		str	r3, [r2]
1805:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1715              		.loc 1 1805 0
 1716 000e 0268     		ldr	r2, [r0]
 1717 0010 9168     		ldr	r1, [r2, #8]
 1718 0012 164B     		ldr	r3, .L149
 1719 0014 0B40     		ands	r3, r3, r1
 1720 0016 9360     		str	r3, [r2, #8]
1808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1721              		.loc 1 1808 0
 1722 0018 0368     		ldr	r3, [r0]
 1723 001a 9A68     		ldr	r2, [r3, #8]
 1724 001c 12F0400F 		tst	r2, #64
 1725 0020 0BD0     		beq	.L145
1810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1726              		.loc 1 1810 0
 1727 0022 9A68     		ldr	r2, [r3, #8]
 1728 0024 22F04002 		bic	r2, r2, #64
 1729 0028 9A60     		str	r2, [r3, #8]
1813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 1730              		.loc 1 1813 0
 1731 002a 836F     		ldr	r3, [r0, #120]
 1732 002c 2BB1     		cbz	r3, .L145
1817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1733              		.loc 1 1817 0
 1734 002e 0022     		movs	r2, #0
 1735 0030 1A65     		str	r2, [r3, #80]
1819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 1736              		.loc 1 1819 0
 1737 0032 806F     		ldr	r0, [r0, #120]
 1738              	.LVL120:
 1739 0034 FFF7FEFF 		bl	HAL_DMA_Abort
 1740              	.LVL121:
 1741 0038 70B9     		cbnz	r0, .L148
 1742              	.L145:
1833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1743              		.loc 1 1833 0
 1744 003a 0020     		movs	r0, #0
ARM GAS  /tmp/ccsDPfHf.s 			page 103


 1745 003c A4F85E00 		strh	r0, [r4, #94]	@ movhi
1836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1746              		.loc 1 1836 0
 1747 0040 2368     		ldr	r3, [r4]
 1748 0042 0F22     		movs	r2, #15
 1749 0044 1A62     		str	r2, [r3, #32]
1839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1750              		.loc 1 1839 0
 1751 0046 2268     		ldr	r2, [r4]
 1752 0048 9369     		ldr	r3, [r2, #24]
 1753 004a 43F00803 		orr	r3, r3, #8
 1754 004e 9361     		str	r3, [r2, #24]
1842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1755              		.loc 1 1842 0
 1756 0050 2023     		movs	r3, #32
 1757 0052 C4F88430 		str	r3, [r4, #132]
 1758              	.L146:
1845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1759              		.loc 1 1845 0
 1760 0056 10BD     		pop	{r4, pc}
 1761              	.LVL122:
 1762              	.L148:
1821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 1763              		.loc 1 1821 0
 1764 0058 A06F     		ldr	r0, [r4, #120]
 1765 005a FFF7FEFF 		bl	HAL_DMA_GetError
 1766              	.LVL123:
 1767 005e 2028     		cmp	r0, #32
 1768 0060 EBD1     		bne	.L145
1824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1769              		.loc 1 1824 0
 1770 0062 1023     		movs	r3, #16
 1771 0064 C4F88830 		str	r3, [r4, #136]
1826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 1772              		.loc 1 1826 0
 1773 0068 0320     		movs	r0, #3
 1774 006a F4E7     		b	.L146
 1775              	.L150:
 1776              		.align	2
 1777              	.L149:
 1778 006c FEFFFFEF 		.word	-268435458
 1779              		.cfi_endproc
 1780              	.LFE361:
 1782              		.section	.text.HAL_UART_TxCpltCallback,"ax",%progbits
 1783              		.align	1
 1784              		.weak	HAL_UART_TxCpltCallback
 1785              		.syntax unified
 1786              		.thumb
 1787              		.thumb_func
 1788              		.fpu fpv5-d16
 1790              	HAL_UART_TxCpltCallback:
 1791              	.LFB366:
2412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1792              		.loc 1 2412 0
 1793              		.cfi_startproc
 1794              		@ args = 0, pretend = 0, frame = 0
 1795              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 104


 1796              		@ link register save eliminated.
 1797              	.LVL124:
2419:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1798              		.loc 1 2419 0
 1799 0000 7047     		bx	lr
 1800              		.cfi_endproc
 1801              	.LFE366:
 1803              		.section	.text.UART_DMATransmitCplt,"ax",%progbits
 1804              		.align	1
 1805              		.syntax unified
 1806              		.thumb
 1807              		.thumb_func
 1808              		.fpu fpv5-d16
 1810              	UART_DMATransmitCplt:
 1811              	.LFB391:
3336:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1812              		.loc 1 3336 0
 1813              		.cfi_startproc
 1814              		@ args = 0, pretend = 0, frame = 0
 1815              		@ frame_needed = 0, uses_anonymous_args = 0
 1816              	.LVL125:
 1817 0000 08B5     		push	{r3, lr}
 1818              	.LCFI11:
 1819              		.cfi_def_cfa_offset 8
 1820              		.cfi_offset 3, -8
 1821              		.cfi_offset 14, -4
3337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1822              		.loc 1 3337 0
 1823 0002 836B     		ldr	r3, [r0, #56]
 1824              	.LVL126:
3340:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 1825              		.loc 1 3340 0
 1826 0004 C269     		ldr	r2, [r0, #28]
 1827 0006 B2F5807F 		cmp	r2, #256
 1828 000a 0DD0     		beq	.L153
3342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1829              		.loc 1 3342 0
 1830 000c 0022     		movs	r2, #0
 1831 000e A3F85620 		strh	r2, [r3, #86]	@ movhi
3346:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1832              		.loc 1 3346 0
 1833 0012 1968     		ldr	r1, [r3]
 1834 0014 8A68     		ldr	r2, [r1, #8]
 1835 0016 22F08002 		bic	r2, r2, #128
 1836 001a 8A60     		str	r2, [r1, #8]
3349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 1837              		.loc 1 3349 0
 1838 001c 1A68     		ldr	r2, [r3]
 1839 001e 1368     		ldr	r3, [r2]
 1840              	.LVL127:
 1841 0020 43F04003 		orr	r3, r3, #64
 1842 0024 1360     		str	r3, [r2]
 1843              	.LVL128:
 1844              	.L152:
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1845              		.loc 1 3362 0
 1846 0026 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccsDPfHf.s 			page 105


 1847              	.LVL129:
 1848              	.L153:
3359:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1849              		.loc 1 3359 0
 1850 0028 1846     		mov	r0, r3
 1851              	.LVL130:
 1852 002a FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1853              	.LVL131:
3362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1854              		.loc 1 3362 0
 1855 002e FAE7     		b	.L152
 1856              		.cfi_endproc
 1857              	.LFE391:
 1859              		.section	.text.UART_EndTransmit_IT,"ax",%progbits
 1860              		.align	1
 1861              		.syntax unified
 1862              		.thumb
 1863              		.thumb_func
 1864              		.fpu fpv5-d16
 1866              	UART_EndTransmit_IT:
 1867              	.LFB405:
3808:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3809:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3810:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief  Wrap up transmission in non-blocking mode.
3811:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param  huart pointer to a UART_HandleTypeDef structure that contains
3812:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *                the configuration information for the specified UART module.
3813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
3816:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 1868              		.loc 1 3816 0
 1869              		.cfi_startproc
 1870              		@ args = 0, pretend = 0, frame = 0
 1871              		@ frame_needed = 0, uses_anonymous_args = 0
 1872              	.LVL132:
 1873 0000 08B5     		push	{r3, lr}
 1874              	.LCFI12:
 1875              		.cfi_def_cfa_offset 8
 1876              		.cfi_offset 3, -8
 1877              		.cfi_offset 14, -4
3817:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable the UART Transmit Complete Interrupt */
3818:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 1878              		.loc 1 3818 0
 1879 0002 0168     		ldr	r1, [r0]
 1880 0004 0A68     		ldr	r2, [r1]
 1881 0006 22F04002 		bic	r2, r2, #64
 1882 000a 0A60     		str	r2, [r1]
3819:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3820:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Tx process is ended, restore huart->gState to Ready */
3821:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_READY;
 1883              		.loc 1 3821 0
 1884 000c 2022     		movs	r2, #32
 1885 000e C0F88020 		str	r2, [r0, #128]
3822:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3823:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Cleat TxISR function pointer */
3824:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxISR = NULL;
 1886              		.loc 1 3824 0
ARM GAS  /tmp/ccsDPfHf.s 			page 106


 1887 0012 0022     		movs	r2, #0
 1888 0014 0267     		str	r2, [r0, #112]
3825:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3826:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3827:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call registered Tx complete callback*/
3828:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxCpltCallback(huart);
3829:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3830:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /*Call legacy weak Tx complete callback*/
3831:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   HAL_UART_TxCpltCallback(huart);
 1889              		.loc 1 3831 0
 1890 0016 FFF7FEFF 		bl	HAL_UART_TxCpltCallback
 1891              	.LVL133:
3832:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3833:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 1892              		.loc 1 3833 0
 1893 001a 08BD     		pop	{r3, pc}
 1894              		.cfi_endproc
 1895              	.LFE405:
 1897              		.section	.text.HAL_UART_TxHalfCpltCallback,"ax",%progbits
 1898              		.align	1
 1899              		.weak	HAL_UART_TxHalfCpltCallback
 1900              		.syntax unified
 1901              		.thumb
 1902              		.thumb_func
 1903              		.fpu fpv5-d16
 1905              	HAL_UART_TxHalfCpltCallback:
 1906              	.LFB367:
2427:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1907              		.loc 1 2427 0
 1908              		.cfi_startproc
 1909              		@ args = 0, pretend = 0, frame = 0
 1910              		@ frame_needed = 0, uses_anonymous_args = 0
 1911              		@ link register save eliminated.
 1912              	.LVL134:
2434:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1913              		.loc 1 2434 0
 1914 0000 7047     		bx	lr
 1915              		.cfi_endproc
 1916              	.LFE367:
 1918              		.section	.text.UART_DMATxHalfCplt,"ax",%progbits
 1919              		.align	1
 1920              		.syntax unified
 1921              		.thumb
 1922              		.thumb_func
 1923              		.fpu fpv5-d16
 1925              	UART_DMATxHalfCplt:
 1926              	.LFB392:
3370:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 1927              		.loc 1 3370 0
 1928              		.cfi_startproc
 1929              		@ args = 0, pretend = 0, frame = 0
 1930              		@ frame_needed = 0, uses_anonymous_args = 0
 1931              	.LVL135:
 1932 0000 08B5     		push	{r3, lr}
 1933              	.LCFI13:
 1934              		.cfi_def_cfa_offset 8
 1935              		.cfi_offset 3, -8
ARM GAS  /tmp/ccsDPfHf.s 			page 107


 1936              		.cfi_offset 14, -4
 1937              	.LVL136:
3378:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 1938              		.loc 1 3378 0
 1939 0002 806B     		ldr	r0, [r0, #56]
 1940              	.LVL137:
 1941 0004 FFF7FEFF 		bl	HAL_UART_TxHalfCpltCallback
 1942              	.LVL138:
3380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1943              		.loc 1 3380 0
 1944 0008 08BD     		pop	{r3, pc}
 1945              		.cfi_endproc
 1946              	.LFE392:
 1948              		.section	.text.HAL_UART_RxCpltCallback,"ax",%progbits
 1949              		.align	1
 1950              		.weak	HAL_UART_RxCpltCallback
 1951              		.syntax unified
 1952              		.thumb
 1953              		.thumb_func
 1954              		.fpu fpv5-d16
 1956              	HAL_UART_RxCpltCallback:
 1957              	.LFB368:
2442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 1958              		.loc 1 2442 0
 1959              		.cfi_startproc
 1960              		@ args = 0, pretend = 0, frame = 0
 1961              		@ frame_needed = 0, uses_anonymous_args = 0
 1962              		@ link register save eliminated.
 1963              	.LVL139:
2449:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 1964              		.loc 1 2449 0
 1965 0000 7047     		bx	lr
 1966              		.cfi_endproc
 1967              	.LFE368:
 1969              		.section	.text.UART_RxISR_8BIT,"ax",%progbits
 1970              		.align	1
 1971              		.syntax unified
 1972              		.thumb
 1973              		.thumb_func
 1974              		.fpu fpv5-d16
 1976              	UART_RxISR_8BIT:
 1977              	.LFB406:
3834:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3835:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3836:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief RX interrrupt handler for 7 or 8 bits data word length .
3837:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3838:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3839:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3840:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
3841:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 1978              		.loc 1 3841 0
 1979              		.cfi_startproc
 1980              		@ args = 0, pretend = 0, frame = 0
 1981              		@ frame_needed = 0, uses_anonymous_args = 0
 1982              	.LVL140:
 1983 0000 08B5     		push	{r3, lr}
 1984              	.LCFI14:
ARM GAS  /tmp/ccsDPfHf.s 			page 108


 1985              		.cfi_def_cfa_offset 8
 1986              		.cfi_offset 3, -8
 1987              		.cfi_offset 14, -4
3842:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 1988              		.loc 1 3842 0
 1989 0002 B0F86030 		ldrh	r3, [r0, #96]
 1990              	.LVL141:
3843:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  uhdata;
3844:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3845:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3846:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 1991              		.loc 1 3846 0
 1992 0006 D0F88420 		ldr	r2, [r0, #132]
 1993 000a 222A     		cmp	r2, #34
 1994 000c 05D0     		beq	.L166
3847:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
3850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr++;
3851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount--;
3852:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3854:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3855:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupts */
3856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
3857:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3860:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3861:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3864:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxISR = NULL;
3866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3868:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3869:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3870:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3871:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3873:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3874:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3875:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
3877:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3879:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 1995              		.loc 1 3879 0
 1996 000e 0268     		ldr	r2, [r0]
 1997 0010 9369     		ldr	r3, [r2, #24]
 1998              	.LVL142:
 1999 0012 43F00803 		orr	r3, r3, #8
 2000 0016 9361     		str	r3, [r2, #24]
 2001              	.LVL143:
 2002              	.L162:
3880:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccsDPfHf.s 			page 109


3881:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 2003              		.loc 1 3881 0
 2004 0018 08BD     		pop	{r3, pc}
 2005              	.LVL144:
 2006              	.L166:
3848:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 2007              		.loc 1 3848 0
 2008 001a 0268     		ldr	r2, [r0]
 2009 001c 516A     		ldr	r1, [r2, #36]
 2010              	.LVL145:
3849:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr++;
 2011              		.loc 1 3849 0
 2012 001e DBB2     		uxtb	r3, r3
 2013              	.LVL146:
 2014 0020 826D     		ldr	r2, [r0, #88]
 2015 0022 0B40     		ands	r3, r3, r1
 2016 0024 1370     		strb	r3, [r2]
 2017              	.LVL147:
3850:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount--;
 2018              		.loc 1 3850 0
 2019 0026 836D     		ldr	r3, [r0, #88]
 2020 0028 0133     		adds	r3, r3, #1
 2021 002a 8365     		str	r3, [r0, #88]
3851:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2022              		.loc 1 3851 0
 2023 002c B0F85E30 		ldrh	r3, [r0, #94]
 2024 0030 013B     		subs	r3, r3, #1
 2025 0032 9BB2     		uxth	r3, r3
 2026 0034 A0F85E30 		strh	r3, [r0, #94]	@ movhi
3853:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2027              		.loc 1 3853 0
 2028 0038 B0F85E30 		ldrh	r3, [r0, #94]
 2029 003c 9BB2     		uxth	r3, r3
 2030 003e 002B     		cmp	r3, #0
 2031 0040 EAD1     		bne	.L162
3856:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2032              		.loc 1 3856 0
 2033 0042 0268     		ldr	r2, [r0]
 2034 0044 1368     		ldr	r3, [r2]
 2035 0046 23F49073 		bic	r3, r3, #288
 2036 004a 1360     		str	r3, [r2]
3859:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2037              		.loc 1 3859 0
 2038 004c 0268     		ldr	r2, [r0]
 2039 004e 9368     		ldr	r3, [r2, #8]
 2040 0050 23F00103 		bic	r3, r3, #1
 2041 0054 9360     		str	r3, [r2, #8]
3862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2042              		.loc 1 3862 0
 2043 0056 2023     		movs	r3, #32
 2044 0058 C0F88430 		str	r3, [r0, #132]
3865:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2045              		.loc 1 3865 0
 2046 005c 0023     		movs	r3, #0
 2047 005e C366     		str	r3, [r0, #108]
3872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2048              		.loc 1 3872 0
ARM GAS  /tmp/ccsDPfHf.s 			page 110


 2049 0060 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2050              	.LVL148:
 2051 0064 D8E7     		b	.L162
 2052              		.cfi_endproc
 2053              	.LFE406:
 2055              		.section	.text.UART_RxISR_16BIT,"ax",%progbits
 2056              		.align	1
 2057              		.syntax unified
 2058              		.thumb
 2059              		.thumb_func
 2060              		.fpu fpv5-d16
 2062              	UART_RxISR_16BIT:
 2063              	.LFB407:
3882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3883:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3884:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief RX interrrupt handler for 9 bits data word length .
3885:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3887:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3888:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3889:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
3891:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 2064              		.loc 1 3891 0
 2065              		.cfi_startproc
 2066              		@ args = 0, pretend = 0, frame = 0
 2067              		@ frame_needed = 0, uses_anonymous_args = 0
 2068              	.LVL149:
 2069 0000 08B5     		push	{r3, lr}
 2070              	.LCFI15:
 2071              		.cfi_def_cfa_offset 8
 2072              		.cfi_offset 3, -8
 2073              		.cfi_offset 14, -4
3892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t *tmp;
3893:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t uhMask = huart->Mask;
 2074              		.loc 1 3893 0
 2075 0002 B0F86020 		ldrh	r2, [r0, #96]
 2076              	.LVL150:
3894:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  uhdata;
3895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2077              		.loc 1 3897 0
 2078 0006 D0F88430 		ldr	r3, [r0, #132]
 2079 000a 222B     		cmp	r3, #34
 2080 000c 05D0     		beq	.L171
3898:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
3901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
3902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
3903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount--;
3904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if (huart->RxXferCount == 0U)
3906:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
3908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
ARM GAS  /tmp/ccsDPfHf.s 			page 111


3909:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
3911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Rx process is completed, restore huart->RxState to Ready */
3914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxState = HAL_UART_STATE_READY;
3915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Clear RxISR function pointer */
3917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxISR = NULL;
3918:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3920:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /*Call registered Rx complete callback*/
3921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxCpltCallback(huart);
3922:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3923:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /*Call legacy weak Rx complete callback*/
3924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       HAL_UART_RxCpltCallback(huart);
3925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3926:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3928:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
3929:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
3931:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2081              		.loc 1 3931 0
 2082 000e 0268     		ldr	r2, [r0]
 2083              	.LVL151:
 2084 0010 9369     		ldr	r3, [r2, #24]
 2085 0012 43F00803 		orr	r3, r3, #8
 2086 0016 9361     		str	r3, [r2, #24]
 2087              	.LVL152:
 2088              	.L167:
3932:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
3933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 2089              		.loc 1 3933 0
 2090 0018 08BD     		pop	{r3, pc}
 2091              	.LVL153:
 2092              	.L171:
3899:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     tmp = (uint16_t *) huart->pRxBuffPtr ;
 2093              		.loc 1 3899 0
 2094 001a 0368     		ldr	r3, [r0]
 2095 001c 5B6A     		ldr	r3, [r3, #36]
 2096              	.LVL154:
3900:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     *tmp = (uint16_t)(uhdata & uhMask);
 2097              		.loc 1 3900 0
 2098 001e 816D     		ldr	r1, [r0, #88]
 2099              	.LVL155:
3901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->pRxBuffPtr += 2U;
 2100              		.loc 1 3901 0
 2101 0020 1340     		ands	r3, r3, r2
 2102              	.LVL156:
 2103 0022 0B80     		strh	r3, [r1]	@ movhi
3902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount--;
 2104              		.loc 1 3902 0
 2105 0024 836D     		ldr	r3, [r0, #88]
 2106 0026 0233     		adds	r3, r3, #2
 2107 0028 8365     		str	r3, [r0, #88]
3903:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 112


 2108              		.loc 1 3903 0
 2109 002a B0F85E30 		ldrh	r3, [r0, #94]
 2110 002e 013B     		subs	r3, r3, #1
 2111 0030 9BB2     		uxth	r3, r3
 2112 0032 A0F85E30 		strh	r3, [r0, #94]	@ movhi
3905:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2113              		.loc 1 3905 0
 2114 0036 B0F85E30 		ldrh	r3, [r0, #94]
 2115 003a 9BB2     		uxth	r3, r3
 2116 003c 002B     		cmp	r3, #0
 2117 003e EBD1     		bne	.L167
3908:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2118              		.loc 1 3908 0
 2119 0040 0268     		ldr	r2, [r0]
 2120              	.LVL157:
 2121 0042 1368     		ldr	r3, [r2]
 2122 0044 23F49073 		bic	r3, r3, #288
 2123 0048 1360     		str	r3, [r2]
3911:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2124              		.loc 1 3911 0
 2125 004a 0268     		ldr	r2, [r0]
 2126 004c 9368     		ldr	r3, [r2, #8]
 2127 004e 23F00103 		bic	r3, r3, #1
 2128 0052 9360     		str	r3, [r2, #8]
3914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2129              		.loc 1 3914 0
 2130 0054 2023     		movs	r3, #32
 2131 0056 C0F88430 		str	r3, [r0, #132]
3917:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2132              		.loc 1 3917 0
 2133 005a 0023     		movs	r3, #0
 2134 005c C366     		str	r3, [r0, #108]
3924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2135              		.loc 1 3924 0
 2136 005e FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2137              	.LVL158:
 2138 0062 D9E7     		b	.L167
 2139              		.cfi_endproc
 2140              	.LFE407:
 2142              		.section	.text.UART_RxISR_8BIT_FIFOEN,"ax",%progbits
 2143              		.align	1
 2144              		.syntax unified
 2145              		.thumb
 2146              		.thumb_func
 2147              		.fpu fpv5-d16
 2149              	UART_RxISR_8BIT_FIFOEN:
 2150              	.LFB408:
3934:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3935:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
3936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief RX interrrupt handler for 7 or 8  bits data word length and FIFO mode is enabled.
3937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
3938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
3939:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
3940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
3941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
3942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
3943:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
ARM GAS  /tmp/ccsDPfHf.s 			page 113


 2151              		.loc 1 3943 0
 2152              		.cfi_startproc
 2153              		@ args = 0, pretend = 0, frame = 0
 2154              		@ frame_needed = 0, uses_anonymous_args = 0
 2155              	.LVL159:
 2156 0000 70B5     		push	{r4, r5, r6, lr}
 2157              	.LCFI16:
 2158              		.cfi_def_cfa_offset 16
 2159              		.cfi_offset 4, -16
 2160              		.cfi_offset 5, -12
 2161              		.cfi_offset 6, -8
 2162              		.cfi_offset 14, -4
3944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  uhMask = huart->Mask;
 2163              		.loc 1 3944 0
 2164 0002 B0F86050 		ldrh	r5, [r0, #96]
 2165              	.LVL160:
3945:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  uhdata;
3946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t   nb_rx_data;
3947:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  rxdatacount;
3948:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
3950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2166              		.loc 1 3950 0
 2167 0006 D0F88430 		ldr	r3, [r0, #132]
 2168 000a 222B     		cmp	r3, #34
 2169 000c 05D0     		beq	.L179
3951:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
3953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
3955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
3956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pRxBuffPtr++;
3957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxXferCount--;
3958:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (huart->RxXferCount == 0U)
3960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
3961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
3962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
3963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3964:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO 
3965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
3966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3967:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
3968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
3969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3970:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Clear RxISR function pointer */
3971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR = NULL;
3972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3973:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
3974:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /*Call registered Rx complete callback*/
3975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxCpltCallback(huart);
3976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
3977:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
3978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
3979:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
3980:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
3981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
ARM GAS  /tmp/ccsDPfHf.s 			page 114


3982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3983:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* When remaining number of bytes to receive is less than the RX FIFO
3984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     threshold, next incoming frames are processed as if FIFO mode was
3985:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     disabled (i.e. one interrupt per received frame).
3986:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     */
3987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     rxdatacount = huart->RxXferCount;
3988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
3989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
3990:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART RXFT interrupt*/
3991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
3992:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3993:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Update the RxISR function pointer */
3994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxISR = UART_RxISR_8BIT;
3995:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
3996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART Data Register Not Empty interrupt */
3997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
3998:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
3999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
4000:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
4001:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
4002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
4003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2170              		.loc 1 4003 0
 2171 000e 0268     		ldr	r2, [r0]
 2172 0010 9369     		ldr	r3, [r2, #24]
 2173 0012 43F00803 		orr	r3, r3, #8
 2174 0016 9361     		str	r3, [r2, #24]
 2175              	.LVL161:
 2176              	.L172:
4004:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
4005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 2177              		.loc 1 4005 0
 2178 0018 70BD     		pop	{r4, r5, r6, pc}
 2179              	.LVL162:
 2180              	.L179:
 2181 001a 0446     		mov	r4, r0
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2182              		.loc 1 3952 0
 2183 001c B0F86860 		ldrh	r6, [r0, #104]
 2184              	.LVL163:
 2185 0020 01E0     		b	.L174
 2186              	.LVL164:
 2187              	.L175:
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2188              		.loc 1 3952 0 is_stmt 0 discriminator 2
 2189 0022 013E     		subs	r6, r6, #1
 2190              	.LVL165:
 2191 0024 B6B2     		uxth	r6, r6
 2192              	.LVL166:
 2193              	.L174:
3952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2194              		.loc 1 3952 0 discriminator 1
 2195 0026 36B3     		cbz	r6, .L180
3954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 2196              		.loc 1 3954 0 is_stmt 1
 2197 0028 2368     		ldr	r3, [r4]
 2198 002a 596A     		ldr	r1, [r3, #36]
ARM GAS  /tmp/ccsDPfHf.s 			page 115


 2199              	.LVL167:
3955:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pRxBuffPtr++;
 2200              		.loc 1 3955 0
 2201 002c EBB2     		uxtb	r3, r5
 2202 002e A26D     		ldr	r2, [r4, #88]
 2203 0030 0B40     		ands	r3, r3, r1
 2204 0032 1370     		strb	r3, [r2]
3956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxXferCount--;
 2205              		.loc 1 3956 0
 2206 0034 A36D     		ldr	r3, [r4, #88]
 2207 0036 0133     		adds	r3, r3, #1
 2208 0038 A365     		str	r3, [r4, #88]
3957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2209              		.loc 1 3957 0
 2210 003a B4F85E30 		ldrh	r3, [r4, #94]
 2211 003e 013B     		subs	r3, r3, #1
 2212 0040 9BB2     		uxth	r3, r3
 2213 0042 A4F85E30 		strh	r3, [r4, #94]	@ movhi
3959:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 2214              		.loc 1 3959 0
 2215 0046 B4F85E30 		ldrh	r3, [r4, #94]
 2216 004a 9BB2     		uxth	r3, r3
 2217 004c 002B     		cmp	r3, #0
 2218 004e E8D1     		bne	.L175
3962:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2219              		.loc 1 3962 0
 2220 0050 2268     		ldr	r2, [r4]
 2221 0052 1368     		ldr	r3, [r2]
 2222 0054 23F48073 		bic	r3, r3, #256
 2223 0058 1360     		str	r3, [r2]
3965:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2224              		.loc 1 3965 0
 2225 005a 2268     		ldr	r2, [r4]
 2226 005c 9168     		ldr	r1, [r2, #8]
 2227              	.LVL168:
 2228 005e 114B     		ldr	r3, .L181
 2229 0060 0B40     		ands	r3, r3, r1
 2230 0062 9360     		str	r3, [r2, #8]
3968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2231              		.loc 1 3968 0
 2232 0064 2023     		movs	r3, #32
 2233 0066 C4F88430 		str	r3, [r4, #132]
3971:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2234              		.loc 1 3971 0
 2235 006a 0023     		movs	r3, #0
 2236 006c E366     		str	r3, [r4, #108]
3978:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2237              		.loc 1 3978 0
 2238 006e 2046     		mov	r0, r4
 2239 0070 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2240              	.LVL169:
 2241 0074 D5E7     		b	.L175
 2242              	.L180:
3987:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 2243              		.loc 1 3987 0
 2244 0076 B4F85E30 		ldrh	r3, [r4, #94]
 2245 007a 9BB2     		uxth	r3, r3
ARM GAS  /tmp/ccsDPfHf.s 			page 116


 2246              	.LVL170:
3988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2247              		.loc 1 3988 0
 2248 007c 002B     		cmp	r3, #0
 2249 007e CBD0     		beq	.L172
3988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2250              		.loc 1 3988 0 is_stmt 0 discriminator 1
 2251 0080 B4F86820 		ldrh	r2, [r4, #104]
 2252 0084 9A42     		cmp	r2, r3
 2253 0086 C7D9     		bls	.L172
3991:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2254              		.loc 1 3991 0 is_stmt 1
 2255 0088 2268     		ldr	r2, [r4]
 2256 008a 9368     		ldr	r3, [r2, #8]
 2257              	.LVL171:
 2258 008c 23F08053 		bic	r3, r3, #268435456
 2259 0090 9360     		str	r3, [r2, #8]
3994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2260              		.loc 1 3994 0
 2261 0092 054B     		ldr	r3, .L181+4
 2262 0094 E366     		str	r3, [r4, #108]
3997:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2263              		.loc 1 3997 0
 2264 0096 2268     		ldr	r2, [r4]
 2265 0098 1368     		ldr	r3, [r2]
 2266 009a 43F02003 		orr	r3, r3, #32
 2267 009e 1360     		str	r3, [r2]
 2268 00a0 BAE7     		b	.L172
 2269              	.L182:
 2270 00a2 00BF     		.align	2
 2271              	.L181:
 2272 00a4 FEFFFFEF 		.word	-268435458
 2273 00a8 00000000 		.word	UART_RxISR_8BIT
 2274              		.cfi_endproc
 2275              	.LFE408:
 2277              		.section	.text.UART_RxISR_16BIT_FIFOEN,"ax",%progbits
 2278              		.align	1
 2279              		.syntax unified
 2280              		.thumb
 2281              		.thumb_func
 2282              		.fpu fpv5-d16
 2284              	UART_RxISR_16BIT_FIFOEN:
 2285              	.LFB409:
4006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
4008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @brief RX interrrupt handler for 9 bits data word length and FIFO mode is enabled.
4009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @note   Function is called under interruption only, once
4010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   *         interruptions have been enabled by HAL_UART_Receive_IT()
4011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @param huart UART handle.
4012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   * @retval None
4013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   */
4014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
4015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** {
 2286              		.loc 1 4015 0
 2287              		.cfi_startproc
 2288              		@ args = 0, pretend = 0, frame = 0
 2289              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 117


 2290              	.LVL172:
 2291 0000 70B5     		push	{r4, r5, r6, lr}
 2292              	.LCFI17:
 2293              		.cfi_def_cfa_offset 16
 2294              		.cfi_offset 4, -16
 2295              		.cfi_offset 5, -12
 2296              		.cfi_offset 6, -8
 2297              		.cfi_offset 14, -4
4016:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t *tmp;
4017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  uhMask = huart->Mask;
 2298              		.loc 1 4017 0
 2299 0002 B0F86060 		ldrh	r6, [r0, #96]
 2300              	.LVL173:
4018:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  uhdata;
4019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t   nb_rx_data;
4020:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint16_t  rxdatacount;
4021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4022:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check that a Rx process is ongoing */
4023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 2301              		.loc 1 4023 0
 2302 0006 D0F88430 		ldr	r3, [r0, #132]
 2303 000a 222B     		cmp	r3, #34
 2304 000c 05D0     		beq	.L190
4024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
4025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
4026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
4027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
4028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       tmp = (uint16_t *) huart->pRxBuffPtr ;
4029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       *tmp = (uint16_t)(uhdata & uhMask);
4030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
4031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxXferCount--;
4032:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if (huart->RxXferCount == 0U)
4034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
4035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
4036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
4037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO 
4039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
4040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Rx process is completed, restore huart->RxState to Ready */
4042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
4043:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /* Clear RxISR function pointer */
4045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxISR = NULL;
4046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
4048:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /*Call registered Rx complete callback*/
4049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxCpltCallback(huart);
4050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #else
4051:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         /*Call legacy weak Rx complete callback*/
4052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         HAL_UART_RxCpltCallback(huart);
4053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
4054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
4055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
4056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* When remaining number of bytes to receive is less than the RX FIFO
ARM GAS  /tmp/ccsDPfHf.s 			page 118


4058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     threshold, next incoming frames are processed as if FIFO mode was
4059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     disabled (i.e. one interrupt per received frame).
4060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     */
4061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     rxdatacount = huart->RxXferCount;
4062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
4063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
4064:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Disable the UART RXFT interrupt*/
4065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
4066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Update the RxISR function pointer */
4068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxISR = UART_RxISR_16BIT;
4069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
4070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       /* Enable the UART Data Register Not Empty interrupt */
4071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
4072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
4073:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
4074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   else
4075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
4076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* Clear RXNE interrupt flag */
4077:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 2305              		.loc 1 4077 0
 2306 000e 0268     		ldr	r2, [r0]
 2307 0010 9369     		ldr	r3, [r2, #24]
 2308 0012 43F00803 		orr	r3, r3, #8
 2309 0016 9361     		str	r3, [r2, #24]
 2310              	.LVL174:
 2311              	.L183:
4078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
4079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 2312              		.loc 1 4079 0
 2313 0018 70BD     		pop	{r4, r5, r6, pc}
 2314              	.LVL175:
 2315              	.L190:
 2316 001a 0446     		mov	r4, r0
4025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2317              		.loc 1 4025 0
 2318 001c B0F86850 		ldrh	r5, [r0, #104]
 2319              	.LVL176:
 2320 0020 01E0     		b	.L185
 2321              	.LVL177:
 2322              	.L186:
4025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2323              		.loc 1 4025 0 is_stmt 0 discriminator 2
 2324 0022 013D     		subs	r5, r5, #1
 2325              	.LVL178:
 2326 0024 ADB2     		uxth	r5, r5
 2327              	.LVL179:
 2328              	.L185:
4025:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2329              		.loc 1 4025 0 discriminator 1
 2330 0026 2DB3     		cbz	r5, .L191
4027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       tmp = (uint16_t *) huart->pRxBuffPtr ;
 2331              		.loc 1 4027 0 is_stmt 1
 2332 0028 2368     		ldr	r3, [r4]
 2333 002a 5B6A     		ldr	r3, [r3, #36]
 2334              	.LVL180:
4028:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       *tmp = (uint16_t)(uhdata & uhMask);
ARM GAS  /tmp/ccsDPfHf.s 			page 119


 2335              		.loc 1 4028 0
 2336 002c A26D     		ldr	r2, [r4, #88]
 2337              	.LVL181:
4029:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->pRxBuffPtr += 2U;
 2338              		.loc 1 4029 0
 2339 002e 3340     		ands	r3, r3, r6
 2340              	.LVL182:
 2341 0030 1380     		strh	r3, [r2]	@ movhi
4030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       huart->RxXferCount--;
 2342              		.loc 1 4030 0
 2343 0032 A36D     		ldr	r3, [r4, #88]
 2344 0034 0233     		adds	r3, r3, #2
 2345 0036 A365     		str	r3, [r4, #88]
4031:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2346              		.loc 1 4031 0
 2347 0038 B4F85E30 		ldrh	r3, [r4, #94]
 2348 003c 013B     		subs	r3, r3, #1
 2349 003e 9BB2     		uxth	r3, r3
 2350 0040 A4F85E30 		strh	r3, [r4, #94]	@ movhi
4033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 2351              		.loc 1 4033 0
 2352 0044 B4F85E30 		ldrh	r3, [r4, #94]
 2353 0048 9BB2     		uxth	r3, r3
 2354 004a 002B     		cmp	r3, #0
 2355 004c E9D1     		bne	.L186
4036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2356              		.loc 1 4036 0
 2357 004e 2268     		ldr	r2, [r4]
 2358              	.LVL183:
 2359 0050 1368     		ldr	r3, [r2]
 2360 0052 23F48073 		bic	r3, r3, #256
 2361 0056 1360     		str	r3, [r2]
4039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2362              		.loc 1 4039 0
 2363 0058 2268     		ldr	r2, [r4]
 2364 005a 9168     		ldr	r1, [r2, #8]
 2365 005c 104B     		ldr	r3, .L192
 2366 005e 0B40     		ands	r3, r3, r1
 2367 0060 9360     		str	r3, [r2, #8]
4042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2368              		.loc 1 4042 0
 2369 0062 2023     		movs	r3, #32
 2370 0064 C4F88430 		str	r3, [r4, #132]
4045:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2371              		.loc 1 4045 0
 2372 0068 0023     		movs	r3, #0
 2373 006a E366     		str	r3, [r4, #108]
4052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2374              		.loc 1 4052 0
 2375 006c 2046     		mov	r0, r4
 2376 006e FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2377              	.LVL184:
 2378 0072 D6E7     		b	.L186
 2379              	.L191:
4061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 2380              		.loc 1 4061 0
 2381 0074 B4F85E30 		ldrh	r3, [r4, #94]
ARM GAS  /tmp/ccsDPfHf.s 			page 120


 2382 0078 9BB2     		uxth	r3, r3
 2383              	.LVL185:
4062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2384              		.loc 1 4062 0
 2385 007a 002B     		cmp	r3, #0
 2386 007c CCD0     		beq	.L183
4062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2387              		.loc 1 4062 0 is_stmt 0 discriminator 1
 2388 007e B4F86820 		ldrh	r2, [r4, #104]
 2389 0082 9A42     		cmp	r2, r3
 2390 0084 C8D9     		bls	.L183
4065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2391              		.loc 1 4065 0 is_stmt 1
 2392 0086 2268     		ldr	r2, [r4]
 2393 0088 9368     		ldr	r3, [r2, #8]
 2394              	.LVL186:
 2395 008a 23F08053 		bic	r3, r3, #268435456
 2396 008e 9360     		str	r3, [r2, #8]
4068:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2397              		.loc 1 4068 0
 2398 0090 044B     		ldr	r3, .L192+4
 2399 0092 E366     		str	r3, [r4, #108]
4071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2400              		.loc 1 4071 0
 2401 0094 2268     		ldr	r2, [r4]
 2402 0096 1368     		ldr	r3, [r2]
 2403 0098 43F02003 		orr	r3, r3, #32
 2404 009c 1360     		str	r3, [r2]
 2405 009e BBE7     		b	.L183
 2406              	.L193:
 2407              		.align	2
 2408              	.L192:
 2409 00a0 FEFFFFEF 		.word	-268435458
 2410 00a4 00000000 		.word	UART_RxISR_16BIT
 2411              		.cfi_endproc
 2412              	.LFE409:
 2414              		.section	.text.UART_DMAReceiveCplt,"ax",%progbits
 2415              		.align	1
 2416              		.syntax unified
 2417              		.thumb
 2418              		.thumb_func
 2419              		.fpu fpv5-d16
 2421              	UART_DMAReceiveCplt:
 2422              	.LFB393:
3388:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2423              		.loc 1 3388 0
 2424              		.cfi_startproc
 2425              		@ args = 0, pretend = 0, frame = 0
 2426              		@ frame_needed = 0, uses_anonymous_args = 0
 2427              	.LVL187:
 2428 0000 08B5     		push	{r3, lr}
 2429              	.LCFI18:
 2430              		.cfi_def_cfa_offset 8
 2431              		.cfi_offset 3, -8
 2432              		.cfi_offset 14, -4
3389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2433              		.loc 1 3389 0
ARM GAS  /tmp/ccsDPfHf.s 			page 121


 2434 0002 836B     		ldr	r3, [r0, #56]
 2435              	.LVL188:
3392:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2436              		.loc 1 3392 0
 2437 0004 C269     		ldr	r2, [r0, #28]
 2438 0006 B2F5807F 		cmp	r2, #256
 2439 000a 14D0     		beq	.L195
3394:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2440              		.loc 1 3394 0
 2441 000c 0022     		movs	r2, #0
 2442 000e A3F85E20 		strh	r2, [r3, #94]	@ movhi
3397:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 2443              		.loc 1 3397 0
 2444 0012 1968     		ldr	r1, [r3]
 2445 0014 0A68     		ldr	r2, [r1]
 2446 0016 22F48072 		bic	r2, r2, #256
 2447 001a 0A60     		str	r2, [r1]
3398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2448              		.loc 1 3398 0
 2449 001c 1968     		ldr	r1, [r3]
 2450 001e 8A68     		ldr	r2, [r1, #8]
 2451 0020 22F00102 		bic	r2, r2, #1
 2452 0024 8A60     		str	r2, [r1, #8]
3402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2453              		.loc 1 3402 0
 2454 0026 1968     		ldr	r1, [r3]
 2455 0028 8A68     		ldr	r2, [r1, #8]
 2456 002a 22F04002 		bic	r2, r2, #64
 2457 002e 8A60     		str	r2, [r1, #8]
3405:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2458              		.loc 1 3405 0
 2459 0030 2022     		movs	r2, #32
 2460 0032 C3F88420 		str	r2, [r3, #132]
 2461              	.L195:
3413:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2462              		.loc 1 3413 0
 2463 0036 1846     		mov	r0, r3
 2464              	.LVL189:
 2465 0038 FFF7FEFF 		bl	HAL_UART_RxCpltCallback
 2466              	.LVL190:
3415:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2467              		.loc 1 3415 0
 2468 003c 08BD     		pop	{r3, pc}
 2469              		.cfi_endproc
 2470              	.LFE393:
 2472              		.section	.text.HAL_UART_RxHalfCpltCallback,"ax",%progbits
 2473              		.align	1
 2474              		.weak	HAL_UART_RxHalfCpltCallback
 2475              		.syntax unified
 2476              		.thumb
 2477              		.thumb_func
 2478              		.fpu fpv5-d16
 2480              	HAL_UART_RxHalfCpltCallback:
 2481              	.LFB369:
2457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2482              		.loc 1 2457 0
 2483              		.cfi_startproc
ARM GAS  /tmp/ccsDPfHf.s 			page 122


 2484              		@ args = 0, pretend = 0, frame = 0
 2485              		@ frame_needed = 0, uses_anonymous_args = 0
 2486              		@ link register save eliminated.
 2487              	.LVL191:
2464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2488              		.loc 1 2464 0
 2489 0000 7047     		bx	lr
 2490              		.cfi_endproc
 2491              	.LFE369:
 2493              		.section	.text.UART_DMARxHalfCplt,"ax",%progbits
 2494              		.align	1
 2495              		.syntax unified
 2496              		.thumb
 2497              		.thumb_func
 2498              		.fpu fpv5-d16
 2500              	UART_DMARxHalfCplt:
 2501              	.LFB394:
3423:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2502              		.loc 1 3423 0
 2503              		.cfi_startproc
 2504              		@ args = 0, pretend = 0, frame = 0
 2505              		@ frame_needed = 0, uses_anonymous_args = 0
 2506              	.LVL192:
 2507 0000 08B5     		push	{r3, lr}
 2508              	.LCFI19:
 2509              		.cfi_def_cfa_offset 8
 2510              		.cfi_offset 3, -8
 2511              		.cfi_offset 14, -4
 2512              	.LVL193:
3431:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2513              		.loc 1 3431 0
 2514 0002 806B     		ldr	r0, [r0, #56]
 2515              	.LVL194:
 2516 0004 FFF7FEFF 		bl	HAL_UART_RxHalfCpltCallback
 2517              	.LVL195:
3433:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2518              		.loc 1 3433 0
 2519 0008 08BD     		pop	{r3, pc}
 2520              		.cfi_endproc
 2521              	.LFE394:
 2523              		.section	.text.HAL_UART_ErrorCallback,"ax",%progbits
 2524              		.align	1
 2525              		.weak	HAL_UART_ErrorCallback
 2526              		.syntax unified
 2527              		.thumb
 2528              		.thumb_func
 2529              		.fpu fpv5-d16
 2531              	HAL_UART_ErrorCallback:
 2532              	.LFB370:
2472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 2533              		.loc 1 2472 0
 2534              		.cfi_startproc
 2535              		@ args = 0, pretend = 0, frame = 0
 2536              		@ frame_needed = 0, uses_anonymous_args = 0
 2537              		@ link register save eliminated.
 2538              	.LVL196:
2479:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 123


 2539              		.loc 1 2479 0
 2540 0000 7047     		bx	lr
 2541              		.cfi_endproc
 2542              	.LFE370:
 2544              		.section	.text.UART_DMAError,"ax",%progbits
 2545              		.align	1
 2546              		.syntax unified
 2547              		.thumb
 2548              		.thumb_func
 2549              		.fpu fpv5-d16
 2551              	UART_DMAError:
 2552              	.LFB395:
3441:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2553              		.loc 1 3441 0
 2554              		.cfi_startproc
 2555              		@ args = 0, pretend = 0, frame = 0
 2556              		@ frame_needed = 0, uses_anonymous_args = 0
 2557              	.LVL197:
 2558 0000 38B5     		push	{r3, r4, r5, lr}
 2559              	.LCFI20:
 2560              		.cfi_def_cfa_offset 16
 2561              		.cfi_offset 3, -16
 2562              		.cfi_offset 4, -12
 2563              		.cfi_offset 5, -8
 2564              		.cfi_offset 14, -4
3442:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2565              		.loc 1 3442 0
 2566 0002 846B     		ldr	r4, [r0, #56]
 2567              	.LVL198:
3444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   const HAL_UART_StateTypeDef rxstate = huart->RxState;
 2568              		.loc 1 3444 0
 2569 0004 D4F88020 		ldr	r2, [r4, #128]
 2570              	.LVL199:
3445:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2571              		.loc 1 3445 0
 2572 0008 D4F88450 		ldr	r5, [r4, #132]
 2573              	.LVL200:
3448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 2574              		.loc 1 3448 0
 2575 000c 2368     		ldr	r3, [r4]
 2576 000e 9B68     		ldr	r3, [r3, #8]
 2577 0010 13F0800F 		tst	r3, #128
 2578 0014 01D0     		beq	.L202
3448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (gstate == HAL_UART_STATE_BUSY_TX))
 2579              		.loc 1 3448 0 is_stmt 0 discriminator 1
 2580 0016 212A     		cmp	r2, #33
 2581 0018 10D0     		beq	.L205
 2582              	.LVL201:
 2583              	.L202:
3456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 2584              		.loc 1 3456 0 is_stmt 1
 2585 001a 2368     		ldr	r3, [r4]
 2586 001c 9B68     		ldr	r3, [r3, #8]
 2587 001e 13F0400F 		tst	r3, #64
 2588 0022 01D0     		beq	.L203
3456:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       (rxstate == HAL_UART_STATE_BUSY_RX))
 2589              		.loc 1 3456 0 is_stmt 0 discriminator 1
ARM GAS  /tmp/ccsDPfHf.s 			page 124


 2590 0024 222D     		cmp	r5, #34
 2591 0026 10D0     		beq	.L206
 2592              	.L203:
3463:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2593              		.loc 1 3463 0 is_stmt 1
 2594 0028 D4F88830 		ldr	r3, [r4, #136]
 2595 002c 43F01003 		orr	r3, r3, #16
 2596 0030 C4F88830 		str	r3, [r4, #136]
3470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2597              		.loc 1 3470 0
 2598 0034 2046     		mov	r0, r4
 2599 0036 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2600              	.LVL202:
3472:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2601              		.loc 1 3472 0
 2602 003a 38BD     		pop	{r3, r4, r5, pc}
 2603              	.LVL203:
 2604              	.L205:
3451:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndTxTransfer(huart);
 2605              		.loc 1 3451 0
 2606 003c 0023     		movs	r3, #0
 2607 003e A4F85630 		strh	r3, [r4, #86]	@ movhi
3452:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2608              		.loc 1 3452 0
 2609 0042 2046     		mov	r0, r4
 2610              	.LVL204:
 2611 0044 FFF7FEFF 		bl	UART_EndTxTransfer
 2612              	.LVL205:
 2613 0048 E7E7     		b	.L202
 2614              	.L206:
3459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     UART_EndRxTransfer(huart);
 2615              		.loc 1 3459 0
 2616 004a 0023     		movs	r3, #0
 2617 004c A4F85E30 		strh	r3, [r4, #94]	@ movhi
3460:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2618              		.loc 1 3460 0
 2619 0050 2046     		mov	r0, r4
 2620 0052 FFF7FEFF 		bl	UART_EndRxTransfer
 2621              	.LVL206:
 2622 0056 E7E7     		b	.L203
 2623              		.cfi_endproc
 2624              	.LFE395:
 2626              		.section	.text.HAL_UART_IRQHandler,"ax",%progbits
 2627              		.align	1
 2628              		.global	HAL_UART_IRQHandler
 2629              		.syntax unified
 2630              		.thumb
 2631              		.thumb_func
 2632              		.fpu fpv5-d16
 2634              	HAL_UART_IRQHandler:
 2635              	.LFB365:
2180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 2636              		.loc 1 2180 0
 2637              		.cfi_startproc
 2638              		@ args = 0, pretend = 0, frame = 0
 2639              		@ frame_needed = 0, uses_anonymous_args = 0
 2640              	.LVL207:
ARM GAS  /tmp/ccsDPfHf.s 			page 125


 2641 0000 70B5     		push	{r4, r5, r6, lr}
 2642              	.LCFI21:
 2643              		.cfi_def_cfa_offset 16
 2644              		.cfi_offset 4, -16
 2645              		.cfi_offset 5, -12
 2646              		.cfi_offset 6, -8
 2647              		.cfi_offset 14, -4
 2648 0002 0446     		mov	r4, r0
2181:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 2649              		.loc 1 2181 0
 2650 0004 0168     		ldr	r1, [r0]
 2651 0006 CB69     		ldr	r3, [r1, #28]
 2652              	.LVL208:
2182:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 2653              		.loc 1 2182 0
 2654 0008 0D68     		ldr	r5, [r1]
 2655              	.LVL209:
2183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2656              		.loc 1 2183 0
 2657 000a 8868     		ldr	r0, [r1, #8]
 2658              	.LVL210:
2189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (errorflags == 0U)
 2659              		.loc 1 2189 0
 2660 000c 40F60F02 		movw	r2, #2063
 2661              	.LVL211:
2190:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2662              		.loc 1 2190 0
 2663 0010 1A40     		ands	r2, r3, r2
 2664              	.LVL212:
 2665 0012 0DD1     		bne	.L208
2193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 2666              		.loc 1 2193 0
 2667 0014 13F0200F 		tst	r3, #32
 2668 0018 0AD0     		beq	.L208
2194:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 2669              		.loc 1 2194 0
 2670 001a 15F0200F 		tst	r5, #32
 2671 001e 02D1     		bne	.L209
2195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2672              		.loc 1 2195 0
 2673 0020 10F0805F 		tst	r0, #268435456
 2674 0024 04D0     		beq	.L208
 2675              	.L209:
2197:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 2676              		.loc 1 2197 0
 2677 0026 E36E     		ldr	r3, [r4, #108]
 2678              	.LVL213:
 2679 0028 0BB1     		cbz	r3, .L207
2199:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 2680              		.loc 1 2199 0
 2681 002a 2046     		mov	r0, r4
 2682              	.LVL214:
 2683 002c 9847     		blx	r3
 2684              	.LVL215:
 2685              	.L207:
2404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2686              		.loc 1 2404 0
ARM GAS  /tmp/ccsDPfHf.s 			page 126


 2687 002e 70BD     		pop	{r4, r5, r6, pc}
 2688              	.LVL216:
 2689              	.L208:
2206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 2690              		.loc 1 2206 0
 2691 0030 002A     		cmp	r2, #0
 2692 0032 00F09580 		beq	.L211
2207:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****            || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 2693              		.loc 1 2207 0
 2694 0036 684A     		ldr	r2, .L234
 2695              	.LVL217:
 2696 0038 0240     		ands	r2, r0, r2
 2697 003a 03D1     		bne	.L212
2208:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2698              		.loc 1 2208 0
 2699 003c 674E     		ldr	r6, .L234+4
 2700 003e 3542     		tst	r5, r6
 2701 0040 00F08E80 		beq	.L211
 2702              	.L212:
2211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2703              		.loc 1 2211 0
 2704 0044 13F0010F 		tst	r3, #1
 2705 0048 09D0     		beq	.L213
2211:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2706              		.loc 1 2211 0 is_stmt 0 discriminator 1
 2707 004a 15F4807F 		tst	r5, #256
 2708 004e 06D0     		beq	.L213
2213:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2709              		.loc 1 2213 0 is_stmt 1
 2710 0050 0126     		movs	r6, #1
 2711 0052 0E62     		str	r6, [r1, #32]
2215:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2712              		.loc 1 2215 0
 2713 0054 D4F88810 		ldr	r1, [r4, #136]
 2714 0058 3143     		orrs	r1, r1, r6
 2715 005a C4F88810 		str	r1, [r4, #136]
 2716              	.L213:
2219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2717              		.loc 1 2219 0
 2718 005e 13F0020F 		tst	r3, #2
 2719 0062 0BD0     		beq	.L214
2219:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2720              		.loc 1 2219 0 is_stmt 0 discriminator 1
 2721 0064 10F0010F 		tst	r0, #1
 2722 0068 08D0     		beq	.L214
2221:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2723              		.loc 1 2221 0 is_stmt 1
 2724 006a 2168     		ldr	r1, [r4]
 2725 006c 0226     		movs	r6, #2
 2726 006e 0E62     		str	r6, [r1, #32]
2223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2727              		.loc 1 2223 0
 2728 0070 D4F88810 		ldr	r1, [r4, #136]
 2729 0074 41F00401 		orr	r1, r1, #4
 2730 0078 C4F88810 		str	r1, [r4, #136]
 2731              	.L214:
2227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccsDPfHf.s 			page 127


 2732              		.loc 1 2227 0
 2733 007c 13F0040F 		tst	r3, #4
 2734 0080 0BD0     		beq	.L215
2227:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2735              		.loc 1 2227 0 is_stmt 0 discriminator 1
 2736 0082 10F0010F 		tst	r0, #1
 2737 0086 08D0     		beq	.L215
2229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2738              		.loc 1 2229 0 is_stmt 1
 2739 0088 2168     		ldr	r1, [r4]
 2740 008a 0426     		movs	r6, #4
 2741 008c 0E62     		str	r6, [r1, #32]
2231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2742              		.loc 1 2231 0
 2743 008e D4F88810 		ldr	r1, [r4, #136]
 2744 0092 41F00201 		orr	r1, r1, #2
 2745 0096 C4F88810 		str	r1, [r4, #136]
 2746              	.L215:
2235:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 2747              		.loc 1 2235 0
 2748 009a 13F0080F 		tst	r3, #8
 2749 009e 0BD0     		beq	.L216
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 2750              		.loc 1 2236 0
 2751 00a0 15F0200F 		tst	r5, #32
 2752 00a4 00D1     		bne	.L217
2236:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 2753              		.loc 1 2236 0 is_stmt 0 discriminator 1
 2754 00a6 3AB1     		cbz	r2, .L216
 2755              	.L217:
2239:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2756              		.loc 1 2239 0 is_stmt 1
 2757 00a8 2268     		ldr	r2, [r4]
 2758 00aa 0821     		movs	r1, #8
 2759 00ac 1162     		str	r1, [r2, #32]
2241:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2760              		.loc 1 2241 0
 2761 00ae D4F88820 		ldr	r2, [r4, #136]
 2762 00b2 0A43     		orrs	r2, r2, r1
 2763 00b4 C4F88820 		str	r2, [r4, #136]
 2764              	.L216:
2245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2765              		.loc 1 2245 0
 2766 00b8 13F4006F 		tst	r3, #2048
 2767 00bc 0CD0     		beq	.L218
2245:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2768              		.loc 1 2245 0 is_stmt 0 discriminator 1
 2769 00be 15F0806F 		tst	r5, #67108864
 2770 00c2 09D0     		beq	.L218
2247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2771              		.loc 1 2247 0 is_stmt 1
 2772 00c4 2268     		ldr	r2, [r4]
 2773 00c6 4FF40061 		mov	r1, #2048
 2774 00ca 1162     		str	r1, [r2, #32]
2249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2775              		.loc 1 2249 0
 2776 00cc D4F88820 		ldr	r2, [r4, #136]
ARM GAS  /tmp/ccsDPfHf.s 			page 128


 2777 00d0 42F02002 		orr	r2, r2, #32
 2778 00d4 C4F88820 		str	r2, [r4, #136]
 2779              	.L218:
2253:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2780              		.loc 1 2253 0
 2781 00d8 D4F88820 		ldr	r2, [r4, #136]
 2782 00dc 002A     		cmp	r2, #0
 2783 00de A6D0     		beq	.L207
2256:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 2784              		.loc 1 2256 0
 2785 00e0 13F0200F 		tst	r3, #32
 2786 00e4 09D0     		beq	.L219
2257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****               || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 2787              		.loc 1 2257 0
 2788 00e6 15F0200F 		tst	r5, #32
 2789 00ea 02D1     		bne	.L220
2258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 2790              		.loc 1 2258 0
 2791 00ec 10F0805F 		tst	r0, #268435456
 2792 00f0 03D0     		beq	.L219
 2793              	.L220:
2260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 2794              		.loc 1 2260 0
 2795 00f2 E36E     		ldr	r3, [r4, #108]
 2796              	.LVL218:
 2797 00f4 0BB1     		cbz	r3, .L219
2262:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 2798              		.loc 1 2262 0
 2799 00f6 2046     		mov	r0, r4
 2800              	.LVL219:
 2801 00f8 9847     		blx	r3
 2802              	.LVL220:
 2803              	.L219:
2271:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 2804              		.loc 1 2271 0
 2805 00fa D4F88820 		ldr	r2, [r4, #136]
 2806              	.LVL221:
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 2807              		.loc 1 2272 0
 2808 00fe 2368     		ldr	r3, [r4]
 2809 0100 9B68     		ldr	r3, [r3, #8]
 2810 0102 13F0400F 		tst	r3, #64
 2811 0106 02D1     		bne	.L221
2272:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 2812              		.loc 1 2272 0 is_stmt 0 discriminator 1
 2813 0108 12F0280F 		tst	r2, #40
 2814 010c 21D0     		beq	.L222
 2815              	.L221:
2278:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2816              		.loc 1 2278 0 is_stmt 1
 2817 010e 2046     		mov	r0, r4
 2818 0110 FFF7FEFF 		bl	UART_EndRxTransfer
 2819              	.LVL222:
2281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 2820              		.loc 1 2281 0
 2821 0114 2368     		ldr	r3, [r4]
 2822 0116 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccsDPfHf.s 			page 129


 2823 0118 12F0400F 		tst	r2, #64
 2824 011c 15D0     		beq	.L223
2283:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2825              		.loc 1 2283 0
 2826 011e 9A68     		ldr	r2, [r3, #8]
 2827 0120 22F04002 		bic	r2, r2, #64
 2828 0124 9A60     		str	r2, [r3, #8]
2286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           {
 2829              		.loc 1 2286 0
 2830 0126 A36F     		ldr	r3, [r4, #120]
 2831 0128 5BB1     		cbz	r3, .L224
2290:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2832              		.loc 1 2290 0
 2833 012a 2D4A     		ldr	r2, .L234+8
 2834 012c 1A65     		str	r2, [r3, #80]
2293:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             {
 2835              		.loc 1 2293 0
 2836 012e A06F     		ldr	r0, [r4, #120]
 2837 0130 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 2838              	.LVL223:
 2839 0134 0028     		cmp	r0, #0
 2840 0136 3FF47AAF 		beq	.L207
2296:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****             }
 2841              		.loc 1 2296 0
 2842 013a A06F     		ldr	r0, [r4, #120]
 2843 013c 036D     		ldr	r3, [r0, #80]
 2844 013e 9847     		blx	r3
 2845              	.LVL224:
 2846 0140 75E7     		b	.L207
 2847              	.L224:
2307:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2848              		.loc 1 2307 0
 2849 0142 2046     		mov	r0, r4
 2850 0144 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2851              	.LVL225:
 2852 0148 71E7     		b	.L207
 2853              	.L223:
2320:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2854              		.loc 1 2320 0
 2855 014a 2046     		mov	r0, r4
 2856 014c FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2857              	.LVL226:
 2858 0150 6DE7     		b	.L207
 2859              	.LVL227:
 2860              	.L222:
2333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2861              		.loc 1 2333 0
 2862 0152 2046     		mov	r0, r4
 2863 0154 FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2864              	.LVL228:
2335:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 2865              		.loc 1 2335 0
 2866 0158 0023     		movs	r3, #0
 2867 015a C4F88830 		str	r3, [r4, #136]
 2868 015e 66E7     		b	.L207
 2869              	.LVL229:
 2870              	.L211:
ARM GAS  /tmp/ccsDPfHf.s 			page 130


2343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2871              		.loc 1 2343 0
 2872 0160 13F4801F 		tst	r3, #1048576
 2873 0164 02D0     		beq	.L225
2343:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2874              		.loc 1 2343 0 is_stmt 0 discriminator 1
 2875 0166 10F4800F 		tst	r0, #4194304
 2876 016a 0FD1     		bne	.L231
 2877              	.L225:
2361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 2878              		.loc 1 2361 0 is_stmt 1
 2879 016c 13F0800F 		tst	r3, #128
 2880 0170 13D0     		beq	.L226
2362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 2881              		.loc 1 2362 0
 2882 0172 15F0800F 		tst	r5, #128
 2883 0176 02D1     		bne	.L227
2363:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2884              		.loc 1 2363 0
 2885 0178 10F4000F 		tst	r0, #8388608
 2886 017c 0DD0     		beq	.L226
 2887              	.L227:
2365:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 2888              		.loc 1 2365 0
 2889 017e 236F     		ldr	r3, [r4, #112]
 2890              	.LVL230:
 2891 0180 002B     		cmp	r3, #0
 2892 0182 3FF454AF 		beq	.L207
2367:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 2893              		.loc 1 2367 0
 2894 0186 2046     		mov	r0, r4
 2895              	.LVL231:
 2896 0188 9847     		blx	r3
 2897              	.LVL232:
 2898 018a 50E7     		b	.L207
 2899              	.LVL233:
 2900              	.L231:
2345:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2901              		.loc 1 2345 0
 2902 018c 4FF48013 		mov	r3, #1048576
 2903              	.LVL234:
 2904 0190 0B62     		str	r3, [r1, #32]
2355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2905              		.loc 1 2355 0
 2906 0192 2046     		mov	r0, r4
 2907              	.LVL235:
 2908 0194 FFF7FEFF 		bl	HAL_UARTEx_WakeupCallback
 2909              	.LVL236:
2357:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2910              		.loc 1 2357 0
 2911 0198 49E7     		b	.L207
 2912              	.LVL237:
 2913              	.L226:
2373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2914              		.loc 1 2373 0
 2915 019a 13F0400F 		tst	r3, #64
 2916 019e 02D0     		beq	.L228
ARM GAS  /tmp/ccsDPfHf.s 			page 131


2373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2917              		.loc 1 2373 0 is_stmt 0 discriminator 1
 2918 01a0 15F0400F 		tst	r5, #64
 2919 01a4 10D1     		bne	.L232
 2920              	.L228:
2380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2921              		.loc 1 2380 0 is_stmt 1
 2922 01a6 13F4000F 		tst	r3, #8388608
 2923 01aa 02D0     		beq	.L229
2380:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2924              		.loc 1 2380 0 is_stmt 0 discriminator 1
 2925 01ac 15F0804F 		tst	r5, #1073741824
 2926 01b0 0ED1     		bne	.L233
 2927              	.L229:
2393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2928              		.loc 1 2393 0 is_stmt 1
 2929 01b2 13F0807F 		tst	r3, #16777216
 2930 01b6 3FF43AAF 		beq	.L207
2393:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 2931              		.loc 1 2393 0 is_stmt 0 discriminator 1
 2932 01ba 002D     		cmp	r5, #0
 2933 01bc BFF637AF 		bge	.L207
2400:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2934              		.loc 1 2400 0 is_stmt 1
 2935 01c0 2046     		mov	r0, r4
 2936              	.LVL238:
 2937 01c2 FFF7FEFF 		bl	HAL_UARTEx_RxFifoFullCallback
 2938              	.LVL239:
2402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2939              		.loc 1 2402 0
 2940 01c6 32E7     		b	.L207
 2941              	.LVL240:
 2942              	.L232:
2375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     return;
 2943              		.loc 1 2375 0
 2944 01c8 2046     		mov	r0, r4
 2945              	.LVL241:
 2946 01ca FFF7FEFF 		bl	UART_EndTransmit_IT
 2947              	.LVL242:
2376:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2948              		.loc 1 2376 0
 2949 01ce 2EE7     		b	.L207
 2950              	.LVL243:
 2951              	.L233:
2387:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2952              		.loc 1 2387 0
 2953 01d0 2046     		mov	r0, r4
 2954              	.LVL244:
 2955 01d2 FFF7FEFF 		bl	HAL_UARTEx_TxFifoEmptyCallback
 2956              	.LVL245:
2389:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 2957              		.loc 1 2389 0
 2958 01d6 2AE7     		b	.L207
 2959              	.L235:
 2960              		.align	2
 2961              	.L234:
 2962 01d8 01000010 		.word	268435457
ARM GAS  /tmp/ccsDPfHf.s 			page 132


 2963 01dc 20010004 		.word	67109152
 2964 01e0 00000000 		.word	UART_DMAAbortOnError
 2965              		.cfi_endproc
 2966              	.LFE365:
 2968              		.section	.text.UART_DMAAbortOnError,"ax",%progbits
 2969              		.align	1
 2970              		.syntax unified
 2971              		.thumb
 2972              		.thumb_func
 2973              		.fpu fpv5-d16
 2975              	UART_DMAAbortOnError:
 2976              	.LFB396:
3481:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 2977              		.loc 1 3481 0
 2978              		.cfi_startproc
 2979              		@ args = 0, pretend = 0, frame = 0
 2980              		@ frame_needed = 0, uses_anonymous_args = 0
 2981              	.LVL246:
 2982 0000 08B5     		push	{r3, lr}
 2983              	.LCFI22:
 2984              		.cfi_def_cfa_offset 8
 2985              		.cfi_offset 3, -8
 2986              		.cfi_offset 14, -4
3482:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 2987              		.loc 1 3482 0
 2988 0002 806B     		ldr	r0, [r0, #56]
 2989              	.LVL247:
3483:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxXferCount = 0U;
 2990              		.loc 1 3483 0
 2991 0004 0023     		movs	r3, #0
 2992 0006 A0F85E30 		strh	r3, [r0, #94]	@ movhi
3484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2993              		.loc 1 3484 0
 2994 000a A0F85630 		strh	r3, [r0, #86]	@ movhi
3491:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 2995              		.loc 1 3491 0
 2996 000e FFF7FEFF 		bl	HAL_UART_ErrorCallback
 2997              	.LVL248:
3493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 2998              		.loc 1 3493 0
 2999 0012 08BD     		pop	{r3, pc}
 3000              		.cfi_endproc
 3001              	.LFE396:
 3003              		.section	.text.HAL_UART_AbortCpltCallback,"ax",%progbits
 3004              		.align	1
 3005              		.weak	HAL_UART_AbortCpltCallback
 3006              		.syntax unified
 3007              		.thumb
 3008              		.thumb_func
 3009              		.fpu fpv5-d16
 3011              	HAL_UART_AbortCpltCallback:
 3012              	.LFB371:
2487:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3013              		.loc 1 2487 0
 3014              		.cfi_startproc
 3015              		@ args = 0, pretend = 0, frame = 0
 3016              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 133


 3017              		@ link register save eliminated.
 3018              	.LVL249:
2494:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3019              		.loc 1 2494 0
 3020 0000 7047     		bx	lr
 3021              		.cfi_endproc
 3022              	.LFE371:
 3024              		.section	.text.HAL_UART_Abort_IT,"ax",%progbits
 3025              		.align	1
 3026              		.global	HAL_UART_Abort_IT
 3027              		.syntax unified
 3028              		.thumb
 3029              		.thumb_func
 3030              		.fpu fpv5-d16
 3032              	HAL_UART_Abort_IT:
 3033              	.LFB362:
1862:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t abortcplt = 1U;
 3034              		.loc 1 1862 0
 3035              		.cfi_startproc
 3036              		@ args = 0, pretend = 0, frame = 0
 3037              		@ frame_needed = 0, uses_anonymous_args = 0
 3038              	.LVL250:
 3039 0000 10B5     		push	{r4, lr}
 3040              	.LCFI23:
 3041              		.cfi_def_cfa_offset 8
 3042              		.cfi_offset 4, -8
 3043              		.cfi_offset 14, -4
 3044 0002 0446     		mov	r4, r0
 3045              	.LVL251:
1866:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE));
 3046              		.loc 1 1866 0
 3047 0004 0268     		ldr	r2, [r0]
 3048 0006 1368     		ldr	r3, [r2]
 3049 0008 23F4F073 		bic	r3, r3, #480
 3050 000c 1360     		str	r3, [r2]
1867:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3051              		.loc 1 1867 0
 3052 000e 0268     		ldr	r2, [r0]
 3053 0010 9168     		ldr	r1, [r2, #8]
 3054 0012 374B     		ldr	r3, .L254
 3055 0014 0B40     		ands	r3, r3, r1
 3056 0016 9360     		str	r3, [r2, #8]
1872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3057              		.loc 1 1872 0
 3058 0018 436F     		ldr	r3, [r0, #116]
 3059 001a 33B1     		cbz	r3, .L240
1876:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3060              		.loc 1 1876 0
 3061 001c 0268     		ldr	r2, [r0]
 3062 001e 9268     		ldr	r2, [r2, #8]
 3063 0020 12F0800F 		tst	r2, #128
 3064 0024 1FD0     		beq	.L241
1878:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3065              		.loc 1 1878 0
 3066 0026 334A     		ldr	r2, .L254+4
 3067 0028 1A65     		str	r2, [r3, #80]
 3068              	.L240:
ARM GAS  /tmp/ccsDPfHf.s 			page 134


1886:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3069              		.loc 1 1886 0
 3070 002a A36F     		ldr	r3, [r4, #120]
 3071 002c 33B1     		cbz	r3, .L242
1890:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3072              		.loc 1 1890 0
 3073 002e 2268     		ldr	r2, [r4]
 3074 0030 9268     		ldr	r2, [r2, #8]
 3075 0032 12F0400F 		tst	r2, #64
 3076 0036 19D0     		beq	.L243
1892:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3077              		.loc 1 1892 0
 3078 0038 2F4A     		ldr	r2, .L254+8
 3079 003a 1A65     		str	r2, [r3, #80]
 3080              	.L242:
1901:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3081              		.loc 1 1901 0
 3082 003c 2368     		ldr	r3, [r4]
 3083 003e 9A68     		ldr	r2, [r3, #8]
 3084 0040 12F0800F 		tst	r2, #128
 3085 0044 15D0     		beq	.L249
1904:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3086              		.loc 1 1904 0
 3087 0046 9A68     		ldr	r2, [r3, #8]
 3088 0048 22F08002 		bic	r2, r2, #128
 3089 004c 9A60     		str	r2, [r3, #8]
1907:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3090              		.loc 1 1907 0
 3091 004e 606F     		ldr	r0, [r4, #116]
 3092              	.LVL252:
 3093 0050 0028     		cmp	r0, #0
 3094 0052 3ED0     		beq	.L250
1913:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 3095              		.loc 1 1913 0
 3096 0054 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3097              	.LVL253:
 3098 0058 0028     		cmp	r0, #0
 3099 005a 3CD0     		beq	.L251
1915:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 3100              		.loc 1 1915 0
 3101 005c 636F     		ldr	r3, [r4, #116]
 3102 005e 0022     		movs	r2, #0
 3103 0060 1A65     		str	r2, [r3, #80]
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3104              		.loc 1 1863 0
 3105 0062 0121     		movs	r1, #1
 3106 0064 06E0     		b	.L244
 3107              	.LVL254:
 3108              	.L241:
1882:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3109              		.loc 1 1882 0
 3110 0066 0022     		movs	r2, #0
 3111 0068 1A65     		str	r2, [r3, #80]
 3112 006a DEE7     		b	.L240
 3113              	.L243:
1896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3114              		.loc 1 1896 0
ARM GAS  /tmp/ccsDPfHf.s 			page 135


 3115 006c 0022     		movs	r2, #0
 3116 006e 1A65     		str	r2, [r3, #80]
 3117 0070 E4E7     		b	.L242
 3118              	.L249:
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3119              		.loc 1 1863 0
 3120 0072 0121     		movs	r1, #1
 3121              	.LVL255:
 3122              	.L244:
1925:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3123              		.loc 1 1925 0
 3124 0074 2368     		ldr	r3, [r4]
 3125 0076 9A68     		ldr	r2, [r3, #8]
 3126 0078 12F0400F 		tst	r2, #64
 3127 007c 2DD0     		beq	.L245
1927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3128              		.loc 1 1927 0
 3129 007e 9A68     		ldr	r2, [r3, #8]
 3130 0080 22F04002 		bic	r2, r2, #64
 3131 0084 9A60     		str	r2, [r3, #8]
1930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3132              		.loc 1 1930 0
 3133 0086 A06F     		ldr	r0, [r4, #120]
 3134 0088 38B3     		cbz	r0, .L245
1936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 3135              		.loc 1 1936 0
 3136 008a FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3137              	.LVL256:
 3138 008e 30B3     		cbz	r0, .L246
1938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         abortcplt = 1U;
 3139              		.loc 1 1938 0
 3140 0090 A36F     		ldr	r3, [r4, #120]
 3141 0092 0022     		movs	r2, #0
 3142 0094 1A65     		str	r2, [r3, #80]
 3143              	.LVL257:
 3144              	.L247:
1952:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = 0U;
 3145              		.loc 1 1952 0
 3146 0096 0023     		movs	r3, #0
 3147 0098 A4F85630 		strh	r3, [r4, #86]	@ movhi
1953:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3148              		.loc 1 1953 0
 3149 009c A4F85E30 		strh	r3, [r4, #94]	@ movhi
1956:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxISR = NULL;
 3150              		.loc 1 1956 0
 3151 00a0 E366     		str	r3, [r4, #108]
1957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3152              		.loc 1 1957 0
 3153 00a2 2367     		str	r3, [r4, #112]
1960:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3154              		.loc 1 1960 0
 3155 00a4 C4F88830 		str	r3, [r4, #136]
1963:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3156              		.loc 1 1963 0
 3157 00a8 2368     		ldr	r3, [r4]
 3158 00aa 0F22     		movs	r2, #15
 3159 00ac 1A62     		str	r2, [r3, #32]
ARM GAS  /tmp/ccsDPfHf.s 			page 136


1966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3160              		.loc 1 1966 0
 3161 00ae 636E     		ldr	r3, [r4, #100]
 3162 00b0 B3F1005F 		cmp	r3, #536870912
 3163 00b4 15D0     		beq	.L253
 3164              	.L248:
1972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3165              		.loc 1 1972 0
 3166 00b6 2268     		ldr	r2, [r4]
 3167 00b8 9369     		ldr	r3, [r2, #24]
 3168 00ba 43F00803 		orr	r3, r3, #8
 3169 00be 9361     		str	r3, [r2, #24]
1975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_READY;
 3170              		.loc 1 1975 0
 3171 00c0 2023     		movs	r3, #32
 3172 00c2 C4F88030 		str	r3, [r4, #128]
1976:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3173              		.loc 1 1976 0
 3174 00c6 C4F88430 		str	r3, [r4, #132]
1984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3175              		.loc 1 1984 0
 3176 00ca 2046     		mov	r0, r4
 3177 00cc FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3178              	.LVL258:
 3179 00d0 05E0     		b	.L246
 3180              	.LVL259:
 3181              	.L250:
1863:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3182              		.loc 1 1863 0
 3183 00d2 0121     		movs	r1, #1
 3184 00d4 CEE7     		b	.L244
 3185              	.L251:
1919:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 3186              		.loc 1 1919 0
 3187 00d6 0021     		movs	r1, #0
 3188 00d8 CCE7     		b	.L244
 3189              	.LVL260:
 3190              	.L245:
1949:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3191              		.loc 1 1949 0
 3192 00da 0029     		cmp	r1, #0
 3193 00dc DBD1     		bne	.L247
 3194              	.LVL261:
 3195              	.L246:
1989:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3196              		.loc 1 1989 0
 3197 00de 0020     		movs	r0, #0
 3198 00e0 10BD     		pop	{r4, pc}
 3199              	.LVL262:
 3200              	.L253:
1968:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3201              		.loc 1 1968 0
 3202 00e2 2268     		ldr	r2, [r4]
 3203 00e4 9369     		ldr	r3, [r2, #24]
 3204 00e6 43F01003 		orr	r3, r3, #16
 3205 00ea 9361     		str	r3, [r2, #24]
 3206 00ec E3E7     		b	.L248
ARM GAS  /tmp/ccsDPfHf.s 			page 137


 3207              	.L255:
 3208 00ee 00BF     		.align	2
 3209              	.L254:
 3210 00f0 FEFF7FEF 		.word	-276824066
 3211 00f4 00000000 		.word	UART_DMATxAbortCallback
 3212 00f8 00000000 		.word	UART_DMARxAbortCallback
 3213              		.cfi_endproc
 3214              	.LFE362:
 3216              		.section	.text.UART_DMARxAbortCallback,"ax",%progbits
 3217              		.align	1
 3218              		.syntax unified
 3219              		.thumb
 3220              		.thumb_func
 3221              		.fpu fpv5-d16
 3223              	UART_DMARxAbortCallback:
 3224              	.LFB398:
3558:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 3225              		.loc 1 3558 0
 3226              		.cfi_startproc
 3227              		@ args = 0, pretend = 0, frame = 0
 3228              		@ frame_needed = 0, uses_anonymous_args = 0
 3229              	.LVL263:
 3230 0000 08B5     		push	{r3, lr}
 3231              	.LCFI24:
 3232              		.cfi_def_cfa_offset 8
 3233              		.cfi_offset 3, -8
 3234              		.cfi_offset 14, -4
3559:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3235              		.loc 1 3559 0
 3236 0002 806B     		ldr	r0, [r0, #56]
 3237              	.LVL264:
3561:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3238              		.loc 1 3561 0
 3239 0004 836F     		ldr	r3, [r0, #120]
 3240 0006 0022     		movs	r2, #0
 3241 0008 1A65     		str	r2, [r3, #80]
3564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3242              		.loc 1 3564 0
 3243 000a 436F     		ldr	r3, [r0, #116]
 3244 000c 13B1     		cbz	r3, .L257
3566:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3245              		.loc 1 3566 0
 3246 000e 1B6D     		ldr	r3, [r3, #80]
 3247 0010 03B1     		cbz	r3, .L257
 3248              	.LVL265:
 3249              	.L256:
3597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3250              		.loc 1 3597 0
 3251 0012 08BD     		pop	{r3, pc}
 3252              	.LVL266:
 3253              	.L257:
3573:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 3254              		.loc 1 3573 0
 3255 0014 0023     		movs	r3, #0
 3256 0016 A0F85630 		strh	r3, [r0, #86]	@ movhi
3574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3257              		.loc 1 3574 0
ARM GAS  /tmp/ccsDPfHf.s 			page 138


 3258 001a A0F85E30 		strh	r3, [r0, #94]	@ movhi
3577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3259              		.loc 1 3577 0
 3260 001e C0F88830 		str	r3, [r0, #136]
3580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3261              		.loc 1 3580 0
 3262 0022 0368     		ldr	r3, [r0]
 3263 0024 0F22     		movs	r2, #15
 3264 0026 1A62     		str	r2, [r3, #32]
3583:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3265              		.loc 1 3583 0
 3266 0028 0268     		ldr	r2, [r0]
 3267 002a 9369     		ldr	r3, [r2, #24]
 3268 002c 43F00803 		orr	r3, r3, #8
 3269 0030 9361     		str	r3, [r2, #24]
3586:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3270              		.loc 1 3586 0
 3271 0032 2023     		movs	r3, #32
 3272 0034 C0F88030 		str	r3, [r0, #128]
3587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3273              		.loc 1 3587 0
 3274 0038 C0F88430 		str	r3, [r0, #132]
3595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3275              		.loc 1 3595 0
 3276 003c FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3277              	.LVL267:
 3278 0040 E7E7     		b	.L256
 3279              		.cfi_endproc
 3280              	.LFE398:
 3282              		.section	.text.UART_DMATxAbortCallback,"ax",%progbits
 3283              		.align	1
 3284              		.syntax unified
 3285              		.thumb
 3286              		.thumb_func
 3287              		.fpu fpv5-d16
 3289              	UART_DMATxAbortCallback:
 3290              	.LFB397:
3504:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 3291              		.loc 1 3504 0
 3292              		.cfi_startproc
 3293              		@ args = 0, pretend = 0, frame = 0
 3294              		@ frame_needed = 0, uses_anonymous_args = 0
 3295              	.LVL268:
 3296 0000 08B5     		push	{r3, lr}
 3297              	.LCFI25:
 3298              		.cfi_def_cfa_offset 8
 3299              		.cfi_offset 3, -8
 3300              		.cfi_offset 14, -4
3505:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3301              		.loc 1 3505 0
 3302 0002 806B     		ldr	r0, [r0, #56]
 3303              	.LVL269:
3507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3304              		.loc 1 3507 0
 3305 0004 436F     		ldr	r3, [r0, #116]
 3306 0006 0022     		movs	r2, #0
 3307 0008 1A65     		str	r2, [r3, #80]
ARM GAS  /tmp/ccsDPfHf.s 			page 139


3510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3308              		.loc 1 3510 0
 3309 000a 836F     		ldr	r3, [r0, #120]
 3310 000c 0BB1     		cbz	r3, .L261
3512:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3311              		.loc 1 3512 0
 3312 000e 1B6D     		ldr	r3, [r3, #80]
 3313 0010 A3B9     		cbnz	r3, .L260
 3314              	.L261:
3519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxXferCount = 0U;
 3315              		.loc 1 3519 0
 3316 0012 0023     		movs	r3, #0
 3317 0014 A0F85630 		strh	r3, [r0, #86]	@ movhi
3520:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3318              		.loc 1 3520 0
 3319 0018 A0F85E30 		strh	r3, [r0, #94]	@ movhi
3523:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3320              		.loc 1 3523 0
 3321 001c C0F88830 		str	r3, [r0, #136]
3526:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3322              		.loc 1 3526 0
 3323 0020 0368     		ldr	r3, [r0]
 3324 0022 0F22     		movs	r2, #15
 3325 0024 1A62     		str	r2, [r3, #32]
3529:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3326              		.loc 1 3529 0
 3327 0026 436E     		ldr	r3, [r0, #100]
 3328 0028 B3F1005F 		cmp	r3, #536870912
 3329 002c 07D0     		beq	.L265
 3330              	.L263:
3535:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 3331              		.loc 1 3535 0
 3332 002e 2023     		movs	r3, #32
 3333 0030 C0F88030 		str	r3, [r0, #128]
3536:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3334              		.loc 1 3536 0
 3335 0034 C0F88430 		str	r3, [r0, #132]
3544:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3336              		.loc 1 3544 0
 3337 0038 FFF7FEFF 		bl	HAL_UART_AbortCpltCallback
 3338              	.LVL270:
 3339              	.L260:
3546:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3340              		.loc 1 3546 0
 3341 003c 08BD     		pop	{r3, pc}
 3342              	.LVL271:
 3343              	.L265:
3531:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 3344              		.loc 1 3531 0
 3345 003e 0268     		ldr	r2, [r0]
 3346 0040 9369     		ldr	r3, [r2, #24]
 3347 0042 43F01003 		orr	r3, r3, #16
 3348 0046 9361     		str	r3, [r2, #24]
 3349 0048 F1E7     		b	.L263
 3350              		.cfi_endproc
 3351              	.LFE397:
 3353              		.section	.text.HAL_UART_AbortTransmitCpltCallback,"ax",%progbits
ARM GAS  /tmp/ccsDPfHf.s 			page 140


 3354              		.align	1
 3355              		.weak	HAL_UART_AbortTransmitCpltCallback
 3356              		.syntax unified
 3357              		.thumb
 3358              		.thumb_func
 3359              		.fpu fpv5-d16
 3361              	HAL_UART_AbortTransmitCpltCallback:
 3362              	.LFB372:
2502:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3363              		.loc 1 2502 0
 3364              		.cfi_startproc
 3365              		@ args = 0, pretend = 0, frame = 0
 3366              		@ frame_needed = 0, uses_anonymous_args = 0
 3367              		@ link register save eliminated.
 3368              	.LVL272:
2509:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3369              		.loc 1 2509 0
 3370 0000 7047     		bx	lr
 3371              		.cfi_endproc
 3372              	.LFE372:
 3374              		.section	.text.HAL_UART_AbortTransmit_IT,"ax",%progbits
 3375              		.align	1
 3376              		.global	HAL_UART_AbortTransmit_IT
 3377              		.syntax unified
 3378              		.thumb
 3379              		.thumb_func
 3380              		.fpu fpv5-d16
 3382              	HAL_UART_AbortTransmit_IT:
 3383              	.LFB363:
2006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable interrupts */
 3384              		.loc 1 2006 0
 3385              		.cfi_startproc
 3386              		@ args = 0, pretend = 0, frame = 0
 3387              		@ frame_needed = 0, uses_anonymous_args = 0
 3388              	.LVL273:
 3389 0000 10B5     		push	{r4, lr}
 3390              	.LCFI26:
 3391              		.cfi_def_cfa_offset 8
 3392              		.cfi_offset 4, -8
 3393              		.cfi_offset 14, -4
 3394 0002 0446     		mov	r4, r0
2008:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 3395              		.loc 1 2008 0
 3396 0004 0268     		ldr	r2, [r0]
 3397 0006 1368     		ldr	r3, [r2]
 3398 0008 23F0C003 		bic	r3, r3, #192
 3399 000c 1360     		str	r3, [r2]
2009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3400              		.loc 1 2009 0
 3401 000e 0268     		ldr	r2, [r0]
 3402 0010 9368     		ldr	r3, [r2, #8]
 3403 0012 23F40003 		bic	r3, r3, #8388608
 3404 0016 9360     		str	r3, [r2, #8]
2012:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3405              		.loc 1 2012 0
 3406 0018 0368     		ldr	r3, [r0]
 3407 001a 9A68     		ldr	r2, [r3, #8]
ARM GAS  /tmp/ccsDPfHf.s 			page 141


 3408 001c 12F0800F 		tst	r2, #128
 3409 0020 19D0     		beq	.L268
2014:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3410              		.loc 1 2014 0
 3411 0022 9A68     		ldr	r2, [r3, #8]
 3412 0024 22F08002 		bic	r2, r2, #128
 3413 0028 9A60     		str	r2, [r3, #8]
2017:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3414              		.loc 1 2017 0
 3415 002a 436F     		ldr	r3, [r0, #116]
 3416 002c 4BB1     		cbz	r3, .L269
2021:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3417              		.loc 1 2021 0
 3418 002e 144A     		ldr	r2, .L274
 3419 0030 1A65     		str	r2, [r3, #80]
2024:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 3420              		.loc 1 2024 0
 3421 0032 406F     		ldr	r0, [r0, #116]
 3422              	.LVL274:
 3423 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3424              	.LVL275:
 3425 0038 D8B1     		cbz	r0, .L270
2027:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 3426              		.loc 1 2027 0
 3427 003a 606F     		ldr	r0, [r4, #116]
 3428 003c 036D     		ldr	r3, [r0, #80]
 3429 003e 9847     		blx	r3
 3430              	.LVL276:
 3431 0040 17E0     		b	.L270
 3432              	.LVL277:
 3433              	.L269:
2033:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3434              		.loc 1 2033 0
 3435 0042 0023     		movs	r3, #0
 3436 0044 A0F85630 		strh	r3, [r0, #86]	@ movhi
2036:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3437              		.loc 1 2036 0
 3438 0048 0367     		str	r3, [r0, #112]
2039:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3439              		.loc 1 2039 0
 3440 004a 2023     		movs	r3, #32
 3441 004c C0F88030 		str	r3, [r0, #128]
2047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3442              		.loc 1 2047 0
 3443 0050 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3444              	.LVL278:
 3445 0054 0DE0     		b	.L270
 3446              	.LVL279:
 3447              	.L268:
2054:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3448              		.loc 1 2054 0
 3449 0056 0022     		movs	r2, #0
 3450 0058 A0F85620 		strh	r2, [r0, #86]	@ movhi
2057:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3451              		.loc 1 2057 0
 3452 005c 0267     		str	r2, [r0, #112]
2060:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
ARM GAS  /tmp/ccsDPfHf.s 			page 142


 3453              		.loc 1 2060 0
 3454 005e 426E     		ldr	r2, [r0, #100]
 3455 0060 B2F1005F 		cmp	r2, #536870912
 3456 0064 07D0     		beq	.L273
 3457              	.L271:
2066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3458              		.loc 1 2066 0
 3459 0066 2023     		movs	r3, #32
 3460 0068 C4F88030 		str	r3, [r4, #128]
2074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3461              		.loc 1 2074 0
 3462 006c 2046     		mov	r0, r4
 3463              	.LVL280:
 3464 006e FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3465              	.LVL281:
 3466              	.L270:
2079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3467              		.loc 1 2079 0
 3468 0072 0020     		movs	r0, #0
 3469 0074 10BD     		pop	{r4, pc}
 3470              	.LVL282:
 3471              	.L273:
2062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3472              		.loc 1 2062 0
 3473 0076 9A69     		ldr	r2, [r3, #24]
 3474 0078 42F01002 		orr	r2, r2, #16
 3475 007c 9A61     		str	r2, [r3, #24]
 3476 007e F2E7     		b	.L271
 3477              	.L275:
 3478              		.align	2
 3479              	.L274:
 3480 0080 00000000 		.word	UART_DMATxOnlyAbortCallback
 3481              		.cfi_endproc
 3482              	.LFE363:
 3484              		.section	.text.UART_DMATxOnlyAbortCallback,"ax",%progbits
 3485              		.align	1
 3486              		.syntax unified
 3487              		.thumb
 3488              		.thumb_func
 3489              		.fpu fpv5-d16
 3491              	UART_DMATxOnlyAbortCallback:
 3492              	.LFB399:
3609:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 3493              		.loc 1 3609 0
 3494              		.cfi_startproc
 3495              		@ args = 0, pretend = 0, frame = 0
 3496              		@ frame_needed = 0, uses_anonymous_args = 0
 3497              	.LVL283:
 3498 0000 08B5     		push	{r3, lr}
 3499              	.LCFI27:
 3500              		.cfi_def_cfa_offset 8
 3501              		.cfi_offset 3, -8
 3502              		.cfi_offset 14, -4
3610:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3503              		.loc 1 3610 0
 3504 0002 806B     		ldr	r0, [r0, #56]
 3505              	.LVL284:
ARM GAS  /tmp/ccsDPfHf.s 			page 143


3612:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3506              		.loc 1 3612 0
 3507 0004 0023     		movs	r3, #0
 3508 0006 A0F85630 		strh	r3, [r0, #86]	@ movhi
3615:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3509              		.loc 1 3615 0
 3510 000a 436E     		ldr	r3, [r0, #100]
 3511 000c B3F1005F 		cmp	r3, #536870912
 3512 0010 05D0     		beq	.L279
 3513              	.L277:
3621:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3514              		.loc 1 3621 0
 3515 0012 2023     		movs	r3, #32
 3516 0014 C0F88030 		str	r3, [r0, #128]
3629:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3517              		.loc 1 3629 0
 3518 0018 FFF7FEFF 		bl	HAL_UART_AbortTransmitCpltCallback
 3519              	.LVL285:
3631:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3520              		.loc 1 3631 0
 3521 001c 08BD     		pop	{r3, pc}
 3522              	.LVL286:
 3523              	.L279:
3617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 3524              		.loc 1 3617 0
 3525 001e 0268     		ldr	r2, [r0]
 3526 0020 9369     		ldr	r3, [r2, #24]
 3527 0022 43F01003 		orr	r3, r3, #16
 3528 0026 9361     		str	r3, [r2, #24]
 3529 0028 F3E7     		b	.L277
 3530              		.cfi_endproc
 3531              	.LFE399:
 3533              		.section	.text.HAL_UART_AbortReceiveCpltCallback,"ax",%progbits
 3534              		.align	1
 3535              		.weak	HAL_UART_AbortReceiveCpltCallback
 3536              		.syntax unified
 3537              		.thumb
 3538              		.thumb_func
 3539              		.fpu fpv5-d16
 3541              	HAL_UART_AbortReceiveCpltCallback:
 3542              	.LFB373:
2517:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Prevent unused argument(s) compilation warning */
 3543              		.loc 1 2517 0
 3544              		.cfi_startproc
 3545              		@ args = 0, pretend = 0, frame = 0
 3546              		@ frame_needed = 0, uses_anonymous_args = 0
 3547              		@ link register save eliminated.
 3548              	.LVL287:
2524:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3549              		.loc 1 2524 0
 3550 0000 7047     		bx	lr
 3551              		.cfi_endproc
 3552              	.LFE373:
 3554              		.section	.text.HAL_UART_AbortReceive_IT,"ax",%progbits
 3555              		.align	1
 3556              		.global	HAL_UART_AbortReceive_IT
 3557              		.syntax unified
ARM GAS  /tmp/ccsDPfHf.s 			page 144


 3558              		.thumb
 3559              		.thumb_func
 3560              		.fpu fpv5-d16
 3562              	HAL_UART_AbortReceive_IT:
 3563              	.LFB364:
2096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
 3564              		.loc 1 2096 0
 3565              		.cfi_startproc
 3566              		@ args = 0, pretend = 0, frame = 0
 3567              		@ frame_needed = 0, uses_anonymous_args = 0
 3568              	.LVL288:
 3569 0000 10B5     		push	{r4, lr}
 3570              	.LCFI28:
 3571              		.cfi_def_cfa_offset 8
 3572              		.cfi_offset 4, -8
 3573              		.cfi_offset 14, -4
 3574 0002 0446     		mov	r4, r0
2098:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 3575              		.loc 1 2098 0
 3576 0004 0268     		ldr	r2, [r0]
 3577 0006 1368     		ldr	r3, [r2]
 3578 0008 23F49073 		bic	r3, r3, #288
 3579 000c 1360     		str	r3, [r2]
2099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3580              		.loc 1 2099 0
 3581 000e 0268     		ldr	r2, [r0]
 3582 0010 9168     		ldr	r1, [r2, #8]
 3583 0012 1B4B     		ldr	r3, .L286
 3584 0014 0B40     		ands	r3, r3, r1
 3585 0016 9360     		str	r3, [r2, #8]
2102:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3586              		.loc 1 2102 0
 3587 0018 0368     		ldr	r3, [r0]
 3588 001a 9A68     		ldr	r2, [r3, #8]
 3589 001c 12F0400F 		tst	r2, #64
 3590 0020 22D0     		beq	.L282
2104:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3591              		.loc 1 2104 0
 3592 0022 9A68     		ldr	r2, [r3, #8]
 3593 0024 22F04002 		bic	r2, r2, #64
 3594 0028 9A60     		str	r2, [r3, #8]
2107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3595              		.loc 1 2107 0
 3596 002a 836F     		ldr	r3, [r0, #120]
 3597 002c 53B1     		cbz	r3, .L283
2111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3598              		.loc 1 2111 0
 3599 002e 154A     		ldr	r2, .L286+4
 3600 0030 1A65     		str	r2, [r3, #80]
2114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 3601              		.loc 1 2114 0
 3602 0032 806F     		ldr	r0, [r0, #120]
 3603              	.LVL289:
 3604 0034 FFF7FEFF 		bl	HAL_DMA_Abort_IT
 3605              	.LVL290:
 3606 0038 10B1     		cbz	r0, .L284
2117:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
ARM GAS  /tmp/ccsDPfHf.s 			page 145


 3607              		.loc 1 2117 0
 3608 003a A06F     		ldr	r0, [r4, #120]
 3609 003c 036D     		ldr	r3, [r0, #80]
 3610 003e 9847     		blx	r3
 3611              	.LVL291:
 3612              	.L284:
2172:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3613              		.loc 1 2172 0
 3614 0040 0020     		movs	r0, #0
 3615 0042 10BD     		pop	{r4, pc}
 3616              	.LVL292:
 3617              	.L283:
2123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3618              		.loc 1 2123 0
 3619 0044 0023     		movs	r3, #0
 3620 0046 A0F85E30 		strh	r3, [r0, #94]	@ movhi
2126:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3621              		.loc 1 2126 0
 3622 004a 8365     		str	r3, [r0, #88]
2129:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3623              		.loc 1 2129 0
 3624 004c 0368     		ldr	r3, [r0]
 3625 004e 0F22     		movs	r2, #15
 3626 0050 1A62     		str	r2, [r3, #32]
2132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3627              		.loc 1 2132 0
 3628 0052 0268     		ldr	r2, [r0]
 3629 0054 9369     		ldr	r3, [r2, #24]
 3630 0056 43F00803 		orr	r3, r3, #8
 3631 005a 9361     		str	r3, [r2, #24]
2135:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3632              		.loc 1 2135 0
 3633 005c 2023     		movs	r3, #32
 3634 005e C0F88430 		str	r3, [r0, #132]
2143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3635              		.loc 1 2143 0
 3636 0062 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3637              	.LVL293:
 3638 0066 EBE7     		b	.L284
 3639              	.LVL294:
 3640              	.L282:
2150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3641              		.loc 1 2150 0
 3642 0068 0022     		movs	r2, #0
 3643 006a A0F85E20 		strh	r2, [r0, #94]	@ movhi
2153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3644              		.loc 1 2153 0
 3645 006e 8265     		str	r2, [r0, #88]
2156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3646              		.loc 1 2156 0
 3647 0070 0F22     		movs	r2, #15
 3648 0072 1A62     		str	r2, [r3, #32]
2159:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3649              		.loc 1 2159 0
 3650 0074 2023     		movs	r3, #32
 3651 0076 C0F88430 		str	r3, [r0, #132]
2167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
ARM GAS  /tmp/ccsDPfHf.s 			page 146


 3652              		.loc 1 2167 0
 3653 007a FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3654              	.LVL295:
 3655 007e DFE7     		b	.L284
 3656              	.L287:
 3657              		.align	2
 3658              	.L286:
 3659 0080 FEFFFFEF 		.word	-268435458
 3660 0084 00000000 		.word	UART_DMARxOnlyAbortCallback
 3661              		.cfi_endproc
 3662              	.LFE364:
 3664              		.section	.text.UART_DMARxOnlyAbortCallback,"ax",%progbits
 3665              		.align	1
 3666              		.syntax unified
 3667              		.thumb
 3668              		.thumb_func
 3669              		.fpu fpv5-d16
 3671              	UART_DMARxOnlyAbortCallback:
 3672              	.LFB400:
3642:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 3673              		.loc 1 3642 0
 3674              		.cfi_startproc
 3675              		@ args = 0, pretend = 0, frame = 0
 3676              		@ frame_needed = 0, uses_anonymous_args = 0
 3677              	.LVL296:
 3678 0000 08B5     		push	{r3, lr}
 3679              	.LCFI29:
 3680              		.cfi_def_cfa_offset 8
 3681              		.cfi_offset 3, -8
 3682              		.cfi_offset 14, -4
3643:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3683              		.loc 1 3643 0
 3684 0002 806B     		ldr	r0, [r0, #56]
 3685              	.LVL297:
3645:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3686              		.loc 1 3645 0
 3687 0004 0023     		movs	r3, #0
 3688 0006 A0F85E30 		strh	r3, [r0, #94]	@ movhi
3648:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3689              		.loc 1 3648 0
 3690 000a 0368     		ldr	r3, [r0]
 3691 000c 0F22     		movs	r2, #15
 3692 000e 1A62     		str	r2, [r3, #32]
3651:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3693              		.loc 1 3651 0
 3694 0010 0268     		ldr	r2, [r0]
 3695 0012 9369     		ldr	r3, [r2, #24]
 3696 0014 43F00803 		orr	r3, r3, #8
 3697 0018 9361     		str	r3, [r2, #24]
3654:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3698              		.loc 1 3654 0
 3699 001a 2023     		movs	r3, #32
 3700 001c C0F88430 		str	r3, [r0, #132]
3662:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* USE_HAL_UART_REGISTER_CALLBACKS */
 3701              		.loc 1 3662 0
 3702 0020 FFF7FEFF 		bl	HAL_UART_AbortReceiveCpltCallback
 3703              	.LVL298:
ARM GAS  /tmp/ccsDPfHf.s 			page 147


3664:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3704              		.loc 1 3664 0
 3705 0024 08BD     		pop	{r3, pc}
 3706              		.cfi_endproc
 3707              	.LFE400:
 3709              		.section	.text.HAL_UART_ReceiverTimeout_Config,"ax",%progbits
 3710              		.align	1
 3711              		.global	HAL_UART_ReceiverTimeout_Config
 3712              		.syntax unified
 3713              		.thumb
 3714              		.thumb_func
 3715              		.fpu fpv5-d16
 3717              	HAL_UART_ReceiverTimeout_Config:
 3718              	.LFB374:
2564:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(IS_LPUART_INSTANCE(huart->Instance)))
 3719              		.loc 1 2564 0
 3720              		.cfi_startproc
 3721              		@ args = 0, pretend = 0, frame = 0
 3722              		@ frame_needed = 0, uses_anonymous_args = 0
 3723              		@ link register save eliminated.
 3724              	.LVL299:
2565:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3725              		.loc 1 2565 0
 3726 0000 0268     		ldr	r2, [r0]
 3727 0002 044B     		ldr	r3, .L292
 3728 0004 9A42     		cmp	r2, r3
 3729 0006 04D0     		beq	.L290
2568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 3730              		.loc 1 2568 0
 3731 0008 5369     		ldr	r3, [r2, #20]
 3732 000a 03F07F43 		and	r3, r3, #-16777216
 3733 000e 1943     		orrs	r1, r1, r3
 3734              	.LVL300:
 3735 0010 5161     		str	r1, [r2, #20]
 3736              	.L290:
2570:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3737              		.loc 1 2570 0
 3738 0012 7047     		bx	lr
 3739              	.L293:
 3740              		.align	2
 3741              	.L292:
 3742 0014 000C0058 		.word	1476398080
 3743              		.cfi_endproc
 3744              	.LFE374:
 3746              		.section	.text.HAL_UART_EnableReceiverTimeout,"ax",%progbits
 3747              		.align	1
 3748              		.global	HAL_UART_EnableReceiverTimeout
 3749              		.syntax unified
 3750              		.thumb
 3751              		.thumb_func
 3752              		.fpu fpv5-d16
 3754              	HAL_UART_EnableReceiverTimeout:
 3755              	.LFB375:
2579:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(IS_LPUART_INSTANCE(huart->Instance)))
 3756              		.loc 1 2579 0
 3757              		.cfi_startproc
 3758              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccsDPfHf.s 			page 148


 3759              		@ frame_needed = 0, uses_anonymous_args = 0
 3760              		@ link register save eliminated.
 3761              	.LVL301:
2580:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3762              		.loc 1 2580 0
 3763 0000 0368     		ldr	r3, [r0]
 3764 0002 114A     		ldr	r2, .L299
 3765 0004 9342     		cmp	r3, r2
 3766 0006 19D0     		beq	.L296
2582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3767              		.loc 1 2582 0
 3768 0008 D0F88020 		ldr	r2, [r0, #128]
 3769 000c 202A     		cmp	r2, #32
 3770 000e 17D1     		bne	.L297
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3771              		.loc 1 2585 0
 3772 0010 90F87C20 		ldrb	r2, [r0, #124]	@ zero_extendqisi2
 3773 0014 012A     		cmp	r2, #1
 3774 0016 15D0     		beq	.L298
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3775              		.loc 1 2585 0 is_stmt 0 discriminator 2
 3776 0018 0122     		movs	r2, #1
 3777 001a 80F87C20 		strb	r2, [r0, #124]
2587:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3778              		.loc 1 2587 0 is_stmt 1 discriminator 2
 3779 001e 2422     		movs	r2, #36
 3780 0020 C0F88020 		str	r2, [r0, #128]
2590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3781              		.loc 1 2590 0 discriminator 2
 3782 0024 5A68     		ldr	r2, [r3, #4]
 3783 0026 42F40002 		orr	r2, r2, #8388608
 3784 002a 5A60     		str	r2, [r3, #4]
2592:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3785              		.loc 1 2592 0 discriminator 2
 3786 002c 2023     		movs	r3, #32
 3787 002e C0F88030 		str	r3, [r0, #128]
2595:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3788              		.loc 1 2595 0 discriminator 2
 3789 0032 0023     		movs	r3, #0
 3790 0034 80F87C30 		strb	r3, [r0, #124]
2597:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3791              		.loc 1 2597 0 discriminator 2
 3792 0038 1846     		mov	r0, r3
 3793              	.LVL302:
 3794 003a 7047     		bx	lr
 3795              	.LVL303:
 3796              	.L296:
2606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 3797              		.loc 1 2606 0
 3798 003c 0120     		movs	r0, #1
 3799              	.LVL304:
 3800 003e 7047     		bx	lr
 3801              	.LVL305:
 3802              	.L297:
2601:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3803              		.loc 1 2601 0
 3804 0040 0220     		movs	r0, #2
ARM GAS  /tmp/ccsDPfHf.s 			page 149


 3805              	.LVL306:
 3806 0042 7047     		bx	lr
 3807              	.LVL307:
 3808              	.L298:
2585:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3809              		.loc 1 2585 0
 3810 0044 0220     		movs	r0, #2
 3811              	.LVL308:
2608:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3812              		.loc 1 2608 0
 3813 0046 7047     		bx	lr
 3814              	.L300:
 3815              		.align	2
 3816              	.L299:
 3817 0048 000C0058 		.word	1476398080
 3818              		.cfi_endproc
 3819              	.LFE375:
 3821              		.section	.text.HAL_UART_DisableReceiverTimeout,"ax",%progbits
 3822              		.align	1
 3823              		.global	HAL_UART_DisableReceiverTimeout
 3824              		.syntax unified
 3825              		.thumb
 3826              		.thumb_func
 3827              		.fpu fpv5-d16
 3829              	HAL_UART_DisableReceiverTimeout:
 3830              	.LFB376:
2617:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   if (!(IS_LPUART_INSTANCE(huart->Instance)))
 3831              		.loc 1 2617 0
 3832              		.cfi_startproc
 3833              		@ args = 0, pretend = 0, frame = 0
 3834              		@ frame_needed = 0, uses_anonymous_args = 0
 3835              		@ link register save eliminated.
 3836              	.LVL309:
2618:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 3837              		.loc 1 2618 0
 3838 0000 0368     		ldr	r3, [r0]
 3839 0002 114A     		ldr	r2, .L306
 3840 0004 9342     		cmp	r3, r2
 3841 0006 19D0     		beq	.L303
2620:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 3842              		.loc 1 2620 0
 3843 0008 D0F88020 		ldr	r2, [r0, #128]
 3844 000c 202A     		cmp	r2, #32
 3845 000e 17D1     		bne	.L304
2623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3846              		.loc 1 2623 0
 3847 0010 90F87C20 		ldrb	r2, [r0, #124]	@ zero_extendqisi2
 3848 0014 012A     		cmp	r2, #1
 3849 0016 15D0     		beq	.L305
2623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3850              		.loc 1 2623 0 is_stmt 0 discriminator 2
 3851 0018 0122     		movs	r2, #1
 3852 001a 80F87C20 		strb	r2, [r0, #124]
2625:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3853              		.loc 1 2625 0 is_stmt 1 discriminator 2
 3854 001e 2422     		movs	r2, #36
 3855 0020 C0F88020 		str	r2, [r0, #128]
ARM GAS  /tmp/ccsDPfHf.s 			page 150


2628:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3856              		.loc 1 2628 0 discriminator 2
 3857 0024 5A68     		ldr	r2, [r3, #4]
 3858 0026 22F40002 		bic	r2, r2, #8388608
 3859 002a 5A60     		str	r2, [r3, #4]
2630:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3860              		.loc 1 2630 0 discriminator 2
 3861 002c 2023     		movs	r3, #32
 3862 002e C0F88030 		str	r3, [r0, #128]
2633:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3863              		.loc 1 2633 0 discriminator 2
 3864 0032 0023     		movs	r3, #0
 3865 0034 80F87C30 		strb	r3, [r0, #124]
2635:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3866              		.loc 1 2635 0 discriminator 2
 3867 0038 1846     		mov	r0, r3
 3868              	.LVL310:
 3869 003a 7047     		bx	lr
 3870              	.LVL311:
 3871              	.L303:
2644:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 3872              		.loc 1 2644 0
 3873 003c 0120     		movs	r0, #1
 3874              	.LVL312:
 3875 003e 7047     		bx	lr
 3876              	.LVL313:
 3877              	.L304:
2639:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 3878              		.loc 1 2639 0
 3879 0040 0220     		movs	r0, #2
 3880              	.LVL314:
 3881 0042 7047     		bx	lr
 3882              	.LVL315:
 3883              	.L305:
2623:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3884              		.loc 1 2623 0
 3885 0044 0220     		movs	r0, #2
 3886              	.LVL316:
2646:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3887              		.loc 1 2646 0
 3888 0046 7047     		bx	lr
 3889              	.L307:
 3890              		.align	2
 3891              	.L306:
 3892 0048 000C0058 		.word	1476398080
 3893              		.cfi_endproc
 3894              	.LFE376:
 3896              		.section	.text.HAL_MultiProcessor_EnterMuteMode,"ax",%progbits
 3897              		.align	1
 3898              		.global	HAL_MultiProcessor_EnterMuteMode
 3899              		.syntax unified
 3900              		.thumb
 3901              		.thumb_func
 3902              		.fpu fpv5-d16
 3904              	HAL_MultiProcessor_EnterMuteMode:
 3905              	.LFB379:
2695:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_UART_SEND_REQ(huart, UART_MUTE_MODE_REQUEST);
ARM GAS  /tmp/ccsDPfHf.s 			page 151


 3906              		.loc 1 2695 0
 3907              		.cfi_startproc
 3908              		@ args = 0, pretend = 0, frame = 0
 3909              		@ frame_needed = 0, uses_anonymous_args = 0
 3910              		@ link register save eliminated.
 3911              	.LVL317:
2696:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 3912              		.loc 1 2696 0
 3913 0000 0268     		ldr	r2, [r0]
 3914 0002 9369     		ldr	r3, [r2, #24]
 3915 0004 43F00403 		orr	r3, r3, #4
 3916 0008 9361     		str	r3, [r2, #24]
2697:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3917              		.loc 1 2697 0
 3918 000a 7047     		bx	lr
 3919              		.cfi_endproc
 3920              	.LFE379:
 3922              		.section	.text.HAL_HalfDuplex_EnableTransmitter,"ax",%progbits
 3923              		.align	1
 3924              		.global	HAL_HalfDuplex_EnableTransmitter
 3925              		.syntax unified
 3926              		.thumb
 3927              		.thumb_func
 3928              		.fpu fpv5-d16
 3930              	HAL_HalfDuplex_EnableTransmitter:
 3931              	.LFB380:
2705:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 3932              		.loc 1 2705 0
 3933              		.cfi_startproc
 3934              		@ args = 0, pretend = 0, frame = 0
 3935              		@ frame_needed = 0, uses_anonymous_args = 0
 3936              		@ link register save eliminated.
 3937              	.LVL318:
2706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3938              		.loc 1 2706 0
 3939 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 3940 0004 012B     		cmp	r3, #1
 3941 0006 17D0     		beq	.L311
2706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3942              		.loc 1 2706 0 is_stmt 0 discriminator 2
 3943 0008 0123     		movs	r3, #1
 3944 000a 80F87C30 		strb	r3, [r0, #124]
2707:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3945              		.loc 1 2707 0 is_stmt 1 discriminator 2
 3946 000e 2423     		movs	r3, #36
 3947 0010 C0F88030 		str	r3, [r0, #128]
2710:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3948              		.loc 1 2710 0 discriminator 2
 3949 0014 0268     		ldr	r2, [r0]
 3950 0016 1368     		ldr	r3, [r2]
 3951 0018 23F00C03 		bic	r3, r3, #12
 3952 001c 1360     		str	r3, [r2]
2713:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3953              		.loc 1 2713 0 discriminator 2
 3954 001e 0268     		ldr	r2, [r0]
 3955 0020 1368     		ldr	r3, [r2]
 3956 0022 43F00803 		orr	r3, r3, #8
ARM GAS  /tmp/ccsDPfHf.s 			page 152


 3957 0026 1360     		str	r3, [r2]
2715:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3958              		.loc 1 2715 0 discriminator 2
 3959 0028 2023     		movs	r3, #32
 3960 002a C0F88030 		str	r3, [r0, #128]
2717:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3961              		.loc 1 2717 0 discriminator 2
 3962 002e 0023     		movs	r3, #0
 3963 0030 80F87C30 		strb	r3, [r0, #124]
2719:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 3964              		.loc 1 2719 0 discriminator 2
 3965 0034 1846     		mov	r0, r3
 3966              	.LVL319:
 3967 0036 7047     		bx	lr
 3968              	.LVL320:
 3969              	.L311:
2706:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3970              		.loc 1 2706 0
 3971 0038 0220     		movs	r0, #2
 3972              	.LVL321:
2720:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 3973              		.loc 1 2720 0
 3974 003a 7047     		bx	lr
 3975              		.cfi_endproc
 3976              	.LFE380:
 3978              		.section	.text.HAL_HalfDuplex_EnableReceiver,"ax",%progbits
 3979              		.align	1
 3980              		.global	HAL_HalfDuplex_EnableReceiver
 3981              		.syntax unified
 3982              		.thumb
 3983              		.thumb_func
 3984              		.fpu fpv5-d16
 3986              	HAL_HalfDuplex_EnableReceiver:
 3987              	.LFB381:
2728:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 3988              		.loc 1 2728 0
 3989              		.cfi_startproc
 3990              		@ args = 0, pretend = 0, frame = 0
 3991              		@ frame_needed = 0, uses_anonymous_args = 0
 3992              		@ link register save eliminated.
 3993              	.LVL322:
2729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3994              		.loc 1 2729 0
 3995 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 3996 0004 012B     		cmp	r3, #1
 3997 0006 17D0     		beq	.L314
2729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 3998              		.loc 1 2729 0 is_stmt 0 discriminator 2
 3999 0008 0123     		movs	r3, #1
 4000 000a 80F87C30 		strb	r3, [r0, #124]
2730:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4001              		.loc 1 2730 0 is_stmt 1 discriminator 2
 4002 000e 2423     		movs	r3, #36
 4003 0010 C0F88030 		str	r3, [r0, #128]
2733:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4004              		.loc 1 2733 0 discriminator 2
 4005 0014 0268     		ldr	r2, [r0]
ARM GAS  /tmp/ccsDPfHf.s 			page 153


 4006 0016 1368     		ldr	r3, [r2]
 4007 0018 23F00C03 		bic	r3, r3, #12
 4008 001c 1360     		str	r3, [r2]
2736:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4009              		.loc 1 2736 0 discriminator 2
 4010 001e 0268     		ldr	r2, [r0]
 4011 0020 1368     		ldr	r3, [r2]
 4012 0022 43F00403 		orr	r3, r3, #4
 4013 0026 1360     		str	r3, [r2]
2738:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4014              		.loc 1 2738 0 discriminator 2
 4015 0028 2023     		movs	r3, #32
 4016 002a C0F88030 		str	r3, [r0, #128]
2740:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4017              		.loc 1 2740 0 discriminator 2
 4018 002e 0023     		movs	r3, #0
 4019 0030 80F87C30 		strb	r3, [r0, #124]
2742:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 4020              		.loc 1 2742 0 discriminator 2
 4021 0034 1846     		mov	r0, r3
 4022              	.LVL323:
 4023 0036 7047     		bx	lr
 4024              	.LVL324:
 4025              	.L314:
2729:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->gState = HAL_UART_STATE_BUSY;
 4026              		.loc 1 2729 0
 4027 0038 0220     		movs	r0, #2
 4028              	.LVL325:
2743:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4029              		.loc 1 2743 0
 4030 003a 7047     		bx	lr
 4031              		.cfi_endproc
 4032              	.LFE381:
 4034              		.section	.text.HAL_LIN_SendBreak,"ax",%progbits
 4035              		.align	1
 4036              		.global	HAL_LIN_SendBreak
 4037              		.syntax unified
 4038              		.thumb
 4039              		.thumb_func
 4040              		.fpu fpv5-d16
 4042              	HAL_LIN_SendBreak:
 4043              	.LFB382:
2752:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the parameters */
 4044              		.loc 1 2752 0
 4045              		.cfi_startproc
 4046              		@ args = 0, pretend = 0, frame = 0
 4047              		@ frame_needed = 0, uses_anonymous_args = 0
 4048              		@ link register save eliminated.
 4049              	.LVL326:
2756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4050              		.loc 1 2756 0
 4051 0000 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 4052 0004 012B     		cmp	r3, #1
 4053 0006 12D0     		beq	.L317
2756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4054              		.loc 1 2756 0 is_stmt 0 discriminator 2
 4055 0008 0123     		movs	r3, #1
ARM GAS  /tmp/ccsDPfHf.s 			page 154


 4056 000a 80F87C30 		strb	r3, [r0, #124]
2758:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4057              		.loc 1 2758 0 is_stmt 1 discriminator 2
 4058 000e 2423     		movs	r3, #36
 4059 0010 C0F88030 		str	r3, [r0, #128]
2761:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4060              		.loc 1 2761 0 discriminator 2
 4061 0014 0268     		ldr	r2, [r0]
 4062 0016 9369     		ldr	r3, [r2, #24]
 4063 0018 43F00203 		orr	r3, r3, #2
 4064 001c 9361     		str	r3, [r2, #24]
2763:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4065              		.loc 1 2763 0 discriminator 2
 4066 001e 2023     		movs	r3, #32
 4067 0020 C0F88030 		str	r3, [r0, #128]
2765:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4068              		.loc 1 2765 0 discriminator 2
 4069 0024 0023     		movs	r3, #0
 4070 0026 80F87C30 		strb	r3, [r0, #124]
2767:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 4071              		.loc 1 2767 0 discriminator 2
 4072 002a 1846     		mov	r0, r3
 4073              	.LVL327:
 4074 002c 7047     		bx	lr
 4075              	.LVL328:
 4076              	.L317:
2756:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4077              		.loc 1 2756 0
 4078 002e 0220     		movs	r0, #2
 4079              	.LVL329:
2768:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4080              		.loc 1 2768 0
 4081 0030 7047     		bx	lr
 4082              		.cfi_endproc
 4083              	.LFE382:
 4085              		.section	.text.HAL_UART_GetState,"ax",%progbits
 4086              		.align	1
 4087              		.global	HAL_UART_GetState
 4088              		.syntax unified
 4089              		.thumb
 4090              		.thumb_func
 4091              		.fpu fpv5-d16
 4093              	HAL_UART_GetState:
 4094              	.LFB383:
2797:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t temp1;
 4095              		.loc 1 2797 0
 4096              		.cfi_startproc
 4097              		@ args = 0, pretend = 0, frame = 0
 4098              		@ frame_needed = 0, uses_anonymous_args = 0
 4099              		@ link register save eliminated.
 4100              	.LVL330:
2800:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   temp2 = huart->RxState;
 4101              		.loc 1 2800 0
 4102 0000 D0F88020 		ldr	r2, [r0, #128]
 4103              	.LVL331:
2801:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4104              		.loc 1 2801 0
ARM GAS  /tmp/ccsDPfHf.s 			page 155


 4105 0004 D0F88400 		ldr	r0, [r0, #132]
 4106              	.LVL332:
2804:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4107              		.loc 1 2804 0
 4108 0008 1043     		orrs	r0, r0, r2
 4109              	.LVL333:
 4110 000a 7047     		bx	lr
 4111              		.cfi_endproc
 4112              	.LFE383:
 4114              		.section	.text.HAL_UART_GetError,"ax",%progbits
 4115              		.align	1
 4116              		.global	HAL_UART_GetError
 4117              		.syntax unified
 4118              		.thumb
 4119              		.thumb_func
 4120              		.fpu fpv5-d16
 4122              	HAL_UART_GetError:
 4123              	.LFB384:
2813:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   return huart->ErrorCode;
 4124              		.loc 1 2813 0
 4125              		.cfi_startproc
 4126              		@ args = 0, pretend = 0, frame = 0
 4127              		@ frame_needed = 0, uses_anonymous_args = 0
 4128              		@ link register save eliminated.
 4129              	.LVL334:
2814:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 4130              		.loc 1 2814 0
 4131 0000 D0F88800 		ldr	r0, [r0, #136]
 4132              	.LVL335:
2815:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** /**
 4133              		.loc 1 2815 0
 4134 0004 7047     		bx	lr
 4135              		.cfi_endproc
 4136              	.LFE384:
 4138              		.global	__aeabi_uldivmod
 4139              		.section	.text.UART_SetConfig,"ax",%progbits
 4140              		.align	1
 4141              		.global	UART_SetConfig
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv5-d16
 4147              	UART_SetConfig:
 4148              	.LFB385:
2858:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t tmpreg;
 4149              		.loc 1 2858 0
 4150              		.cfi_startproc
 4151              		@ args = 0, pretend = 0, frame = 24
 4152              		@ frame_needed = 0, uses_anonymous_args = 0
 4153              	.LVL336:
 4154 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 4155              	.LCFI30:
 4156              		.cfi_def_cfa_offset 28
 4157              		.cfi_offset 4, -28
 4158              		.cfi_offset 5, -24
 4159              		.cfi_offset 6, -20
 4160              		.cfi_offset 7, -16
ARM GAS  /tmp/ccsDPfHf.s 			page 156


 4161              		.cfi_offset 8, -12
 4162              		.cfi_offset 9, -8
 4163              		.cfi_offset 14, -4
 4164 0004 87B0     		sub	sp, sp, #28
 4165              	.LCFI31:
 4166              		.cfi_def_cfa_offset 56
 4167 0006 0446     		mov	r4, r0
 4168              	.LVL337:
2872:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 4169              		.loc 1 2872 0
 4170 0008 0168     		ldr	r1, [r0]
2895:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   tmpreg |= (uint32_t)huart->FifoMode;
 4171              		.loc 1 2895 0
 4172 000a 8368     		ldr	r3, [r0, #8]
 4173 000c 0269     		ldr	r2, [r0, #16]
 4174 000e 1343     		orrs	r3, r3, r2
 4175 0010 4269     		ldr	r2, [r0, #20]
 4176 0012 1343     		orrs	r3, r3, r2
 4177 0014 C269     		ldr	r2, [r0, #28]
 4178 0016 1343     		orrs	r3, r3, r2
 4179              	.LVL338:
2896:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 4180              		.loc 1 2896 0
 4181 0018 426E     		ldr	r2, [r0, #100]
 4182 001a 1343     		orrs	r3, r3, r2
 4183              	.LVL339:
2897:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4184              		.loc 1 2897 0
 4185 001c 0868     		ldr	r0, [r1]
 4186              	.LVL340:
 4187 001e 924A     		ldr	r2, .L487
 4188 0020 0240     		ands	r2, r2, r0
 4189 0022 1A43     		orrs	r2, r2, r3
 4190 0024 0A60     		str	r2, [r1]
2902:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4191              		.loc 1 2902 0
 4192 0026 2268     		ldr	r2, [r4]
 4193 0028 5368     		ldr	r3, [r2, #4]
 4194              	.LVL341:
 4195 002a 23F44053 		bic	r3, r3, #12288
 4196 002e E168     		ldr	r1, [r4, #12]
 4197 0030 0B43     		orrs	r3, r3, r1
 4198 0032 5360     		str	r3, [r2, #4]
2910:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4199              		.loc 1 2910 0
 4200 0034 A169     		ldr	r1, [r4, #24]
 4201              	.LVL342:
2912:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 4202              		.loc 1 2912 0
 4203 0036 2268     		ldr	r2, [r4]
 4204 0038 8C4B     		ldr	r3, .L487+4
 4205 003a 9A42     		cmp	r2, r3
 4206 003c 01D0     		beq	.L321
2914:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 4207              		.loc 1 2914 0
 4208 003e 236A     		ldr	r3, [r4, #32]
 4209 0040 1943     		orrs	r1, r1, r3
ARM GAS  /tmp/ccsDPfHf.s 			page 157


 4210              	.LVL343:
 4211              	.L321:
2916:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4212              		.loc 1 2916 0
 4213 0042 9068     		ldr	r0, [r2, #8]
 4214 0044 8A4B     		ldr	r3, .L487+8
 4215 0046 0340     		ands	r3, r3, r0
 4216 0048 0B43     		orrs	r3, r3, r1
 4217 004a 9360     		str	r3, [r2, #8]
2921:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4218              		.loc 1 2921 0
 4219 004c 2268     		ldr	r2, [r4]
 4220 004e D36A     		ldr	r3, [r2, #44]
 4221 0050 23F00F03 		bic	r3, r3, #15
 4222 0054 616A     		ldr	r1, [r4, #36]
 4223              	.LVL344:
 4224 0056 0B43     		orrs	r3, r3, r1
 4225 0058 D362     		str	r3, [r2, #44]
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4226              		.loc 1 2924 0
 4227 005a 2368     		ldr	r3, [r4]
 4228 005c 854A     		ldr	r2, .L487+12
 4229 005e 9342     		cmp	r3, r2
 4230 0060 27D0     		beq	.L469
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4231              		.loc 1 2924 0 is_stmt 0 discriminator 2
 4232 0062 854A     		ldr	r2, .L487+16
 4233 0064 9342     		cmp	r3, r2
 4234 0066 61D0     		beq	.L470
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4235              		.loc 1 2924 0 discriminator 18
 4236 0068 844A     		ldr	r2, .L487+20
 4237 006a 9342     		cmp	r3, r2
 4238 006c 78D0     		beq	.L471
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4239              		.loc 1 2924 0 discriminator 34
 4240 006e 844A     		ldr	r2, .L487+24
 4241 0070 9342     		cmp	r3, r2
 4242 0072 00F08F80 		beq	.L472
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4243              		.loc 1 2924 0 discriminator 50
 4244 0076 834A     		ldr	r2, .L487+28
 4245 0078 9342     		cmp	r3, r2
 4246 007a 00F0A580 		beq	.L473
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4247              		.loc 1 2924 0 discriminator 66
 4248 007e 824A     		ldr	r2, .L487+32
 4249 0080 9342     		cmp	r3, r2
 4250 0082 00F0BB80 		beq	.L474
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4251              		.loc 1 2924 0 discriminator 82
 4252 0086 814A     		ldr	r2, .L487+36
 4253 0088 9342     		cmp	r3, r2
 4254 008a 00F01181 		beq	.L475
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4255              		.loc 1 2924 0 discriminator 98
 4256 008e 804A     		ldr	r2, .L487+40
ARM GAS  /tmp/ccsDPfHf.s 			page 158


 4257 0090 9342     		cmp	r3, r2
 4258 0092 00F02781 		beq	.L476
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4259              		.loc 1 2924 0 discriminator 114
 4260 0096 7F4A     		ldr	r2, .L487+44
 4261 0098 9342     		cmp	r3, r2
 4262 009a 00F03A81 		beq	.L477
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4263              		.loc 1 2924 0 discriminator 130
 4264 009e 7E4A     		ldr	r2, .L487+48
 4265 00a0 9342     		cmp	r3, r2
 4266 00a2 00F05F81 		beq	.L478
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4267              		.loc 1 2924 0 discriminator 146
 4268 00a6 714A     		ldr	r2, .L487+4
 4269 00a8 9342     		cmp	r3, r2
 4270 00aa 00F08481 		beq	.L479
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4271              		.loc 1 2924 0
 4272 00ae 8022     		movs	r2, #128
 4273 00b0 9DE1     		b	.L326
 4274              	.L469:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4275              		.loc 1 2924 0 discriminator 1
 4276 00b2 7A4A     		ldr	r2, .L487+52
 4277 00b4 526D     		ldr	r2, [r2, #84]
 4278 00b6 02F03802 		and	r2, r2, #56
 4279 00ba 282A     		cmp	r2, #40
 4280 00bc 34D8     		bhi	.L323
 4281 00be DFE812F0 		tbh	[pc, r2, lsl #1]
 4282              	.L325:
 4283 00c2 2900     		.2byte	(.L324-.L325)/2
 4284 00c4 3300     		.2byte	(.L323-.L325)/2
 4285 00c6 3300     		.2byte	(.L323-.L325)/2
 4286 00c8 3300     		.2byte	(.L323-.L325)/2
 4287 00ca 3300     		.2byte	(.L323-.L325)/2
 4288 00cc 3300     		.2byte	(.L323-.L325)/2
 4289 00ce 3300     		.2byte	(.L323-.L325)/2
 4290 00d0 3300     		.2byte	(.L323-.L325)/2
 4291 00d2 9501     		.2byte	(.L439-.L325)/2
 4292 00d4 3300     		.2byte	(.L323-.L325)/2
 4293 00d6 3300     		.2byte	(.L323-.L325)/2
 4294 00d8 3300     		.2byte	(.L323-.L325)/2
 4295 00da 3300     		.2byte	(.L323-.L325)/2
 4296 00dc 3300     		.2byte	(.L323-.L325)/2
 4297 00de 3300     		.2byte	(.L323-.L325)/2
 4298 00e0 3300     		.2byte	(.L323-.L325)/2
 4299 00e2 2B00     		.2byte	(.L327-.L325)/2
 4300 00e4 3300     		.2byte	(.L323-.L325)/2
 4301 00e6 3300     		.2byte	(.L323-.L325)/2
 4302 00e8 3300     		.2byte	(.L323-.L325)/2
 4303 00ea 3300     		.2byte	(.L323-.L325)/2
 4304 00ec 3300     		.2byte	(.L323-.L325)/2
 4305 00ee 3300     		.2byte	(.L323-.L325)/2
 4306 00f0 3300     		.2byte	(.L323-.L325)/2
 4307 00f2 2D00     		.2byte	(.L328-.L325)/2
 4308 00f4 3300     		.2byte	(.L323-.L325)/2
ARM GAS  /tmp/ccsDPfHf.s 			page 159


 4309 00f6 3300     		.2byte	(.L323-.L325)/2
 4310 00f8 3300     		.2byte	(.L323-.L325)/2
 4311 00fa 3300     		.2byte	(.L323-.L325)/2
 4312 00fc 3300     		.2byte	(.L323-.L325)/2
 4313 00fe 3300     		.2byte	(.L323-.L325)/2
 4314 0100 3300     		.2byte	(.L323-.L325)/2
 4315 0102 2F00     		.2byte	(.L329-.L325)/2
 4316 0104 3300     		.2byte	(.L323-.L325)/2
 4317 0106 3300     		.2byte	(.L323-.L325)/2
 4318 0108 3300     		.2byte	(.L323-.L325)/2
 4319 010a 3300     		.2byte	(.L323-.L325)/2
 4320 010c 3300     		.2byte	(.L323-.L325)/2
 4321 010e 3300     		.2byte	(.L323-.L325)/2
 4322 0110 3300     		.2byte	(.L323-.L325)/2
 4323 0112 3100     		.2byte	(.L330-.L325)/2
 4324              		.p2align 1
 4325              	.L324:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4326              		.loc 1 2924 0
 4327 0114 0122     		movs	r2, #1
 4328 0116 6AE1     		b	.L326
 4329              	.L327:
 4330              	.LVL345:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4331              		.loc 1 2924 0 discriminator 6
 4332 0118 0822     		movs	r2, #8
 4333 011a 68E1     		b	.L326
 4334              	.LVL346:
 4335              	.L328:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4336              		.loc 1 2924 0 discriminator 7
 4337 011c 1022     		movs	r2, #16
 4338 011e 66E1     		b	.L326
 4339              	.LVL347:
 4340              	.L329:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4341              		.loc 1 2924 0 discriminator 8
 4342 0120 2022     		movs	r2, #32
 4343 0122 64E1     		b	.L326
 4344              	.LVL348:
 4345              	.L330:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4346              		.loc 1 2924 0 discriminator 9
 4347 0124 4022     		movs	r2, #64
 4348 0126 62E1     		b	.L326
 4349              	.LVL349:
 4350              	.L323:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4351              		.loc 1 2924 0 discriminator 3
 4352 0128 8022     		movs	r2, #128
 4353 012a 60E1     		b	.L326
 4354              	.LVL350:
 4355              	.L470:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4356              		.loc 1 2924 0 discriminator 17
 4357 012c 5B4A     		ldr	r2, .L487+52
 4358 012e 526D     		ldr	r2, [r2, #84]
ARM GAS  /tmp/ccsDPfHf.s 			page 160


 4359 0130 02F00702 		and	r2, r2, #7
 4360 0134 052A     		cmp	r2, #5
 4361 0136 11D8     		bhi	.L332
 4362 0138 DFE812F0 		tbh	[pc, r2, lsl #1]
 4363              	.L334:
 4364 013c 0600     		.2byte	(.L333-.L334)/2
 4365 013e A701     		.2byte	(.L440-.L334)/2
 4366 0140 0800     		.2byte	(.L335-.L334)/2
 4367 0142 0A00     		.2byte	(.L336-.L334)/2
 4368 0144 0C00     		.2byte	(.L337-.L334)/2
 4369 0146 0E00     		.2byte	(.L338-.L334)/2
 4370              		.p2align 1
 4371              	.L333:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4372              		.loc 1 2924 0
 4373 0148 0022     		movs	r2, #0
 4374 014a 50E1     		b	.L326
 4375              	.L335:
 4376              	.LVL351:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4377              		.loc 1 2924 0 discriminator 22
 4378 014c 0822     		movs	r2, #8
 4379 014e 4EE1     		b	.L326
 4380              	.LVL352:
 4381              	.L336:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4382              		.loc 1 2924 0 discriminator 23
 4383 0150 1022     		movs	r2, #16
 4384 0152 4CE1     		b	.L326
 4385              	.LVL353:
 4386              	.L337:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4387              		.loc 1 2924 0 discriminator 24
 4388 0154 2022     		movs	r2, #32
 4389 0156 4AE1     		b	.L326
 4390              	.LVL354:
 4391              	.L338:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4392              		.loc 1 2924 0 discriminator 25
 4393 0158 4022     		movs	r2, #64
 4394 015a 48E1     		b	.L326
 4395              	.LVL355:
 4396              	.L332:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4397              		.loc 1 2924 0 discriminator 19
 4398 015c 8022     		movs	r2, #128
 4399 015e 46E1     		b	.L326
 4400              	.LVL356:
 4401              	.L471:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4402              		.loc 1 2924 0 discriminator 33
 4403 0160 4E4A     		ldr	r2, .L487+52
 4404 0162 526D     		ldr	r2, [r2, #84]
 4405 0164 02F00702 		and	r2, r2, #7
 4406 0168 052A     		cmp	r2, #5
 4407 016a 11D8     		bhi	.L340
 4408 016c DFE812F0 		tbh	[pc, r2, lsl #1]
ARM GAS  /tmp/ccsDPfHf.s 			page 161


 4409              	.L342:
 4410 0170 0600     		.2byte	(.L341-.L342)/2
 4411 0172 8F01     		.2byte	(.L441-.L342)/2
 4412 0174 0800     		.2byte	(.L343-.L342)/2
 4413 0176 0A00     		.2byte	(.L344-.L342)/2
 4414 0178 0C00     		.2byte	(.L345-.L342)/2
 4415 017a 0E00     		.2byte	(.L346-.L342)/2
 4416              		.p2align 1
 4417              	.L341:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4418              		.loc 1 2924 0
 4419 017c 0022     		movs	r2, #0
 4420 017e 36E1     		b	.L326
 4421              	.L343:
 4422              	.LVL357:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4423              		.loc 1 2924 0 discriminator 38
 4424 0180 0822     		movs	r2, #8
 4425 0182 34E1     		b	.L326
 4426              	.LVL358:
 4427              	.L344:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4428              		.loc 1 2924 0 discriminator 39
 4429 0184 1022     		movs	r2, #16
 4430 0186 32E1     		b	.L326
 4431              	.LVL359:
 4432              	.L345:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4433              		.loc 1 2924 0 discriminator 40
 4434 0188 2022     		movs	r2, #32
 4435 018a 30E1     		b	.L326
 4436              	.LVL360:
 4437              	.L346:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4438              		.loc 1 2924 0 discriminator 41
 4439 018c 4022     		movs	r2, #64
 4440 018e 2EE1     		b	.L326
 4441              	.LVL361:
 4442              	.L340:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4443              		.loc 1 2924 0 discriminator 35
 4444 0190 8022     		movs	r2, #128
 4445 0192 2CE1     		b	.L326
 4446              	.LVL362:
 4447              	.L472:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4448              		.loc 1 2924 0 discriminator 49
 4449 0194 414A     		ldr	r2, .L487+52
 4450 0196 526D     		ldr	r2, [r2, #84]
 4451 0198 02F00702 		and	r2, r2, #7
 4452 019c 052A     		cmp	r2, #5
 4453 019e 11D8     		bhi	.L348
 4454 01a0 DFE812F0 		tbh	[pc, r2, lsl #1]
 4455              	.L350:
 4456 01a4 0600     		.2byte	(.L349-.L350)/2
 4457 01a6 7701     		.2byte	(.L442-.L350)/2
 4458 01a8 0800     		.2byte	(.L351-.L350)/2
ARM GAS  /tmp/ccsDPfHf.s 			page 162


 4459 01aa 0A00     		.2byte	(.L352-.L350)/2
 4460 01ac 0C00     		.2byte	(.L353-.L350)/2
 4461 01ae 0E00     		.2byte	(.L354-.L350)/2
 4462              		.p2align 1
 4463              	.L349:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4464              		.loc 1 2924 0
 4465 01b0 0022     		movs	r2, #0
 4466 01b2 1CE1     		b	.L326
 4467              	.L351:
 4468              	.LVL363:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4469              		.loc 1 2924 0 discriminator 54
 4470 01b4 0822     		movs	r2, #8
 4471 01b6 1AE1     		b	.L326
 4472              	.LVL364:
 4473              	.L352:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4474              		.loc 1 2924 0 discriminator 55
 4475 01b8 1022     		movs	r2, #16
 4476 01ba 18E1     		b	.L326
 4477              	.LVL365:
 4478              	.L353:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4479              		.loc 1 2924 0 discriminator 56
 4480 01bc 2022     		movs	r2, #32
 4481 01be 16E1     		b	.L326
 4482              	.LVL366:
 4483              	.L354:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4484              		.loc 1 2924 0 discriminator 57
 4485 01c0 4022     		movs	r2, #64
 4486 01c2 14E1     		b	.L326
 4487              	.LVL367:
 4488              	.L348:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4489              		.loc 1 2924 0 discriminator 51
 4490 01c4 8022     		movs	r2, #128
 4491 01c6 12E1     		b	.L326
 4492              	.LVL368:
 4493              	.L473:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4494              		.loc 1 2924 0 discriminator 65
 4495 01c8 344A     		ldr	r2, .L487+52
 4496 01ca 526D     		ldr	r2, [r2, #84]
 4497 01cc 02F00702 		and	r2, r2, #7
 4498 01d0 052A     		cmp	r2, #5
 4499 01d2 11D8     		bhi	.L356
 4500 01d4 DFE812F0 		tbh	[pc, r2, lsl #1]
 4501              	.L358:
 4502 01d8 0600     		.2byte	(.L357-.L358)/2
 4503 01da 5F01     		.2byte	(.L443-.L358)/2
 4504 01dc 0800     		.2byte	(.L359-.L358)/2
 4505 01de 0A00     		.2byte	(.L360-.L358)/2
 4506 01e0 0C00     		.2byte	(.L361-.L358)/2
 4507 01e2 0E00     		.2byte	(.L362-.L358)/2
 4508              		.p2align 1
ARM GAS  /tmp/ccsDPfHf.s 			page 163


 4509              	.L357:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4510              		.loc 1 2924 0
 4511 01e4 0022     		movs	r2, #0
 4512 01e6 02E1     		b	.L326
 4513              	.L359:
 4514              	.LVL369:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4515              		.loc 1 2924 0 discriminator 70
 4516 01e8 0822     		movs	r2, #8
 4517 01ea 00E1     		b	.L326
 4518              	.LVL370:
 4519              	.L360:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4520              		.loc 1 2924 0 discriminator 71
 4521 01ec 1022     		movs	r2, #16
 4522 01ee FEE0     		b	.L326
 4523              	.LVL371:
 4524              	.L361:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4525              		.loc 1 2924 0 discriminator 72
 4526 01f0 2022     		movs	r2, #32
 4527 01f2 FCE0     		b	.L326
 4528              	.LVL372:
 4529              	.L362:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4530              		.loc 1 2924 0 discriminator 73
 4531 01f4 4022     		movs	r2, #64
 4532 01f6 FAE0     		b	.L326
 4533              	.LVL373:
 4534              	.L356:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4535              		.loc 1 2924 0 discriminator 67
 4536 01f8 8022     		movs	r2, #128
 4537 01fa F8E0     		b	.L326
 4538              	.LVL374:
 4539              	.L474:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4540              		.loc 1 2924 0 discriminator 81
 4541 01fc 274A     		ldr	r2, .L487+52
 4542 01fe 526D     		ldr	r2, [r2, #84]
 4543 0200 02F03802 		and	r2, r2, #56
 4544 0204 282A     		cmp	r2, #40
 4545 0206 51D8     		bhi	.L364
 4546 0208 DFE812F0 		tbh	[pc, r2, lsl #1]
 4547              	.L366:
 4548 020c 2900     		.2byte	(.L365-.L366)/2
 4549 020e 5000     		.2byte	(.L364-.L366)/2
 4550 0210 5000     		.2byte	(.L364-.L366)/2
 4551 0212 5000     		.2byte	(.L364-.L366)/2
 4552 0214 5000     		.2byte	(.L364-.L366)/2
 4553 0216 5000     		.2byte	(.L364-.L366)/2
 4554 0218 5000     		.2byte	(.L364-.L366)/2
 4555 021a 5000     		.2byte	(.L364-.L366)/2
 4556 021c 4701     		.2byte	(.L444-.L366)/2
 4557 021e 5000     		.2byte	(.L364-.L366)/2
 4558 0220 5000     		.2byte	(.L364-.L366)/2
ARM GAS  /tmp/ccsDPfHf.s 			page 164


 4559 0222 5000     		.2byte	(.L364-.L366)/2
 4560 0224 5000     		.2byte	(.L364-.L366)/2
 4561 0226 5000     		.2byte	(.L364-.L366)/2
 4562 0228 5000     		.2byte	(.L364-.L366)/2
 4563 022a 5000     		.2byte	(.L364-.L366)/2
 4564 022c 2B00     		.2byte	(.L367-.L366)/2
 4565 022e 5000     		.2byte	(.L364-.L366)/2
 4566 0230 5000     		.2byte	(.L364-.L366)/2
 4567 0232 5000     		.2byte	(.L364-.L366)/2
 4568 0234 5000     		.2byte	(.L364-.L366)/2
 4569 0236 5000     		.2byte	(.L364-.L366)/2
 4570 0238 5000     		.2byte	(.L364-.L366)/2
 4571 023a 5000     		.2byte	(.L364-.L366)/2
 4572 023c 4A00     		.2byte	(.L368-.L366)/2
 4573 023e 5000     		.2byte	(.L364-.L366)/2
 4574 0240 5000     		.2byte	(.L364-.L366)/2
 4575 0242 5000     		.2byte	(.L364-.L366)/2
 4576 0244 5000     		.2byte	(.L364-.L366)/2
 4577 0246 5000     		.2byte	(.L364-.L366)/2
 4578 0248 5000     		.2byte	(.L364-.L366)/2
 4579 024a 5000     		.2byte	(.L364-.L366)/2
 4580 024c 4C00     		.2byte	(.L369-.L366)/2
 4581 024e 5000     		.2byte	(.L364-.L366)/2
 4582 0250 5000     		.2byte	(.L364-.L366)/2
 4583 0252 5000     		.2byte	(.L364-.L366)/2
 4584 0254 5000     		.2byte	(.L364-.L366)/2
 4585 0256 5000     		.2byte	(.L364-.L366)/2
 4586 0258 5000     		.2byte	(.L364-.L366)/2
 4587 025a 5000     		.2byte	(.L364-.L366)/2
 4588 025c 4E00     		.2byte	(.L370-.L366)/2
 4589              		.p2align 1
 4590              	.L365:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4591              		.loc 1 2924 0
 4592 025e 0122     		movs	r2, #1
 4593 0260 C5E0     		b	.L326
 4594              	.L367:
 4595              	.LVL375:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4596              		.loc 1 2924 0 discriminator 86
 4597 0262 0822     		movs	r2, #8
 4598 0264 C3E0     		b	.L326
 4599              	.L488:
 4600 0266 00BF     		.align	2
 4601              	.L487:
 4602 0268 F369FFCF 		.word	-805344781
 4603 026c 000C0058 		.word	1476398080
 4604 0270 FFF4FF11 		.word	301987071
 4605 0274 00100140 		.word	1073811456
 4606 0278 00440040 		.word	1073759232
 4607 027c 00480040 		.word	1073760256
 4608 0280 004C0040 		.word	1073761280
 4609 0284 00500040 		.word	1073762304
 4610 0288 00140140 		.word	1073812480
 4611 028c 00780040 		.word	1073772544
 4612 0290 007C0040 		.word	1073773568
 4613 0294 00180140 		.word	1073813504
ARM GAS  /tmp/ccsDPfHf.s 			page 165


 4614 0298 001C0140 		.word	1073814528
 4615 029c 00440258 		.word	1476543488
 4616              	.LVL376:
 4617              	.L368:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4618              		.loc 1 2924 0 discriminator 87
 4619 02a0 1022     		movs	r2, #16
 4620 02a2 A4E0     		b	.L326
 4621              	.LVL377:
 4622              	.L369:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4623              		.loc 1 2924 0 discriminator 88
 4624 02a4 2022     		movs	r2, #32
 4625 02a6 A2E0     		b	.L326
 4626              	.LVL378:
 4627              	.L370:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4628              		.loc 1 2924 0 discriminator 89
 4629 02a8 4022     		movs	r2, #64
 4630 02aa A0E0     		b	.L326
 4631              	.LVL379:
 4632              	.L364:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4633              		.loc 1 2924 0 discriminator 83
 4634 02ac 8022     		movs	r2, #128
 4635 02ae 9EE0     		b	.L326
 4636              	.LVL380:
 4637              	.L475:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4638              		.loc 1 2924 0 discriminator 97
 4639 02b0 4D4A     		ldr	r2, .L489
 4640 02b2 526D     		ldr	r2, [r2, #84]
 4641 02b4 02F00702 		and	r2, r2, #7
 4642 02b8 052A     		cmp	r2, #5
 4643 02ba 11D8     		bhi	.L372
 4644 02bc DFE812F0 		tbh	[pc, r2, lsl #1]
 4645              	.L374:
 4646 02c0 0600     		.2byte	(.L373-.L374)/2
 4647 02c2 EF00     		.2byte	(.L445-.L374)/2
 4648 02c4 0800     		.2byte	(.L375-.L374)/2
 4649 02c6 0A00     		.2byte	(.L376-.L374)/2
 4650 02c8 0C00     		.2byte	(.L377-.L374)/2
 4651 02ca 0E00     		.2byte	(.L378-.L374)/2
 4652              		.p2align 1
 4653              	.L373:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4654              		.loc 1 2924 0
 4655 02cc 0022     		movs	r2, #0
 4656 02ce 8EE0     		b	.L326
 4657              	.L375:
 4658              	.LVL381:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4659              		.loc 1 2924 0 discriminator 102
 4660 02d0 0822     		movs	r2, #8
 4661 02d2 8CE0     		b	.L326
 4662              	.LVL382:
 4663              	.L376:
ARM GAS  /tmp/ccsDPfHf.s 			page 166


2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4664              		.loc 1 2924 0 discriminator 103
 4665 02d4 1022     		movs	r2, #16
 4666 02d6 8AE0     		b	.L326
 4667              	.LVL383:
 4668              	.L377:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4669              		.loc 1 2924 0 discriminator 104
 4670 02d8 2022     		movs	r2, #32
 4671 02da 88E0     		b	.L326
 4672              	.LVL384:
 4673              	.L378:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4674              		.loc 1 2924 0 discriminator 105
 4675 02dc 4022     		movs	r2, #64
 4676 02de 86E0     		b	.L326
 4677              	.LVL385:
 4678              	.L372:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4679              		.loc 1 2924 0 discriminator 99
 4680 02e0 8022     		movs	r2, #128
 4681 02e2 84E0     		b	.L326
 4682              	.LVL386:
 4683              	.L476:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4684              		.loc 1 2924 0 discriminator 113
 4685 02e4 404A     		ldr	r2, .L489
 4686 02e6 526D     		ldr	r2, [r2, #84]
 4687 02e8 02F00702 		and	r2, r2, #7
 4688 02ec 052A     		cmp	r2, #5
 4689 02ee 0ED8     		bhi	.L380
 4690 02f0 DFE802F0 		tbb	[pc, r2]
 4691              	.L382:
 4692 02f4 03       		.byte	(.L381-.L382)/2
 4693 02f5 D7       		.byte	(.L446-.L382)/2
 4694 02f6 05       		.byte	(.L383-.L382)/2
 4695 02f7 07       		.byte	(.L384-.L382)/2
 4696 02f8 09       		.byte	(.L385-.L382)/2
 4697 02f9 0B       		.byte	(.L386-.L382)/2
 4698              		.p2align 1
 4699              	.L381:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4700              		.loc 1 2924 0
 4701 02fa 0022     		movs	r2, #0
 4702 02fc 77E0     		b	.L326
 4703              	.L383:
 4704              	.LVL387:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4705              		.loc 1 2924 0 discriminator 118
 4706 02fe 0822     		movs	r2, #8
 4707 0300 75E0     		b	.L326
 4708              	.LVL388:
 4709              	.L384:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4710              		.loc 1 2924 0 discriminator 119
 4711 0302 1022     		movs	r2, #16
 4712 0304 73E0     		b	.L326
ARM GAS  /tmp/ccsDPfHf.s 			page 167


 4713              	.LVL389:
 4714              	.L385:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4715              		.loc 1 2924 0 discriminator 120
 4716 0306 2022     		movs	r2, #32
 4717 0308 71E0     		b	.L326
 4718              	.LVL390:
 4719              	.L386:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4720              		.loc 1 2924 0 discriminator 121
 4721 030a 4022     		movs	r2, #64
 4722 030c 6FE0     		b	.L326
 4723              	.LVL391:
 4724              	.L380:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4725              		.loc 1 2924 0 discriminator 115
 4726 030e 8022     		movs	r2, #128
 4727 0310 6DE0     		b	.L326
 4728              	.LVL392:
 4729              	.L477:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4730              		.loc 1 2924 0 discriminator 129
 4731 0312 354A     		ldr	r2, .L489
 4732 0314 526D     		ldr	r2, [r2, #84]
 4733 0316 02F03802 		and	r2, r2, #56
 4734 031a 282A     		cmp	r2, #40
 4735 031c 20D8     		bhi	.L388
 4736 031e DFE802F0 		tbb	[pc, r2]
 4737              	.L390:
 4738 0322 15       		.byte	(.L389-.L390)/2
 4739 0323 1F       		.byte	(.L388-.L390)/2
 4740 0324 1F       		.byte	(.L388-.L390)/2
 4741 0325 1F       		.byte	(.L388-.L390)/2
 4742 0326 1F       		.byte	(.L388-.L390)/2
 4743 0327 1F       		.byte	(.L388-.L390)/2
 4744 0328 1F       		.byte	(.L388-.L390)/2
 4745 0329 1F       		.byte	(.L388-.L390)/2
 4746 032a C2       		.byte	(.L447-.L390)/2
 4747 032b 1F       		.byte	(.L388-.L390)/2
 4748 032c 1F       		.byte	(.L388-.L390)/2
 4749 032d 1F       		.byte	(.L388-.L390)/2
 4750 032e 1F       		.byte	(.L388-.L390)/2
 4751 032f 1F       		.byte	(.L388-.L390)/2
 4752 0330 1F       		.byte	(.L388-.L390)/2
 4753 0331 1F       		.byte	(.L388-.L390)/2
 4754 0332 17       		.byte	(.L391-.L390)/2
 4755 0333 1F       		.byte	(.L388-.L390)/2
 4756 0334 1F       		.byte	(.L388-.L390)/2
 4757 0335 1F       		.byte	(.L388-.L390)/2
 4758 0336 1F       		.byte	(.L388-.L390)/2
 4759 0337 1F       		.byte	(.L388-.L390)/2
 4760 0338 1F       		.byte	(.L388-.L390)/2
 4761 0339 1F       		.byte	(.L388-.L390)/2
 4762 033a 19       		.byte	(.L392-.L390)/2
 4763 033b 1F       		.byte	(.L388-.L390)/2
 4764 033c 1F       		.byte	(.L388-.L390)/2
 4765 033d 1F       		.byte	(.L388-.L390)/2
ARM GAS  /tmp/ccsDPfHf.s 			page 168


 4766 033e 1F       		.byte	(.L388-.L390)/2
 4767 033f 1F       		.byte	(.L388-.L390)/2
 4768 0340 1F       		.byte	(.L388-.L390)/2
 4769 0341 1F       		.byte	(.L388-.L390)/2
 4770 0342 1B       		.byte	(.L393-.L390)/2
 4771 0343 1F       		.byte	(.L388-.L390)/2
 4772 0344 1F       		.byte	(.L388-.L390)/2
 4773 0345 1F       		.byte	(.L388-.L390)/2
 4774 0346 1F       		.byte	(.L388-.L390)/2
 4775 0347 1F       		.byte	(.L388-.L390)/2
 4776 0348 1F       		.byte	(.L388-.L390)/2
 4777 0349 1F       		.byte	(.L388-.L390)/2
 4778 034a 1D       		.byte	(.L394-.L390)/2
 4779 034b 00       		.p2align 1
 4780              	.L389:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4781              		.loc 1 2924 0
 4782 034c 0122     		movs	r2, #1
 4783 034e 4EE0     		b	.L326
 4784              	.L391:
 4785              	.LVL393:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4786              		.loc 1 2924 0 discriminator 134
 4787 0350 0822     		movs	r2, #8
 4788 0352 4CE0     		b	.L326
 4789              	.LVL394:
 4790              	.L392:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4791              		.loc 1 2924 0 discriminator 135
 4792 0354 1022     		movs	r2, #16
 4793 0356 4AE0     		b	.L326
 4794              	.LVL395:
 4795              	.L393:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4796              		.loc 1 2924 0 discriminator 136
 4797 0358 2022     		movs	r2, #32
 4798 035a 48E0     		b	.L326
 4799              	.LVL396:
 4800              	.L394:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4801              		.loc 1 2924 0 discriminator 137
 4802 035c 4022     		movs	r2, #64
 4803 035e 46E0     		b	.L326
 4804              	.LVL397:
 4805              	.L388:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4806              		.loc 1 2924 0 discriminator 131
 4807 0360 8022     		movs	r2, #128
 4808 0362 44E0     		b	.L326
 4809              	.LVL398:
 4810              	.L478:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4811              		.loc 1 2924 0 discriminator 145
 4812 0364 204A     		ldr	r2, .L489
 4813 0366 526D     		ldr	r2, [r2, #84]
 4814 0368 02F03802 		and	r2, r2, #56
 4815 036c 282A     		cmp	r2, #40
ARM GAS  /tmp/ccsDPfHf.s 			page 169


 4816 036e 20D8     		bhi	.L396
 4817 0370 DFE802F0 		tbb	[pc, r2]
 4818              	.L398:
 4819 0374 15       		.byte	(.L397-.L398)/2
 4820 0375 1F       		.byte	(.L396-.L398)/2
 4821 0376 1F       		.byte	(.L396-.L398)/2
 4822 0377 1F       		.byte	(.L396-.L398)/2
 4823 0378 1F       		.byte	(.L396-.L398)/2
 4824 0379 1F       		.byte	(.L396-.L398)/2
 4825 037a 1F       		.byte	(.L396-.L398)/2
 4826 037b 1F       		.byte	(.L396-.L398)/2
 4827 037c 9B       		.byte	(.L448-.L398)/2
 4828 037d 1F       		.byte	(.L396-.L398)/2
 4829 037e 1F       		.byte	(.L396-.L398)/2
 4830 037f 1F       		.byte	(.L396-.L398)/2
 4831 0380 1F       		.byte	(.L396-.L398)/2
 4832 0381 1F       		.byte	(.L396-.L398)/2
 4833 0382 1F       		.byte	(.L396-.L398)/2
 4834 0383 1F       		.byte	(.L396-.L398)/2
 4835 0384 17       		.byte	(.L399-.L398)/2
 4836 0385 1F       		.byte	(.L396-.L398)/2
 4837 0386 1F       		.byte	(.L396-.L398)/2
 4838 0387 1F       		.byte	(.L396-.L398)/2
 4839 0388 1F       		.byte	(.L396-.L398)/2
 4840 0389 1F       		.byte	(.L396-.L398)/2
 4841 038a 1F       		.byte	(.L396-.L398)/2
 4842 038b 1F       		.byte	(.L396-.L398)/2
 4843 038c 19       		.byte	(.L400-.L398)/2
 4844 038d 1F       		.byte	(.L396-.L398)/2
 4845 038e 1F       		.byte	(.L396-.L398)/2
 4846 038f 1F       		.byte	(.L396-.L398)/2
 4847 0390 1F       		.byte	(.L396-.L398)/2
 4848 0391 1F       		.byte	(.L396-.L398)/2
 4849 0392 1F       		.byte	(.L396-.L398)/2
 4850 0393 1F       		.byte	(.L396-.L398)/2
 4851 0394 1B       		.byte	(.L401-.L398)/2
 4852 0395 1F       		.byte	(.L396-.L398)/2
 4853 0396 1F       		.byte	(.L396-.L398)/2
 4854 0397 1F       		.byte	(.L396-.L398)/2
 4855 0398 1F       		.byte	(.L396-.L398)/2
 4856 0399 1F       		.byte	(.L396-.L398)/2
 4857 039a 1F       		.byte	(.L396-.L398)/2
 4858 039b 1F       		.byte	(.L396-.L398)/2
 4859 039c 1D       		.byte	(.L402-.L398)/2
 4860 039d 00       		.p2align 1
 4861              	.L397:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4862              		.loc 1 2924 0
 4863 039e 0122     		movs	r2, #1
 4864 03a0 25E0     		b	.L326
 4865              	.L399:
 4866              	.LVL399:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4867              		.loc 1 2924 0 discriminator 150
 4868 03a2 0822     		movs	r2, #8
 4869 03a4 23E0     		b	.L326
 4870              	.LVL400:
ARM GAS  /tmp/ccsDPfHf.s 			page 170


 4871              	.L400:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4872              		.loc 1 2924 0 discriminator 151
 4873 03a6 1022     		movs	r2, #16
 4874 03a8 21E0     		b	.L326
 4875              	.LVL401:
 4876              	.L401:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4877              		.loc 1 2924 0 discriminator 152
 4878 03aa 2022     		movs	r2, #32
 4879 03ac 1FE0     		b	.L326
 4880              	.LVL402:
 4881              	.L402:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4882              		.loc 1 2924 0 discriminator 153
 4883 03ae 4022     		movs	r2, #64
 4884 03b0 1DE0     		b	.L326
 4885              	.LVL403:
 4886              	.L396:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4887              		.loc 1 2924 0 discriminator 147
 4888 03b2 8022     		movs	r2, #128
 4889 03b4 1BE0     		b	.L326
 4890              	.LVL404:
 4891              	.L479:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4892              		.loc 1 2924 0 discriminator 161
 4893 03b6 02F50E32 		add	r2, r2, #145408
 4894 03ba 926D     		ldr	r2, [r2, #88]
 4895 03bc 02F00702 		and	r2, r2, #7
 4896 03c0 052A     		cmp	r2, #5
 4897 03c2 0ED8     		bhi	.L403
 4898 03c4 DFE802F0 		tbb	[pc, r2]
 4899              	.L405:
 4900 03c8 03       		.byte	(.L404-.L405)/2
 4901 03c9 73       		.byte	(.L450-.L405)/2
 4902 03ca 05       		.byte	(.L406-.L405)/2
 4903 03cb 07       		.byte	(.L407-.L405)/2
 4904 03cc 09       		.byte	(.L408-.L405)/2
 4905 03cd 0B       		.byte	(.L409-.L405)/2
 4906              		.p2align 1
 4907              	.L404:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4908              		.loc 1 2924 0
 4909 03ce 0222     		movs	r2, #2
 4910 03d0 0DE0     		b	.L326
 4911              	.L406:
 4912              	.LVL405:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4913              		.loc 1 2924 0 discriminator 166
 4914 03d2 0822     		movs	r2, #8
 4915 03d4 0BE0     		b	.L326
 4916              	.LVL406:
 4917              	.L407:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4918              		.loc 1 2924 0 discriminator 167
 4919 03d6 1022     		movs	r2, #16
ARM GAS  /tmp/ccsDPfHf.s 			page 171


 4920 03d8 09E0     		b	.L326
 4921              	.LVL407:
 4922              	.L408:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4923              		.loc 1 2924 0 discriminator 168
 4924 03da 2022     		movs	r2, #32
 4925 03dc 07E0     		b	.L326
 4926              	.LVL408:
 4927              	.L409:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4928              		.loc 1 2924 0 discriminator 169
 4929 03de 4022     		movs	r2, #64
 4930 03e0 05E0     		b	.L326
 4931              	.LVL409:
 4932              	.L403:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4933              		.loc 1 2924 0 discriminator 163
 4934 03e2 8022     		movs	r2, #128
 4935 03e4 03E0     		b	.L326
 4936              	.L490:
 4937 03e6 00BF     		.align	2
 4938              	.L489:
 4939 03e8 00440258 		.word	1476543488
 4940              	.LVL410:
 4941              	.L439:
2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 4942              		.loc 1 2924 0
 4943 03ec 0422     		movs	r2, #4
 4944              	.L326:
 4945              	.LVL411:
2927:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 4946              		.loc 1 2927 0 is_stmt 1
 4947 03ee 8A49     		ldr	r1, .L491
 4948 03f0 8B42     		cmp	r3, r1
 4949 03f2 5ED0     		beq	.L480
2994:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 4950              		.loc 1 2994 0
 4951 03f4 E369     		ldr	r3, [r4, #28]
 4952 03f6 B3F5004F 		cmp	r3, #32768
 4953 03fa 00F0BA80 		beq	.L481
3052:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 4954              		.loc 1 3052 0
 4955 03fe 402A     		cmp	r2, #64
 4956 0400 00F27C81 		bhi	.L463
 4957 0404 DFE812F0 		tbh	[pc, r2, lsl #1]
 4958              	.L431:
 4959 0408 2B01     		.2byte	(.L430-.L431)/2
 4960 040a 4F01     		.2byte	(.L432-.L431)/2
 4961 040c 7A01     		.2byte	(.L463-.L431)/2
 4962 040e 7A01     		.2byte	(.L463-.L431)/2
 4963 0410 5201     		.2byte	(.L433-.L431)/2
 4964 0412 7A01     		.2byte	(.L463-.L431)/2
 4965 0414 7A01     		.2byte	(.L463-.L431)/2
 4966 0416 7A01     		.2byte	(.L463-.L431)/2
 4967 0418 5701     		.2byte	(.L434-.L431)/2
 4968 041a 7A01     		.2byte	(.L463-.L431)/2
 4969 041c 7A01     		.2byte	(.L463-.L431)/2
ARM GAS  /tmp/ccsDPfHf.s 			page 172


 4970 041e 7A01     		.2byte	(.L463-.L431)/2
 4971 0420 7A01     		.2byte	(.L463-.L431)/2
 4972 0422 7A01     		.2byte	(.L463-.L431)/2
 4973 0424 7A01     		.2byte	(.L463-.L431)/2
 4974 0426 7A01     		.2byte	(.L463-.L431)/2
 4975 0428 5C01     		.2byte	(.L435-.L431)/2
 4976 042a 7A01     		.2byte	(.L463-.L431)/2
 4977 042c 7A01     		.2byte	(.L463-.L431)/2
 4978 042e 7A01     		.2byte	(.L463-.L431)/2
 4979 0430 7A01     		.2byte	(.L463-.L431)/2
 4980 0432 7A01     		.2byte	(.L463-.L431)/2
 4981 0434 7A01     		.2byte	(.L463-.L431)/2
 4982 0436 7A01     		.2byte	(.L463-.L431)/2
 4983 0438 7A01     		.2byte	(.L463-.L431)/2
 4984 043a 7A01     		.2byte	(.L463-.L431)/2
 4985 043c 7A01     		.2byte	(.L463-.L431)/2
 4986 043e 7A01     		.2byte	(.L463-.L431)/2
 4987 0440 7A01     		.2byte	(.L463-.L431)/2
 4988 0442 7A01     		.2byte	(.L463-.L431)/2
 4989 0444 7A01     		.2byte	(.L463-.L431)/2
 4990 0446 7A01     		.2byte	(.L463-.L431)/2
 4991 0448 2901     		.2byte	(.L436-.L431)/2
 4992 044a 7A01     		.2byte	(.L463-.L431)/2
 4993 044c 7A01     		.2byte	(.L463-.L431)/2
 4994 044e 7A01     		.2byte	(.L463-.L431)/2
 4995 0450 7A01     		.2byte	(.L463-.L431)/2
 4996 0452 7A01     		.2byte	(.L463-.L431)/2
 4997 0454 7A01     		.2byte	(.L463-.L431)/2
 4998 0456 7A01     		.2byte	(.L463-.L431)/2
 4999 0458 7A01     		.2byte	(.L463-.L431)/2
 5000 045a 7A01     		.2byte	(.L463-.L431)/2
 5001 045c 7A01     		.2byte	(.L463-.L431)/2
 5002 045e 7A01     		.2byte	(.L463-.L431)/2
 5003 0460 7A01     		.2byte	(.L463-.L431)/2
 5004 0462 7A01     		.2byte	(.L463-.L431)/2
 5005 0464 7A01     		.2byte	(.L463-.L431)/2
 5006 0466 7A01     		.2byte	(.L463-.L431)/2
 5007 0468 7A01     		.2byte	(.L463-.L431)/2
 5008 046a 7A01     		.2byte	(.L463-.L431)/2
 5009 046c 7A01     		.2byte	(.L463-.L431)/2
 5010 046e 7A01     		.2byte	(.L463-.L431)/2
 5011 0470 7A01     		.2byte	(.L463-.L431)/2
 5012 0472 7A01     		.2byte	(.L463-.L431)/2
 5013 0474 7A01     		.2byte	(.L463-.L431)/2
 5014 0476 7A01     		.2byte	(.L463-.L431)/2
 5015 0478 7A01     		.2byte	(.L463-.L431)/2
 5016 047a 7A01     		.2byte	(.L463-.L431)/2
 5017 047c 7A01     		.2byte	(.L463-.L431)/2
 5018 047e 7A01     		.2byte	(.L463-.L431)/2
 5019 0480 7A01     		.2byte	(.L463-.L431)/2
 5020 0482 7A01     		.2byte	(.L463-.L431)/2
 5021 0484 7A01     		.2byte	(.L463-.L431)/2
 5022 0486 7A01     		.2byte	(.L463-.L431)/2
 5023 0488 6801     		.2byte	(.L464-.L431)/2
 5024              	.LVL412:
 5025              		.p2align 1
 5026              	.L440:
ARM GAS  /tmp/ccsDPfHf.s 			page 173


2924:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5027              		.loc 1 2924 0
 5028 048a 0422     		movs	r2, #4
 5029 048c AFE7     		b	.L326
 5030              	.L441:
 5031 048e 0422     		movs	r2, #4
 5032 0490 ADE7     		b	.L326
 5033              	.L442:
 5034 0492 0422     		movs	r2, #4
 5035 0494 ABE7     		b	.L326
 5036              	.L443:
 5037 0496 0422     		movs	r2, #4
 5038 0498 A9E7     		b	.L326
 5039              	.L444:
 5040 049a 0422     		movs	r2, #4
 5041 049c A7E7     		b	.L326
 5042              	.L445:
 5043 049e 0422     		movs	r2, #4
 5044 04a0 A5E7     		b	.L326
 5045              	.L446:
 5046 04a2 0422     		movs	r2, #4
 5047 04a4 A3E7     		b	.L326
 5048              	.L447:
 5049 04a6 0422     		movs	r2, #4
 5050 04a8 A1E7     		b	.L326
 5051              	.L448:
 5052 04aa 0422     		movs	r2, #4
 5053 04ac 9FE7     		b	.L326
 5054              	.L450:
 5055 04ae 0422     		movs	r2, #4
 5056 04b0 9DE7     		b	.L326
 5057              	.LVL413:
 5058              	.L480:
2930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5059              		.loc 1 2930 0
 5060 04b2 082A     		cmp	r2, #8
 5061 04b4 48D0     		beq	.L412
 5062 04b6 07D9     		bls	.L482
 5063 04b8 202A     		cmp	r2, #32
 5064 04ba 0ED0     		beq	.L416
 5065 04bc 402A     		cmp	r2, #64
 5066 04be 54D0     		beq	.L452
 5067 04c0 102A     		cmp	r2, #16
 5068 04c2 46D0     		beq	.L483
 5069              	.L451:
2961:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5070              		.loc 1 2961 0
 5071 04c4 0120     		movs	r0, #1
 5072 04c6 E3E0     		b	.L411
 5073              	.L482:
2930:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5074              		.loc 1 2930 0
 5075 04c8 022A     		cmp	r2, #2
 5076 04ca 08D0     		beq	.L414
 5077 04cc 042A     		cmp	r2, #4
 5078 04ce F9D1     		bne	.L451
2936:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll2_clocks.PLL2_Q_Frequency;
ARM GAS  /tmp/ccsDPfHf.s 			page 174


 5079              		.loc 1 2936 0
 5080 04d0 03A8     		add	r0, sp, #12
 5081 04d2 FFF7FEFF 		bl	HAL_RCCEx_GetPLL2ClockFreq
 5082              	.LVL414:
2937:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5083              		.loc 1 2937 0
 5084 04d6 0498     		ldr	r0, [sp, #16]
 5085              	.LVL415:
2938:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL3:
 5086              		.loc 1 2938 0
 5087 04d8 03E0     		b	.L419
 5088              	.LVL416:
 5089              	.L416:
2954:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5090              		.loc 1 2954 0
 5091 04da 5048     		ldr	r0, .L491+4
 5092 04dc 04E0     		b	.L417
 5093              	.L414:
2933:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5094              		.loc 1 2933 0
 5095 04de FFF7FEFF 		bl	HAL_RCCEx_GetD3PCLK1Freq
 5096              	.LVL417:
 5097              	.L419:
2966:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5098              		.loc 1 2966 0
 5099 04e2 0028     		cmp	r0, #0
 5100 04e4 00F0FC80 		beq	.L484
 5101              	.LVL418:
 5102              	.L417:
2969:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5103              		.loc 1 2969 0
 5104 04e8 626A     		ldr	r2, [r4, #36]
 5105 04ea 4D4B     		ldr	r3, .L491+8
 5106 04ec 33F81220 		ldrh	r2, [r3, r2, lsl #1]
 5107 04f0 B0FBF2F3 		udiv	r3, r0, r2
 5108              	.LVL419:
2972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 5109              		.loc 1 2972 0
 5110 04f4 6568     		ldr	r5, [r4, #4]
 5111 04f6 05EB4501 		add	r1, r5, r5, lsl #1
 5112 04fa 9942     		cmp	r1, r3
 5113 04fc 00F2F280 		bhi	.L455
2972:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 5114              		.loc 1 2972 0 is_stmt 0 discriminator 1
 5115 0500 B3EB053F 		cmp	r3, r5, lsl #12
 5116 0504 00F2F080 		bhi	.L456
2981:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 5117              		.loc 1 2981 0 is_stmt 1
 5118 0508 4FF00008 		mov	r8, #0
 5119 050c 92B2     		uxth	r2, r2
 5120 050e 0023     		movs	r3, #0
 5121              	.LVL420:
 5122 0510 4146     		mov	r1, r8
 5123 0512 FFF7FEFF 		bl	__aeabi_uldivmod
 5124              	.LVL421:
 5125 0516 0F02     		lsls	r7, r1, #8
 5126 0518 47EA1067 		orr	r7, r7, r0, lsr #24
ARM GAS  /tmp/ccsDPfHf.s 			page 175


 5127 051c 0602     		lsls	r6, r0, #8
 5128 051e 6808     		lsrs	r0, r5, #1
 5129 0520 2A46     		mov	r2, r5
 5130 0522 4346     		mov	r3, r8
 5131 0524 16EB0008 		adds	r8, r6, r0
 5132 0528 47F10009 		adc	r9, r7, #0
 5133 052c 4046     		mov	r0, r8
 5134 052e 4946     		mov	r1, r9
 5135 0530 FFF7FEFF 		bl	__aeabi_uldivmod
 5136              	.LVL422:
2982:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 5137              		.loc 1 2982 0
 5138 0534 A0F54072 		sub	r2, r0, #768
 5139 0538 3A4B     		ldr	r3, .L491+12
 5140 053a 9A42     		cmp	r2, r3
 5141 053c 00F2D680 		bhi	.L457
2984:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5142              		.loc 1 2984 0
 5143 0540 2368     		ldr	r3, [r4]
 5144 0542 D860     		str	r0, [r3, #12]
 5145 0544 0020     		movs	r0, #0
 5146              	.LVL423:
 5147 0546 A3E0     		b	.L411
 5148              	.LVL424:
 5149              	.L412:
2940:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll3_clocks.PLL3_Q_Frequency;
 5150              		.loc 1 2940 0
 5151 0548 6846     		mov	r0, sp
 5152 054a FFF7FEFF 		bl	HAL_RCCEx_GetPLL3ClockFreq
 5153              	.LVL425:
2941:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5154              		.loc 1 2941 0
 5155 054e 0198     		ldr	r0, [sp, #4]
 5156              	.LVL426:
2942:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 5157              		.loc 1 2942 0
 5158 0550 C7E7     		b	.L419
 5159              	.LVL427:
 5160              	.L483:
2944:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 5161              		.loc 1 2944 0
 5162 0552 354B     		ldr	r3, .L491+16
 5163 0554 1B68     		ldr	r3, [r3]
 5164 0556 13F0200F 		tst	r3, #32
 5165 055a 08D0     		beq	.L453
2946:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5166              		.loc 1 2946 0
 5167 055c 324B     		ldr	r3, .L491+16
 5168 055e 1B68     		ldr	r3, [r3]
 5169 0560 C3F3C103 		ubfx	r3, r3, #3, #2
 5170 0564 3148     		ldr	r0, .L491+20
 5171 0566 D840     		lsrs	r0, r0, r3
 5172              	.LVL428:
 5173 0568 BBE7     		b	.L419
 5174              	.LVL429:
 5175              	.L452:
2957:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
ARM GAS  /tmp/ccsDPfHf.s 			page 176


 5176              		.loc 1 2957 0
 5177 056a 2020     		movs	r0, #32
 5178 056c BCE7     		b	.L417
 5179              	.L453:
2950:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5180              		.loc 1 2950 0
 5181 056e 2F48     		ldr	r0, .L491+20
 5182 0570 BAE7     		b	.L417
 5183              	.L481:
2996:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5184              		.loc 1 2996 0
 5185 0572 402A     		cmp	r2, #64
 5186 0574 00F2BC80 		bhi	.L458
 5187 0578 DFE802F0 		tbb	[pc, r2]
 5188              	.L422:
 5189 057c 23       		.byte	(.L421-.L422)/2
 5190 057d 45       		.byte	(.L423-.L422)/2
 5191 057e BA       		.byte	(.L458-.L422)/2
 5192 057f BA       		.byte	(.L458-.L422)/2
 5193 0580 48       		.byte	(.L424-.L422)/2
 5194 0581 BA       		.byte	(.L458-.L422)/2
 5195 0582 BA       		.byte	(.L458-.L422)/2
 5196 0583 BA       		.byte	(.L458-.L422)/2
 5197 0584 5A       		.byte	(.L425-.L422)/2
 5198 0585 BA       		.byte	(.L458-.L422)/2
 5199 0586 BA       		.byte	(.L458-.L422)/2
 5200 0587 BA       		.byte	(.L458-.L422)/2
 5201 0588 BA       		.byte	(.L458-.L422)/2
 5202 0589 BA       		.byte	(.L458-.L422)/2
 5203 058a BA       		.byte	(.L458-.L422)/2
 5204 058b BA       		.byte	(.L458-.L422)/2
 5205 058c 5F       		.byte	(.L426-.L422)/2
 5206 058d BA       		.byte	(.L458-.L422)/2
 5207 058e BA       		.byte	(.L458-.L422)/2
 5208 058f BA       		.byte	(.L458-.L422)/2
 5209 0590 BA       		.byte	(.L458-.L422)/2
 5210 0591 BA       		.byte	(.L458-.L422)/2
 5211 0592 BA       		.byte	(.L458-.L422)/2
 5212 0593 BA       		.byte	(.L458-.L422)/2
 5213 0594 BA       		.byte	(.L458-.L422)/2
 5214 0595 BA       		.byte	(.L458-.L422)/2
 5215 0596 BA       		.byte	(.L458-.L422)/2
 5216 0597 BA       		.byte	(.L458-.L422)/2
 5217 0598 BA       		.byte	(.L458-.L422)/2
 5218 0599 BA       		.byte	(.L458-.L422)/2
 5219 059a BA       		.byte	(.L458-.L422)/2
 5220 059b BA       		.byte	(.L458-.L422)/2
 5221 059c 21       		.byte	(.L427-.L422)/2
 5222 059d BA       		.byte	(.L458-.L422)/2
 5223 059e BA       		.byte	(.L458-.L422)/2
 5224 059f BA       		.byte	(.L458-.L422)/2
 5225 05a0 BA       		.byte	(.L458-.L422)/2
 5226 05a1 BA       		.byte	(.L458-.L422)/2
 5227 05a2 BA       		.byte	(.L458-.L422)/2
 5228 05a3 BA       		.byte	(.L458-.L422)/2
 5229 05a4 BA       		.byte	(.L458-.L422)/2
 5230 05a5 BA       		.byte	(.L458-.L422)/2
ARM GAS  /tmp/ccsDPfHf.s 			page 177


 5231 05a6 BA       		.byte	(.L458-.L422)/2
 5232 05a7 BA       		.byte	(.L458-.L422)/2
 5233 05a8 BA       		.byte	(.L458-.L422)/2
 5234 05a9 BA       		.byte	(.L458-.L422)/2
 5235 05aa BA       		.byte	(.L458-.L422)/2
 5236 05ab BA       		.byte	(.L458-.L422)/2
 5237 05ac BA       		.byte	(.L458-.L422)/2
 5238 05ad BA       		.byte	(.L458-.L422)/2
 5239 05ae BA       		.byte	(.L458-.L422)/2
 5240 05af BA       		.byte	(.L458-.L422)/2
 5241 05b0 BA       		.byte	(.L458-.L422)/2
 5242 05b1 BA       		.byte	(.L458-.L422)/2
 5243 05b2 BA       		.byte	(.L458-.L422)/2
 5244 05b3 BA       		.byte	(.L458-.L422)/2
 5245 05b4 BA       		.byte	(.L458-.L422)/2
 5246 05b5 BA       		.byte	(.L458-.L422)/2
 5247 05b6 BA       		.byte	(.L458-.L422)/2
 5248 05b7 BA       		.byte	(.L458-.L422)/2
 5249 05b8 BA       		.byte	(.L458-.L422)/2
 5250 05b9 BA       		.byte	(.L458-.L422)/2
 5251 05ba BA       		.byte	(.L458-.L422)/2
 5252 05bb BA       		.byte	(.L458-.L422)/2
 5253 05bc 6B       		.byte	(.L459-.L422)/2
 5254 05bd 00       		.p2align 1
 5255              	.L427:
3023:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5256              		.loc 1 3023 0
 5257 05be 1748     		ldr	r0, .L491+4
 5258 05c0 04E0     		b	.L428
 5259              	.L421:
2999:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5260              		.loc 1 2999 0
 5261 05c2 FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5262              	.LVL430:
 5263              	.L429:
3035:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5264              		.loc 1 3035 0
 5265 05c6 0028     		cmp	r0, #0
 5266 05c8 00F09480 		beq	.L485
 5267              	.LVL431:
 5268              	.L428:
3037:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 5269              		.loc 1 3037 0
 5270 05cc 626A     		ldr	r2, [r4, #36]
 5271 05ce 144B     		ldr	r3, .L491+8
 5272 05d0 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 5273 05d4 B0FBF3F0 		udiv	r0, r0, r3
 5274 05d8 6268     		ldr	r2, [r4, #4]
 5275 05da 5308     		lsrs	r3, r2, #1
 5276 05dc 03EB4003 		add	r3, r3, r0, lsl #1
 5277 05e0 B3FBF2F3 		udiv	r3, r3, r2
 5278 05e4 9BB2     		uxth	r3, r3
 5279              	.LVL432:
3038:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5280              		.loc 1 3038 0
 5281 05e6 A3F11001 		sub	r1, r3, #16
 5282 05ea 4FF6EF72 		movw	r2, #65519
ARM GAS  /tmp/ccsDPfHf.s 			page 178


 5283 05ee 9142     		cmp	r1, r2
 5284 05f0 00F28280 		bhi	.L462
3040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 5285              		.loc 1 3040 0
 5286 05f4 23F00F02 		bic	r2, r3, #15
 5287              	.LVL433:
3041:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->Instance->BRR = brrtemp;
 5288              		.loc 1 3041 0
 5289 05f8 C3F34203 		ubfx	r3, r3, #1, #3
 5290              	.LVL434:
 5291 05fc 1343     		orrs	r3, r3, r2
 5292              	.LVL435:
3042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5293              		.loc 1 3042 0
 5294 05fe 2268     		ldr	r2, [r4]
 5295 0600 D360     		str	r3, [r2, #12]
 5296 0602 0020     		movs	r0, #0
 5297 0604 44E0     		b	.L411
 5298              	.LVL436:
 5299              	.L423:
3002:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5300              		.loc 1 3002 0
 5301 0606 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5302              	.LVL437:
3003:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL2:
 5303              		.loc 1 3003 0
 5304 060a DCE7     		b	.L429
 5305              	.LVL438:
 5306              	.L424:
3005:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll2_clocks.PLL2_Q_Frequency;
 5307              		.loc 1 3005 0
 5308 060c 03A8     		add	r0, sp, #12
 5309 060e FFF7FEFF 		bl	HAL_RCCEx_GetPLL2ClockFreq
 5310              	.LVL439:
3006:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5311              		.loc 1 3006 0
 5312 0612 0498     		ldr	r0, [sp, #16]
 5313              	.LVL440:
3007:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL3:
 5314              		.loc 1 3007 0
 5315 0614 D7E7     		b	.L429
 5316              	.L492:
 5317 0616 00BF     		.align	2
 5318              	.L491:
 5319 0618 000C0058 		.word	1476398080
 5320 061c 00093D00 		.word	4000000
 5321 0620 00000000 		.word	.LANCHOR0
 5322 0624 FFFC0F00 		.word	1047807
 5323 0628 00440258 		.word	1476543488
 5324 062c 0090D003 		.word	64000000
 5325              	.LVL441:
 5326              	.L425:
3009:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll3_clocks.PLL3_Q_Frequency;
 5327              		.loc 1 3009 0
 5328 0630 6846     		mov	r0, sp
 5329 0632 FFF7FEFF 		bl	HAL_RCCEx_GetPLL3ClockFreq
 5330              	.LVL442:
ARM GAS  /tmp/ccsDPfHf.s 			page 179


3010:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5331              		.loc 1 3010 0
 5332 0636 0198     		ldr	r0, [sp, #4]
 5333              	.LVL443:
3011:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 5334              		.loc 1 3011 0
 5335 0638 C5E7     		b	.L429
 5336              	.LVL444:
 5337              	.L426:
3013:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 5338              		.loc 1 3013 0
 5339 063a 334B     		ldr	r3, .L493
 5340 063c 1B68     		ldr	r3, [r3]
 5341 063e 13F0200F 		tst	r3, #32
 5342 0642 08D0     		beq	.L460
3015:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5343              		.loc 1 3015 0
 5344 0644 304B     		ldr	r3, .L493
 5345 0646 1B68     		ldr	r3, [r3]
 5346 0648 C3F3C103 		ubfx	r3, r3, #3, #2
 5347 064c 2F48     		ldr	r0, .L493+4
 5348 064e D840     		lsrs	r0, r0, r3
 5349              	.LVL445:
 5350 0650 B9E7     		b	.L429
 5351              	.LVL446:
 5352              	.L459:
3026:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5353              		.loc 1 3026 0
 5354 0652 2020     		movs	r0, #32
 5355 0654 BAE7     		b	.L428
 5356              	.L460:
3019:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5357              		.loc 1 3019 0
 5358 0656 2D48     		ldr	r0, .L493+4
 5359 0658 B8E7     		b	.L428
 5360              	.L436:
3079:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5361              		.loc 1 3079 0
 5362 065a 2D48     		ldr	r0, .L493+8
 5363 065c 03E0     		b	.L437
 5364              	.L430:
3055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5365              		.loc 1 3055 0
 5366 065e FFF7FEFF 		bl	HAL_RCC_GetPCLK1Freq
 5367              	.LVL447:
 5368              	.L438:
3090:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5369              		.loc 1 3090 0
 5370 0662 0028     		cmp	r0, #0
 5371 0664 4CD0     		beq	.L486
 5372              	.LVL448:
 5373              	.L437:
3093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 5374              		.loc 1 3093 0
 5375 0666 626A     		ldr	r2, [r4, #36]
 5376 0668 2A4B     		ldr	r3, .L493+12
 5377 066a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
ARM GAS  /tmp/ccsDPfHf.s 			page 180


 5378 066e B0FBF3F0 		udiv	r0, r0, r3
 5379 0672 6368     		ldr	r3, [r4, #4]
 5380 0674 00EB5300 		add	r0, r0, r3, lsr #1
 5381 0678 B0FBF3F0 		udiv	r0, r0, r3
 5382 067c 80B2     		uxth	r0, r0
 5383              	.LVL449:
3094:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5384              		.loc 1 3094 0
 5385 067e A0F11002 		sub	r2, r0, #16
 5386 0682 4FF6EF73 		movw	r3, #65519
 5387 0686 9A42     		cmp	r2, r3
 5388 0688 3CD8     		bhi	.L467
3096:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5389              		.loc 1 3096 0
 5390 068a 2368     		ldr	r3, [r4]
 5391 068c D860     		str	r0, [r3, #12]
 5392 068e 0020     		movs	r0, #0
 5393              	.LVL450:
 5394              	.L411:
3106:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->NbRxDataToProcess = 1;
 5395              		.loc 1 3106 0
 5396 0690 0123     		movs	r3, #1
 5397 0692 A4F86A30 		strh	r3, [r4, #106]	@ movhi
3107:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5398              		.loc 1 3107 0
 5399 0696 A4F86830 		strh	r3, [r4, #104]	@ movhi
3110:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->TxISR = NULL;
 5400              		.loc 1 3110 0
 5401 069a 0023     		movs	r3, #0
 5402 069c E366     		str	r3, [r4, #108]
3111:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5403              		.loc 1 3111 0
 5404 069e 2367     		str	r3, [r4, #112]
3114:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5405              		.loc 1 3114 0
 5406 06a0 07B0     		add	sp, sp, #28
 5407              	.LCFI32:
 5408              		.cfi_remember_state
 5409              		.cfi_def_cfa_offset 28
 5410              		@ sp needed
 5411 06a2 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 5412              	.LVL451:
 5413              	.L432:
 5414              	.LCFI33:
 5415              		.cfi_restore_state
3058:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5416              		.loc 1 3058 0
 5417 06a6 FFF7FEFF 		bl	HAL_RCC_GetPCLK2Freq
 5418              	.LVL452:
3059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL2:
 5419              		.loc 1 3059 0
 5420 06aa DAE7     		b	.L438
 5421              	.LVL453:
 5422              	.L433:
3061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll2_clocks.PLL2_Q_Frequency;
 5423              		.loc 1 3061 0
 5424 06ac 03A8     		add	r0, sp, #12
ARM GAS  /tmp/ccsDPfHf.s 			page 181


 5425 06ae FFF7FEFF 		bl	HAL_RCCEx_GetPLL2ClockFreq
 5426              	.LVL454:
3062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5427              		.loc 1 3062 0
 5428 06b2 0498     		ldr	r0, [sp, #16]
 5429              	.LVL455:
3063:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_PLL3:
 5430              		.loc 1 3063 0
 5431 06b4 D5E7     		b	.L438
 5432              	.LVL456:
 5433              	.L434:
3065:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pclk = pll3_clocks.PLL3_Q_Frequency;
 5434              		.loc 1 3065 0
 5435 06b6 6846     		mov	r0, sp
 5436 06b8 FFF7FEFF 		bl	HAL_RCCEx_GetPLL3ClockFreq
 5437              	.LVL457:
3066:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5438              		.loc 1 3066 0
 5439 06bc 0198     		ldr	r0, [sp, #4]
 5440              	.LVL458:
3067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       case UART_CLOCKSOURCE_HSI:
 5441              		.loc 1 3067 0
 5442 06be D0E7     		b	.L438
 5443              	.LVL459:
 5444              	.L435:
3069:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 5445              		.loc 1 3069 0
 5446 06c0 114B     		ldr	r3, .L493
 5447 06c2 1B68     		ldr	r3, [r3]
 5448 06c4 13F0200F 		tst	r3, #32
 5449 06c8 08D0     		beq	.L465
3071:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5450              		.loc 1 3071 0
 5451 06ca 0F4B     		ldr	r3, .L493
 5452 06cc 1B68     		ldr	r3, [r3]
 5453 06ce C3F3C103 		ubfx	r3, r3, #3, #2
 5454 06d2 0E48     		ldr	r0, .L493+4
 5455 06d4 D840     		lsrs	r0, r0, r3
 5456              	.LVL460:
 5457 06d6 C4E7     		b	.L438
 5458              	.LVL461:
 5459              	.L464:
3082:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5460              		.loc 1 3082 0
 5461 06d8 2020     		movs	r0, #32
 5462 06da C4E7     		b	.L437
 5463              	.L465:
3075:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5464              		.loc 1 3075 0
 5465 06dc 0B48     		ldr	r0, .L493+4
 5466 06de C2E7     		b	.L437
 5467              	.LVL462:
 5468              	.L484:
 5469 06e0 0020     		movs	r0, #0
 5470              	.LVL463:
 5471 06e2 D5E7     		b	.L411
 5472              	.LVL464:
ARM GAS  /tmp/ccsDPfHf.s 			page 182


 5473              	.L455:
2975:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5474              		.loc 1 2975 0
 5475 06e4 0120     		movs	r0, #1
 5476 06e6 D3E7     		b	.L411
 5477              	.L456:
 5478 06e8 0120     		movs	r0, #1
 5479 06ea D1E7     		b	.L411
 5480              	.LVL465:
 5481              	.L457:
2988:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5482              		.loc 1 2988 0
 5483 06ec 0120     		movs	r0, #1
 5484              	.LVL466:
 5485 06ee CFE7     		b	.L411
 5486              	.LVL467:
 5487              	.L458:
3030:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5488              		.loc 1 3030 0
 5489 06f0 0120     		movs	r0, #1
 5490 06f2 CDE7     		b	.L411
 5491              	.LVL468:
 5492              	.L485:
 5493 06f4 0020     		movs	r0, #0
 5494              	.LVL469:
 5495 06f6 CBE7     		b	.L411
 5496              	.LVL470:
 5497              	.L462:
3046:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5498              		.loc 1 3046 0
 5499 06f8 0120     		movs	r0, #1
 5500 06fa C9E7     		b	.L411
 5501              	.LVL471:
 5502              	.L463:
3086:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         break;
 5503              		.loc 1 3086 0
 5504 06fc 0120     		movs	r0, #1
 5505 06fe C7E7     		b	.L411
 5506              	.LVL472:
 5507              	.L486:
 5508 0700 0020     		movs	r0, #0
 5509              	.LVL473:
 5510 0702 C5E7     		b	.L411
 5511              	.LVL474:
 5512              	.L467:
3100:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5513              		.loc 1 3100 0
 5514 0704 0120     		movs	r0, #1
 5515              	.LVL475:
 5516 0706 C3E7     		b	.L411
 5517              	.L494:
 5518              		.align	2
 5519              	.L493:
 5520 0708 00440258 		.word	1476543488
 5521 070c 0090D003 		.word	64000000
 5522 0710 00093D00 		.word	4000000
 5523 0714 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccsDPfHf.s 			page 183


 5524              		.cfi_endproc
 5525              	.LFE385:
 5527              		.section	.text.UART_AdvFeatureConfig,"ax",%progbits
 5528              		.align	1
 5529              		.global	UART_AdvFeatureConfig
 5530              		.syntax unified
 5531              		.thumb
 5532              		.thumb_func
 5533              		.fpu fpv5-d16
 5535              	UART_AdvFeatureConfig:
 5536              	.LFB386:
3122:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check whether the set of advanced features to configure is properly set */
 5537              		.loc 1 3122 0
 5538              		.cfi_startproc
 5539              		@ args = 0, pretend = 0, frame = 0
 5540              		@ frame_needed = 0, uses_anonymous_args = 0
 5541              		@ link register save eliminated.
 5542              	.LVL476:
3127:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5543              		.loc 1 3127 0
 5544 0000 836A     		ldr	r3, [r0, #40]
 5545 0002 13F0010F 		tst	r3, #1
 5546 0006 06D0     		beq	.L496
3130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5547              		.loc 1 3130 0
 5548 0008 0268     		ldr	r2, [r0]
 5549 000a 5368     		ldr	r3, [r2, #4]
 5550 000c 23F40033 		bic	r3, r3, #131072
 5551 0010 C16A     		ldr	r1, [r0, #44]
 5552 0012 0B43     		orrs	r3, r3, r1
 5553 0014 5360     		str	r3, [r2, #4]
 5554              	.L496:
3134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5555              		.loc 1 3134 0
 5556 0016 836A     		ldr	r3, [r0, #40]
 5557 0018 13F0020F 		tst	r3, #2
 5558 001c 06D0     		beq	.L497
3137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5559              		.loc 1 3137 0
 5560 001e 0268     		ldr	r2, [r0]
 5561 0020 5368     		ldr	r3, [r2, #4]
 5562 0022 23F48033 		bic	r3, r3, #65536
 5563 0026 016B     		ldr	r1, [r0, #48]
 5564 0028 0B43     		orrs	r3, r3, r1
 5565 002a 5360     		str	r3, [r2, #4]
 5566              	.L497:
3141:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5567              		.loc 1 3141 0
 5568 002c 836A     		ldr	r3, [r0, #40]
 5569 002e 13F0040F 		tst	r3, #4
 5570 0032 06D0     		beq	.L498
3144:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5571              		.loc 1 3144 0
 5572 0034 0268     		ldr	r2, [r0]
 5573 0036 5368     		ldr	r3, [r2, #4]
 5574 0038 23F48023 		bic	r3, r3, #262144
 5575 003c 416B     		ldr	r1, [r0, #52]
ARM GAS  /tmp/ccsDPfHf.s 			page 184


 5576 003e 0B43     		orrs	r3, r3, r1
 5577 0040 5360     		str	r3, [r2, #4]
 5578              	.L498:
3148:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5579              		.loc 1 3148 0
 5580 0042 836A     		ldr	r3, [r0, #40]
 5581 0044 13F0080F 		tst	r3, #8
 5582 0048 06D0     		beq	.L499
3151:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5583              		.loc 1 3151 0
 5584 004a 0268     		ldr	r2, [r0]
 5585 004c 5368     		ldr	r3, [r2, #4]
 5586 004e 23F40043 		bic	r3, r3, #32768
 5587 0052 816B     		ldr	r1, [r0, #56]
 5588 0054 0B43     		orrs	r3, r3, r1
 5589 0056 5360     		str	r3, [r2, #4]
 5590              	.L499:
3155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5591              		.loc 1 3155 0
 5592 0058 836A     		ldr	r3, [r0, #40]
 5593 005a 13F0100F 		tst	r3, #16
 5594 005e 06D0     		beq	.L500
3158:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5595              		.loc 1 3158 0
 5596 0060 0268     		ldr	r2, [r0]
 5597 0062 9368     		ldr	r3, [r2, #8]
 5598 0064 23F48053 		bic	r3, r3, #4096
 5599 0068 C16B     		ldr	r1, [r0, #60]
 5600 006a 0B43     		orrs	r3, r3, r1
 5601 006c 9360     		str	r3, [r2, #8]
 5602              	.L500:
3162:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5603              		.loc 1 3162 0
 5604 006e 836A     		ldr	r3, [r0, #40]
 5605 0070 13F0200F 		tst	r3, #32
 5606 0074 06D0     		beq	.L501
3165:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5607              		.loc 1 3165 0
 5608 0076 0268     		ldr	r2, [r0]
 5609 0078 9368     		ldr	r3, [r2, #8]
 5610 007a 23F40053 		bic	r3, r3, #8192
 5611 007e 016C     		ldr	r1, [r0, #64]
 5612 0080 0B43     		orrs	r3, r3, r1
 5613 0082 9360     		str	r3, [r2, #8]
 5614              	.L501:
3169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5615              		.loc 1 3169 0
 5616 0084 836A     		ldr	r3, [r0, #40]
 5617 0086 13F0400F 		tst	r3, #64
 5618 008a 0AD0     		beq	.L502
3173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     /* set auto Baudrate detection parameters if detection is enabled */
 5619              		.loc 1 3173 0
 5620 008c 0268     		ldr	r2, [r0]
 5621 008e 5368     		ldr	r3, [r2, #4]
 5622 0090 23F48013 		bic	r3, r3, #1048576
 5623 0094 416C     		ldr	r1, [r0, #68]
 5624 0096 0B43     		orrs	r3, r3, r1
ARM GAS  /tmp/ccsDPfHf.s 			page 185


 5625 0098 5360     		str	r3, [r2, #4]
3175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5626              		.loc 1 3175 0
 5627 009a 436C     		ldr	r3, [r0, #68]
 5628 009c B3F5801F 		cmp	r3, #1048576
 5629 00a0 0BD0     		beq	.L504
 5630              	.L502:
3183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5631              		.loc 1 3183 0
 5632 00a2 836A     		ldr	r3, [r0, #40]
 5633 00a4 13F0800F 		tst	r3, #128
 5634 00a8 06D0     		beq	.L495
3186:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5635              		.loc 1 3186 0
 5636 00aa 0268     		ldr	r2, [r0]
 5637 00ac 5368     		ldr	r3, [r2, #4]
 5638 00ae 23F40023 		bic	r3, r3, #524288
 5639 00b2 C16C     		ldr	r1, [r0, #76]
 5640 00b4 0B43     		orrs	r3, r3, r1
 5641 00b6 5360     		str	r3, [r2, #4]
 5642              	.L495:
3188:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5643              		.loc 1 3188 0
 5644 00b8 7047     		bx	lr
 5645              	.L504:
3178:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5646              		.loc 1 3178 0
 5647 00ba 0268     		ldr	r2, [r0]
 5648 00bc 5368     		ldr	r3, [r2, #4]
 5649 00be 23F4C003 		bic	r3, r3, #6291456
 5650 00c2 816C     		ldr	r1, [r0, #72]
 5651 00c4 0B43     		orrs	r3, r3, r1
 5652 00c6 5360     		str	r3, [r2, #4]
 5653 00c8 EBE7     		b	.L502
 5654              		.cfi_endproc
 5655              	.LFE386:
 5657              		.section	.text.UART_WaitOnFlagUntilTimeout,"ax",%progbits
 5658              		.align	1
 5659              		.global	UART_WaitOnFlagUntilTimeout
 5660              		.syntax unified
 5661              		.thumb
 5662              		.thumb_func
 5663              		.fpu fpv5-d16
 5665              	UART_WaitOnFlagUntilTimeout:
 5666              	.LFB388:
3247:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Wait until flag is set */
 5667              		.loc 1 3247 0
 5668              		.cfi_startproc
 5669              		@ args = 4, pretend = 0, frame = 0
 5670              		@ frame_needed = 0, uses_anonymous_args = 0
 5671              	.LVL477:
 5672 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5673              	.LCFI34:
 5674              		.cfi_def_cfa_offset 24
 5675              		.cfi_offset 4, -24
 5676              		.cfi_offset 5, -20
 5677              		.cfi_offset 6, -16
ARM GAS  /tmp/ccsDPfHf.s 			page 186


 5678              		.cfi_offset 7, -12
 5679              		.cfi_offset 8, -8
 5680              		.cfi_offset 14, -4
 5681 0004 0446     		mov	r4, r0
 5682 0006 0F46     		mov	r7, r1
 5683 0008 1646     		mov	r6, r2
 5684 000a 9846     		mov	r8, r3
 5685 000c 069D     		ldr	r5, [sp, #24]
 5686              	.LVL478:
 5687              	.L507:
3249:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5688              		.loc 1 3249 0
 5689 000e 2368     		ldr	r3, [r4]
 5690 0010 DB69     		ldr	r3, [r3, #28]
 5691 0012 37EA0303 		bics	r3, r7, r3
 5692 0016 0CBF     		ite	eq
 5693 0018 0123     		moveq	r3, #1
 5694 001a 0023     		movne	r3, #0
 5695 001c B342     		cmp	r3, r6
 5696 001e 3FD1     		bne	.L513
3252:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5697              		.loc 1 3252 0
 5698 0020 B5F1FF3F 		cmp	r5, #-1
 5699 0024 F3D0     		beq	.L507
3254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5700              		.loc 1 3254 0
 5701 0026 FFF7FEFF 		bl	HAL_GetTick
 5702              	.LVL479:
 5703 002a A0EB0800 		sub	r0, r0, r8
 5704 002e A842     		cmp	r0, r5
 5705 0030 22D8     		bhi	.L508
3254:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5706              		.loc 1 3254 0 is_stmt 0 discriminator 1
 5707 0032 0DB3     		cbz	r5, .L508
3268:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5708              		.loc 1 3268 0 is_stmt 1
 5709 0034 2368     		ldr	r3, [r4]
 5710 0036 1A68     		ldr	r2, [r3]
 5711 0038 12F0040F 		tst	r2, #4
 5712 003c E7D0     		beq	.L507
3270:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         {
 5713              		.loc 1 3270 0
 5714 003e DA69     		ldr	r2, [r3, #28]
 5715 0040 12F4006F 		tst	r2, #2048
 5716 0044 E3D0     		beq	.L507
3273:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5717              		.loc 1 3273 0
 5718 0046 4FF40062 		mov	r2, #2048
 5719 004a 1A62     		str	r2, [r3, #32]
3276:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5720              		.loc 1 3276 0
 5721 004c 2268     		ldr	r2, [r4]
 5722 004e 1368     		ldr	r3, [r2]
 5723 0050 23F4D073 		bic	r3, r3, #416
 5724 0054 1360     		str	r3, [r2]
3277:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5725              		.loc 1 3277 0
ARM GAS  /tmp/ccsDPfHf.s 			page 187


 5726 0056 2268     		ldr	r2, [r4]
 5727 0058 9368     		ldr	r3, [r2, #8]
 5728 005a 23F00103 		bic	r3, r3, #1
 5729 005e 9360     		str	r3, [r2, #8]
3279:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->RxState = HAL_UART_STATE_READY;
 5730              		.loc 1 3279 0
 5731 0060 2023     		movs	r3, #32
 5732 0062 C4F88030 		str	r3, [r4, #128]
3280:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****           huart->ErrorCode = HAL_UART_ERROR_RTO;
 5733              		.loc 1 3280 0
 5734 0066 C4F88430 		str	r3, [r4, #132]
3281:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5735              		.loc 1 3281 0
 5736 006a C4F88830 		str	r3, [r4, #136]
3284:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5737              		.loc 1 3284 0
 5738 006e 0023     		movs	r3, #0
 5739 0070 84F87C30 		strb	r3, [r4, #124]
3286:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         }
 5740              		.loc 1 3286 0
 5741 0074 0320     		movs	r0, #3
 5742 0076 14E0     		b	.L510
 5743              	.L508:
3257:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 5744              		.loc 1 3257 0
 5745 0078 2268     		ldr	r2, [r4]
 5746 007a 1368     		ldr	r3, [r2]
 5747 007c 23F4D073 		bic	r3, r3, #416
 5748 0080 1360     		str	r3, [r2]
3258:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5749              		.loc 1 3258 0
 5750 0082 2268     		ldr	r2, [r4]
 5751 0084 9368     		ldr	r3, [r2, #8]
 5752 0086 23F00103 		bic	r3, r3, #1
 5753 008a 9360     		str	r3, [r2, #8]
3260:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         huart->RxState = HAL_UART_STATE_READY;
 5754              		.loc 1 3260 0
 5755 008c 2023     		movs	r3, #32
 5756 008e C4F88030 		str	r3, [r4, #128]
3261:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5757              		.loc 1 3261 0
 5758 0092 C4F88430 		str	r3, [r4, #132]
3263:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5759              		.loc 1 3263 0
 5760 0096 0023     		movs	r3, #0
 5761 0098 84F87C30 		strb	r3, [r4, #124]
3265:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5762              		.loc 1 3265 0
 5763 009c 0320     		movs	r0, #3
 5764 009e 00E0     		b	.L510
 5765              	.L513:
3291:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 5766              		.loc 1 3291 0
 5767 00a0 0020     		movs	r0, #0
 5768              	.L510:
3292:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5769              		.loc 1 3292 0
ARM GAS  /tmp/ccsDPfHf.s 			page 188


 5770 00a2 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5771              		.cfi_endproc
 5772              	.LFE388:
 5774              		.section	.text.HAL_UART_Transmit,"ax",%progbits
 5775              		.align	1
 5776              		.global	HAL_UART_Transmit
 5777              		.syntax unified
 5778              		.thumb
 5779              		.thumb_func
 5780              		.fpu fpv5-d16
 5782              	HAL_UART_Transmit:
 5783              	.LFB350:
1034:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 5784              		.loc 1 1034 0
 5785              		.cfi_startproc
 5786              		@ args = 0, pretend = 0, frame = 0
 5787              		@ frame_needed = 0, uses_anonymous_args = 0
 5788              	.LVL480:
 5789 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 5790              	.LCFI35:
 5791              		.cfi_def_cfa_offset 24
 5792              		.cfi_offset 4, -24
 5793              		.cfi_offset 5, -20
 5794              		.cfi_offset 6, -16
 5795              		.cfi_offset 7, -12
 5796              		.cfi_offset 8, -8
 5797              		.cfi_offset 14, -4
 5798 0004 82B0     		sub	sp, sp, #8
 5799              	.LCFI36:
 5800              		.cfi_def_cfa_offset 32
 5801 0006 1E46     		mov	r6, r3
1040:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5802              		.loc 1 1040 0
 5803 0008 D0F88030 		ldr	r3, [r0, #128]
 5804              	.LVL481:
 5805 000c 202B     		cmp	r3, #32
 5806 000e 5CD1     		bne	.L521
 5807 0010 0446     		mov	r4, r0
 5808 0012 0D46     		mov	r5, r1
 5809 0014 9046     		mov	r8, r2
1042:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5810              		.loc 1 1042 0
 5811 0016 B2FA82F3 		clz	r3, r2
 5812 001a 5B09     		lsrs	r3, r3, #5
 5813 001c 0029     		cmp	r1, #0
 5814 001e 08BF     		it	eq
 5815 0020 0123     		moveq	r3, #1
 5816 0022 002B     		cmp	r3, #0
 5817 0024 56D1     		bne	.L522
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5818              		.loc 1 1047 0
 5819 0026 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 5820 002a 012B     		cmp	r3, #1
 5821 002c 54D0     		beq	.L523
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5822              		.loc 1 1047 0 is_stmt 0 discriminator 2
 5823 002e 0123     		movs	r3, #1
ARM GAS  /tmp/ccsDPfHf.s 			page 189


 5824 0030 80F87C30 		strb	r3, [r0, #124]
1049:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->gState = HAL_UART_STATE_BUSY_TX;
 5825              		.loc 1 1049 0 is_stmt 1 discriminator 2
 5826 0034 0023     		movs	r3, #0
 5827 0036 C0F88830 		str	r3, [r0, #136]
1050:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5828              		.loc 1 1050 0 discriminator 2
 5829 003a 2123     		movs	r3, #33
 5830 003c C0F88030 		str	r3, [r0, #128]
1053:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5831              		.loc 1 1053 0 discriminator 2
 5832 0040 FFF7FEFF 		bl	HAL_GetTick
 5833              	.LVL482:
 5834 0044 0746     		mov	r7, r0
 5835              	.LVL483:
1055:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->TxXferCount = Size;
 5836              		.loc 1 1055 0 discriminator 2
 5837 0046 A4F85480 		strh	r8, [r4, #84]	@ movhi
1056:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5838              		.loc 1 1056 0 discriminator 2
 5839 004a A4F85680 		strh	r8, [r4, #86]	@ movhi
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5840              		.loc 1 1059 0 discriminator 2
 5841 004e A368     		ldr	r3, [r4, #8]
 5842 0050 B3F5805F 		cmp	r3, #4096
 5843 0054 05D0     		beq	.L529
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5844              		.loc 1 1067 0
 5845 0056 4FF00008 		mov	r8, #0
 5846              	.LVL484:
 5847              	.L516:
1070:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5848              		.loc 1 1070 0
 5849 005a 0023     		movs	r3, #0
 5850 005c 84F87C30 		strb	r3, [r4, #124]
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5851              		.loc 1 1072 0
 5852 0060 13E0     		b	.L517
 5853              	.LVL485:
 5854              	.L529:
1059:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5855              		.loc 1 1059 0 discriminator 1
 5856 0062 2369     		ldr	r3, [r4, #16]
 5857 0064 13B1     		cbz	r3, .L525
1067:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5858              		.loc 1 1067 0
 5859 0066 4FF00008 		mov	r8, #0
 5860 006a F6E7     		b	.L516
 5861              	.L525:
1062:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5862              		.loc 1 1062 0
 5863 006c A846     		mov	r8, r5
1061:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 5864              		.loc 1 1061 0
 5865 006e 0025     		movs	r5, #0
 5866              	.LVL486:
 5867 0070 F3E7     		b	.L516
ARM GAS  /tmp/ccsDPfHf.s 			page 190


 5868              	.LVL487:
 5869              	.L531:
1080:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata16bits++;
 5870              		.loc 1 1080 0
 5871 0072 38F8023B 		ldrh	r3, [r8], #2
 5872              	.LVL488:
 5873 0076 2268     		ldr	r2, [r4]
 5874 0078 C3F30803 		ubfx	r3, r3, #0, #9
 5875 007c 9362     		str	r3, [r2, #40]
 5876              	.LVL489:
 5877              	.L519:
1088:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5878              		.loc 1 1088 0
 5879 007e B4F85630 		ldrh	r3, [r4, #86]
 5880 0082 013B     		subs	r3, r3, #1
 5881 0084 9BB2     		uxth	r3, r3
 5882 0086 A4F85630 		strh	r3, [r4, #86]	@ movhi
 5883              	.L517:
1072:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5884              		.loc 1 1072 0
 5885 008a B4F85630 		ldrh	r3, [r4, #86]
 5886 008e 9BB2     		uxth	r3, r3
 5887 0090 73B1     		cbz	r3, .L530
1074:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5888              		.loc 1 1074 0
 5889 0092 0096     		str	r6, [sp]
 5890 0094 3B46     		mov	r3, r7
 5891 0096 0022     		movs	r2, #0
 5892 0098 8021     		movs	r1, #128
 5893 009a 2046     		mov	r0, r4
 5894 009c FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5895              	.LVL490:
 5896 00a0 E0B9     		cbnz	r0, .L526
1078:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 5897              		.loc 1 1078 0
 5898 00a2 002D     		cmp	r5, #0
 5899 00a4 E5D0     		beq	.L531
1085:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata8bits++;
 5900              		.loc 1 1085 0
 5901 00a6 15F8012B 		ldrb	r2, [r5], #1	@ zero_extendqisi2
 5902              	.LVL491:
 5903 00aa 2368     		ldr	r3, [r4]
 5904 00ac 9A62     		str	r2, [r3, #40]
 5905              	.LVL492:
 5906 00ae E6E7     		b	.L519
 5907              	.L530:
1091:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5908              		.loc 1 1091 0
 5909 00b0 0096     		str	r6, [sp]
 5910 00b2 3B46     		mov	r3, r7
 5911 00b4 0022     		movs	r2, #0
 5912 00b6 4021     		movs	r1, #64
 5913 00b8 2046     		mov	r0, r4
 5914 00ba FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 5915              	.LVL493:
 5916 00be 0346     		mov	r3, r0
 5917 00c0 70B9     		cbnz	r0, .L527
ARM GAS  /tmp/ccsDPfHf.s 			page 191


1097:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5918              		.loc 1 1097 0
 5919 00c2 2022     		movs	r2, #32
 5920 00c4 C4F88020 		str	r2, [r4, #128]
1099:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5921              		.loc 1 1099 0
 5922 00c8 00E0     		b	.L515
 5923              	.LVL494:
 5924              	.L521:
1103:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 5925              		.loc 1 1103 0
 5926 00ca 0223     		movs	r3, #2
 5927              	.LVL495:
 5928              	.L515:
1105:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5929              		.loc 1 1105 0
 5930 00cc 1846     		mov	r0, r3
 5931 00ce 02B0     		add	sp, sp, #8
 5932              	.LCFI37:
 5933              		.cfi_remember_state
 5934              		.cfi_def_cfa_offset 24
 5935              		@ sp needed
 5936 00d0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 5937              	.LVL496:
 5938              	.L522:
 5939              	.LCFI38:
 5940              		.cfi_restore_state
1044:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5941              		.loc 1 1044 0
 5942 00d4 0123     		movs	r3, #1
 5943 00d6 F9E7     		b	.L515
 5944              	.L523:
1047:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 5945              		.loc 1 1047 0
 5946 00d8 0223     		movs	r3, #2
 5947 00da F7E7     		b	.L515
 5948              	.LVL497:
 5949              	.L526:
1076:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 5950              		.loc 1 1076 0
 5951 00dc 0323     		movs	r3, #3
 5952 00de F5E7     		b	.L515
 5953              	.L527:
1093:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 5954              		.loc 1 1093 0
 5955 00e0 0323     		movs	r3, #3
 5956 00e2 F3E7     		b	.L515
 5957              		.cfi_endproc
 5958              	.LFE350:
 5960              		.section	.text.HAL_UART_Receive,"ax",%progbits
 5961              		.align	1
 5962              		.global	HAL_UART_Receive
 5963              		.syntax unified
 5964              		.thumb
 5965              		.thumb_func
 5966              		.fpu fpv5-d16
 5968              	HAL_UART_Receive:
ARM GAS  /tmp/ccsDPfHf.s 			page 192


 5969              	.LFB351:
1123:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint8_t  *pdata8bits;
 5970              		.loc 1 1123 0
 5971              		.cfi_startproc
 5972              		@ args = 0, pretend = 0, frame = 0
 5973              		@ frame_needed = 0, uses_anonymous_args = 0
 5974              	.LVL498:
 5975 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 5976              	.LCFI39:
 5977              		.cfi_def_cfa_offset 28
 5978              		.cfi_offset 4, -28
 5979              		.cfi_offset 5, -24
 5980              		.cfi_offset 6, -20
 5981              		.cfi_offset 7, -16
 5982              		.cfi_offset 8, -12
 5983              		.cfi_offset 9, -8
 5984              		.cfi_offset 14, -4
 5985 0004 83B0     		sub	sp, sp, #12
 5986              	.LCFI40:
 5987              		.cfi_def_cfa_offset 40
 5988 0006 1E46     		mov	r6, r3
1130:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 5989              		.loc 1 1130 0
 5990 0008 D0F88430 		ldr	r3, [r0, #132]
 5991              	.LVL499:
 5992 000c 202B     		cmp	r3, #32
 5993 000e 40F08380 		bne	.L546
 5994 0012 0446     		mov	r4, r0
 5995 0014 0D46     		mov	r5, r1
 5996 0016 9046     		mov	r8, r2
1132:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 5997              		.loc 1 1132 0
 5998 0018 B2FA82F3 		clz	r3, r2
 5999 001c 5B09     		lsrs	r3, r3, #5
 6000 001e 0029     		cmp	r1, #0
 6001 0020 08BF     		it	eq
 6002 0022 0123     		moveq	r3, #1
 6003 0024 002B     		cmp	r3, #0
 6004 0026 7BD1     		bne	.L547
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6005              		.loc 1 1137 0
 6006 0028 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 6007 002c 012B     		cmp	r3, #1
 6008 002e 79D0     		beq	.L548
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6009              		.loc 1 1137 0 is_stmt 0 discriminator 2
 6010 0030 0123     		movs	r3, #1
 6011 0032 80F87C30 		strb	r3, [r0, #124]
1139:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxState = HAL_UART_STATE_BUSY_RX;
 6012              		.loc 1 1139 0 is_stmt 1 discriminator 2
 6013 0036 0023     		movs	r3, #0
 6014 0038 C0F88830 		str	r3, [r0, #136]
1140:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6015              		.loc 1 1140 0 discriminator 2
 6016 003c 2223     		movs	r3, #34
 6017 003e C0F88430 		str	r3, [r0, #132]
1143:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
ARM GAS  /tmp/ccsDPfHf.s 			page 193


 6018              		.loc 1 1143 0 discriminator 2
 6019 0042 FFF7FEFF 		bl	HAL_GetTick
 6020              	.LVL500:
 6021 0046 0746     		mov	r7, r0
 6022              	.LVL501:
1145:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     huart->RxXferCount = Size;
 6023              		.loc 1 1145 0 discriminator 2
 6024 0048 A4F85C80 		strh	r8, [r4, #92]	@ movhi
1146:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6025              		.loc 1 1146 0 discriminator 2
 6026 004c A4F85E80 		strh	r8, [r4, #94]	@ movhi
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6027              		.loc 1 1149 0 discriminator 2
 6028 0050 A368     		ldr	r3, [r4, #8]
 6029 0052 B3F5805F 		cmp	r3, #4096
 6030 0056 06D0     		beq	.L553
 6031 0058 A3B9     		cbnz	r3, .L537
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6032              		.loc 1 1149 0 is_stmt 0 discriminator 5
 6033 005a 2269     		ldr	r2, [r4, #16]
 6034 005c 72B9     		cbnz	r2, .L538
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6035              		.loc 1 1149 0 discriminator 7
 6036 005e FF22     		movs	r2, #255
 6037 0060 A4F86020 		strh	r2, [r4, #96]	@ movhi
 6038 0064 14E0     		b	.L536
 6039              	.L553:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6040              		.loc 1 1149 0 discriminator 1
 6041 0066 2269     		ldr	r2, [r4, #16]
 6042 0068 22B9     		cbnz	r2, .L535
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6043              		.loc 1 1149 0 discriminator 3
 6044 006a 40F2FF12 		movw	r2, #511
 6045 006e A4F86020 		strh	r2, [r4, #96]	@ movhi
 6046 0072 0DE0     		b	.L536
 6047              	.L535:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6048              		.loc 1 1149 0 discriminator 4
 6049 0074 FF22     		movs	r2, #255
 6050 0076 A4F86020 		strh	r2, [r4, #96]	@ movhi
 6051 007a 09E0     		b	.L536
 6052              	.L538:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6053              		.loc 1 1149 0 discriminator 8
 6054 007c 7F22     		movs	r2, #127
 6055 007e A4F86020 		strh	r2, [r4, #96]	@ movhi
 6056 0082 05E0     		b	.L536
 6057              	.L537:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6058              		.loc 1 1149 0 discriminator 6
 6059 0084 B3F1805F 		cmp	r3, #268435456
 6060 0088 0DD0     		beq	.L554
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6061              		.loc 1 1149 0 discriminator 10
 6062 008a 0022     		movs	r2, #0
 6063 008c A4F86020 		strh	r2, [r4, #96]	@ movhi
ARM GAS  /tmp/ccsDPfHf.s 			page 194


 6064              	.L536:
1150:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6065              		.loc 1 1150 0 is_stmt 1
 6066 0090 B4F86080 		ldrh	r8, [r4, #96]
 6067              	.LVL502:
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 6068              		.loc 1 1153 0
 6069 0094 B3F5805F 		cmp	r3, #4096
 6070 0098 0FD0     		beq	.L555
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6071              		.loc 1 1161 0
 6072 009a 4FF00009 		mov	r9, #0
 6073              	.LVL503:
 6074              	.L541:
1164:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6075              		.loc 1 1164 0
 6076 009e 0023     		movs	r3, #0
 6077 00a0 84F87C30 		strb	r3, [r4, #124]
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 6078              		.loc 1 1167 0
 6079 00a4 1DE0     		b	.L542
 6080              	.LVL504:
 6081              	.L554:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6082              		.loc 1 1149 0 discriminator 9
 6083 00a6 2269     		ldr	r2, [r4, #16]
 6084 00a8 1AB9     		cbnz	r2, .L540
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6085              		.loc 1 1149 0 is_stmt 0 discriminator 11
 6086 00aa 7F22     		movs	r2, #127
 6087 00ac A4F86020 		strh	r2, [r4, #96]	@ movhi
 6088 00b0 EEE7     		b	.L536
 6089              	.L540:
1149:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     uhMask = huart->Mask;
 6090              		.loc 1 1149 0 discriminator 12
 6091 00b2 3F22     		movs	r2, #63
 6092 00b4 A4F86020 		strh	r2, [r4, #96]	@ movhi
 6093 00b8 EAE7     		b	.L536
 6094              	.LVL505:
 6095              	.L555:
1153:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 6096              		.loc 1 1153 0 is_stmt 1 discriminator 1
 6097 00ba 2369     		ldr	r3, [r4, #16]
 6098 00bc 13B1     		cbz	r3, .L550
1161:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6099              		.loc 1 1161 0
 6100 00be 4FF00009 		mov	r9, #0
 6101 00c2 ECE7     		b	.L541
 6102              	.L550:
1156:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6103              		.loc 1 1156 0
 6104 00c4 A946     		mov	r9, r5
1155:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       pdata16bits = (uint16_t *) pData;
 6105              		.loc 1 1155 0
 6106 00c6 0025     		movs	r5, #0
 6107              	.LVL506:
 6108 00c8 E9E7     		b	.L541
ARM GAS  /tmp/ccsDPfHf.s 			page 195


 6109              	.LVL507:
 6110              	.L557:
1175:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata16bits++;
 6111              		.loc 1 1175 0
 6112 00ca 2368     		ldr	r3, [r4]
 6113 00cc 5B6A     		ldr	r3, [r3, #36]
 6114 00ce 08EA0303 		and	r3, r8, r3
 6115 00d2 29F8023B 		strh	r3, [r9], #2	@ movhi
 6116              	.LVL508:
 6117              	.L544:
1183:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6118              		.loc 1 1183 0
 6119 00d6 B4F85E30 		ldrh	r3, [r4, #94]
 6120 00da 013B     		subs	r3, r3, #1
 6121 00dc 9BB2     		uxth	r3, r3
 6122 00de A4F85E30 		strh	r3, [r4, #94]	@ movhi
 6123              	.L542:
1167:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 6124              		.loc 1 1167 0
 6125 00e2 B4F85E30 		ldrh	r3, [r4, #94]
 6126 00e6 9BB2     		uxth	r3, r3
 6127 00e8 8BB1     		cbz	r3, .L556
1169:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 6128              		.loc 1 1169 0
 6129 00ea 0096     		str	r6, [sp]
 6130 00ec 3B46     		mov	r3, r7
 6131 00ee 0022     		movs	r2, #0
 6132 00f0 2021     		movs	r1, #32
 6133 00f2 2046     		mov	r0, r4
 6134 00f4 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 6135              	.LVL509:
 6136 00f8 B0B9     		cbnz	r0, .L551
1173:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       {
 6137              		.loc 1 1173 0
 6138 00fa 002D     		cmp	r5, #0
 6139 00fc E5D0     		beq	.L557
1180:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****         pdata8bits++;
 6140              		.loc 1 1180 0
 6141 00fe 2368     		ldr	r3, [r4]
 6142 0100 5A6A     		ldr	r2, [r3, #36]
 6143 0102 5FFA88F3 		uxtb	r3, r8
 6144 0106 1340     		ands	r3, r3, r2
 6145 0108 05F8013B 		strb	r3, [r5], #1
 6146              	.LVL510:
 6147 010c E3E7     		b	.L544
 6148              	.L556:
1187:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6149              		.loc 1 1187 0
 6150 010e 2023     		movs	r3, #32
 6151 0110 C4F88430 		str	r3, [r4, #132]
1189:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6152              		.loc 1 1189 0
 6153 0114 0020     		movs	r0, #0
 6154 0116 00E0     		b	.L533
 6155              	.LVL511:
 6156              	.L546:
1193:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
ARM GAS  /tmp/ccsDPfHf.s 			page 196


 6157              		.loc 1 1193 0
 6158 0118 0220     		movs	r0, #2
 6159              	.LVL512:
 6160              	.L533:
1195:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6161              		.loc 1 1195 0
 6162 011a 03B0     		add	sp, sp, #12
 6163              	.LCFI41:
 6164              		.cfi_remember_state
 6165              		.cfi_def_cfa_offset 28
 6166              		@ sp needed
 6167 011c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 6168              	.LVL513:
 6169              	.L547:
 6170              	.LCFI42:
 6171              		.cfi_restore_state
1134:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6172              		.loc 1 1134 0
 6173 0120 0120     		movs	r0, #1
 6174              	.LVL514:
 6175 0122 FAE7     		b	.L533
 6176              	.LVL515:
 6177              	.L548:
1137:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6178              		.loc 1 1137 0
 6179 0124 0220     		movs	r0, #2
 6180              	.LVL516:
 6181 0126 F8E7     		b	.L533
 6182              	.LVL517:
 6183              	.L551:
1171:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****       }
 6184              		.loc 1 1171 0
 6185 0128 0320     		movs	r0, #3
 6186 012a F6E7     		b	.L533
 6187              		.cfi_endproc
 6188              	.LFE351:
 6190              		.section	.text.UART_CheckIdleState,"ax",%progbits
 6191              		.align	1
 6192              		.global	UART_CheckIdleState
 6193              		.syntax unified
 6194              		.thumb
 6195              		.thumb_func
 6196              		.fpu fpv5-d16
 6198              	UART_CheckIdleState:
 6199              	.LFB387:
3196:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   uint32_t tickstart;
 6200              		.loc 1 3196 0
 6201              		.cfi_startproc
 6202              		@ args = 0, pretend = 0, frame = 0
 6203              		@ frame_needed = 0, uses_anonymous_args = 0
 6204              	.LVL518:
 6205 0000 30B5     		push	{r4, r5, lr}
 6206              	.LCFI43:
 6207              		.cfi_def_cfa_offset 12
 6208              		.cfi_offset 4, -12
 6209              		.cfi_offset 5, -8
 6210              		.cfi_offset 14, -4
ARM GAS  /tmp/ccsDPfHf.s 			page 197


 6211 0002 83B0     		sub	sp, sp, #12
 6212              	.LCFI44:
 6213              		.cfi_def_cfa_offset 24
 6214 0004 0446     		mov	r4, r0
3200:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6215              		.loc 1 3200 0
 6216 0006 0023     		movs	r3, #0
 6217 0008 C0F88830 		str	r3, [r0, #136]
3203:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6218              		.loc 1 3203 0
 6219 000c FFF7FEFF 		bl	HAL_GetTick
 6220              	.LVL519:
 6221 0010 0546     		mov	r5, r0
 6222              	.LVL520:
3206:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6223              		.loc 1 3206 0
 6224 0012 2368     		ldr	r3, [r4]
 6225 0014 1B68     		ldr	r3, [r3]
 6226 0016 13F0080F 		tst	r3, #8
 6227 001a 0ED1     		bne	.L565
 6228              	.LVL521:
 6229              	.L559:
3217:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6230              		.loc 1 3217 0
 6231 001c 2368     		ldr	r3, [r4]
 6232 001e 1B68     		ldr	r3, [r3]
 6233 0020 13F0040F 		tst	r3, #4
 6234 0024 17D1     		bne	.L566
 6235              	.L561:
3228:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   huart->RxState = HAL_UART_STATE_READY;
 6236              		.loc 1 3228 0
 6237 0026 2023     		movs	r3, #32
 6238 0028 C4F88030 		str	r3, [r4, #128]
3229:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6239              		.loc 1 3229 0
 6240 002c C4F88430 		str	r3, [r4, #132]
3231:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6241              		.loc 1 3231 0
 6242 0030 0020     		movs	r0, #0
 6243 0032 84F87C00 		strb	r0, [r4, #124]
 6244              	.L560:
3234:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6245              		.loc 1 3234 0
 6246 0036 03B0     		add	sp, sp, #12
 6247              	.LCFI45:
 6248              		.cfi_remember_state
 6249              		.cfi_def_cfa_offset 12
 6250              		@ sp needed
 6251 0038 30BD     		pop	{r4, r5, pc}
 6252              	.LVL522:
 6253              	.L565:
 6254              	.LCFI46:
 6255              		.cfi_restore_state
3209:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 6256              		.loc 1 3209 0
 6257 003a 6FF07E43 		mvn	r3, #-33554432
 6258 003e 0093     		str	r3, [sp]
ARM GAS  /tmp/ccsDPfHf.s 			page 198


 6259 0040 0346     		mov	r3, r0
 6260 0042 0022     		movs	r2, #0
 6261 0044 4FF40011 		mov	r1, #2097152
 6262 0048 2046     		mov	r0, r4
 6263              	.LVL523:
 6264 004a FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 6265              	.LVL524:
 6266 004e 0028     		cmp	r0, #0
 6267 0050 E4D0     		beq	.L559
3212:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6268              		.loc 1 3212 0
 6269 0052 0320     		movs	r0, #3
 6270 0054 EFE7     		b	.L560
 6271              	.L566:
3220:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     {
 6272              		.loc 1 3220 0
 6273 0056 6FF07E43 		mvn	r3, #-33554432
 6274 005a 0093     		str	r3, [sp]
 6275 005c 2B46     		mov	r3, r5
 6276 005e 0022     		movs	r2, #0
 6277 0060 4FF48001 		mov	r1, #4194304
 6278 0064 2046     		mov	r0, r4
 6279 0066 FFF7FEFF 		bl	UART_WaitOnFlagUntilTimeout
 6280              	.LVL525:
 6281 006a 0028     		cmp	r0, #0
 6282 006c DBD0     		beq	.L561
3223:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****     }
 6283              		.loc 1 3223 0
 6284 006e 0320     		movs	r0, #3
 6285 0070 E1E7     		b	.L560
 6286              		.cfi_endproc
 6287              	.LFE387:
 6289              		.section	.text.HAL_UART_Init,"ax",%progbits
 6290              		.align	1
 6291              		.global	HAL_UART_Init
 6292              		.syntax unified
 6293              		.thumb
 6294              		.thumb_func
 6295              		.fpu fpv5-d16
 6297              	HAL_UART_Init:
 6298              	.LFB343:
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6299              		.loc 1 298 0
 6300              		.cfi_startproc
 6301              		@ args = 0, pretend = 0, frame = 0
 6302              		@ frame_needed = 0, uses_anonymous_args = 0
 6303              	.LVL526:
 300:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6304              		.loc 1 300 0
 6305 0000 78B3     		cbz	r0, .L571
 298:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6306              		.loc 1 298 0
 6307 0002 10B5     		push	{r4, lr}
 6308              	.LCFI47:
 6309              		.cfi_def_cfa_offset 8
 6310              		.cfi_offset 4, -8
 6311              		.cfi_offset 14, -4
ARM GAS  /tmp/ccsDPfHf.s 			page 199


 6312 0004 0446     		mov	r4, r0
 316:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6313              		.loc 1 316 0
 6314 0006 D0F88030 		ldr	r3, [r0, #128]
 6315 000a 0BB3     		cbz	r3, .L576
 6316              	.LVL527:
 6317              	.L569:
 337:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6318              		.loc 1 337 0
 6319 000c 2423     		movs	r3, #36
 6320 000e C4F88030 		str	r3, [r4, #128]
 339:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6321              		.loc 1 339 0
 6322 0012 2268     		ldr	r2, [r4]
 6323 0014 1368     		ldr	r3, [r2]
 6324 0016 23F00103 		bic	r3, r3, #1
 6325 001a 1360     		str	r3, [r2]
 342:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6326              		.loc 1 342 0
 6327 001c 2046     		mov	r0, r4
 6328 001e FFF7FEFF 		bl	UART_SetConfig
 6329              	.LVL528:
 6330 0022 0128     		cmp	r0, #1
 6331 0024 13D0     		beq	.L568
 347:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6332              		.loc 1 347 0
 6333 0026 A36A     		ldr	r3, [r4, #40]
 6334 0028 BBB9     		cbnz	r3, .L577
 6335              	.L570:
 355:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 6336              		.loc 1 355 0
 6337 002a 2268     		ldr	r2, [r4]
 6338 002c 5368     		ldr	r3, [r2, #4]
 6339 002e 23F49043 		bic	r3, r3, #18432
 6340 0032 5360     		str	r3, [r2, #4]
 356:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6341              		.loc 1 356 0
 6342 0034 2268     		ldr	r2, [r4]
 6343 0036 9368     		ldr	r3, [r2, #8]
 6344 0038 23F02A03 		bic	r3, r3, #42
 6345 003c 9360     		str	r3, [r2, #8]
 358:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6346              		.loc 1 358 0
 6347 003e 2268     		ldr	r2, [r4]
 6348 0040 1368     		ldr	r3, [r2]
 6349 0042 43F00103 		orr	r3, r3, #1
 6350 0046 1360     		str	r3, [r2]
 361:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 6351              		.loc 1 361 0
 6352 0048 2046     		mov	r0, r4
 6353 004a FFF7FEFF 		bl	UART_CheckIdleState
 6354              	.LVL529:
 6355              	.L568:
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6356              		.loc 1 362 0
 6357 004e 10BD     		pop	{r4, pc}
 6358              	.LVL530:
ARM GAS  /tmp/ccsDPfHf.s 			page 200


 6359              	.L576:
 319:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6360              		.loc 1 319 0
 6361 0050 80F87C30 		strb	r3, [r0, #124]
 333:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 6362              		.loc 1 333 0
 6363 0054 FFF7FEFF 		bl	HAL_UART_MspInit
 6364              	.LVL531:
 6365 0058 D8E7     		b	.L569
 6366              	.L577:
 349:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6367              		.loc 1 349 0
 6368 005a 2046     		mov	r0, r4
 6369 005c FFF7FEFF 		bl	UART_AdvFeatureConfig
 6370              	.LVL532:
 6371 0060 E3E7     		b	.L570
 6372              	.LVL533:
 6373              	.L571:
 6374              	.LCFI48:
 6375              		.cfi_def_cfa_offset 0
 6376              		.cfi_restore 4
 6377              		.cfi_restore 14
 302:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6378              		.loc 1 302 0
 6379 0062 0120     		movs	r0, #1
 6380              	.LVL534:
 362:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6381              		.loc 1 362 0
 6382 0064 7047     		bx	lr
 6383              		.cfi_endproc
 6384              	.LFE343:
 6386              		.section	.text.HAL_HalfDuplex_Init,"ax",%progbits
 6387              		.align	1
 6388              		.global	HAL_HalfDuplex_Init
 6389              		.syntax unified
 6390              		.thumb
 6391              		.thumb_func
 6392              		.fpu fpv5-d16
 6394              	HAL_HalfDuplex_Init:
 6395              	.LFB344:
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6396              		.loc 1 371 0
 6397              		.cfi_startproc
 6398              		@ args = 0, pretend = 0, frame = 0
 6399              		@ frame_needed = 0, uses_anonymous_args = 0
 6400              	.LVL535:
 373:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6401              		.loc 1 373 0
 6402 0000 0028     		cmp	r0, #0
 6403 0002 34D0     		beq	.L582
 371:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6404              		.loc 1 371 0
 6405 0004 10B5     		push	{r4, lr}
 6406              	.LCFI49:
 6407              		.cfi_def_cfa_offset 8
 6408              		.cfi_offset 4, -8
 6409              		.cfi_offset 14, -4
ARM GAS  /tmp/ccsDPfHf.s 			page 201


 6410 0006 0446     		mov	r4, r0
 381:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6411              		.loc 1 381 0
 6412 0008 D0F88030 		ldr	r3, [r0, #128]
 6413 000c 33B3     		cbz	r3, .L587
 6414              	.LVL536:
 6415              	.L580:
 402:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6416              		.loc 1 402 0
 6417 000e 2423     		movs	r3, #36
 6418 0010 C4F88030 		str	r3, [r4, #128]
 404:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6419              		.loc 1 404 0
 6420 0014 2268     		ldr	r2, [r4]
 6421 0016 1368     		ldr	r3, [r2]
 6422 0018 23F00103 		bic	r3, r3, #1
 6423 001c 1360     		str	r3, [r2]
 407:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6424              		.loc 1 407 0
 6425 001e 2046     		mov	r0, r4
 6426 0020 FFF7FEFF 		bl	UART_SetConfig
 6427              	.LVL537:
 6428 0024 0128     		cmp	r0, #1
 6429 0026 18D0     		beq	.L579
 412:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6430              		.loc 1 412 0
 6431 0028 A36A     		ldr	r3, [r4, #40]
 6432 002a E3B9     		cbnz	r3, .L588
 6433              	.L581:
 420:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 6434              		.loc 1 420 0
 6435 002c 2268     		ldr	r2, [r4]
 6436 002e 5368     		ldr	r3, [r2, #4]
 6437 0030 23F49043 		bic	r3, r3, #18432
 6438 0034 5360     		str	r3, [r2, #4]
 421:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6439              		.loc 1 421 0
 6440 0036 2268     		ldr	r2, [r4]
 6441 0038 9368     		ldr	r3, [r2, #8]
 6442 003a 23F02203 		bic	r3, r3, #34
 6443 003e 9360     		str	r3, [r2, #8]
 424:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6444              		.loc 1 424 0
 6445 0040 2268     		ldr	r2, [r4]
 6446 0042 9368     		ldr	r3, [r2, #8]
 6447 0044 43F00803 		orr	r3, r3, #8
 6448 0048 9360     		str	r3, [r2, #8]
 426:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6449              		.loc 1 426 0
 6450 004a 2268     		ldr	r2, [r4]
 6451 004c 1368     		ldr	r3, [r2]
 6452 004e 43F00103 		orr	r3, r3, #1
 6453 0052 1360     		str	r3, [r2]
 429:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 6454              		.loc 1 429 0
 6455 0054 2046     		mov	r0, r4
 6456 0056 FFF7FEFF 		bl	UART_CheckIdleState
ARM GAS  /tmp/ccsDPfHf.s 			page 202


 6457              	.LVL538:
 6458              	.L579:
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6459              		.loc 1 430 0
 6460 005a 10BD     		pop	{r4, pc}
 6461              	.LVL539:
 6462              	.L587:
 384:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6463              		.loc 1 384 0
 6464 005c 80F87C30 		strb	r3, [r0, #124]
 398:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 6465              		.loc 1 398 0
 6466 0060 FFF7FEFF 		bl	HAL_UART_MspInit
 6467              	.LVL540:
 6468 0064 D3E7     		b	.L580
 6469              	.L588:
 414:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6470              		.loc 1 414 0
 6471 0066 2046     		mov	r0, r4
 6472 0068 FFF7FEFF 		bl	UART_AdvFeatureConfig
 6473              	.LVL541:
 6474 006c DEE7     		b	.L581
 6475              	.LVL542:
 6476              	.L582:
 6477              	.LCFI50:
 6478              		.cfi_def_cfa_offset 0
 6479              		.cfi_restore 4
 6480              		.cfi_restore 14
 375:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6481              		.loc 1 375 0
 6482 006e 0120     		movs	r0, #1
 6483              	.LVL543:
 430:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6484              		.loc 1 430 0
 6485 0070 7047     		bx	lr
 6486              		.cfi_endproc
 6487              	.LFE344:
 6489              		.section	.text.HAL_LIN_Init,"ax",%progbits
 6490              		.align	1
 6491              		.global	HAL_LIN_Init
 6492              		.syntax unified
 6493              		.thumb
 6494              		.thumb_func
 6495              		.fpu fpv5-d16
 6497              	HAL_LIN_Init:
 6498              	.LFB345:
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6499              		.loc 1 444 0
 6500              		.cfi_startproc
 6501              		@ args = 0, pretend = 0, frame = 0
 6502              		@ frame_needed = 0, uses_anonymous_args = 0
 6503              	.LVL544:
 446:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6504              		.loc 1 446 0
 6505 0000 0028     		cmp	r0, #0
 6506 0002 42D0     		beq	.L593
 444:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
ARM GAS  /tmp/ccsDPfHf.s 			page 203


 6507              		.loc 1 444 0
 6508 0004 38B5     		push	{r3, r4, r5, lr}
 6509              	.LCFI51:
 6510              		.cfi_def_cfa_offset 16
 6511              		.cfi_offset 3, -16
 6512              		.cfi_offset 4, -12
 6513              		.cfi_offset 5, -8
 6514              		.cfi_offset 14, -4
 6515 0006 0446     		mov	r4, r0
 457:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6516              		.loc 1 457 0
 6517 0008 C369     		ldr	r3, [r0, #28]
 6518 000a B3F5004F 		cmp	r3, #32768
 6519 000e 3ED0     		beq	.L594
 462:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6520              		.loc 1 462 0
 6521 0010 8368     		ldr	r3, [r0, #8]
 6522 0012 002B     		cmp	r3, #0
 6523 0014 3DD1     		bne	.L595
 6524 0016 0D46     		mov	r5, r1
 467:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6525              		.loc 1 467 0
 6526 0018 D0F88030 		ldr	r3, [r0, #128]
 6527 001c 63B3     		cbz	r3, .L600
 6528              	.LVL545:
 6529              	.L591:
 488:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6530              		.loc 1 488 0
 6531 001e 2423     		movs	r3, #36
 6532 0020 C4F88030 		str	r3, [r4, #128]
 490:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6533              		.loc 1 490 0
 6534 0024 2268     		ldr	r2, [r4]
 6535 0026 1368     		ldr	r3, [r2]
 6536 0028 23F00103 		bic	r3, r3, #1
 6537 002c 1360     		str	r3, [r2]
 493:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6538              		.loc 1 493 0
 6539 002e 2046     		mov	r0, r4
 6540 0030 FFF7FEFF 		bl	UART_SetConfig
 6541              	.LVL546:
 6542 0034 0128     		cmp	r0, #1
 6543 0036 2DD0     		beq	.L590
 498:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6544              		.loc 1 498 0
 6545 0038 A36A     		ldr	r3, [r4, #40]
 6546 003a 13BB     		cbnz	r3, .L601
 6547              	.L592:
 506:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN | USART_CR3_SCEN));
 6548              		.loc 1 506 0
 6549 003c 2268     		ldr	r2, [r4]
 6550 003e 5368     		ldr	r3, [r2, #4]
 6551 0040 23F40063 		bic	r3, r3, #2048
 6552 0044 5360     		str	r3, [r2, #4]
 507:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6553              		.loc 1 507 0
 6554 0046 2268     		ldr	r2, [r4]
ARM GAS  /tmp/ccsDPfHf.s 			page 204


 6555 0048 9368     		ldr	r3, [r2, #8]
 6556 004a 23F02A03 		bic	r3, r3, #42
 6557 004e 9360     		str	r3, [r2, #8]
 510:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6558              		.loc 1 510 0
 6559 0050 2268     		ldr	r2, [r4]
 6560 0052 5368     		ldr	r3, [r2, #4]
 6561 0054 43F48043 		orr	r3, r3, #16384
 6562 0058 5360     		str	r3, [r2, #4]
 513:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6563              		.loc 1 513 0
 6564 005a 2368     		ldr	r3, [r4]
 6565 005c 5968     		ldr	r1, [r3, #4]
 6566 005e 21F02001 		bic	r1, r1, #32
 6567 0062 2943     		orrs	r1, r1, r5
 6568 0064 5960     		str	r1, [r3, #4]
 515:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6569              		.loc 1 515 0
 6570 0066 2268     		ldr	r2, [r4]
 6571 0068 1368     		ldr	r3, [r2]
 6572 006a 43F00103 		orr	r3, r3, #1
 6573 006e 1360     		str	r3, [r2]
 518:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 6574              		.loc 1 518 0
 6575 0070 2046     		mov	r0, r4
 6576 0072 FFF7FEFF 		bl	UART_CheckIdleState
 6577              	.LVL547:
 6578 0076 0DE0     		b	.L590
 6579              	.LVL548:
 6580              	.L600:
 470:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6581              		.loc 1 470 0
 6582 0078 80F87C30 		strb	r3, [r0, #124]
 484:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 6583              		.loc 1 484 0
 6584 007c FFF7FEFF 		bl	HAL_UART_MspInit
 6585              	.LVL549:
 6586 0080 CDE7     		b	.L591
 6587              	.L601:
 500:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6588              		.loc 1 500 0
 6589 0082 2046     		mov	r0, r4
 6590 0084 FFF7FEFF 		bl	UART_AdvFeatureConfig
 6591              	.LVL550:
 6592 0088 D8E7     		b	.L592
 6593              	.LVL551:
 6594              	.L593:
 6595              	.LCFI52:
 6596              		.cfi_def_cfa_offset 0
 6597              		.cfi_restore 3
 6598              		.cfi_restore 4
 6599              		.cfi_restore 5
 6600              		.cfi_restore 14
 448:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6601              		.loc 1 448 0
 6602 008a 0120     		movs	r0, #1
 6603              	.LVL552:
ARM GAS  /tmp/ccsDPfHf.s 			page 205


 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6604              		.loc 1 519 0
 6605 008c 7047     		bx	lr
 6606              	.LVL553:
 6607              	.L594:
 6608              	.LCFI53:
 6609              		.cfi_def_cfa_offset 16
 6610              		.cfi_offset 3, -16
 6611              		.cfi_offset 4, -12
 6612              		.cfi_offset 5, -8
 6613              		.cfi_offset 14, -4
 459:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6614              		.loc 1 459 0
 6615 008e 0120     		movs	r0, #1
 6616              	.LVL554:
 6617 0090 00E0     		b	.L590
 6618              	.LVL555:
 6619              	.L595:
 464:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6620              		.loc 1 464 0
 6621 0092 0120     		movs	r0, #1
 6622              	.LVL556:
 6623              	.L590:
 519:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6624              		.loc 1 519 0
 6625 0094 38BD     		pop	{r3, r4, r5, pc}
 6626              		.cfi_endproc
 6627              	.LFE345:
 6629              		.section	.text.HAL_MultiProcessor_Init,"ax",%progbits
 6630              		.align	1
 6631              		.global	HAL_MultiProcessor_Init
 6632              		.syntax unified
 6633              		.thumb
 6634              		.thumb_func
 6635              		.fpu fpv5-d16
 6637              	HAL_MultiProcessor_Init:
 6638              	.LFB346:
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6639              		.loc 1 541 0
 6640              		.cfi_startproc
 6641              		@ args = 0, pretend = 0, frame = 0
 6642              		@ frame_needed = 0, uses_anonymous_args = 0
 6643              	.LVL557:
 543:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6644              		.loc 1 543 0
 6645 0000 0028     		cmp	r0, #0
 6646 0002 42D0     		beq	.L607
 541:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   /* Check the UART handle allocation */
 6647              		.loc 1 541 0
 6648 0004 70B5     		push	{r4, r5, r6, lr}
 6649              	.LCFI54:
 6650              		.cfi_def_cfa_offset 16
 6651              		.cfi_offset 4, -16
 6652              		.cfi_offset 5, -12
 6653              		.cfi_offset 6, -8
 6654              		.cfi_offset 14, -4
 6655 0006 0446     		mov	r4, r0
ARM GAS  /tmp/ccsDPfHf.s 			page 206


 6656 0008 1546     		mov	r5, r2
 6657 000a 0E46     		mov	r6, r1
 551:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6658              		.loc 1 551 0
 6659 000c D0F88030 		ldr	r3, [r0, #128]
 6660 0010 53B3     		cbz	r3, .L612
 6661              	.LVL558:
 6662              	.L604:
 572:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6663              		.loc 1 572 0
 6664 0012 2423     		movs	r3, #36
 6665 0014 C4F88030 		str	r3, [r4, #128]
 574:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6666              		.loc 1 574 0
 6667 0018 2268     		ldr	r2, [r4]
 6668 001a 1368     		ldr	r3, [r2]
 6669 001c 23F00103 		bic	r3, r3, #1
 6670 0020 1360     		str	r3, [r2]
 577:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6671              		.loc 1 577 0
 6672 0022 2046     		mov	r0, r4
 6673 0024 FFF7FEFF 		bl	UART_SetConfig
 6674              	.LVL559:
 6675 0028 0128     		cmp	r0, #1
 6676 002a 1CD0     		beq	.L603
 582:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6677              		.loc 1 582 0
 6678 002c A36A     		ldr	r3, [r4, #40]
 6679 002e 03BB     		cbnz	r3, .L613
 6680              	.L605:
 590:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 6681              		.loc 1 590 0
 6682 0030 2268     		ldr	r2, [r4]
 6683 0032 5368     		ldr	r3, [r2, #4]
 6684 0034 23F49043 		bic	r3, r3, #18432
 6685 0038 5360     		str	r3, [r2, #4]
 591:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6686              		.loc 1 591 0
 6687 003a 2268     		ldr	r2, [r4]
 6688 003c 9368     		ldr	r3, [r2, #8]
 6689 003e 23F02A03 		bic	r3, r3, #42
 6690 0042 9360     		str	r3, [r2, #8]
 593:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   {
 6691              		.loc 1 593 0
 6692 0044 B5F5006F 		cmp	r5, #2048
 6693 0048 17D0     		beq	.L614
 6694              	.L606:
 600:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6695              		.loc 1 600 0
 6696 004a 2368     		ldr	r3, [r4]
 6697 004c 1A68     		ldr	r2, [r3]
 6698 004e 22F40062 		bic	r2, r2, #2048
 6699 0052 1543     		orrs	r5, r5, r2
 6700              	.LVL560:
 6701 0054 1D60     		str	r5, [r3]
 602:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6702              		.loc 1 602 0
ARM GAS  /tmp/ccsDPfHf.s 			page 207


 6703 0056 2268     		ldr	r2, [r4]
 6704 0058 1368     		ldr	r3, [r2]
 6705 005a 43F00103 		orr	r3, r3, #1
 6706 005e 1360     		str	r3, [r2]
 605:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 6707              		.loc 1 605 0
 6708 0060 2046     		mov	r0, r4
 6709 0062 FFF7FEFF 		bl	UART_CheckIdleState
 6710              	.LVL561:
 6711              	.L603:
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6712              		.loc 1 606 0
 6713 0066 70BD     		pop	{r4, r5, r6, pc}
 6714              	.LVL562:
 6715              	.L612:
 554:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6716              		.loc 1 554 0
 6717 0068 80F87C30 		strb	r3, [r0, #124]
 568:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** #endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
 6718              		.loc 1 568 0
 6719 006c FFF7FEFF 		bl	HAL_UART_MspInit
 6720              	.LVL563:
 6721 0070 CFE7     		b	.L604
 6722              	.L613:
 584:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6723              		.loc 1 584 0
 6724 0072 2046     		mov	r0, r4
 6725 0074 FFF7FEFF 		bl	UART_AdvFeatureConfig
 6726              	.LVL564:
 6727 0078 DAE7     		b	.L605
 6728              	.L614:
 596:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6729              		.loc 1 596 0
 6730 007a 2368     		ldr	r3, [r4]
 6731 007c 5968     		ldr	r1, [r3, #4]
 6732 007e 21F07F41 		bic	r1, r1, #-16777216
 6733 0082 41EA0666 		orr	r6, r1, r6, lsl #24
 6734 0086 5E60     		str	r6, [r3, #4]
 6735 0088 DFE7     		b	.L606
 6736              	.LVL565:
 6737              	.L607:
 6738              	.LCFI55:
 6739              		.cfi_def_cfa_offset 0
 6740              		.cfi_restore 4
 6741              		.cfi_restore 5
 6742              		.cfi_restore 6
 6743              		.cfi_restore 14
 545:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   }
 6744              		.loc 1 545 0
 6745 008a 0120     		movs	r0, #1
 6746              	.LVL566:
 606:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6747              		.loc 1 606 0
 6748 008c 7047     		bx	lr
 6749              		.cfi_endproc
 6750              	.LFE346:
 6752              		.section	.text.HAL_MultiProcessor_EnableMuteMode,"ax",%progbits
ARM GAS  /tmp/ccsDPfHf.s 			page 208


 6753              		.align	1
 6754              		.global	HAL_MultiProcessor_EnableMuteMode
 6755              		.syntax unified
 6756              		.thumb
 6757              		.thumb_func
 6758              		.fpu fpv5-d16
 6760              	HAL_MultiProcessor_EnableMuteMode:
 6761              	.LFB377:
2655:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 6762              		.loc 1 2655 0
 6763              		.cfi_startproc
 6764              		@ args = 0, pretend = 0, frame = 0
 6765              		@ frame_needed = 0, uses_anonymous_args = 0
 6766              	.LVL567:
 6767 0000 08B5     		push	{r3, lr}
 6768              	.LCFI56:
 6769              		.cfi_def_cfa_offset 8
 6770              		.cfi_offset 3, -8
 6771              		.cfi_offset 14, -4
2656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6772              		.loc 1 2656 0
 6773 0002 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 6774 0006 012B     		cmp	r3, #1
 6775 0008 10D0     		beq	.L617
2656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6776              		.loc 1 2656 0 is_stmt 0 discriminator 2
 6777 000a 0123     		movs	r3, #1
 6778 000c 80F87C30 		strb	r3, [r0, #124]
2658:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6779              		.loc 1 2658 0 is_stmt 1 discriminator 2
 6780 0010 2423     		movs	r3, #36
 6781 0012 C0F88030 		str	r3, [r0, #128]
2661:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6782              		.loc 1 2661 0 discriminator 2
 6783 0016 0268     		ldr	r2, [r0]
 6784 0018 1368     		ldr	r3, [r2]
 6785 001a 43F40053 		orr	r3, r3, #8192
 6786 001e 1360     		str	r3, [r2]
2663:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6787              		.loc 1 2663 0 discriminator 2
 6788 0020 2023     		movs	r3, #32
 6789 0022 C0F88030 		str	r3, [r0, #128]
2665:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 6790              		.loc 1 2665 0 discriminator 2
 6791 0026 FFF7FEFF 		bl	UART_CheckIdleState
 6792              	.LVL568:
 6793              	.L616:
2666:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6794              		.loc 1 2666 0
 6795 002a 08BD     		pop	{r3, pc}
 6796              	.LVL569:
 6797              	.L617:
2656:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6798              		.loc 1 2656 0
 6799 002c 0220     		movs	r0, #2
 6800              	.LVL570:
 6801 002e FCE7     		b	.L616
ARM GAS  /tmp/ccsDPfHf.s 			page 209


 6802              		.cfi_endproc
 6803              	.LFE377:
 6805              		.section	.text.HAL_MultiProcessor_DisableMuteMode,"ax",%progbits
 6806              		.align	1
 6807              		.global	HAL_MultiProcessor_DisableMuteMode
 6808              		.syntax unified
 6809              		.thumb
 6810              		.thumb_func
 6811              		.fpu fpv5-d16
 6813              	HAL_MultiProcessor_DisableMuteMode:
 6814              	.LFB378:
2675:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c ****   __HAL_LOCK(huart);
 6815              		.loc 1 2675 0
 6816              		.cfi_startproc
 6817              		@ args = 0, pretend = 0, frame = 0
 6818              		@ frame_needed = 0, uses_anonymous_args = 0
 6819              	.LVL571:
 6820 0000 08B5     		push	{r3, lr}
 6821              	.LCFI57:
 6822              		.cfi_def_cfa_offset 8
 6823              		.cfi_offset 3, -8
 6824              		.cfi_offset 14, -4
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6825              		.loc 1 2676 0
 6826 0002 90F87C30 		ldrb	r3, [r0, #124]	@ zero_extendqisi2
 6827 0006 012B     		cmp	r3, #1
 6828 0008 10D0     		beq	.L621
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6829              		.loc 1 2676 0 is_stmt 0 discriminator 2
 6830 000a 0123     		movs	r3, #1
 6831 000c 80F87C30 		strb	r3, [r0, #124]
2678:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6832              		.loc 1 2678 0 is_stmt 1 discriminator 2
 6833 0010 2423     		movs	r3, #36
 6834 0012 C0F88030 		str	r3, [r0, #128]
2681:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6835              		.loc 1 2681 0 discriminator 2
 6836 0016 0268     		ldr	r2, [r0]
 6837 0018 1368     		ldr	r3, [r2]
 6838 001a 23F40053 		bic	r3, r3, #8192
 6839 001e 1360     		str	r3, [r2]
2683:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6840              		.loc 1 2683 0 discriminator 2
 6841 0020 2023     		movs	r3, #32
 6842 0022 C0F88030 		str	r3, [r0, #128]
2685:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** }
 6843              		.loc 1 2685 0 discriminator 2
 6844 0026 FFF7FEFF 		bl	UART_CheckIdleState
 6845              	.LVL572:
 6846              	.L620:
2686:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6847              		.loc 1 2686 0
 6848 002a 08BD     		pop	{r3, pc}
 6849              	.LVL573:
 6850              	.L621:
2676:Drivers/STM32H7xx_HAL_Driver/Src/stm32h7xx_hal_uart.c **** 
 6851              		.loc 1 2676 0
ARM GAS  /tmp/ccsDPfHf.s 			page 210


 6852 002c 0220     		movs	r0, #2
 6853              	.LVL574:
 6854 002e FCE7     		b	.L620
 6855              		.cfi_endproc
 6856              	.LFE378:
 6858              		.global	UARTPrescTable
 6859              		.section	.rodata.UARTPrescTable,"a",%progbits
 6860              		.align	2
 6861              		.set	.LANCHOR0,. + 0
 6864              	UARTPrescTable:
 6865 0000 0100     		.short	1
 6866 0002 0200     		.short	2
 6867 0004 0400     		.short	4
 6868 0006 0600     		.short	6
 6869 0008 0800     		.short	8
 6870 000a 0A00     		.short	10
 6871 000c 0C00     		.short	12
 6872 000e 1000     		.short	16
 6873 0010 2000     		.short	32
 6874 0012 4000     		.short	64
 6875 0014 8000     		.short	128
 6876 0016 0001     		.short	256
 6877              		.text
 6878              	.Letext0:
 6879              		.file 2 "/usr/include/newlib/machine/_default_types.h"
 6880              		.file 3 "/usr/include/newlib/sys/_stdint.h"
 6881              		.file 4 "Drivers/CMSIS/Include/core_cm7.h"
 6882              		.file 5 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/system_stm32h7xx.h"
 6883              		.file 6 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h723xx.h"
 6884              		.file 7 "Drivers/CMSIS/Device/ST/STM32H7xx/Include/stm32h7xx.h"
 6885              		.file 8 "/usr/include/newlib/sys/lock.h"
 6886              		.file 9 "/usr/include/newlib/sys/_types.h"
 6887              		.file 10 "/usr/lib/gcc/arm-none-eabi/7.3.1/include/stddef.h"
 6888              		.file 11 "/usr/include/newlib/sys/reent.h"
 6889              		.file 12 "/usr/include/newlib/math.h"
 6890              		.file 13 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_def.h"
 6891              		.file 14 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc_ex.h"
 6892              		.file 15 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_dma.h"
 6893              		.file 16 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_flash.h"
 6894              		.file 17 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart.h"
 6895              		.file 18 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal.h"
 6896              		.file 19 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_rcc.h"
 6897              		.file 20 "Drivers/STM32H7xx_HAL_Driver/Inc/stm32h7xx_hal_uart_ex.h"
ARM GAS  /tmp/ccsDPfHf.s 			page 211


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32h7xx_hal_uart.c
     /tmp/ccsDPfHf.s:17     .text.UART_EndTxTransfer:0000000000000000 $t
     /tmp/ccsDPfHf.s:23     .text.UART_EndTxTransfer:0000000000000000 UART_EndTxTransfer
     /tmp/ccsDPfHf.s:51     .text.UART_EndRxTransfer:0000000000000000 $t
     /tmp/ccsDPfHf.s:57     .text.UART_EndRxTransfer:0000000000000000 UART_EndRxTransfer
     /tmp/ccsDPfHf.s:87     .text.UART_EndRxTransfer:0000000000000020 $d
     /tmp/ccsDPfHf.s:92     .text.UART_TxISR_8BIT:0000000000000000 $t
     /tmp/ccsDPfHf.s:98     .text.UART_TxISR_8BIT:0000000000000000 UART_TxISR_8BIT
     /tmp/ccsDPfHf.s:150    .text.UART_TxISR_16BIT:0000000000000000 $t
     /tmp/ccsDPfHf.s:156    .text.UART_TxISR_16BIT:0000000000000000 UART_TxISR_16BIT
     /tmp/ccsDPfHf.s:213    .text.UART_TxISR_8BIT_FIFOEN:0000000000000000 $t
     /tmp/ccsDPfHf.s:219    .text.UART_TxISR_8BIT_FIFOEN:0000000000000000 UART_TxISR_8BIT_FIFOEN
     /tmp/ccsDPfHf.s:292    .text.UART_TxISR_16BIT_FIFOEN:0000000000000000 $t
     /tmp/ccsDPfHf.s:298    .text.UART_TxISR_16BIT_FIFOEN:0000000000000000 UART_TxISR_16BIT_FIFOEN
     /tmp/ccsDPfHf.s:376    .text.HAL_UART_MspInit:0000000000000000 $t
     /tmp/ccsDPfHf.s:383    .text.HAL_UART_MspInit:0000000000000000 HAL_UART_MspInit
     /tmp/ccsDPfHf.s:397    .text.HAL_UART_MspDeInit:0000000000000000 $t
     /tmp/ccsDPfHf.s:404    .text.HAL_UART_MspDeInit:0000000000000000 HAL_UART_MspDeInit
     /tmp/ccsDPfHf.s:418    .text.HAL_UART_DeInit:0000000000000000 $t
     /tmp/ccsDPfHf.s:425    .text.HAL_UART_DeInit:0000000000000000 HAL_UART_DeInit
     /tmp/ccsDPfHf.s:493    .text.HAL_UART_Transmit_IT:0000000000000000 $t
     /tmp/ccsDPfHf.s:500    .text.HAL_UART_Transmit_IT:0000000000000000 HAL_UART_Transmit_IT
     /tmp/ccsDPfHf.s:635    .text.HAL_UART_Transmit_IT:00000000000000ac $d
     /tmp/ccsDPfHf.s:643    .text.HAL_UART_Receive_IT:0000000000000000 $t
     /tmp/ccsDPfHf.s:650    .text.HAL_UART_Receive_IT:0000000000000000 HAL_UART_Receive_IT
     /tmp/ccsDPfHf.s:853    .text.HAL_UART_Receive_IT:0000000000000120 $d
     /tmp/ccsDPfHf.s:1976   .text.UART_RxISR_8BIT:0000000000000000 UART_RxISR_8BIT
     /tmp/ccsDPfHf.s:2149   .text.UART_RxISR_8BIT_FIFOEN:0000000000000000 UART_RxISR_8BIT_FIFOEN
     /tmp/ccsDPfHf.s:2284   .text.UART_RxISR_16BIT_FIFOEN:0000000000000000 UART_RxISR_16BIT_FIFOEN
     /tmp/ccsDPfHf.s:2062   .text.UART_RxISR_16BIT:0000000000000000 UART_RxISR_16BIT
     /tmp/ccsDPfHf.s:861    .text.HAL_UART_Transmit_DMA:0000000000000000 $t
     /tmp/ccsDPfHf.s:868    .text.HAL_UART_Transmit_DMA:0000000000000000 HAL_UART_Transmit_DMA
     /tmp/ccsDPfHf.s:996    .text.HAL_UART_Transmit_DMA:00000000000000a4 $d
     /tmp/ccsDPfHf.s:1810   .text.UART_DMATransmitCplt:0000000000000000 UART_DMATransmitCplt
     /tmp/ccsDPfHf.s:1925   .text.UART_DMATxHalfCplt:0000000000000000 UART_DMATxHalfCplt
     /tmp/ccsDPfHf.s:2551   .text.UART_DMAError:0000000000000000 UART_DMAError
     /tmp/ccsDPfHf.s:1003   .text.HAL_UART_Receive_DMA:0000000000000000 $t
     /tmp/ccsDPfHf.s:1010   .text.HAL_UART_Receive_DMA:0000000000000000 HAL_UART_Receive_DMA
     /tmp/ccsDPfHf.s:1142   .text.HAL_UART_Receive_DMA:00000000000000b0 $d
     /tmp/ccsDPfHf.s:2421   .text.UART_DMAReceiveCplt:0000000000000000 UART_DMAReceiveCplt
     /tmp/ccsDPfHf.s:2500   .text.UART_DMARxHalfCplt:0000000000000000 UART_DMARxHalfCplt
     /tmp/ccsDPfHf.s:1149   .text.HAL_UART_DMAPause:0000000000000000 $t
     /tmp/ccsDPfHf.s:1156   .text.HAL_UART_DMAPause:0000000000000000 HAL_UART_DMAPause
     /tmp/ccsDPfHf.s:1248   .text.HAL_UART_DMAResume:0000000000000000 $t
     /tmp/ccsDPfHf.s:1255   .text.HAL_UART_DMAResume:0000000000000000 HAL_UART_DMAResume
     /tmp/ccsDPfHf.s:1326   .text.HAL_UART_DMAStop:0000000000000000 $t
     /tmp/ccsDPfHf.s:1333   .text.HAL_UART_DMAStop:0000000000000000 HAL_UART_DMAStop
     /tmp/ccsDPfHf.s:1451   .text.HAL_UART_Abort:0000000000000000 $t
     /tmp/ccsDPfHf.s:1458   .text.HAL_UART_Abort:0000000000000000 HAL_UART_Abort
     /tmp/ccsDPfHf.s:1592   .text.HAL_UART_Abort:00000000000000c4 $d
     /tmp/ccsDPfHf.s:1597   .text.HAL_UART_AbortTransmit:0000000000000000 $t
     /tmp/ccsDPfHf.s:1604   .text.HAL_UART_AbortTransmit:0000000000000000 HAL_UART_AbortTransmit
     /tmp/ccsDPfHf.s:1690   .text.HAL_UART_AbortReceive:0000000000000000 $t
     /tmp/ccsDPfHf.s:1697   .text.HAL_UART_AbortReceive:0000000000000000 HAL_UART_AbortReceive
     /tmp/ccsDPfHf.s:1778   .text.HAL_UART_AbortReceive:000000000000006c $d
     /tmp/ccsDPfHf.s:1783   .text.HAL_UART_TxCpltCallback:0000000000000000 $t
ARM GAS  /tmp/ccsDPfHf.s 			page 212


     /tmp/ccsDPfHf.s:1790   .text.HAL_UART_TxCpltCallback:0000000000000000 HAL_UART_TxCpltCallback
     /tmp/ccsDPfHf.s:1804   .text.UART_DMATransmitCplt:0000000000000000 $t
     /tmp/ccsDPfHf.s:1860   .text.UART_EndTransmit_IT:0000000000000000 $t
     /tmp/ccsDPfHf.s:1866   .text.UART_EndTransmit_IT:0000000000000000 UART_EndTransmit_IT
     /tmp/ccsDPfHf.s:1898   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:1905   .text.HAL_UART_TxHalfCpltCallback:0000000000000000 HAL_UART_TxHalfCpltCallback
     /tmp/ccsDPfHf.s:1919   .text.UART_DMATxHalfCplt:0000000000000000 $t
     /tmp/ccsDPfHf.s:1949   .text.HAL_UART_RxCpltCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:1956   .text.HAL_UART_RxCpltCallback:0000000000000000 HAL_UART_RxCpltCallback
     /tmp/ccsDPfHf.s:1970   .text.UART_RxISR_8BIT:0000000000000000 $t
     /tmp/ccsDPfHf.s:2056   .text.UART_RxISR_16BIT:0000000000000000 $t
     /tmp/ccsDPfHf.s:2143   .text.UART_RxISR_8BIT_FIFOEN:0000000000000000 $t
     /tmp/ccsDPfHf.s:2272   .text.UART_RxISR_8BIT_FIFOEN:00000000000000a4 $d
     /tmp/ccsDPfHf.s:2278   .text.UART_RxISR_16BIT_FIFOEN:0000000000000000 $t
     /tmp/ccsDPfHf.s:2409   .text.UART_RxISR_16BIT_FIFOEN:00000000000000a0 $d
     /tmp/ccsDPfHf.s:2415   .text.UART_DMAReceiveCplt:0000000000000000 $t
     /tmp/ccsDPfHf.s:2473   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:2480   .text.HAL_UART_RxHalfCpltCallback:0000000000000000 HAL_UART_RxHalfCpltCallback
     /tmp/ccsDPfHf.s:2494   .text.UART_DMARxHalfCplt:0000000000000000 $t
     /tmp/ccsDPfHf.s:2524   .text.HAL_UART_ErrorCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:2531   .text.HAL_UART_ErrorCallback:0000000000000000 HAL_UART_ErrorCallback
     /tmp/ccsDPfHf.s:2545   .text.UART_DMAError:0000000000000000 $t
     /tmp/ccsDPfHf.s:2627   .text.HAL_UART_IRQHandler:0000000000000000 $t
     /tmp/ccsDPfHf.s:2634   .text.HAL_UART_IRQHandler:0000000000000000 HAL_UART_IRQHandler
     /tmp/ccsDPfHf.s:2962   .text.HAL_UART_IRQHandler:00000000000001d8 $d
     /tmp/ccsDPfHf.s:2975   .text.UART_DMAAbortOnError:0000000000000000 UART_DMAAbortOnError
     /tmp/ccsDPfHf.s:2969   .text.UART_DMAAbortOnError:0000000000000000 $t
     /tmp/ccsDPfHf.s:3004   .text.HAL_UART_AbortCpltCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3011   .text.HAL_UART_AbortCpltCallback:0000000000000000 HAL_UART_AbortCpltCallback
     /tmp/ccsDPfHf.s:3025   .text.HAL_UART_Abort_IT:0000000000000000 $t
     /tmp/ccsDPfHf.s:3032   .text.HAL_UART_Abort_IT:0000000000000000 HAL_UART_Abort_IT
     /tmp/ccsDPfHf.s:3210   .text.HAL_UART_Abort_IT:00000000000000f0 $d
     /tmp/ccsDPfHf.s:3289   .text.UART_DMATxAbortCallback:0000000000000000 UART_DMATxAbortCallback
     /tmp/ccsDPfHf.s:3223   .text.UART_DMARxAbortCallback:0000000000000000 UART_DMARxAbortCallback
     /tmp/ccsDPfHf.s:3217   .text.UART_DMARxAbortCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3283   .text.UART_DMATxAbortCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3354   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3361   .text.HAL_UART_AbortTransmitCpltCallback:0000000000000000 HAL_UART_AbortTransmitCpltCallback
     /tmp/ccsDPfHf.s:3375   .text.HAL_UART_AbortTransmit_IT:0000000000000000 $t
     /tmp/ccsDPfHf.s:3382   .text.HAL_UART_AbortTransmit_IT:0000000000000000 HAL_UART_AbortTransmit_IT
     /tmp/ccsDPfHf.s:3480   .text.HAL_UART_AbortTransmit_IT:0000000000000080 $d
     /tmp/ccsDPfHf.s:3491   .text.UART_DMATxOnlyAbortCallback:0000000000000000 UART_DMATxOnlyAbortCallback
     /tmp/ccsDPfHf.s:3485   .text.UART_DMATxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3534   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3541   .text.HAL_UART_AbortReceiveCpltCallback:0000000000000000 HAL_UART_AbortReceiveCpltCallback
     /tmp/ccsDPfHf.s:3555   .text.HAL_UART_AbortReceive_IT:0000000000000000 $t
     /tmp/ccsDPfHf.s:3562   .text.HAL_UART_AbortReceive_IT:0000000000000000 HAL_UART_AbortReceive_IT
     /tmp/ccsDPfHf.s:3659   .text.HAL_UART_AbortReceive_IT:0000000000000080 $d
     /tmp/ccsDPfHf.s:3671   .text.UART_DMARxOnlyAbortCallback:0000000000000000 UART_DMARxOnlyAbortCallback
     /tmp/ccsDPfHf.s:3665   .text.UART_DMARxOnlyAbortCallback:0000000000000000 $t
     /tmp/ccsDPfHf.s:3710   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 $t
     /tmp/ccsDPfHf.s:3717   .text.HAL_UART_ReceiverTimeout_Config:0000000000000000 HAL_UART_ReceiverTimeout_Config
     /tmp/ccsDPfHf.s:3742   .text.HAL_UART_ReceiverTimeout_Config:0000000000000014 $d
     /tmp/ccsDPfHf.s:3747   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 $t
     /tmp/ccsDPfHf.s:3754   .text.HAL_UART_EnableReceiverTimeout:0000000000000000 HAL_UART_EnableReceiverTimeout
     /tmp/ccsDPfHf.s:3817   .text.HAL_UART_EnableReceiverTimeout:0000000000000048 $d
     /tmp/ccsDPfHf.s:3822   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 $t
ARM GAS  /tmp/ccsDPfHf.s 			page 213


     /tmp/ccsDPfHf.s:3829   .text.HAL_UART_DisableReceiverTimeout:0000000000000000 HAL_UART_DisableReceiverTimeout
     /tmp/ccsDPfHf.s:3892   .text.HAL_UART_DisableReceiverTimeout:0000000000000048 $d
     /tmp/ccsDPfHf.s:3897   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 $t
     /tmp/ccsDPfHf.s:3904   .text.HAL_MultiProcessor_EnterMuteMode:0000000000000000 HAL_MultiProcessor_EnterMuteMode
     /tmp/ccsDPfHf.s:3923   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 $t
     /tmp/ccsDPfHf.s:3930   .text.HAL_HalfDuplex_EnableTransmitter:0000000000000000 HAL_HalfDuplex_EnableTransmitter
     /tmp/ccsDPfHf.s:3979   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 $t
     /tmp/ccsDPfHf.s:3986   .text.HAL_HalfDuplex_EnableReceiver:0000000000000000 HAL_HalfDuplex_EnableReceiver
     /tmp/ccsDPfHf.s:4035   .text.HAL_LIN_SendBreak:0000000000000000 $t
     /tmp/ccsDPfHf.s:4042   .text.HAL_LIN_SendBreak:0000000000000000 HAL_LIN_SendBreak
     /tmp/ccsDPfHf.s:4086   .text.HAL_UART_GetState:0000000000000000 $t
     /tmp/ccsDPfHf.s:4093   .text.HAL_UART_GetState:0000000000000000 HAL_UART_GetState
     /tmp/ccsDPfHf.s:4115   .text.HAL_UART_GetError:0000000000000000 $t
     /tmp/ccsDPfHf.s:4122   .text.HAL_UART_GetError:0000000000000000 HAL_UART_GetError
     /tmp/ccsDPfHf.s:4140   .text.UART_SetConfig:0000000000000000 $t
     /tmp/ccsDPfHf.s:4147   .text.UART_SetConfig:0000000000000000 UART_SetConfig
     /tmp/ccsDPfHf.s:4283   .text.UART_SetConfig:00000000000000c2 $d
     /tmp/ccsDPfHf.s:4324   .text.UART_SetConfig:0000000000000114 $t
     /tmp/ccsDPfHf.s:4364   .text.UART_SetConfig:000000000000013c $d
     /tmp/ccsDPfHf.s:4370   .text.UART_SetConfig:0000000000000148 $t
     /tmp/ccsDPfHf.s:4410   .text.UART_SetConfig:0000000000000170 $d
     /tmp/ccsDPfHf.s:4416   .text.UART_SetConfig:000000000000017c $t
     /tmp/ccsDPfHf.s:4456   .text.UART_SetConfig:00000000000001a4 $d
     /tmp/ccsDPfHf.s:4462   .text.UART_SetConfig:00000000000001b0 $t
     /tmp/ccsDPfHf.s:4502   .text.UART_SetConfig:00000000000001d8 $d
     /tmp/ccsDPfHf.s:4508   .text.UART_SetConfig:00000000000001e4 $t
     /tmp/ccsDPfHf.s:4548   .text.UART_SetConfig:000000000000020c $d
     /tmp/ccsDPfHf.s:4589   .text.UART_SetConfig:000000000000025e $t
     /tmp/ccsDPfHf.s:4602   .text.UART_SetConfig:0000000000000268 $d
     /tmp/ccsDPfHf.s:4619   .text.UART_SetConfig:00000000000002a0 $t
     /tmp/ccsDPfHf.s:4646   .text.UART_SetConfig:00000000000002c0 $d
     /tmp/ccsDPfHf.s:4652   .text.UART_SetConfig:00000000000002cc $t
     /tmp/ccsDPfHf.s:4692   .text.UART_SetConfig:00000000000002f4 $d
     /tmp/ccsDPfHf.s:4698   .text.UART_SetConfig:00000000000002fa $t
     /tmp/ccsDPfHf.s:4738   .text.UART_SetConfig:0000000000000322 $d
     /tmp/ccsDPfHf.s:4819   .text.UART_SetConfig:0000000000000374 $d
     /tmp/ccsDPfHf.s:4900   .text.UART_SetConfig:00000000000003c8 $d
     /tmp/ccsDPfHf.s:4906   .text.UART_SetConfig:00000000000003ce $t
     /tmp/ccsDPfHf.s:4939   .text.UART_SetConfig:00000000000003e8 $d
     /tmp/ccsDPfHf.s:4943   .text.UART_SetConfig:00000000000003ec $t
     /tmp/ccsDPfHf.s:4959   .text.UART_SetConfig:0000000000000408 $d
     /tmp/ccsDPfHf.s:5025   .text.UART_SetConfig:000000000000048a $t
     /tmp/ccsDPfHf.s:5189   .text.UART_SetConfig:000000000000057c $d
     /tmp/ccsDPfHf.s:5319   .text.UART_SetConfig:0000000000000618 $d
     /tmp/ccsDPfHf.s:5328   .text.UART_SetConfig:0000000000000630 $t
     /tmp/ccsDPfHf.s:5520   .text.UART_SetConfig:0000000000000708 $d
     /tmp/ccsDPfHf.s:5528   .text.UART_AdvFeatureConfig:0000000000000000 $t
     /tmp/ccsDPfHf.s:5535   .text.UART_AdvFeatureConfig:0000000000000000 UART_AdvFeatureConfig
     /tmp/ccsDPfHf.s:5658   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 $t
     /tmp/ccsDPfHf.s:5665   .text.UART_WaitOnFlagUntilTimeout:0000000000000000 UART_WaitOnFlagUntilTimeout
     /tmp/ccsDPfHf.s:5775   .text.HAL_UART_Transmit:0000000000000000 $t
     /tmp/ccsDPfHf.s:5782   .text.HAL_UART_Transmit:0000000000000000 HAL_UART_Transmit
     /tmp/ccsDPfHf.s:5961   .text.HAL_UART_Receive:0000000000000000 $t
     /tmp/ccsDPfHf.s:5968   .text.HAL_UART_Receive:0000000000000000 HAL_UART_Receive
     /tmp/ccsDPfHf.s:6191   .text.UART_CheckIdleState:0000000000000000 $t
     /tmp/ccsDPfHf.s:6198   .text.UART_CheckIdleState:0000000000000000 UART_CheckIdleState
     /tmp/ccsDPfHf.s:6290   .text.HAL_UART_Init:0000000000000000 $t
ARM GAS  /tmp/ccsDPfHf.s 			page 214


     /tmp/ccsDPfHf.s:6297   .text.HAL_UART_Init:0000000000000000 HAL_UART_Init
     /tmp/ccsDPfHf.s:6387   .text.HAL_HalfDuplex_Init:0000000000000000 $t
     /tmp/ccsDPfHf.s:6394   .text.HAL_HalfDuplex_Init:0000000000000000 HAL_HalfDuplex_Init
     /tmp/ccsDPfHf.s:6490   .text.HAL_LIN_Init:0000000000000000 $t
     /tmp/ccsDPfHf.s:6497   .text.HAL_LIN_Init:0000000000000000 HAL_LIN_Init
     /tmp/ccsDPfHf.s:6630   .text.HAL_MultiProcessor_Init:0000000000000000 $t
     /tmp/ccsDPfHf.s:6637   .text.HAL_MultiProcessor_Init:0000000000000000 HAL_MultiProcessor_Init
     /tmp/ccsDPfHf.s:6753   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 $t
     /tmp/ccsDPfHf.s:6760   .text.HAL_MultiProcessor_EnableMuteMode:0000000000000000 HAL_MultiProcessor_EnableMuteMode
     /tmp/ccsDPfHf.s:6806   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 $t
     /tmp/ccsDPfHf.s:6813   .text.HAL_MultiProcessor_DisableMuteMode:0000000000000000 HAL_MultiProcessor_DisableMuteMode
     /tmp/ccsDPfHf.s:6864   .rodata.UARTPrescTable:0000000000000000 UARTPrescTable
     /tmp/ccsDPfHf.s:6860   .rodata.UARTPrescTable:0000000000000000 $d
     /tmp/ccsDPfHf.s:4779   .text.UART_SetConfig:000000000000034b $d
     /tmp/ccsDPfHf.s:4779   .text.UART_SetConfig:000000000000034c $t
     /tmp/ccsDPfHf.s:4860   .text.UART_SetConfig:000000000000039d $d
     /tmp/ccsDPfHf.s:4860   .text.UART_SetConfig:000000000000039e $t
     /tmp/ccsDPfHf.s:5254   .text.UART_SetConfig:00000000000005bd $d
     /tmp/ccsDPfHf.s:5254   .text.UART_SetConfig:00000000000005be $t

UNDEFINED SYMBOLS
HAL_DMA_Start_IT
HAL_DMA_Abort
HAL_DMA_GetError
HAL_DMA_Abort_IT
HAL_UARTEx_WakeupCallback
HAL_UARTEx_RxFifoFullCallback
HAL_UARTEx_TxFifoEmptyCallback
__aeabi_uldivmod
HAL_RCCEx_GetPLL2ClockFreq
HAL_RCCEx_GetD3PCLK1Freq
HAL_RCCEx_GetPLL3ClockFreq
HAL_RCC_GetPCLK1Freq
HAL_RCC_GetPCLK2Freq
HAL_GetTick
